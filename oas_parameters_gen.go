// Code generated by ogen, DO NOT EDIT.

package telnyx

import (
	"github.com/google/uuid"
)

// AnswerCallParams is parameters of AnswerCall operation.
type AnswerCallParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// AssignPhoneNumberParams is parameters of AssignPhoneNumber operation.
type AssignPhoneNumberParams struct {
	// Channel zone identifier.
	ChannelZoneID string
}

// BridgeCallParams is parameters of BridgeCall operation.
type BridgeCallParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// BulkCredentialActionParams is parameters of BulkCredentialAction operation.
type BulkCredentialActionParams struct {
	// Identifies the action to be taken. Activate will change the status to active. Deactivate will
	// change the status to inactive.
	Action BulkCredentialActionAction
	// Filter by tag, required by bulk operations.
	FilterTag string
}

// CreateCustomStorageCredentialsParams is parameters of CreateCustomStorageCredentials operation.
type CreateCustomStorageCredentialsParams struct {
	// Uniquely identifies a Telnyx application (Call Control, TeXML) or Sip connection resource.
	ConnectionID string
}

// CreateDefaultGatewayParams is parameters of CreateDefaultGateway operation.
type CreateDefaultGatewayParams struct {
	// Identifies the resource.
	ID uuid.UUID
}

// CreateProfileVerificationRequestParams is parameters of CreateProfileVerificationRequest operation.
type CreateProfileVerificationRequestParams struct {
	// Identifies the Verified Calls Display Profile.
	ID string
}

// CreateTelephonyCredentialTokenParams is parameters of CreateTelephonyCredentialToken operation.
type CreateTelephonyCredentialTokenParams struct {
	// Identifies the resource.
	ID string
}

// DeleteCallControlApplicationParams is parameters of DeleteCallControlApplication operation.
type DeleteCallControlApplicationParams struct {
	// Identifies the resource.
	ID int64
}

// DeleteCustomStorageCredentialsParams is parameters of DeleteCustomStorageCredentials operation.
type DeleteCustomStorageCredentialsParams struct {
	// Uniquely identifies a Telnyx application (Call Control, TeXML) or Sip connection resource.
	ConnectionID string
}

// DeleteDefaultGatewayParams is parameters of DeleteDefaultGateway operation.
type DeleteDefaultGatewayParams struct {
	// Identifies the resource.
	ID uuid.UUID
}

// DeleteExternalConnectionLogMessageParams is parameters of DeleteExternalConnectionLogMessage operation.
type DeleteExternalConnectionLogMessageParams struct {
	// Identifies the resource.
	ID int64
}

// DeleteNetworkParams is parameters of DeleteNetwork operation.
type DeleteNetworkParams struct {
	// Identifies the resource.
	ID uuid.UUID
}

// DeleteNotificationChannelParams is parameters of DeleteNotificationChannel operation.
type DeleteNotificationChannelParams struct {
	// Identifies the resource.
	ID uuid.UUID
}

// DeleteOutboundVoiceProfileParams is parameters of DeleteOutboundVoiceProfile operation.
type DeleteOutboundVoiceProfileParams struct {
	// Identifies the resource.
	ID int64
}

// DeletePhoneNumberParams is parameters of DeletePhoneNumber operation.
type DeletePhoneNumberParams struct {
	// Identifies the resource.
	ID int64
}

// DeleteProfileParams is parameters of DeleteProfile operation.
type DeleteProfileParams struct {
	// The identifier of the Verify profile to delete.
	VerifyProfileID uuid.UUID
}

// DeleteRecordingParams is parameters of DeleteRecording operation.
type DeleteRecordingParams struct {
	// Uniquely identifies the recording by id.
	RecordingID string
}

// DeleteRecordingTranscriptionParams is parameters of deleteRecordingTranscription operation.
type DeleteRecordingTranscriptionParams struct {
	RecordingTranscriptionID uuid.UUID
}

// DeleteRoomRecordingParams is parameters of DeleteRoomRecording operation.
type DeleteRoomRecordingParams struct {
	// The unique identifier of a room recording.
	RoomRecordingID uuid.UUID
}

// DeleteRoomRecordingsParams is parameters of DeleteRoomRecordings operation.
type DeleteRoomRecordingsParams struct {
	// ISO 8601 date for filtering room recordings ended on that date.
	FilterDateEndedAtEq OptDate
	// ISO 8601 date for filtering room recordings ended after that date.
	FilterDateEndedAtGte OptDate
	// ISO 8601 date for filtering room recordings ended before that date.
	FilterDateEndedAtLte OptDate
	// ISO 8601 date for filtering room recordings started on that date.
	FilterDateStartedAtEq OptDate
	// ISO 8601 date for filtering room recordings started after that date.
	FilterDateStartedAtGte OptDate
	// ISO 8601 date for filtering room recordings started before that date.
	FilterDateStartedAtLte OptDate
	// Room_id for filtering room recordings.
	FilterRoomID OptUUID
	// Participant_id for filtering room recordings.
	FilterParticipantID OptUUID
	// Session_id for filtering room recordings.
	FilterSessionID OptUUID
	// Status for filtering room recordings.
	FilterStatus OptString
	// Type for filtering room recordings.
	FilterType OptString
	// Duration_secs equal for filtering room recordings.
	FilterDurationSecsEq OptInt
	// Duration_secs less or equal for filtering room recordings.
	FilterDurationSecsLte OptInt
	// Duration_secs greater or equal for filtering room recordings.
	FilterDurationSecsGte OptInt
	// The size of the page.
	PageSize OptInt
	// The page number to load.
	PageNumber OptInt
}

// DeleteTeXMLCallRecordingParams is parameters of DeleteTeXMLCallRecording operation.
type DeleteTeXMLCallRecordingParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// Uniquely identifies the recording by id.
	RecordingSid uuid.UUID
}

// DeleteTeXMLRecordingTranscriptionParams is parameters of DeleteTeXMLRecordingTranscription operation.
type DeleteTeXMLRecordingTranscriptionParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// Uniquely identifies the recording transcription by id.
	RecordingTranscriptionSid uuid.UUID
}

// DeleteTelephonyCredentialParams is parameters of DeleteTelephonyCredential operation.
type DeleteTelephonyCredentialParams struct {
	// Identifies the resource.
	ID string
}

// DeleteTelephonyCredentialsParams is parameters of DeleteTelephonyCredentials operation.
type DeleteTelephonyCredentialsParams struct {
	// Filter by tag, required by bulk operations.
	FilterTag string
}

// DeleteTexmlApplicationParams is parameters of DeleteTexmlApplication operation.
type DeleteTexmlApplicationParams struct {
	// Identifies the resource.
	ID int64
}

// DeleteTexmlConferenceParticipantParams is parameters of DeleteTexmlConferenceParticipant operation.
type DeleteTexmlConferenceParticipantParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The ConferenceSid that uniquely identifies a conference.
	ConferenceSid string
	// The CallSid that identifies the call to update.
	CallSid string
}

// DeleteVerifiedCallDisplayProfileParams is parameters of DeleteVerifiedCallDisplayProfile operation.
type DeleteVerifiedCallDisplayProfileParams struct {
	// Identifies the Verified Calls Display Profile.
	ID string
}

// DeleteVerifiedNumberParams is parameters of DeleteVerifiedNumber operation.
type DeleteVerifiedNumberParams struct {
	// The phone number being deleted.
	PhoneNumber string
}

// DialTexmlConferenceParticipantParams is parameters of DialTexmlConferenceParticipant operation.
type DialTexmlConferenceParticipantParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The ConferenceSid that uniquely identifies a conference.
	ConferenceSid string
}

// DisplayProfileParams is parameters of DisplayProfile operation.
type DisplayProfileParams struct {
	// Identifies the Verified Calls Display Profile.
	ID string
}

// EnablePhoneNumberEmergencyParams is parameters of EnablePhoneNumberEmergency operation.
type EnablePhoneNumberEmergencyParams struct {
	// Identifies the resource.
	ID int64
}

// EnqueueCallParams is parameters of EnqueueCall operation.
type EnqueueCallParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// ExtendNumberReservationExpiryTimeParams is parameters of ExtendNumberReservationExpiryTime operation.
type ExtendNumberReservationExpiryTimeParams struct {
	// The number reservation ID.
	NumberReservationID string
}

// FetchTeXMLCallRecordingsParams is parameters of FetchTeXMLCallRecordings operation.
type FetchTeXMLCallRecordingsParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The CallSid that identifies the call to update.
	CallSid string
}

// FetchTeXMLConferenceRecordingsParams is parameters of FetchTeXMLConferenceRecordings operation.
type FetchTeXMLConferenceRecordingsParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The ConferenceSid that uniquely identifies a conference.
	ConferenceSid string
}

// FindPortoutCommentsParams is parameters of FindPortoutComments operation.
type FindPortoutCommentsParams struct {
	// Portout id.
	ID uuid.UUID
}

// FindPortoutRequestParams is parameters of FindPortoutRequest operation.
type FindPortoutRequestParams struct {
	// Portout id.
	ID uuid.UUID
}

// FindTelephonyCredentialsParams is parameters of FindTelephonyCredentials operation.
type FindTelephonyCredentialsParams struct {
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
	// Filter by tag.
	FilterTag OptString
	// Filter by name.
	FilterName OptString
	// Filter by status.
	FilterStatus OptString
	// Filter by resource_id.
	FilterResourceID OptString
	// Filter by sip_username.
	FilterSipUsername OptString
}

// FindTexmlApplicationsParams is parameters of FindTexmlApplications operation.
type FindTexmlApplicationsParams struct {
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
	// If present, applications with <code>friendly_name</code> containing the given value will be
	// returned. Matching is not case-sensitive. Requires at least three characters.
	FilterFriendlyNameContains OptString
	// Identifies the associated outbound voice profile.
	FilterOutboundVoiceProfileID OptStringInt64
	// Specifies the sort order for results. By default sorting direction is ascending. To have the
	// results sorted in descending order add the <code> -</code> prefix.<br/><br/>
	// That is: <ul>
	// <li>
	// <code>friendly_name</code>: sorts the result by the
	// <code>friendly_name</code> field in ascending order.
	// </li>
	// <li>
	// <code>-friendly_name</code>: sorts the result by the
	// <code>friendly_name</code> field in descending order.
	// </li>
	// </ul> <br/> If not given, results are sorted by <code>created_at</code> in descending order.
	Sort OptSortApplication
}

// GatherCallParams is parameters of GatherCall operation.
type GatherCallParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// GatherUsingAudioParams is parameters of GatherUsingAudio operation.
type GatherUsingAudioParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// GatherUsingSpeakParams is parameters of GatherUsingSpeak operation.
type GatherUsingSpeakParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// GetCsvDownloadParams is parameters of GetCsvDownload operation.
type GetCsvDownloadParams struct {
	// Identifies the CSV download.
	ID string
}

// GetCustomStorageCredentialsParams is parameters of GetCustomStorageCredentials operation.
type GetCustomStorageCredentialsParams struct {
	// Uniquely identifies a Telnyx application (Call Control, TeXML) or Sip connection resource.
	ConnectionID string
}

// GetDefaultGatewayParams is parameters of GetDefaultGateway operation.
type GetDefaultGatewayParams struct {
	// Identifies the resource.
	ID uuid.UUID
}

// GetExternalConnectionLogMessageParams is parameters of GetExternalConnectionLogMessage operation.
type GetExternalConnectionLogMessageParams struct {
	// Identifies the resource.
	ID int64
}

// GetExternalConnectionPhoneNumberParams is parameters of GetExternalConnectionPhoneNumber operation.
type GetExternalConnectionPhoneNumberParams struct {
	// Identifies the resource.
	ID int64
	// A phone number's ID via the Telnyx API.
	PhoneNumberID string
}

// GetMessageParams is parameters of GetMessage operation.
type GetMessageParams struct {
	// The id of the message.
	ID uuid.UUID
}

// GetMessagingHostedNumberOrderParams is parameters of GetMessagingHostedNumberOrder operation.
type GetMessagingHostedNumberOrderParams struct {
	// Identifies the type of resource.
	ID string
}

// GetMobileNetworkOperatorsParams is parameters of GetMobileNetworkOperators operation.
type GetMobileNetworkOperatorsParams struct {
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
	// Filter by name starting with.
	FilterNameStartsWith OptString
	// Filter by name containing match.
	FilterNameContains OptString
	// Filter by name ending with.
	FilterNameEndsWith OptString
	// Filter by exact country_code.
	FilterCountryCode OptString
	// Filter by exact MCC.
	FilterMcc OptString
	// Filter by exact MNC.
	FilterMnc OptString
	// Filter by exact TADIG.
	FilterTadig OptString
	// Filter by network_preferences_enabled.
	FilterNetworkPreferencesEnabled OptBool
}

// GetNetworkParams is parameters of GetNetwork operation.
type GetNetworkParams struct {
	// Identifies the resource.
	ID uuid.UUID
}

// GetNotificationChannelParams is parameters of GetNotificationChannel operation.
type GetNotificationChannelParams struct {
	// Identifies the resource.
	ID uuid.UUID
}

// GetNumberOrderPhoneNumberParams is parameters of GetNumberOrderPhoneNumber operation.
type GetNumberOrderPhoneNumberParams struct {
	// The number order phone number ID.
	NumberOrderPhoneNumberID string
}

// GetOtaUpdateParams is parameters of GetOtaUpdate operation.
type GetOtaUpdateParams struct {
	// Identifies the resource.
	ID uuid.UUID
}

// GetOutboundVoiceProfileParams is parameters of GetOutboundVoiceProfile operation.
type GetOutboundVoiceProfileParams struct {
	// Identifies the resource.
	ID int64
}

// GetPhoneNumberMessagingSettingsParams is parameters of GetPhoneNumberMessagingSettings operation.
type GetPhoneNumberMessagingSettingsParams struct {
	// Identifies the type of resource.
	ID string
}

// GetPhoneNumberVoiceSettingsParams is parameters of GetPhoneNumberVoiceSettings operation.
type GetPhoneNumberVoiceSettingsParams struct {
	// Identifies the resource.
	ID int64
}

// GetPhoneNumbersParams is parameters of GetPhoneNumbers operation.
type GetPhoneNumbersParams struct {
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
	// Channel zone identifier.
	ChannelZoneID string
}

// GetPortRequestSupportingDocumentsParams is parameters of GetPortRequestSupportingDocuments operation.
type GetPortRequestSupportingDocumentsParams struct {
	// Portout id.
	ID uuid.UUID
}

// GetRecordingParams is parameters of GetRecording operation.
type GetRecordingParams struct {
	// Uniquely identifies the recording by id.
	RecordingID string
}

// GetRecordingTranscriptionParams is parameters of getRecordingTranscription operation.
type GetRecordingTranscriptionParams struct {
	RecordingTranscriptionID uuid.UUID
}

// GetRecordingsParams is parameters of GetRecordings operation.
type GetRecordingsParams struct {
	// Returns only recordings associated with a given conference.
	FilterConferenceID OptString
	// Returns only recordings created later than or at given ISO 8601 datetime.
	FilterCreatedAtGte OptString
	// Returns only recordings created earlier than or at given ISO 8601 datetime.
	FilterCreatedAtLte OptString
	// If present, recordings will be filtered to those with a matching call_leg_id.
	FilterCallLegID OptUUID
	// If present, recordings will be filtered to those with a matching call_session_id.
	FilterCallSessionID OptUUID
	// If present, recordings will be filtered to those with a matching `from` attribute. Matching is
	// case-sensitive.
	FilterFrom OptString
	// If present, recordings will be filtered to those with a matching `to` attribute. Matching is
	// case-sensitive.
	FilterTo OptString
	// If present, recordings will be filtered to those with a matching `connection_id` attribute.
	// Matching is case-sensitive.
	FilterConnectionID OptString
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
}

// GetTeXMLCallRecordingParams is parameters of GetTeXMLCallRecording operation.
type GetTeXMLCallRecordingParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// Uniquely identifies the recording by id.
	RecordingSid uuid.UUID
}

// GetTeXMLCallRecordingsParams is parameters of GetTeXMLCallRecordings operation.
type GetTeXMLCallRecordingsParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The number of the page to be displayed, zero-indexed, should be used in conjuction with PageToken.
	Page OptInt
	// The number of records to be displayed on a page.
	PageSize OptInt
	// Filters recording by the creation date. Expected format is ISO8601 date or date-time, ie.
	// {YYYY}-{MM}-{DD} or {YYYY}-{MM}-{DD}T{hh}:{mm}:{ss}Z. Also accepts inequality operators, e.g.
	// DateCreated>=2023-05-22.
	DateCreated OptString
}

// GetTeXMLRecordingTranscriptionParams is parameters of GetTeXMLRecordingTranscription operation.
type GetTeXMLRecordingTranscriptionParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// Uniquely identifies the recording transcription by id.
	RecordingTranscriptionSid uuid.UUID
}

// GetTeXMLRecordingTranscriptionsParams is parameters of GetTeXMLRecordingTranscriptions operation.
type GetTeXMLRecordingTranscriptionsParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// Used to request the next page of results.
	PageToken OptString
	// The size of the page.
	PageSize OptInt
}

// GetTelephonyCredentialParams is parameters of GetTelephonyCredential operation.
type GetTelephonyCredentialParams struct {
	// Identifies the resource.
	ID string
}

// GetTexmlApplicationParams is parameters of GetTexmlApplication operation.
type GetTexmlApplicationParams struct {
	// Identifies the resource.
	ID int64
}

// GetTexmlCallParams is parameters of GetTexmlCall operation.
type GetTexmlCallParams struct {
	// The CallSid that identifies the call to update.
	CallSid string
	// The id of the account the resource belongs to.
	AccountSid string
}

// GetTexmlCallsParams is parameters of GetTexmlCalls operation.
type GetTexmlCallsParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The number of the page to be displayed, zero-indexed, should be used in conjuction with PageToken.
	Page OptInt
	// The size of the page.
	PageSize OptInt
	// Used to request the next page of results.
	PageToken OptString
	// Filters calls by the to number.
	To OptString
	// Filters calls by the from number.
	From OptString
	// Filters calls by status.
	Status OptStatus
	// Filters calls by the start date. Expected format is YYYY-MM-DD. Also accepts inequality operators,
	// e.g. StartTime>=2023-05-22.
	StartTime OptString
	// Filters calls by their end date. Expected format is YYYY-MM-DD. Also accepts inequality operators,
	// e.g. EndTime>=2023-05-22.
	EndTime OptString
}

// GetTexmlConferenceParams is parameters of GetTexmlConference operation.
type GetTexmlConferenceParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The ConferenceSid that uniquely identifies a conference.
	ConferenceSid string
}

// GetTexmlConferenceParticipantParams is parameters of GetTexmlConferenceParticipant operation.
type GetTexmlConferenceParticipantParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The ConferenceSid that uniquely identifies a conference.
	ConferenceSid string
	// The CallSid that identifies the call to update.
	CallSid string
}

// GetTexmlConferenceParticipantsParams is parameters of GetTexmlConferenceParticipants operation.
type GetTexmlConferenceParticipantsParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The ConferenceSid that uniquely identifies a conference.
	ConferenceSid string
}

// GetTexmlConferenceRecordingsParams is parameters of GetTexmlConferenceRecordings operation.
type GetTexmlConferenceRecordingsParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The ConferenceSid that uniquely identifies a conference.
	ConferenceSid string
}

// GetTexmlConferencesParams is parameters of GetTexmlConferences operation.
type GetTexmlConferencesParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The number of the page to be displayed, zero-indexed, should be used in conjuction with PageToken.
	Page OptInt
	// The size of the page.
	PageSize OptInt
	// Used to request the next page of results.
	PageToken OptString
	// Filters conferences by their friendly name.
	FriendlyName OptString
	// Filters conferences by status.
	Status OptConferenceStatus
	// Filters conferences by the creation date. Expected format is YYYY-MM-DD. Also accepts inequality
	// operators, e.g. DateCreated>=2023-05-22.
	DateCreated OptString
	// Filters conferences by the time they were last updated. Expected format is YYYY-MM-DD. Also
	// accepts inequality operators, e.g. DateUpdated>=2023-05-22.
	DateUpdated OptString
}

// GetVerifiedNumberParams is parameters of GetVerifiedNumber operation.
type GetVerifiedNumberParams struct {
	// The phone number being requested.
	PhoneNumber string
}

// GetVerifyProfileParams is parameters of GetVerifyProfile operation.
type GetVerifyProfileParams struct {
	// The identifier of the Verify profile to retrieve.
	VerifyProfileID uuid.UUID
}

// GetWebhookDeliveriesParams is parameters of GetWebhookDeliveries operation.
type GetWebhookDeliveriesParams struct {
	// Return only webhook_deliveries matching the given `status`.
	FilterStatusEq OptGetWebhookDeliveriesFilterStatusEq
	// Return only webhook_deliveries matching the given value of `event_type`. Accepts multiple values
	// separated by a `,`.
	FilterEventType OptString
	// Return only webhook deliveries whose `webhook` component contains the given text.
	FilterWebhookContains OptString
	// Return only webhook_deliveries whose `attempts` component contains the given text.
	FilterAttemptsContains OptString
	// Return only webhook_deliveries whose delivery started later than or at given ISO 8601 datetime.
	FilterStartedAtGte OptString
	// Return only webhook_deliveries whose delivery started earlier than or at given ISO 8601 datetime.
	FilterStartedAtLte OptString
	// Return only webhook_deliveries whose delivery finished later than or at given ISO 8601 datetime.
	FilterFinishedAtGte OptString
	// Return only webhook_deliveries whose delivery finished earlier than or at given ISO 8601 datetime.
	FilterFinishedAtLte OptString
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
}

// GetWebhookDeliveryParams is parameters of GetWebhookDelivery operation.
type GetWebhookDeliveryParams struct {
	// Uniquely identifies the webhook_delivery.
	ID uuid.UUID
}

// HangupCallParams is parameters of HangupCall operation.
type HangupCallParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// InitiateTexmlCallByAccountParams is parameters of InitiateTexmlCallByAccount operation.
type InitiateTexmlCallByAccountParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
}

// InitiateTexmlCallByApplicationParams is parameters of InitiateTexmlCallByApplication operation.
type InitiateTexmlCallByApplicationParams struct {
	// The ID of the TeXML application used for the call.
	ApplicationID string
}

// LeaveQueueParams is parameters of LeaveQueue operation.
type LeaveQueueParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// ListAvailablePhoneNumbersParams is parameters of ListAvailablePhoneNumbers operation.
type ListAvailablePhoneNumbersParams struct {
	// Filter numbers starting with a pattern (exclude NDC from start of this filter if used with
	// `national_destination_code` filter).
	FilterPhoneNumberStartsWith OptString
	// Filter numbers ending with a pattern (max length of 4 digits if used with
	// `national_destination_code` filter).
	FilterPhoneNumberEndsWith OptString
	// Filter numbers containing a pattern (must be used with `national_destination_code` filter and only
	// searches within last 4 digits).
	FilterPhoneNumberContains OptString
	// Filter phone numbers by city.
	FilterLocality OptString
	// Filter phone numbers by US state/CA province.
	FilterAdministrativeArea OptString
	// Filter phone numbers by ISO alpha-2 country code.
	FilterCountryCode OptString
	// Filter by the national destination code of the number. This filter is only applicable to North
	// American numbers.
	FilterNationalDestinationCode OptString
	// Filter phone numbers by NANP rate center. This filter is only applicable to North American numbers.
	FilterRateCenter OptString
	// Filter phone numbers by number type.
	FilterPhoneNumberType OptListAvailablePhoneNumbersFilterPhoneNumberType
	// Filter if the phone number should be used for voice, fax, mms, sms, emergency.
	FilterFeatures []ListAvailablePhoneNumbersFilterFeaturesItem
	// Limits the number of results.
	FilterLimit OptInt
	// Filter to determine if best effort results should be included. Only available in NANPA countries.
	FilterBestEffort OptBool
	// Filter to exclude phone numbers that need additional time after to purchase to receive phone calls.
	//  Only available for toll-free numbers.
	FilterQuickship OptBool
	// Filter to exclude phone numbers that cannot be reserved before purchase.
	FilterReservable OptBool
	// Filter to exclude phone numbers that are currently on hold for your account.
	FilterExcludeHeldNumbers OptBool
}

// ListCallControlApplicationsParams is parameters of ListCallControlApplications operation.
type ListCallControlApplicationsParams struct {
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
	// If present, applications with <code>application_name</code> containing the given value will be
	// returned. Matching is not case-sensitive. Requires at least three characters.
	FilterApplicationNameContains OptString
	// Identifies the associated outbound voice profile.
	FilterOutboundVoiceProfileID OptStringInt64
	// Specifies the sort order for results. By default sorting direction is ascending. To have the
	// results sorted in descending order add the <code> -</code> prefix.<br/><br/>
	// That is: <ul>
	// <li>
	// <code>connection_name</code>: sorts the result by the
	// <code>connection_name</code> field in ascending order.
	// </li>
	// <li>
	// <code>-connection_name</code>: sorts the result by the
	// <code>connection_name</code> field in descending order.
	// </li>
	// </ul> <br/> If not given, results are sorted by <code>created_at</code> in descending order.
	Sort OptSortConnection
}

// ListCommentsParams is parameters of ListComments operation.
type ListCommentsParams struct {
	// Record type that the comment relates to i.e number_order, sub_number_order or
	// number_order_phone_number.
	FilterCommentRecordType string
	// ID of the record the comments relate to.
	FilterCommentRecordID string
}

// ListConnectionActiveCallsParams is parameters of ListConnectionActiveCalls operation.
type ListConnectionActiveCallsParams struct {
	// Uniquely identifies a Telnyx application (Call Control, TeXML) or Sip connection resource.
	ConnectionID string
	// Limit of records per single page.
	PageLimit OptInt
	// Opaque identifier of next page.
	PageAfter OptString
	// Opaque identifier of previous page.
	PageBefore OptString
}

// ListCsvDownloadsParams is parameters of ListCsvDownloads operation.
type ListCsvDownloadsParams struct {
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
}

// ListExternalConnectionLogMessagesParams is parameters of ListExternalConnectionLogMessages operation.
type ListExternalConnectionLogMessagesParams struct {
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
	// The external connection ID to filter by or "null" to filter for logs without an external
	// connection ID.
	FilterExternalConnectionID OptString
	// The partial phone number to filter log messages for. Requires 3-15 digits.
	FilterTelephoneNumberContains OptString
	// The phone number to filter log messages for or "null" to filter for logs without a phone number.
	FilterTelephoneNumberEq OptString
}

// ListExternalConnectionPhoneNumbersParams is parameters of ListExternalConnectionPhoneNumbers operation.
type ListExternalConnectionPhoneNumbersParams struct {
	// Identifies the resource.
	ID int64
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
	// The phone number to filter by.
	FilterPhoneNumberEq OptString
	// The partial phone number to filter by. Requires 3-15 digits.
	FilterPhoneNumberContains OptString
	// If present, connections associated with the given phone_number will be returned. A full match is
	// necessary with a e164 format.
	FilterPhoneNumber OptNilString
	// The civic address ID to filter by.
	FilterCivicAddressIDEq OptUUID
	// The location ID to filter by.
	FilterLocationIDEq OptUUID
}

// ListMessagingHostedNumberOrdersParams is parameters of ListMessagingHostedNumberOrders operation.
type ListMessagingHostedNumberOrdersParams struct {
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
}

// ListMessagingUrlDomainsParams is parameters of ListMessagingUrlDomains operation.
type ListMessagingUrlDomainsParams struct {
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
}

// ListNetworkInterfacesParams is parameters of ListNetworkInterfaces operation.
type ListNetworkInterfacesParams struct {
	// Identifies the resource.
	ID uuid.UUID
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
	// The interface name to filter on.
	FilterName OptString
	// The interface type to filter on.
	FilterType OptString
	// The interface status to filter on.
	FilterStatus OptInterfaceStatus
}

// ListNetworksParams is parameters of ListNetworks operation.
type ListNetworksParams struct {
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
	// The network name to filter on.
	FilterName OptString
}

// ListNotificationChannelsParams is parameters of ListNotificationChannels operation.
type ListNotificationChannelsParams struct {
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
	// Filter by the id of a channel type.
	FilterChannelTypeIDEq OptChannelTypeId
}

// ListNumberOrderDocumentsParams is parameters of ListNumberOrderDocuments operation.
type ListNumberOrderDocumentsParams struct {
	// Filter number order documents by `requirement_id`.
	FilterRequirementID OptString
	// Filter number order documents after this datetime.
	FilterCreatedAtGt OptString
	// Filter number order documents from before this datetime.
	FilterCreatedAtLt OptString
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
}

// ListNumberReservationsParams is parameters of ListNumberReservations operation.
type ListNumberReservationsParams struct {
	// Filter number reservations by status.
	FilterStatus OptString
	// Filter number reservations later than this value.
	FilterCreatedAtGt OptString
	// Filter number reservations earlier than this value.
	FilterCreatedAtLt OptString
	// Filter number reservations having these phone numbers.
	FilterPhoneNumbersPhoneNumber OptString
	// Filter number reservations via the customer reference set.
	FilterCustomerReference OptString
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
}

// ListOtaUpdatesParams is parameters of ListOtaUpdates operation.
type ListOtaUpdatesParams struct {
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
	// Filter by a specific status of the resource's lifecycle.
	FilterStatus OptFilterBasicStatusLifecycle
	// The SIM card identification UUID.
	FilterSimCardID OptString
	// Filter by type.
	FilterType OptListOtaUpdatesFilterType
}

// ListOutboundVoiceProfilesParams is parameters of ListOutboundVoiceProfiles operation.
type ListOutboundVoiceProfilesParams struct {
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
	// Optional filter on outbound voice profile name.
	FilterNameContains OptString
	// Specifies the sort order for results. By default sorting direction is ascending. To have the
	// results sorted in descending order add the <code>-</code> prefix.<br/><br/>
	// That is: <ul>
	// <li>
	// <code>name</code>: sorts the result by the
	// <code>name</code> field in ascending order.
	// </li>
	// <li>
	// <code>-name</code>: sorts the result by the
	// <code>name</code> field in descending order.
	// </li>
	// </ul> <br/>.
	Sort OptSortOutboundVoiceProfile
}

// ListPhoneNumbersParams is parameters of ListPhoneNumbers operation.
type ListPhoneNumbersParams struct {
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
	// Filter by phone number tags.
	FilterTag OptString
	// Filter by phone number. Requires at least three digits.
	// Non-numerical characters will result in no values being returned.
	FilterPhoneNumber OptString
	// Filter by phone number status.
	FilterStatus OptListPhoneNumbersFilterStatus
	// Filter by connection_id.
	FilterConnectionID OptStringInt64
	// Filter contains connection name. Requires at least three characters.
	FilterVoiceConnectionNameContains OptString
	// Filter starts with connection name. Requires at least three characters.
	FilterVoiceConnectionNameStartsWith OptString
	// Filter ends with connection name. Requires at least three characters.
	FilterVoiceConnectionNameEndsWith OptString
	// Filter by connection name.
	FilterVoiceConnectionNameEq OptString
	// Filter by usage_payment_method.
	FilterVoiceUsagePaymentMethod OptListPhoneNumbersFilterVoiceUsagePaymentMethod
	// Filter by the billing_group_id associated with phone numbers. To filter to only phone numbers that
	// have no billing group associated them, set the value of this filter to the string 'null'.
	FilterBillingGroupID OptString
	// Filter by the emergency_address_id associated with phone numbers. To filter only phone numbers
	// that have no emergency address associated with them, set the value of this filter to the string
	// 'null'.
	FilterEmergencyAddressID OptStringInt64
	// Filter numbers via the customer_reference set.
	FilterCustomerReference OptString
	// Specifies the sort order for results. If not given, results are sorted by created_at in descending
	// order.
	Sort OptListPhoneNumbersSort
}

// ListPhoneNumbersJobsParams is parameters of ListPhoneNumbersJobs operation.
type ListPhoneNumbersJobsParams struct {
	// Filter the phone number jobs by type.
	FilterType OptListPhoneNumbersJobsFilterType
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
	// Specifies the sort order for results. If not given, results are sorted by created_at in descending
	// order.
	Sort OptListPhoneNumbersJobsSort
}

// ListPhoneNumbersWithMessagingSettingsParams is parameters of ListPhoneNumbersWithMessagingSettings operation.
type ListPhoneNumbersWithMessagingSettingsParams struct {
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
}

// ListPhoneNumbersWithVoiceSettingsParams is parameters of ListPhoneNumbersWithVoiceSettings operation.
type ListPhoneNumbersWithVoiceSettingsParams struct {
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
	// Filter by phone number. Requires at least three digits.
	// Non-numerical characters will result in no values being returned.
	FilterPhoneNumber OptString
	// Filter contains connection name. Requires at least three characters.
	FilterConnectionNameContains OptString
	// Filter numbers via the customer_reference set.
	FilterCustomerReference OptString
	// Filter by usage_payment_method.
	FilterVoiceUsagePaymentMethod OptListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod
	// Specifies the sort order for results. If not given, results are sorted by created_at in descending
	// order.
	Sort OptListPhoneNumbersWithVoiceSettingsSort
}

// ListPortingOrderCommentsParams is parameters of ListPortingOrderComments operation.
type ListPortingOrderCommentsParams struct {
	// Porting Order id.
	ID uuid.UUID
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
}

// ListPortingPhoneNumbersParams is parameters of ListPortingPhoneNumbers operation.
type ListPortingPhoneNumbersParams struct {
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
	// Filter results by porting order id.
	FilterPortingOrderID OptUUID
	// Filter results by a list of porting order ids.
	FilterPortingOrderIDIn []uuid.UUID
	// Filter results by support key.
	FilterSupportKeyEq OptString
	// Filter results by a list of support keys.
	FilterSupportKeyIn []string
	// Filter results by phone number.
	FilterPhoneNumber OptString
	// Filter results by a list of phone numbers.
	FilterPhoneNumberIn []string
	// Filter results by porting order status.
	FilterPortingOrderStatus OptListPortingPhoneNumbersFilterPortingOrderStatus
	// Filter results by activation status.
	FilterActivationStatus OptPortingOrderActivationStatus
	// Filter results by portability status.
	FilterPortabilityStatus OptPortabilityStatus
}

// ListPortoutRequestParams is parameters of ListPortoutRequest operation.
type ListPortoutRequestParams struct {
	// Filter by new carrier name.
	FilterCarrierName OptString
	// Filter by new carrier spid.
	FilterSpid OptString
	// Filter by portout status.
	FilterStatus OptListPortoutRequestFilterStatus
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
}

// ListProfilePhoneNumbersParams is parameters of ListProfilePhoneNumbers operation.
type ListProfilePhoneNumbersParams struct {
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
	// The id of the messaging profile to retrieve.
	ID uuid.UUID
}

// ListProfilesParams is parameters of ListProfiles operation.
type ListProfilesParams struct {
	FilterName OptString
	PageSize   OptInt
	PageNumber OptInt
}

// ListQueueCallsParams is parameters of ListQueueCalls operation.
type ListQueueCallsParams struct {
	// Uniquely identifies the queue by name.
	QueueName string
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
}

// ListRegulatoryRequirementsParams is parameters of ListRegulatoryRequirements operation.
type ListRegulatoryRequirementsParams struct {
	// Record type phone number/ phone numbers.
	FilterPhoneNumber string
}

// ListRoomRecordingsParams is parameters of ListRoomRecordings operation.
type ListRoomRecordingsParams struct {
	// ISO 8601 date for filtering room recordings ended on that date.
	FilterDateEndedAtEq OptDate
	// ISO 8601 date for filtering room recordings ended after that date.
	FilterDateEndedAtGte OptDate
	// ISO 8601 date for filtering room recordings ended before that date.
	FilterDateEndedAtLte OptDate
	// ISO 8601 date for filtering room recordings started on that date.
	FilterDateStartedAtEq OptDate
	// ISO 8601 date for filtering room recordings started after that date.
	FilterDateStartedAtGte OptDate
	// ISO 8601 date for filtering room recordings started before that date.
	FilterDateStartedAtLte OptDate
	// Room_id for filtering room recordings.
	FilterRoomID OptUUID
	// Participant_id for filtering room recordings.
	FilterParticipantID OptUUID
	// Session_id for filtering room recordings.
	FilterSessionID OptUUID
	// Status for filtering room recordings.
	FilterStatus OptString
	// Type for filtering room recordings.
	FilterType OptString
	// Duration_secs equal for filtering room recordings.
	FilterDurationSecsEq OptInt
	// Duration_secs less or equal for filtering room recordings.
	FilterDurationSecsLte OptInt
	// Duration_secs greater or equal for filtering room recordings.
	FilterDurationSecsGte OptInt
	// The size of the page.
	PageSize OptInt
	// The page number to load.
	PageNumber OptInt
}

// ListTagsParams is parameters of ListTags operation.
type ListTagsParams struct {
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
}

// ListVerificationsParams is parameters of ListVerifications operation.
type ListVerificationsParams struct {
	// The phone number associated with the verifications to retrieve.
	PhoneNumber string
}

// ListVerifiedCallDisplayProfilesParams is parameters of ListVerifiedCallDisplayProfiles operation.
type ListVerifiedCallDisplayProfilesParams struct {
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
}

// ListVerifiedNumbersParams is parameters of ListVerifiedNumbers operation.
type ListVerifiedNumbersParams struct {
	PageSize   OptInt
	PageNumber OptInt
}

// LookupNumberParams is parameters of LookupNumber operation.
type LookupNumberParams struct {
	// The phone number to be looked up.
	PhoneNumber string
	// Specifies the type of number lookup to be performed.
	Type OptNumberLookupType
}

// MarkCommentReadParams is parameters of MarkCommentRead operation.
type MarkCommentReadParams struct {
	// The comment ID.
	ID string
}

// NoiseSuppressionStartParams is parameters of noiseSuppressionStart operation.
type NoiseSuppressionStartParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// NoiseSuppressionStopParams is parameters of noiseSuppressionStop operation.
type NoiseSuppressionStopParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// PauseCallRecordingParams is parameters of PauseCallRecording operation.
type PauseCallRecordingParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// PerformCredentialActionParams is parameters of PerformCredentialAction operation.
type PerformCredentialActionParams struct {
	// Identifies the resource.
	ID string
	// Identifies the action to be taken.
	Action PerformCredentialActionAction
}

// PortingOrdersIDCommentsPostParams is parameters of POST /porting_orders/{id}/comments operation.
type PortingOrdersIDCommentsPostParams struct {
	// Porting Order id.
	ID uuid.UUID
}

// PostPortRequestCommentParams is parameters of PostPortRequestComment operation.
type PostPortRequestCommentParams struct {
	// Portout id.
	ID uuid.UUID
}

// PostPortRequestSupportingDocumentsParams is parameters of PostPortRequestSupportingDocuments operation.
type PostPortRequestSupportingDocumentsParams struct {
	// Portout id.
	ID uuid.UUID
}

// ReferCallParams is parameters of ReferCall operation.
type ReferCallParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// RejectCallParams is parameters of RejectCall operation.
type RejectCallParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// ResumeCallRecordingParams is parameters of ResumeCallRecording operation.
type ResumeCallRecordingParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// RetrieveCallControlApplicationParams is parameters of RetrieveCallControlApplication operation.
type RetrieveCallControlApplicationParams struct {
	// Identifies the resource.
	ID int64
}

// RetrieveCallFromQueueParams is parameters of RetrieveCallFromQueue operation.
type RetrieveCallFromQueueParams struct {
	// Uniquely identifies the queue by name.
	QueueName string
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// RetrieveCallStatusParams is parameters of RetrieveCallStatus operation.
type RetrieveCallStatusParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// RetrieveCommentParams is parameters of RetrieveComment operation.
type RetrieveCommentParams struct {
	// The comment ID.
	ID string
}

// RetrieveNumberOrderDocumentParams is parameters of RetrieveNumberOrderDocument operation.
type RetrieveNumberOrderDocumentParams struct {
	// The number order document ID.
	NumberOrderDocumentID string
}

// RetrieveNumberReservationParams is parameters of RetrieveNumberReservation operation.
type RetrieveNumberReservationParams struct {
	// The number reservation ID.
	NumberReservationID string
}

// RetrievePhoneNumberParams is parameters of RetrievePhoneNumber operation.
type RetrievePhoneNumberParams struct {
	// Identifies the resource.
	ID int64
}

// RetrievePhoneNumbersJobParams is parameters of RetrievePhoneNumbersJob operation.
type RetrievePhoneNumbersJobParams struct {
	// Identifies the Phone Numbers Job.
	ID string
}

// RetrieveVerificationParams is parameters of RetrieveVerification operation.
type RetrieveVerificationParams struct {
	// The identifier of the verification to retrieve.
	VerificationID uuid.UUID
}

// SendDTMFParams is parameters of SendDTMF operation.
type SendDTMFParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// SlimListPhoneNumbersParams is parameters of SlimListPhoneNumbers operation.
type SlimListPhoneNumbersParams struct {
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
	// Include the connection associated with the phone number.
	IncludeConnection OptBool
	// Include the tags associated with the phone number.
	IncludeTags OptBool
	// Filter by phone number tags. (This requires the include_tags param).
	FilterTag OptString
	// Filter by phone number. Requires at least three digits.
	// Non-numerical characters will result in no values being returned.
	FilterPhoneNumber OptString
	// Filter by phone number status.
	FilterStatus OptSlimListPhoneNumbersFilterStatus
	// Filter by connection_id.
	FilterConnectionID OptStringInt64
	// Filter contains connection name. Requires at least three characters and the include_connection
	// param.
	FilterVoiceConnectionNameContains OptString
	// Filter starts with connection name. Requires at least three characters and the include_connection
	// param.
	FilterVoiceConnectionNameStartsWith OptString
	// Filter ends with connection name. Requires at least three characters and the include_connection
	// param.
	FilterVoiceConnectionNameEndsWith OptString
	// Filter by connection name , requires the include_connection param and the include_connection param.
	FilterVoiceConnectionName OptString
	// Filter by usage_payment_method.
	FilterVoiceUsagePaymentMethod OptSlimListPhoneNumbersFilterVoiceUsagePaymentMethod
	// Filter by the billing_group_id associated with phone numbers. To filter to only phone numbers that
	// have no billing group associated them, set the value of this filter to the string 'null'.
	FilterBillingGroupID OptString
	// Filter by the emergency_address_id associated with phone numbers. To filter only phone numbers
	// that have no emergency address associated with them, set the value of this filter to the string
	// 'null'.
	FilterEmergencyAddressID OptStringInt64
	// Filter numbers via the customer_reference set.
	FilterCustomerReference OptString
	// Specifies the sort order for results. If not given, results are sorted by created_at in descending
	// order.
	Sort OptSlimListPhoneNumbersSort
}

// SpeakCallParams is parameters of SpeakCall operation.
type SpeakCallParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// StartCallForkParams is parameters of StartCallFork operation.
type StartCallForkParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// StartCallPlaybackParams is parameters of StartCallPlayback operation.
type StartCallPlaybackParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// StartCallRecordParams is parameters of StartCallRecord operation.
type StartCallRecordParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// StartCallStreamingParams is parameters of StartCallStreaming operation.
type StartCallStreamingParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// StartCallTranscriptionParams is parameters of StartCallTranscription operation.
type StartCallTranscriptionParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// StartTeXMLCallRecordingParams is parameters of StartTeXMLCallRecording operation.
type StartTeXMLCallRecordingParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The CallSid that identifies the call to update.
	CallSid string
}

// StopCallForkParams is parameters of StopCallFork operation.
type StopCallForkParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// StopCallGatherParams is parameters of StopCallGather operation.
type StopCallGatherParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// StopCallPlaybackParams is parameters of StopCallPlayback operation.
type StopCallPlaybackParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// StopCallRecordingParams is parameters of StopCallRecording operation.
type StopCallRecordingParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// StopCallStreamingParams is parameters of StopCallStreaming operation.
type StopCallStreamingParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// StopCallTranscriptionParams is parameters of StopCallTranscription operation.
type StopCallTranscriptionParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// TransferCallParams is parameters of TransferCall operation.
type TransferCallParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// UnassignPhoneNumberParams is parameters of UnassignPhoneNumber operation.
type UnassignPhoneNumberParams struct {
	// Channel zone identifier.
	ChannelZoneID string
	// The phone number to be looked up.
	PhoneNumber string
}

// UpdateBulkTelephonyCredentialParams is parameters of UpdateBulkTelephonyCredential operation.
type UpdateBulkTelephonyCredentialParams struct {
	// Filter by tag, required by bulk operations.
	FilterTag string
}

// UpdateCallControlApplicationParams is parameters of UpdateCallControlApplication operation.
type UpdateCallControlApplicationParams struct {
	// Identifies the resource.
	ID int64
}

// UpdateClientStateParams is parameters of UpdateClientState operation.
type UpdateClientStateParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// UpdateCustomStorageCredentialsParams is parameters of UpdateCustomStorageCredentials operation.
type UpdateCustomStorageCredentialsParams struct {
	// Uniquely identifies a Telnyx application (Call Control, TeXML) or Sip connection resource.
	ConnectionID string
}

// UpdateExternalConnectionPhoneNumberParams is parameters of UpdateExternalConnectionPhoneNumber operation.
type UpdateExternalConnectionPhoneNumberParams struct {
	// Identifies the resource.
	ID int64
	// A phone number's ID via the Telnyx API.
	PhoneNumberID string
}

// UpdateNetworkParams is parameters of UpdateNetwork operation.
type UpdateNetworkParams struct {
	// Identifies the resource.
	ID uuid.UUID
}

// UpdateNotificationChannelParams is parameters of UpdateNotificationChannel operation.
type UpdateNotificationChannelParams struct {
	// Identifies the resource.
	ID uuid.UUID
}

// UpdateNumberOrderDocumentParams is parameters of UpdateNumberOrderDocument operation.
type UpdateNumberOrderDocumentParams struct {
	// The number order document ID.
	NumberOrderDocumentID string
}

// UpdateNumberOrderPhoneNumberParams is parameters of UpdateNumberOrderPhoneNumber operation.
type UpdateNumberOrderPhoneNumberParams struct {
	// The number order phone number ID.
	NumberOrderPhoneNumberID string
}

// UpdateOutboundVoiceProfileParams is parameters of UpdateOutboundVoiceProfile operation.
type UpdateOutboundVoiceProfileParams struct {
	// Identifies the resource.
	ID int64
}

// UpdatePhoneNumberParams is parameters of UpdatePhoneNumber operation.
type UpdatePhoneNumberParams struct {
	// Identifies the resource.
	ID int64
}

// UpdatePhoneNumberMessagingSettingsParams is parameters of UpdatePhoneNumberMessagingSettings operation.
type UpdatePhoneNumberMessagingSettingsParams struct {
	// Identifies the type of resource.
	ID string
}

// UpdatePhoneNumberVoiceSettingsParams is parameters of UpdatePhoneNumberVoiceSettings operation.
type UpdatePhoneNumberVoiceSettingsParams struct {
	// Identifies the resource.
	ID int64
}

// UpdatePortoutStatusParams is parameters of UpdatePortoutStatus operation.
type UpdatePortoutStatusParams struct {
	// Portout id.
	ID uuid.UUID
	// Updated portout status.
	Status UpdatePortoutStatusStatus
}

// UpdateProfileParams is parameters of UpdateProfile operation.
type UpdateProfileParams struct {
	// Identifies the Verified Calls Display Profile.
	ID string
}

// UpdateTeXMLCallRecordingParams is parameters of UpdateTeXMLCallRecording operation.
type UpdateTeXMLCallRecordingParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The CallSid that identifies the call to update.
	CallSid string
	// Uniquely identifies the recording by id.
	RecordingSid uuid.UUID
}

// UpdateTelephonyCredentialParams is parameters of UpdateTelephonyCredential operation.
type UpdateTelephonyCredentialParams struct {
	// Identifies the resource.
	ID string
}

// UpdateTexmlApplicationParams is parameters of UpdateTexmlApplication operation.
type UpdateTexmlApplicationParams struct {
	// Identifies the resource.
	ID int64
}

// UpdateTexmlCallParams is parameters of UpdateTexmlCall operation.
type UpdateTexmlCallParams struct {
	// The CallSid that identifies the call to update.
	CallSid string
}

// UpdateTexmlCallByAccountParams is parameters of UpdateTexmlCallByAccount operation.
type UpdateTexmlCallByAccountParams struct {
	// The CallSid that identifies the call to update.
	CallSid string
	// The id of the account the resource belongs to.
	AccountSid string
}

// UpdateTexmlConferenceParams is parameters of UpdateTexmlConference operation.
type UpdateTexmlConferenceParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The ConferenceSid that uniquely identifies a conference.
	ConferenceSid string
}

// UpdateTexmlConferenceParticipantParams is parameters of UpdateTexmlConferenceParticipant operation.
type UpdateTexmlConferenceParticipantParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The ConferenceSid that uniquely identifies a conference.
	ConferenceSid string
	// The CallSid that identifies the call to update.
	CallSid string
}

// UpdateVerifyProfileParams is parameters of UpdateVerifyProfile operation.
type UpdateVerifyProfileParams struct {
	// The identifier of the Verify profile to update.
	VerifyProfileID uuid.UUID
}

// VerifyVerificationCodeParams is parameters of VerifyVerificationCode operation.
type VerifyVerificationCodeParams struct {
	// The phone number being verified.
	PhoneNumber string
}

// VerifyVerificationCodeByPhoneNumberParams is parameters of VerifyVerificationCodeByPhoneNumber operation.
type VerifyVerificationCodeByPhoneNumberParams struct {
	// The phone number associated with the verification code being verified.
	PhoneNumber string
}

// ViewRoomRecordingParams is parameters of ViewRoomRecording operation.
type ViewRoomRecordingParams struct {
	// The unique identifier of a room recording.
	RoomRecordingID uuid.UUID
}
