// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/google/uuid"
)

// AnswerCallParams is parameters of AnswerCall operation.
type AnswerCallParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// BridgeCallParams is parameters of BridgeCall operation.
type BridgeCallParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// DeleteTeXMLCallRecordingParams is parameters of DeleteTeXMLCallRecording operation.
type DeleteTeXMLCallRecordingParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// Uniquely identifies the recording by id.
	RecordingSid uuid.UUID
}

// DeleteTeXMLRecordingTranscriptionParams is parameters of DeleteTeXMLRecordingTranscription operation.
type DeleteTeXMLRecordingTranscriptionParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// Uniquely identifies the recording transcription by id.
	RecordingTranscriptionSid uuid.UUID
}

// DeleteTexmlApplicationParams is parameters of DeleteTexmlApplication operation.
type DeleteTexmlApplicationParams struct {
	// Identifies the resource.
	ID int64
}

// DeleteTexmlConferenceParticipantParams is parameters of DeleteTexmlConferenceParticipant operation.
type DeleteTexmlConferenceParticipantParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The ConferenceSid that uniquely identifies a conference.
	ConferenceSid string
	// The CallSid that identifies the call to update.
	CallSid string
}

// DialTexmlConferenceParticipantParams is parameters of DialTexmlConferenceParticipant operation.
type DialTexmlConferenceParticipantParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The ConferenceSid that uniquely identifies a conference.
	ConferenceSid string
}

// EnqueueCallParams is parameters of EnqueueCall operation.
type EnqueueCallParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// FetchTeXMLCallRecordingsParams is parameters of FetchTeXMLCallRecordings operation.
type FetchTeXMLCallRecordingsParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The CallSid that identifies the call to update.
	CallSid string
}

// FetchTeXMLConferenceRecordingsParams is parameters of FetchTeXMLConferenceRecordings operation.
type FetchTeXMLConferenceRecordingsParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The ConferenceSid that uniquely identifies a conference.
	ConferenceSid string
}

// FindTexmlApplicationsParams is parameters of FindTexmlApplications operation.
type FindTexmlApplicationsParams struct {
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
	// If present, applications with <code>friendly_name</code> containing the given value will be
	// returned. Matching is not case-sensitive. Requires at least three characters.
	FilterFriendlyNameContains OptString
	// Identifies the associated outbound voice profile.
	FilterOutboundVoiceProfileID OptStringInt64
	// Specifies the sort order for results. By default sorting direction is ascending. To have the
	// results sorted in descending order add the <code> -</code> prefix.<br/><br/>
	// That is: <ul>
	// <li>
	// <code>friendly_name</code>: sorts the result by the
	// <code>friendly_name</code> field in ascending order.
	// </li>
	// <li>
	// <code>-friendly_name</code>: sorts the result by the
	// <code>friendly_name</code> field in descending order.
	// </li>
	// </ul> <br/> If not given, results are sorted by <code>created_at</code> in descending order.
	Sort OptSortApplication
}

// GatherCallParams is parameters of GatherCall operation.
type GatherCallParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// GatherUsingAudioParams is parameters of GatherUsingAudio operation.
type GatherUsingAudioParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// GatherUsingSpeakParams is parameters of GatherUsingSpeak operation.
type GatherUsingSpeakParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// GetTeXMLCallRecordingParams is parameters of GetTeXMLCallRecording operation.
type GetTeXMLCallRecordingParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// Uniquely identifies the recording by id.
	RecordingSid uuid.UUID
}

// GetTeXMLCallRecordingsParams is parameters of GetTeXMLCallRecordings operation.
type GetTeXMLCallRecordingsParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The number of the page to be displayed, zero-indexed, should be used in conjuction with PageToken.
	Page OptInt
	// The number of records to be displayed on a page.
	PageSize OptInt
	// Filters recording by the creation date. Expected format is ISO8601 date or date-time, ie.
	// {YYYY}-{MM}-{DD} or {YYYY}-{MM}-{DD}T{hh}:{mm}:{ss}Z. Also accepts inequality operators, e.g.
	// DateCreated>=2023-05-22.
	DateCreated OptString
}

// GetTeXMLRecordingTranscriptionParams is parameters of GetTeXMLRecordingTranscription operation.
type GetTeXMLRecordingTranscriptionParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// Uniquely identifies the recording transcription by id.
	RecordingTranscriptionSid uuid.UUID
}

// GetTeXMLRecordingTranscriptionsParams is parameters of GetTeXMLRecordingTranscriptions operation.
type GetTeXMLRecordingTranscriptionsParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// Used to request the next page of results.
	PageToken OptString
	// The size of the page.
	PageSize OptInt
}

// GetTexmlApplicationParams is parameters of GetTexmlApplication operation.
type GetTexmlApplicationParams struct {
	// Identifies the resource.
	ID int64
}

// GetTexmlCallParams is parameters of GetTexmlCall operation.
type GetTexmlCallParams struct {
	// The CallSid that identifies the call to update.
	CallSid string
	// The id of the account the resource belongs to.
	AccountSid string
}

// GetTexmlCallsParams is parameters of GetTexmlCalls operation.
type GetTexmlCallsParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The number of the page to be displayed, zero-indexed, should be used in conjuction with PageToken.
	Page OptInt
	// The size of the page.
	PageSize OptInt
	// Used to request the next page of results.
	PageToken OptString
	// Filters calls by the to number.
	To OptString
	// Filters calls by the from number.
	From OptString
	// Filters calls by status.
	Status OptStatus
	// Filters calls by the start date. Expected format is YYYY-MM-DD. Also accepts inequality operators,
	// e.g. StartTime>=2023-05-22.
	StartTime OptString
	// Filters calls by their end date. Expected format is YYYY-MM-DD. Also accepts inequality operators,
	// e.g. EndTime>=2023-05-22.
	EndTime OptString
}

// GetTexmlConferenceParams is parameters of GetTexmlConference operation.
type GetTexmlConferenceParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The ConferenceSid that uniquely identifies a conference.
	ConferenceSid string
}

// GetTexmlConferenceParticipantParams is parameters of GetTexmlConferenceParticipant operation.
type GetTexmlConferenceParticipantParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The ConferenceSid that uniquely identifies a conference.
	ConferenceSid string
	// The CallSid that identifies the call to update.
	CallSid string
}

// GetTexmlConferenceParticipantsParams is parameters of GetTexmlConferenceParticipants operation.
type GetTexmlConferenceParticipantsParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The ConferenceSid that uniquely identifies a conference.
	ConferenceSid string
}

// GetTexmlConferenceRecordingsParams is parameters of GetTexmlConferenceRecordings operation.
type GetTexmlConferenceRecordingsParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The ConferenceSid that uniquely identifies a conference.
	ConferenceSid string
}

// GetTexmlConferencesParams is parameters of GetTexmlConferences operation.
type GetTexmlConferencesParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The number of the page to be displayed, zero-indexed, should be used in conjuction with PageToken.
	Page OptInt
	// The size of the page.
	PageSize OptInt
	// Used to request the next page of results.
	PageToken OptString
	// Filters conferences by their friendly name.
	FriendlyName OptString
	// Filters conferences by status.
	Status OptConferenceStatus
	// Filters conferences by the creation date. Expected format is YYYY-MM-DD. Also accepts inequality
	// operators, e.g. DateCreated>=2023-05-22.
	DateCreated OptString
	// Filters conferences by the time they were last updated. Expected format is YYYY-MM-DD. Also
	// accepts inequality operators, e.g. DateUpdated>=2023-05-22.
	DateUpdated OptString
}

// GetUsageReportSyncParams is parameters of GetUsageReportSync operation.
type GetUsageReportSyncParams struct {
	StartDate       OptDateTime
	EndDate         OptDateTime
	AggregationType GetUsageReportSyncAggregationType
	Profiles        []string
}

// HangupCallParams is parameters of HangupCall operation.
type HangupCallParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// InitiateTexmlCallByAccountParams is parameters of InitiateTexmlCallByAccount operation.
type InitiateTexmlCallByAccountParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
}

// InitiateTexmlCallByApplicationParams is parameters of InitiateTexmlCallByApplication operation.
type InitiateTexmlCallByApplicationParams struct {
	// The ID of the TeXML application used for the call.
	ApplicationID string
}

// LeaveQueueParams is parameters of LeaveQueue operation.
type LeaveQueueParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// ListQueueCallsParams is parameters of ListQueueCalls operation.
type ListQueueCallsParams struct {
	// Uniquely identifies the queue by name.
	QueueName string
	// The page number to load.
	PageNumber OptInt
	// The size of the page.
	PageSize OptInt
}

// ListUsageReportsOptionsParams is parameters of ListUsageReportsOptions operation.
type ListUsageReportsOptionsParams struct {
	// Options (dimensions and metrics) for a given product. If none specified, all products will be
	// returned.
	Product OptString
}

// NoiseSuppressionStartParams is parameters of noiseSuppressionStart operation.
type NoiseSuppressionStartParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// NoiseSuppressionStopParams is parameters of noiseSuppressionStop operation.
type NoiseSuppressionStopParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// PauseCallRecordingParams is parameters of PauseCallRecording operation.
type PauseCallRecordingParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// ReferCallParams is parameters of ReferCall operation.
type ReferCallParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// RejectCallParams is parameters of RejectCall operation.
type RejectCallParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// ReportsCdrUsageReportsSyncGetParams is parameters of GET /reports/cdr_usage_reports/sync operation.
type ReportsCdrUsageReportsSyncGetParams struct {
	StartDate        OptDateTime
	EndDate          OptDateTime
	AggregationType  ReportsCdrUsageReportsSyncGetAggregationType
	ProductBreakdown ReportsCdrUsageReportsSyncGetProductBreakdown
	Connections      []float64
}

// ResumeCallRecordingParams is parameters of ResumeCallRecording operation.
type ResumeCallRecordingParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// RetrieveCallFromQueueParams is parameters of RetrieveCallFromQueue operation.
type RetrieveCallFromQueueParams struct {
	// Uniquely identifies the queue by name.
	QueueName string
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// RetrieveCallStatusParams is parameters of RetrieveCallStatus operation.
type RetrieveCallStatusParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// SendDTMFParams is parameters of SendDTMF operation.
type SendDTMFParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// SpeakCallParams is parameters of SpeakCall operation.
type SpeakCallParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// StartCallForkParams is parameters of StartCallFork operation.
type StartCallForkParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// StartCallPlaybackParams is parameters of StartCallPlayback operation.
type StartCallPlaybackParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// StartCallRecordParams is parameters of StartCallRecord operation.
type StartCallRecordParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// StartCallStreamingParams is parameters of StartCallStreaming operation.
type StartCallStreamingParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// StartCallTranscriptionParams is parameters of StartCallTranscription operation.
type StartCallTranscriptionParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// StartTeXMLCallRecordingParams is parameters of StartTeXMLCallRecording operation.
type StartTeXMLCallRecordingParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The CallSid that identifies the call to update.
	CallSid string
}

// StopCallForkParams is parameters of StopCallFork operation.
type StopCallForkParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// StopCallGatherParams is parameters of StopCallGather operation.
type StopCallGatherParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// StopCallPlaybackParams is parameters of StopCallPlayback operation.
type StopCallPlaybackParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// StopCallRecordingParams is parameters of StopCallRecording operation.
type StopCallRecordingParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// StopCallStreamingParams is parameters of StopCallStreaming operation.
type StopCallStreamingParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// StopCallTranscriptionParams is parameters of StopCallTranscription operation.
type StopCallTranscriptionParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// TransferCallParams is parameters of TransferCall operation.
type TransferCallParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// UpdateClientStateParams is parameters of UpdateClientState operation.
type UpdateClientStateParams struct {
	// Unique identifier and token for controlling the call.
	CallControlID string
}

// UpdateTeXMLCallRecordingParams is parameters of UpdateTeXMLCallRecording operation.
type UpdateTeXMLCallRecordingParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The CallSid that identifies the call to update.
	CallSid string
	// Uniquely identifies the recording by id.
	RecordingSid uuid.UUID
}

// UpdateTexmlApplicationParams is parameters of UpdateTexmlApplication operation.
type UpdateTexmlApplicationParams struct {
	// Identifies the resource.
	ID int64
}

// UpdateTexmlCallParams is parameters of UpdateTexmlCall operation.
type UpdateTexmlCallParams struct {
	// The CallSid that identifies the call to update.
	CallSid string
}

// UpdateTexmlCallByAccountParams is parameters of UpdateTexmlCallByAccount operation.
type UpdateTexmlCallByAccountParams struct {
	// The CallSid that identifies the call to update.
	CallSid string
	// The id of the account the resource belongs to.
	AccountSid string
}

// UpdateTexmlConferenceParams is parameters of UpdateTexmlConference operation.
type UpdateTexmlConferenceParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The ConferenceSid that uniquely identifies a conference.
	ConferenceSid string
}

// UpdateTexmlConferenceParticipantParams is parameters of UpdateTexmlConferenceParticipant operation.
type UpdateTexmlConferenceParticipantParams struct {
	// The id of the account the resource belongs to.
	AccountSid string
	// The ConferenceSid that uniquely identifies a conference.
	ConferenceSid string
	// The CallSid that identifies the call to update.
	CallSid string
}
