// Code generated by ogen, DO NOT EDIT.

package telnyx

import (
	"io"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"

	ht "github.com/ogen-go/ogen/http"
)

type AccountSid string

// Ref: #/components/schemas/ActiveCall
type ActiveCall struct {
	RecordType ActiveCallRecordType `json:"record_type"`
	// ID that is unique to the call session and can be used to correlate webhook events. Call session is
	// a group of related call legs that logically belong to the same phone call, e.g. an inbound and
	// outbound leg of a transferred call.
	CallSessionID string `json:"call_session_id"`
	// ID that is unique to the call and can be used to correlate webhook events.
	CallLegID string `json:"call_leg_id"`
	// Unique identifier and token for controlling the call.
	CallControlID string `json:"call_control_id"`
	// State received from a command.
	ClientState string `json:"client_state"`
	// Indicates the duration of the call in seconds.
	CallDuration int `json:"call_duration"`
}

// GetRecordType returns the value of RecordType.
func (s *ActiveCall) GetRecordType() ActiveCallRecordType {
	return s.RecordType
}

// GetCallSessionID returns the value of CallSessionID.
func (s *ActiveCall) GetCallSessionID() string {
	return s.CallSessionID
}

// GetCallLegID returns the value of CallLegID.
func (s *ActiveCall) GetCallLegID() string {
	return s.CallLegID
}

// GetCallControlID returns the value of CallControlID.
func (s *ActiveCall) GetCallControlID() string {
	return s.CallControlID
}

// GetClientState returns the value of ClientState.
func (s *ActiveCall) GetClientState() string {
	return s.ClientState
}

// GetCallDuration returns the value of CallDuration.
func (s *ActiveCall) GetCallDuration() int {
	return s.CallDuration
}

// SetRecordType sets the value of RecordType.
func (s *ActiveCall) SetRecordType(val ActiveCallRecordType) {
	s.RecordType = val
}

// SetCallSessionID sets the value of CallSessionID.
func (s *ActiveCall) SetCallSessionID(val string) {
	s.CallSessionID = val
}

// SetCallLegID sets the value of CallLegID.
func (s *ActiveCall) SetCallLegID(val string) {
	s.CallLegID = val
}

// SetCallControlID sets the value of CallControlID.
func (s *ActiveCall) SetCallControlID(val string) {
	s.CallControlID = val
}

// SetClientState sets the value of ClientState.
func (s *ActiveCall) SetClientState(val string) {
	s.ClientState = val
}

// SetCallDuration sets the value of CallDuration.
func (s *ActiveCall) SetCallDuration(val int) {
	s.CallDuration = val
}

type ActiveCallRecordType string

const (
	ActiveCallRecordTypeCall ActiveCallRecordType = "call"
)

// AllValues returns all ActiveCallRecordType values.
func (ActiveCallRecordType) AllValues() []ActiveCallRecordType {
	return []ActiveCallRecordType{
		ActiveCallRecordTypeCall,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ActiveCallRecordType) MarshalText() ([]byte, error) {
	switch s {
	case ActiveCallRecordTypeCall:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ActiveCallRecordType) UnmarshalText(data []byte) error {
	switch ActiveCallRecordType(data) {
	case ActiveCallRecordTypeCall:
		*s = ActiveCallRecordTypeCall
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ActiveCallsResponse struct {
	Data []ActiveCall            `json:"data"`
	Meta OptCursorPaginationMeta `json:"meta"`
}

// GetData returns the value of Data.
func (s *ActiveCallsResponse) GetData() []ActiveCall {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ActiveCallsResponse) GetMeta() OptCursorPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ActiveCallsResponse) SetData(val []ActiveCall) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ActiveCallsResponse) SetMeta(val OptCursorPaginationMeta) {
	s.Meta = val
}

func (*ActiveCallsResponse) listConnectionActiveCallsRes() {}

// `Latency` directs Telnyx to route media through the site with the lowest round-trip time to the
// user's connection. Telnyx calculates this time using ICMP ping messages. This can be disabled by
// specifying a site to handle all media.
// Ref: #/components/schemas/AnchorsiteOverride
type AnchorsiteOverride string

const (
	AnchorsiteOverrideLatency              AnchorsiteOverride = "Latency"
	AnchorsiteOverrideChicagoIL            AnchorsiteOverride = "Chicago, IL"
	AnchorsiteOverrideAshburnVA            AnchorsiteOverride = "Ashburn, VA"
	AnchorsiteOverrideSanJoseCA            AnchorsiteOverride = "San Jose, CA"
	AnchorsiteOverrideSydneyAustralia      AnchorsiteOverride = "Sydney, Australia"
	AnchorsiteOverrideAmsterdamNetherlands AnchorsiteOverride = "Amsterdam, Netherlands"
	AnchorsiteOverrideLondonUK             AnchorsiteOverride = "London, UK"
	AnchorsiteOverrideTorontoCanada        AnchorsiteOverride = "Toronto, Canada"
	AnchorsiteOverrideVancouverCanada      AnchorsiteOverride = "Vancouver, Canada"
	AnchorsiteOverrideFrankfurtGermany     AnchorsiteOverride = "Frankfurt, Germany"
)

// AllValues returns all AnchorsiteOverride values.
func (AnchorsiteOverride) AllValues() []AnchorsiteOverride {
	return []AnchorsiteOverride{
		AnchorsiteOverrideLatency,
		AnchorsiteOverrideChicagoIL,
		AnchorsiteOverrideAshburnVA,
		AnchorsiteOverrideSanJoseCA,
		AnchorsiteOverrideSydneyAustralia,
		AnchorsiteOverrideAmsterdamNetherlands,
		AnchorsiteOverrideLondonUK,
		AnchorsiteOverrideTorontoCanada,
		AnchorsiteOverrideVancouverCanada,
		AnchorsiteOverrideFrankfurtGermany,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AnchorsiteOverride) MarshalText() ([]byte, error) {
	switch s {
	case AnchorsiteOverrideLatency:
		return []byte(s), nil
	case AnchorsiteOverrideChicagoIL:
		return []byte(s), nil
	case AnchorsiteOverrideAshburnVA:
		return []byte(s), nil
	case AnchorsiteOverrideSanJoseCA:
		return []byte(s), nil
	case AnchorsiteOverrideSydneyAustralia:
		return []byte(s), nil
	case AnchorsiteOverrideAmsterdamNetherlands:
		return []byte(s), nil
	case AnchorsiteOverrideLondonUK:
		return []byte(s), nil
	case AnchorsiteOverrideTorontoCanada:
		return []byte(s), nil
	case AnchorsiteOverrideVancouverCanada:
		return []byte(s), nil
	case AnchorsiteOverrideFrankfurtGermany:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AnchorsiteOverride) UnmarshalText(data []byte) error {
	switch AnchorsiteOverride(data) {
	case AnchorsiteOverrideLatency:
		*s = AnchorsiteOverrideLatency
		return nil
	case AnchorsiteOverrideChicagoIL:
		*s = AnchorsiteOverrideChicagoIL
		return nil
	case AnchorsiteOverrideAshburnVA:
		*s = AnchorsiteOverrideAshburnVA
		return nil
	case AnchorsiteOverrideSanJoseCA:
		*s = AnchorsiteOverrideSanJoseCA
		return nil
	case AnchorsiteOverrideSydneyAustralia:
		*s = AnchorsiteOverrideSydneyAustralia
		return nil
	case AnchorsiteOverrideAmsterdamNetherlands:
		*s = AnchorsiteOverrideAmsterdamNetherlands
		return nil
	case AnchorsiteOverrideLondonUK:
		*s = AnchorsiteOverrideLondonUK
		return nil
	case AnchorsiteOverrideTorontoCanada:
		*s = AnchorsiteOverrideTorontoCanada
		return nil
	case AnchorsiteOverrideVancouverCanada:
		*s = AnchorsiteOverrideVancouverCanada
		return nil
	case AnchorsiteOverrideFrankfurtGermany:
		*s = AnchorsiteOverrideFrankfurtGermany
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AnswerRequest
type AnswerRequest struct {
	// Use this field to set the Billing Group ID for the call. Must be a valid and existing Billing
	// Group ID.
	BillingGroupID OptUUID `json:"billing_group_id"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
	// Custom headers to be added to the SIP INVITE response.
	CustomHeaders []CustomSipHeader `json:"custom_headers"`
	// The list of comma-separated codecs in a preferred order for the forked media to be received.
	PreferredCodecs OptAnswerRequestPreferredCodecs `json:"preferred_codecs"`
	// SIP headers to be added to the SIP INVITE response. Currently only User-to-User header is
	// supported.
	SipHeaders         []SipHeader           `json:"sip_headers"`
	SoundModifications OptSoundModifications `json:"sound_modifications"`
	// The destination WebSocket address where the stream is going to be delivered.
	StreamURL OptString `json:"stream_url"`
	// Specifies which track should be streamed.
	StreamTrack OptAnswerRequestStreamTrack `json:"stream_track"`
	// Generate silence RTP packets when no transmission available.
	SendSilenceWhenIdle OptBool `json:"send_silence_when_idle"`
	// Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.
	WebhookURL OptString `json:"webhook_url"`
	// HTTP request type used for `webhook_url`.
	WebhookURLMethod OptAnswerRequestWebhookURLMethod `json:"webhook_url_method"`
}

// GetBillingGroupID returns the value of BillingGroupID.
func (s *AnswerRequest) GetBillingGroupID() OptUUID {
	return s.BillingGroupID
}

// GetClientState returns the value of ClientState.
func (s *AnswerRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *AnswerRequest) GetCommandID() OptString {
	return s.CommandID
}

// GetCustomHeaders returns the value of CustomHeaders.
func (s *AnswerRequest) GetCustomHeaders() []CustomSipHeader {
	return s.CustomHeaders
}

// GetPreferredCodecs returns the value of PreferredCodecs.
func (s *AnswerRequest) GetPreferredCodecs() OptAnswerRequestPreferredCodecs {
	return s.PreferredCodecs
}

// GetSipHeaders returns the value of SipHeaders.
func (s *AnswerRequest) GetSipHeaders() []SipHeader {
	return s.SipHeaders
}

// GetSoundModifications returns the value of SoundModifications.
func (s *AnswerRequest) GetSoundModifications() OptSoundModifications {
	return s.SoundModifications
}

// GetStreamURL returns the value of StreamURL.
func (s *AnswerRequest) GetStreamURL() OptString {
	return s.StreamURL
}

// GetStreamTrack returns the value of StreamTrack.
func (s *AnswerRequest) GetStreamTrack() OptAnswerRequestStreamTrack {
	return s.StreamTrack
}

// GetSendSilenceWhenIdle returns the value of SendSilenceWhenIdle.
func (s *AnswerRequest) GetSendSilenceWhenIdle() OptBool {
	return s.SendSilenceWhenIdle
}

// GetWebhookURL returns the value of WebhookURL.
func (s *AnswerRequest) GetWebhookURL() OptString {
	return s.WebhookURL
}

// GetWebhookURLMethod returns the value of WebhookURLMethod.
func (s *AnswerRequest) GetWebhookURLMethod() OptAnswerRequestWebhookURLMethod {
	return s.WebhookURLMethod
}

// SetBillingGroupID sets the value of BillingGroupID.
func (s *AnswerRequest) SetBillingGroupID(val OptUUID) {
	s.BillingGroupID = val
}

// SetClientState sets the value of ClientState.
func (s *AnswerRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *AnswerRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// SetCustomHeaders sets the value of CustomHeaders.
func (s *AnswerRequest) SetCustomHeaders(val []CustomSipHeader) {
	s.CustomHeaders = val
}

// SetPreferredCodecs sets the value of PreferredCodecs.
func (s *AnswerRequest) SetPreferredCodecs(val OptAnswerRequestPreferredCodecs) {
	s.PreferredCodecs = val
}

// SetSipHeaders sets the value of SipHeaders.
func (s *AnswerRequest) SetSipHeaders(val []SipHeader) {
	s.SipHeaders = val
}

// SetSoundModifications sets the value of SoundModifications.
func (s *AnswerRequest) SetSoundModifications(val OptSoundModifications) {
	s.SoundModifications = val
}

// SetStreamURL sets the value of StreamURL.
func (s *AnswerRequest) SetStreamURL(val OptString) {
	s.StreamURL = val
}

// SetStreamTrack sets the value of StreamTrack.
func (s *AnswerRequest) SetStreamTrack(val OptAnswerRequestStreamTrack) {
	s.StreamTrack = val
}

// SetSendSilenceWhenIdle sets the value of SendSilenceWhenIdle.
func (s *AnswerRequest) SetSendSilenceWhenIdle(val OptBool) {
	s.SendSilenceWhenIdle = val
}

// SetWebhookURL sets the value of WebhookURL.
func (s *AnswerRequest) SetWebhookURL(val OptString) {
	s.WebhookURL = val
}

// SetWebhookURLMethod sets the value of WebhookURLMethod.
func (s *AnswerRequest) SetWebhookURLMethod(val OptAnswerRequestWebhookURLMethod) {
	s.WebhookURLMethod = val
}

// The list of comma-separated codecs in a preferred order for the forked media to be received.
type AnswerRequestPreferredCodecs string

const (
	AnswerRequestPreferredCodecsG722PCMUPCMAG729OPUSVP8H264 AnswerRequestPreferredCodecs = "G722,PCMU,PCMA,G729,OPUS,VP8,H264"
)

// AllValues returns all AnswerRequestPreferredCodecs values.
func (AnswerRequestPreferredCodecs) AllValues() []AnswerRequestPreferredCodecs {
	return []AnswerRequestPreferredCodecs{
		AnswerRequestPreferredCodecsG722PCMUPCMAG729OPUSVP8H264,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AnswerRequestPreferredCodecs) MarshalText() ([]byte, error) {
	switch s {
	case AnswerRequestPreferredCodecsG722PCMUPCMAG729OPUSVP8H264:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AnswerRequestPreferredCodecs) UnmarshalText(data []byte) error {
	switch AnswerRequestPreferredCodecs(data) {
	case AnswerRequestPreferredCodecsG722PCMUPCMAG729OPUSVP8H264:
		*s = AnswerRequestPreferredCodecsG722PCMUPCMAG729OPUSVP8H264
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Specifies which track should be streamed.
type AnswerRequestStreamTrack string

const (
	AnswerRequestStreamTrackInboundTrack  AnswerRequestStreamTrack = "inbound_track"
	AnswerRequestStreamTrackOutboundTrack AnswerRequestStreamTrack = "outbound_track"
	AnswerRequestStreamTrackBothTracks    AnswerRequestStreamTrack = "both_tracks"
)

// AllValues returns all AnswerRequestStreamTrack values.
func (AnswerRequestStreamTrack) AllValues() []AnswerRequestStreamTrack {
	return []AnswerRequestStreamTrack{
		AnswerRequestStreamTrackInboundTrack,
		AnswerRequestStreamTrackOutboundTrack,
		AnswerRequestStreamTrackBothTracks,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AnswerRequestStreamTrack) MarshalText() ([]byte, error) {
	switch s {
	case AnswerRequestStreamTrackInboundTrack:
		return []byte(s), nil
	case AnswerRequestStreamTrackOutboundTrack:
		return []byte(s), nil
	case AnswerRequestStreamTrackBothTracks:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AnswerRequestStreamTrack) UnmarshalText(data []byte) error {
	switch AnswerRequestStreamTrack(data) {
	case AnswerRequestStreamTrackInboundTrack:
		*s = AnswerRequestStreamTrackInboundTrack
		return nil
	case AnswerRequestStreamTrackOutboundTrack:
		*s = AnswerRequestStreamTrackOutboundTrack
		return nil
	case AnswerRequestStreamTrackBothTracks:
		*s = AnswerRequestStreamTrackBothTracks
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request type used for `webhook_url`.
type AnswerRequestWebhookURLMethod string

const (
	AnswerRequestWebhookURLMethodPOST AnswerRequestWebhookURLMethod = "POST"
	AnswerRequestWebhookURLMethodGET  AnswerRequestWebhookURLMethod = "GET"
)

// AllValues returns all AnswerRequestWebhookURLMethod values.
func (AnswerRequestWebhookURLMethod) AllValues() []AnswerRequestWebhookURLMethod {
	return []AnswerRequestWebhookURLMethod{
		AnswerRequestWebhookURLMethodPOST,
		AnswerRequestWebhookURLMethodGET,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AnswerRequestWebhookURLMethod) MarshalText() ([]byte, error) {
	switch s {
	case AnswerRequestWebhookURLMethodPOST:
		return []byte(s), nil
	case AnswerRequestWebhookURLMethodGET:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AnswerRequestWebhookURLMethod) UnmarshalText(data []byte) error {
	switch AnswerRequestWebhookURLMethod(data) {
	case AnswerRequestWebhookURLMethodPOST:
		*s = AnswerRequestWebhookURLMethodPOST
		return nil
	case AnswerRequestWebhookURLMethodGET:
		*s = AnswerRequestWebhookURLMethodGET
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ApplicationName string

// Webhook delivery attempt details.
// Ref: #/components/schemas/attempt
type Attempt struct {
	Status OptAttemptStatus `json:"status"`
	// ISO 8601 timestamp indicating when the attempt was initiated.
	StartedAt OptDateTime `json:"started_at"`
	// ISO 8601 timestamp indicating when the attempt has finished.
	FinishedAt OptDateTime `json:"finished_at"`
	HTTP       OptHTTP     `json:"http"`
	// Webhook delivery error codes.
	Errors []int `json:"errors"`
}

// GetStatus returns the value of Status.
func (s *Attempt) GetStatus() OptAttemptStatus {
	return s.Status
}

// GetStartedAt returns the value of StartedAt.
func (s *Attempt) GetStartedAt() OptDateTime {
	return s.StartedAt
}

// GetFinishedAt returns the value of FinishedAt.
func (s *Attempt) GetFinishedAt() OptDateTime {
	return s.FinishedAt
}

// GetHTTP returns the value of HTTP.
func (s *Attempt) GetHTTP() OptHTTP {
	return s.HTTP
}

// GetErrors returns the value of Errors.
func (s *Attempt) GetErrors() []int {
	return s.Errors
}

// SetStatus sets the value of Status.
func (s *Attempt) SetStatus(val OptAttemptStatus) {
	s.Status = val
}

// SetStartedAt sets the value of StartedAt.
func (s *Attempt) SetStartedAt(val OptDateTime) {
	s.StartedAt = val
}

// SetFinishedAt sets the value of FinishedAt.
func (s *Attempt) SetFinishedAt(val OptDateTime) {
	s.FinishedAt = val
}

// SetHTTP sets the value of HTTP.
func (s *Attempt) SetHTTP(val OptHTTP) {
	s.HTTP = val
}

// SetErrors sets the value of Errors.
func (s *Attempt) SetErrors(val []int) {
	s.Errors = val
}

type AttemptStatus string

const (
	AttemptStatusDelivered AttemptStatus = "delivered"
	AttemptStatusFailed    AttemptStatus = "failed"
)

// AllValues returns all AttemptStatus values.
func (AttemptStatus) AllValues() []AttemptStatus {
	return []AttemptStatus{
		AttemptStatusDelivered,
		AttemptStatusFailed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AttemptStatus) MarshalText() ([]byte, error) {
	switch s {
	case AttemptStatusDelivered:
		return []byte(s), nil
	case AttemptStatusFailed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AttemptStatus) UnmarshalText(data []byte) error {
	switch AttemptStatus(data) {
	case AttemptStatusDelivered:
		*s = AttemptStatusDelivered
		return nil
	case AttemptStatusFailed:
		*s = AttemptStatusFailed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AudioTranscriptionRequest
type AudioTranscriptionRequestMultipart struct {
	// The audio file object to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg,
	//  wav, or webm. File uploads are limited to 100 MB.
	File ht.MultipartFile `json:"file"`
	// ID of the model to use. Only `distil-whisper/distil-large-v2` is currently available.
	Model AudioTranscriptionRequestMultipartModel `json:"model"`
	// The format of the transcript output. Use `verbose_json` to take advantage of timestamps.
	ResponseFormat OptAudioTranscriptionRequestMultipartResponseFormat `json:"response_format"`
	// The timestamp granularities to populate for this transcription. `response_format` must be set
	// verbose_json to use timestamp granularities. Currently `segment` is supported.
	TimestampGranularities OptAudioTranscriptionRequestMultipartTimestampGranularities `json:"timestamp_granularities[]"`
}

// GetFile returns the value of File.
func (s *AudioTranscriptionRequestMultipart) GetFile() ht.MultipartFile {
	return s.File
}

// GetModel returns the value of Model.
func (s *AudioTranscriptionRequestMultipart) GetModel() AudioTranscriptionRequestMultipartModel {
	return s.Model
}

// GetResponseFormat returns the value of ResponseFormat.
func (s *AudioTranscriptionRequestMultipart) GetResponseFormat() OptAudioTranscriptionRequestMultipartResponseFormat {
	return s.ResponseFormat
}

// GetTimestampGranularities returns the value of TimestampGranularities.
func (s *AudioTranscriptionRequestMultipart) GetTimestampGranularities() OptAudioTranscriptionRequestMultipartTimestampGranularities {
	return s.TimestampGranularities
}

// SetFile sets the value of File.
func (s *AudioTranscriptionRequestMultipart) SetFile(val ht.MultipartFile) {
	s.File = val
}

// SetModel sets the value of Model.
func (s *AudioTranscriptionRequestMultipart) SetModel(val AudioTranscriptionRequestMultipartModel) {
	s.Model = val
}

// SetResponseFormat sets the value of ResponseFormat.
func (s *AudioTranscriptionRequestMultipart) SetResponseFormat(val OptAudioTranscriptionRequestMultipartResponseFormat) {
	s.ResponseFormat = val
}

// SetTimestampGranularities sets the value of TimestampGranularities.
func (s *AudioTranscriptionRequestMultipart) SetTimestampGranularities(val OptAudioTranscriptionRequestMultipartTimestampGranularities) {
	s.TimestampGranularities = val
}

// ID of the model to use. Only `distil-whisper/distil-large-v2` is currently available.
type AudioTranscriptionRequestMultipartModel string

const (
	AudioTranscriptionRequestMultipartModelDistilWhisperDistilLargeV2 AudioTranscriptionRequestMultipartModel = "distil-whisper/distil-large-v2"
)

// AllValues returns all AudioTranscriptionRequestMultipartModel values.
func (AudioTranscriptionRequestMultipartModel) AllValues() []AudioTranscriptionRequestMultipartModel {
	return []AudioTranscriptionRequestMultipartModel{
		AudioTranscriptionRequestMultipartModelDistilWhisperDistilLargeV2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AudioTranscriptionRequestMultipartModel) MarshalText() ([]byte, error) {
	switch s {
	case AudioTranscriptionRequestMultipartModelDistilWhisperDistilLargeV2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AudioTranscriptionRequestMultipartModel) UnmarshalText(data []byte) error {
	switch AudioTranscriptionRequestMultipartModel(data) {
	case AudioTranscriptionRequestMultipartModelDistilWhisperDistilLargeV2:
		*s = AudioTranscriptionRequestMultipartModelDistilWhisperDistilLargeV2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The format of the transcript output. Use `verbose_json` to take advantage of timestamps.
type AudioTranscriptionRequestMultipartResponseFormat string

const (
	AudioTranscriptionRequestMultipartResponseFormatJSON        AudioTranscriptionRequestMultipartResponseFormat = "json"
	AudioTranscriptionRequestMultipartResponseFormatVerboseJSON AudioTranscriptionRequestMultipartResponseFormat = "verbose_json"
)

// AllValues returns all AudioTranscriptionRequestMultipartResponseFormat values.
func (AudioTranscriptionRequestMultipartResponseFormat) AllValues() []AudioTranscriptionRequestMultipartResponseFormat {
	return []AudioTranscriptionRequestMultipartResponseFormat{
		AudioTranscriptionRequestMultipartResponseFormatJSON,
		AudioTranscriptionRequestMultipartResponseFormatVerboseJSON,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AudioTranscriptionRequestMultipartResponseFormat) MarshalText() ([]byte, error) {
	switch s {
	case AudioTranscriptionRequestMultipartResponseFormatJSON:
		return []byte(s), nil
	case AudioTranscriptionRequestMultipartResponseFormatVerboseJSON:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AudioTranscriptionRequestMultipartResponseFormat) UnmarshalText(data []byte) error {
	switch AudioTranscriptionRequestMultipartResponseFormat(data) {
	case AudioTranscriptionRequestMultipartResponseFormatJSON:
		*s = AudioTranscriptionRequestMultipartResponseFormatJSON
		return nil
	case AudioTranscriptionRequestMultipartResponseFormatVerboseJSON:
		*s = AudioTranscriptionRequestMultipartResponseFormatVerboseJSON
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The timestamp granularities to populate for this transcription. `response_format` must be set
// verbose_json to use timestamp granularities. Currently `segment` is supported.
type AudioTranscriptionRequestMultipartTimestampGranularities string

const (
	AudioTranscriptionRequestMultipartTimestampGranularitiesSegment AudioTranscriptionRequestMultipartTimestampGranularities = "segment"
)

// AllValues returns all AudioTranscriptionRequestMultipartTimestampGranularities values.
func (AudioTranscriptionRequestMultipartTimestampGranularities) AllValues() []AudioTranscriptionRequestMultipartTimestampGranularities {
	return []AudioTranscriptionRequestMultipartTimestampGranularities{
		AudioTranscriptionRequestMultipartTimestampGranularitiesSegment,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AudioTranscriptionRequestMultipartTimestampGranularities) MarshalText() ([]byte, error) {
	switch s {
	case AudioTranscriptionRequestMultipartTimestampGranularitiesSegment:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AudioTranscriptionRequestMultipartTimestampGranularities) UnmarshalText(data []byte) error {
	switch AudioTranscriptionRequestMultipartTimestampGranularities(data) {
	case AudioTranscriptionRequestMultipartTimestampGranularitiesSegment:
		*s = AudioTranscriptionRequestMultipartTimestampGranularitiesSegment
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AudioTranscriptionResponse
type AudioTranscriptionResponse struct {
	// The transcribed text for the audio file.
	Text string `json:"text"`
	// The duration of the audio file in seconds. This is only included if `response_format` is set to
	// `verbose_json`.
	Duration OptFloat64 `json:"duration"`
	// Segments of the transcribed text and their corresponding details. This is only included if
	// `response_format` is set to `verbose_json`.
	Segments []AudioTranscriptionResponseSegments `json:"segments"`
}

// GetText returns the value of Text.
func (s *AudioTranscriptionResponse) GetText() string {
	return s.Text
}

// GetDuration returns the value of Duration.
func (s *AudioTranscriptionResponse) GetDuration() OptFloat64 {
	return s.Duration
}

// GetSegments returns the value of Segments.
func (s *AudioTranscriptionResponse) GetSegments() []AudioTranscriptionResponseSegments {
	return s.Segments
}

// SetText sets the value of Text.
func (s *AudioTranscriptionResponse) SetText(val string) {
	s.Text = val
}

// SetDuration sets the value of Duration.
func (s *AudioTranscriptionResponse) SetDuration(val OptFloat64) {
	s.Duration = val
}

// SetSegments sets the value of Segments.
func (s *AudioTranscriptionResponse) SetSegments(val []AudioTranscriptionResponseSegments) {
	s.Segments = val
}

func (*AudioTranscriptionResponse) audioPublicAudioTranscriptionsPostRes() {}

// Ref: #/components/schemas/AudioTranscriptionResponseSegments
type AudioTranscriptionResponseSegments struct {
	// Unique identifier of the segment.
	ID float64 `json:"id"`
	// Start time of the segment in seconds.
	Start float64 `json:"start"`
	// End time of the segment in seconds.
	End float64 `json:"end"`
	// Text content of the segment.
	Text string `json:"text"`
}

// GetID returns the value of ID.
func (s *AudioTranscriptionResponseSegments) GetID() float64 {
	return s.ID
}

// GetStart returns the value of Start.
func (s *AudioTranscriptionResponseSegments) GetStart() float64 {
	return s.Start
}

// GetEnd returns the value of End.
func (s *AudioTranscriptionResponseSegments) GetEnd() float64 {
	return s.End
}

// GetText returns the value of Text.
func (s *AudioTranscriptionResponseSegments) GetText() string {
	return s.Text
}

// SetID sets the value of ID.
func (s *AudioTranscriptionResponseSegments) SetID(val float64) {
	s.ID = val
}

// SetStart sets the value of Start.
func (s *AudioTranscriptionResponseSegments) SetStart(val float64) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *AudioTranscriptionResponseSegments) SetEnd(val float64) {
	s.End = val
}

// SetText sets the value of Text.
func (s *AudioTranscriptionResponseSegments) SetText(val string) {
	s.Text = val
}

type AwsAccessKeyId string

type AwsSecretAccessKey string

type AzureAccountKey string

type AzureAccountName string

// Ref: #/components/schemas/AzureConfigurationData
type AzureConfigurationData struct {
	Bucket      OptBucket           `json:"bucket"`
	AccountName OptAzureAccountName `json:"account_name"`
	AccountKey  OptAzureAccountKey  `json:"account_key"`
}

// GetBucket returns the value of Bucket.
func (s *AzureConfigurationData) GetBucket() OptBucket {
	return s.Bucket
}

// GetAccountName returns the value of AccountName.
func (s *AzureConfigurationData) GetAccountName() OptAzureAccountName {
	return s.AccountName
}

// GetAccountKey returns the value of AccountKey.
func (s *AzureConfigurationData) GetAccountKey() OptAzureAccountKey {
	return s.AccountKey
}

// SetBucket sets the value of Bucket.
func (s *AzureConfigurationData) SetBucket(val OptBucket) {
	s.Bucket = val
}

// SetAccountName sets the value of AccountName.
func (s *AzureConfigurationData) SetAccountName(val OptAzureAccountName) {
	s.AccountName = val
}

// SetAccountKey sets the value of AccountKey.
func (s *AzureConfigurationData) SetAccountKey(val OptAzureAccountKey) {
	s.AccountKey = val
}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// Ref: #/components/schemas/BridgeRequest
type BridgeRequest struct {
	// The Call Control ID of the call you want to bridge with, can't be used together with queue
	// parameter or video_room_id parameter.
	CallControlID string `json:"call_control_id"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
	// The name of the queue you want to bridge with, can't be used together with call_control_id
	// parameter or video_room_id parameter. Bridging with a queue means bridging with the first call in
	// the queue. The call will always be removed from the queue regardless of whether bridging succeeds.
	// Returns an error when the queue is empty.
	Queue OptString `json:"queue"`
	// The ID of the video room you want to bridge with, can't be used together with call_control_id
	// parameter or queue parameter.
	VideoRoomID OptUUID `json:"video_room_id"`
	// The additional parameter that will be passed to the video conference. It is a text field and the
	// user can decide how to use it. For example, you can set the participant name or pass JSON text. It
	// can be used only with video_room_id parameter.
	VideoRoomContext OptString `json:"video_room_context"`
	// Specifies behavior after the bridge ends (i.e. the opposite leg either hangs up or is transferred).
	//  If supplied with the value `self`, the current leg will be parked after unbridge. If not set, the
	// default behavior is to hang up the leg.
	ParkAfterUnbridge OptString `json:"park_after_unbridge"`
	// Specifies whether to play a ringtone if the call you want to bridge with has not yet been answered.
	PlayRingtone OptBool `json:"play_ringtone"`
}

// GetCallControlID returns the value of CallControlID.
func (s *BridgeRequest) GetCallControlID() string {
	return s.CallControlID
}

// GetClientState returns the value of ClientState.
func (s *BridgeRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *BridgeRequest) GetCommandID() OptString {
	return s.CommandID
}

// GetQueue returns the value of Queue.
func (s *BridgeRequest) GetQueue() OptString {
	return s.Queue
}

// GetVideoRoomID returns the value of VideoRoomID.
func (s *BridgeRequest) GetVideoRoomID() OptUUID {
	return s.VideoRoomID
}

// GetVideoRoomContext returns the value of VideoRoomContext.
func (s *BridgeRequest) GetVideoRoomContext() OptString {
	return s.VideoRoomContext
}

// GetParkAfterUnbridge returns the value of ParkAfterUnbridge.
func (s *BridgeRequest) GetParkAfterUnbridge() OptString {
	return s.ParkAfterUnbridge
}

// GetPlayRingtone returns the value of PlayRingtone.
func (s *BridgeRequest) GetPlayRingtone() OptBool {
	return s.PlayRingtone
}

// SetCallControlID sets the value of CallControlID.
func (s *BridgeRequest) SetCallControlID(val string) {
	s.CallControlID = val
}

// SetClientState sets the value of ClientState.
func (s *BridgeRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *BridgeRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// SetQueue sets the value of Queue.
func (s *BridgeRequest) SetQueue(val OptString) {
	s.Queue = val
}

// SetVideoRoomID sets the value of VideoRoomID.
func (s *BridgeRequest) SetVideoRoomID(val OptUUID) {
	s.VideoRoomID = val
}

// SetVideoRoomContext sets the value of VideoRoomContext.
func (s *BridgeRequest) SetVideoRoomContext(val OptString) {
	s.VideoRoomContext = val
}

// SetParkAfterUnbridge sets the value of ParkAfterUnbridge.
func (s *BridgeRequest) SetParkAfterUnbridge(val OptString) {
	s.ParkAfterUnbridge = val
}

// SetPlayRingtone sets the value of PlayRingtone.
func (s *BridgeRequest) SetPlayRingtone(val OptBool) {
	s.PlayRingtone = val
}

type Bucket string

type BulkCredentialActionAction string

const (
	BulkCredentialActionActionActivate   BulkCredentialActionAction = "activate"
	BulkCredentialActionActionDeactivate BulkCredentialActionAction = "deactivate"
)

// AllValues returns all BulkCredentialActionAction values.
func (BulkCredentialActionAction) AllValues() []BulkCredentialActionAction {
	return []BulkCredentialActionAction{
		BulkCredentialActionActionActivate,
		BulkCredentialActionActionDeactivate,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BulkCredentialActionAction) MarshalText() ([]byte, error) {
	switch s {
	case BulkCredentialActionActionActivate:
		return []byte(s), nil
	case BulkCredentialActionActionDeactivate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BulkCredentialActionAction) UnmarshalText(data []byte) error {
	switch BulkCredentialActionAction(data) {
	case BulkCredentialActionActionActivate:
		*s = BulkCredentialActionActionActivate
		return nil
	case BulkCredentialActionActionDeactivate:
		*s = BulkCredentialActionActionDeactivate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// BulkCredentialActionNotFound is response for BulkCredentialAction operation.
type BulkCredentialActionNotFound struct{}

func (*BulkCredentialActionNotFound) bulkCredentialActionRes() {}

// BulkCredentialActionUnauthorized is response for BulkCredentialAction operation.
type BulkCredentialActionUnauthorized struct{}

func (*BulkCredentialActionUnauthorized) bulkCredentialActionRes() {}

// BulkCredentialActionUnprocessableEntity is response for BulkCredentialAction operation.
type BulkCredentialActionUnprocessableEntity struct{}

func (*BulkCredentialActionUnprocessableEntity) bulkCredentialActionRes() {}

// Ref: #/components/schemas/BulkCredentialRequest
type BulkCredentialRequest struct {
	// A default name for all credentials.
	Name OptString `json:"name"`
	// Tags a credential for bulk operations. A single tag can hold at maximum 1000 credentials.
	Tag string `json:"tag"`
	// Amount of credentials to be created. A single tag can hold at maximum 1000 credentials.
	Amount OptInt `json:"amount"`
	// Identifies the connection this credential is associated with.
	ConnectionID string `json:"connection_id"`
}

// GetName returns the value of Name.
func (s *BulkCredentialRequest) GetName() OptString {
	return s.Name
}

// GetTag returns the value of Tag.
func (s *BulkCredentialRequest) GetTag() string {
	return s.Tag
}

// GetAmount returns the value of Amount.
func (s *BulkCredentialRequest) GetAmount() OptInt {
	return s.Amount
}

// GetConnectionID returns the value of ConnectionID.
func (s *BulkCredentialRequest) GetConnectionID() string {
	return s.ConnectionID
}

// SetName sets the value of Name.
func (s *BulkCredentialRequest) SetName(val OptString) {
	s.Name = val
}

// SetTag sets the value of Tag.
func (s *BulkCredentialRequest) SetTag(val string) {
	s.Tag = val
}

// SetAmount sets the value of Amount.
func (s *BulkCredentialRequest) SetAmount(val OptInt) {
	s.Amount = val
}

// SetConnectionID sets the value of ConnectionID.
func (s *BulkCredentialRequest) SetConnectionID(val string) {
	s.ConnectionID = val
}

type BulkCredentialResponse struct {
	Data OptBulkCredentialResponseData `json:"data"`
}

// GetData returns the value of Data.
func (s *BulkCredentialResponse) GetData() OptBulkCredentialResponseData {
	return s.Data
}

// SetData sets the value of Data.
func (s *BulkCredentialResponse) SetData(val OptBulkCredentialResponseData) {
	s.Data = val
}

func (*BulkCredentialResponse) bulkCredentialActionRes()           {}
func (*BulkCredentialResponse) createBulkTelephonyCredentialsRes() {}
func (*BulkCredentialResponse) deleteTelephonyCredentialsRes()     {}
func (*BulkCredentialResponse) updateBulkTelephonyCredentialRes()  {}

type BulkCredentialResponseData struct {
	// Amount of credentials affected.
	Credentials OptInt `json:"credentials"`
}

// GetCredentials returns the value of Credentials.
func (s *BulkCredentialResponseData) GetCredentials() OptInt {
	return s.Credentials
}

// SetCredentials sets the value of Credentials.
func (s *BulkCredentialResponseData) SetCredentials(val OptInt) {
	s.Credentials = val
}

type BulkDeleteRoomRecordingsResponse struct {
	Data OptBulkDeleteRoomRecordingsResponseData `json:"data"`
}

// GetData returns the value of Data.
func (s *BulkDeleteRoomRecordingsResponse) GetData() OptBulkDeleteRoomRecordingsResponseData {
	return s.Data
}

// SetData sets the value of Data.
func (s *BulkDeleteRoomRecordingsResponse) SetData(val OptBulkDeleteRoomRecordingsResponseData) {
	s.Data = val
}

func (*BulkDeleteRoomRecordingsResponse) deleteRoomRecordingsRes() {}

type BulkDeleteRoomRecordingsResponseData struct {
	// Amount of room recordings affected.
	RoomRecordings OptInt `json:"room_recordings"`
}

// GetRoomRecordings returns the value of RoomRecordings.
func (s *BulkDeleteRoomRecordingsResponseData) GetRoomRecordings() OptInt {
	return s.RoomRecordings
}

// SetRoomRecordings sets the value of RoomRecordings.
func (s *BulkDeleteRoomRecordingsResponseData) SetRoomRecordings(val OptInt) {
	s.RoomRecordings = val
}

// Ref: #/components/schemas/Call
type Call struct {
	RecordType CallRecordType `json:"record_type"`
	// ID that is unique to the call session and can be used to correlate webhook events. Call session is
	// a group of related call legs that logically belong to the same phone call, e.g. an inbound and
	// outbound leg of a transferred call.
	CallSessionID string `json:"call_session_id"`
	// ID that is unique to the call and can be used to correlate webhook events.
	CallLegID string `json:"call_leg_id"`
	// Unique identifier and token for controlling the call.
	CallControlID string `json:"call_control_id"`
	// Indicates whether the call is alive or not. For Dial command it will always be `false` (dialing is
	// asynchronous).
	IsAlive bool `json:"is_alive"`
	// State received from a command.
	ClientState OptString `json:"client_state"`
	// Indicates the duration of the call in seconds.
	CallDuration OptInt `json:"call_duration"`
}

// GetRecordType returns the value of RecordType.
func (s *Call) GetRecordType() CallRecordType {
	return s.RecordType
}

// GetCallSessionID returns the value of CallSessionID.
func (s *Call) GetCallSessionID() string {
	return s.CallSessionID
}

// GetCallLegID returns the value of CallLegID.
func (s *Call) GetCallLegID() string {
	return s.CallLegID
}

// GetCallControlID returns the value of CallControlID.
func (s *Call) GetCallControlID() string {
	return s.CallControlID
}

// GetIsAlive returns the value of IsAlive.
func (s *Call) GetIsAlive() bool {
	return s.IsAlive
}

// GetClientState returns the value of ClientState.
func (s *Call) GetClientState() OptString {
	return s.ClientState
}

// GetCallDuration returns the value of CallDuration.
func (s *Call) GetCallDuration() OptInt {
	return s.CallDuration
}

// SetRecordType sets the value of RecordType.
func (s *Call) SetRecordType(val CallRecordType) {
	s.RecordType = val
}

// SetCallSessionID sets the value of CallSessionID.
func (s *Call) SetCallSessionID(val string) {
	s.CallSessionID = val
}

// SetCallLegID sets the value of CallLegID.
func (s *Call) SetCallLegID(val string) {
	s.CallLegID = val
}

// SetCallControlID sets the value of CallControlID.
func (s *Call) SetCallControlID(val string) {
	s.CallControlID = val
}

// SetIsAlive sets the value of IsAlive.
func (s *Call) SetIsAlive(val bool) {
	s.IsAlive = val
}

// SetClientState sets the value of ClientState.
func (s *Call) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCallDuration sets the value of CallDuration.
func (s *Call) SetCallDuration(val OptInt) {
	s.CallDuration = val
}

// Ref: #/components/schemas/CallControlApplication
type CallControlApplication struct {
	// Specifies whether the connection can be used.
	Active             OptBool               `json:"active"`
	AnchorsiteOverride OptAnchorsiteOverride `json:"anchorsite_override"`
	// A user-assigned name to help manage the application.
	ApplicationName OptString `json:"application_name"`
	// ISO 8601 formatted date of when the resource was created.
	CreatedAt OptString `json:"created_at"`
	// Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to
	// Telnyx will be accepted in all formats.
	DtmfType OptCallControlApplicationDtmfType `json:"dtmf_type"`
	// Specifies whether calls to phone numbers associated with this connection should hangup after
	// timing out.
	FirstCommandTimeout OptBool `json:"first_command_timeout"`
	// Specifies how many seconds to wait before timing out a dial command.
	FirstCommandTimeoutSecs OptInt                              `json:"first_command_timeout_secs"`
	ID                      OptStringInt64                      `json:"id"`
	Inbound                 OptCallControlApplicationInbound    `json:"inbound"`
	Outbound                OptCallControlApplicationOutbound   `json:"outbound"`
	RecordType              OptCallControlApplicationRecordType `json:"record_type"`
	// ISO 8601 formatted date of when the resource was last updated.
	UpdatedAt OptString `json:"updated_at"`
	// Determines which webhook format will be used, Telnyx API v1 or v2.
	WebhookAPIVersion OptCallControlApplicationWebhookAPIVersion `json:"webhook_api_version"`
	// The failover URL where webhooks related to this connection will be sent if sending to the primary
	// URL fails. Must include a scheme, such as `https`.
	WebhookEventFailoverURL OptNilString `json:"webhook_event_failover_url"`
	// The URL where webhooks related to this connection will be sent. Must include a scheme, such as
	// `https`.
	WebhookEventURL    OptString `json:"webhook_event_url"`
	WebhookTimeoutSecs OptNilInt `json:"webhook_timeout_secs"`
}

// GetActive returns the value of Active.
func (s *CallControlApplication) GetActive() OptBool {
	return s.Active
}

// GetAnchorsiteOverride returns the value of AnchorsiteOverride.
func (s *CallControlApplication) GetAnchorsiteOverride() OptAnchorsiteOverride {
	return s.AnchorsiteOverride
}

// GetApplicationName returns the value of ApplicationName.
func (s *CallControlApplication) GetApplicationName() OptString {
	return s.ApplicationName
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CallControlApplication) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetDtmfType returns the value of DtmfType.
func (s *CallControlApplication) GetDtmfType() OptCallControlApplicationDtmfType {
	return s.DtmfType
}

// GetFirstCommandTimeout returns the value of FirstCommandTimeout.
func (s *CallControlApplication) GetFirstCommandTimeout() OptBool {
	return s.FirstCommandTimeout
}

// GetFirstCommandTimeoutSecs returns the value of FirstCommandTimeoutSecs.
func (s *CallControlApplication) GetFirstCommandTimeoutSecs() OptInt {
	return s.FirstCommandTimeoutSecs
}

// GetID returns the value of ID.
func (s *CallControlApplication) GetID() OptStringInt64 {
	return s.ID
}

// GetInbound returns the value of Inbound.
func (s *CallControlApplication) GetInbound() OptCallControlApplicationInbound {
	return s.Inbound
}

// GetOutbound returns the value of Outbound.
func (s *CallControlApplication) GetOutbound() OptCallControlApplicationOutbound {
	return s.Outbound
}

// GetRecordType returns the value of RecordType.
func (s *CallControlApplication) GetRecordType() OptCallControlApplicationRecordType {
	return s.RecordType
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *CallControlApplication) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetWebhookAPIVersion returns the value of WebhookAPIVersion.
func (s *CallControlApplication) GetWebhookAPIVersion() OptCallControlApplicationWebhookAPIVersion {
	return s.WebhookAPIVersion
}

// GetWebhookEventFailoverURL returns the value of WebhookEventFailoverURL.
func (s *CallControlApplication) GetWebhookEventFailoverURL() OptNilString {
	return s.WebhookEventFailoverURL
}

// GetWebhookEventURL returns the value of WebhookEventURL.
func (s *CallControlApplication) GetWebhookEventURL() OptString {
	return s.WebhookEventURL
}

// GetWebhookTimeoutSecs returns the value of WebhookTimeoutSecs.
func (s *CallControlApplication) GetWebhookTimeoutSecs() OptNilInt {
	return s.WebhookTimeoutSecs
}

// SetActive sets the value of Active.
func (s *CallControlApplication) SetActive(val OptBool) {
	s.Active = val
}

// SetAnchorsiteOverride sets the value of AnchorsiteOverride.
func (s *CallControlApplication) SetAnchorsiteOverride(val OptAnchorsiteOverride) {
	s.AnchorsiteOverride = val
}

// SetApplicationName sets the value of ApplicationName.
func (s *CallControlApplication) SetApplicationName(val OptString) {
	s.ApplicationName = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CallControlApplication) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetDtmfType sets the value of DtmfType.
func (s *CallControlApplication) SetDtmfType(val OptCallControlApplicationDtmfType) {
	s.DtmfType = val
}

// SetFirstCommandTimeout sets the value of FirstCommandTimeout.
func (s *CallControlApplication) SetFirstCommandTimeout(val OptBool) {
	s.FirstCommandTimeout = val
}

// SetFirstCommandTimeoutSecs sets the value of FirstCommandTimeoutSecs.
func (s *CallControlApplication) SetFirstCommandTimeoutSecs(val OptInt) {
	s.FirstCommandTimeoutSecs = val
}

// SetID sets the value of ID.
func (s *CallControlApplication) SetID(val OptStringInt64) {
	s.ID = val
}

// SetInbound sets the value of Inbound.
func (s *CallControlApplication) SetInbound(val OptCallControlApplicationInbound) {
	s.Inbound = val
}

// SetOutbound sets the value of Outbound.
func (s *CallControlApplication) SetOutbound(val OptCallControlApplicationOutbound) {
	s.Outbound = val
}

// SetRecordType sets the value of RecordType.
func (s *CallControlApplication) SetRecordType(val OptCallControlApplicationRecordType) {
	s.RecordType = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *CallControlApplication) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetWebhookAPIVersion sets the value of WebhookAPIVersion.
func (s *CallControlApplication) SetWebhookAPIVersion(val OptCallControlApplicationWebhookAPIVersion) {
	s.WebhookAPIVersion = val
}

// SetWebhookEventFailoverURL sets the value of WebhookEventFailoverURL.
func (s *CallControlApplication) SetWebhookEventFailoverURL(val OptNilString) {
	s.WebhookEventFailoverURL = val
}

// SetWebhookEventURL sets the value of WebhookEventURL.
func (s *CallControlApplication) SetWebhookEventURL(val OptString) {
	s.WebhookEventURL = val
}

// SetWebhookTimeoutSecs sets the value of WebhookTimeoutSecs.
func (s *CallControlApplication) SetWebhookTimeoutSecs(val OptNilInt) {
	s.WebhookTimeoutSecs = val
}

// Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to
// Telnyx will be accepted in all formats.
type CallControlApplicationDtmfType string

const (
	CallControlApplicationDtmfTypeRFC2833 CallControlApplicationDtmfType = "RFC 2833"
	CallControlApplicationDtmfTypeInband  CallControlApplicationDtmfType = "Inband"
	CallControlApplicationDtmfTypeSIPINFO CallControlApplicationDtmfType = "SIP INFO"
)

// AllValues returns all CallControlApplicationDtmfType values.
func (CallControlApplicationDtmfType) AllValues() []CallControlApplicationDtmfType {
	return []CallControlApplicationDtmfType{
		CallControlApplicationDtmfTypeRFC2833,
		CallControlApplicationDtmfTypeInband,
		CallControlApplicationDtmfTypeSIPINFO,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallControlApplicationDtmfType) MarshalText() ([]byte, error) {
	switch s {
	case CallControlApplicationDtmfTypeRFC2833:
		return []byte(s), nil
	case CallControlApplicationDtmfTypeInband:
		return []byte(s), nil
	case CallControlApplicationDtmfTypeSIPINFO:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallControlApplicationDtmfType) UnmarshalText(data []byte) error {
	switch CallControlApplicationDtmfType(data) {
	case CallControlApplicationDtmfTypeRFC2833:
		*s = CallControlApplicationDtmfTypeRFC2833
		return nil
	case CallControlApplicationDtmfTypeInband:
		*s = CallControlApplicationDtmfTypeInband
		return nil
	case CallControlApplicationDtmfTypeSIPINFO:
		*s = CallControlApplicationDtmfTypeSIPINFO
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CallControlApplicationInbound
type CallControlApplicationInbound struct {
	// When set, this will limit the total number of inbound calls to phone numbers associated with this
	// connection.
	ChannelLimit OptNilInt `json:"channel_limit"`
	// When enabled Telnyx will include Shaken/Stir data in the Webhook for new inbound calls.
	ShakenStirEnabled OptBool `json:"shaken_stir_enabled"`
	// Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a
	// phone number is used, from a SIP endpoint. Example: the subdomain "example.sip.telnyx.com" can be
	// called from any SIP endpoint by using the SIP URI "sip:@example.sip.telnyx.com" where the user
	// part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain
	// calls.
	SipSubdomain OptNilString `json:"sip_subdomain"`
	// This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public
	// Internet) or "Only my connections" (any connection assigned to the same Telnyx user).
	SipSubdomainReceiveSettings OptCallControlApplicationInboundSipSubdomainReceiveSettings `json:"sip_subdomain_receive_settings"`
}

// GetChannelLimit returns the value of ChannelLimit.
func (s *CallControlApplicationInbound) GetChannelLimit() OptNilInt {
	return s.ChannelLimit
}

// GetShakenStirEnabled returns the value of ShakenStirEnabled.
func (s *CallControlApplicationInbound) GetShakenStirEnabled() OptBool {
	return s.ShakenStirEnabled
}

// GetSipSubdomain returns the value of SipSubdomain.
func (s *CallControlApplicationInbound) GetSipSubdomain() OptNilString {
	return s.SipSubdomain
}

// GetSipSubdomainReceiveSettings returns the value of SipSubdomainReceiveSettings.
func (s *CallControlApplicationInbound) GetSipSubdomainReceiveSettings() OptCallControlApplicationInboundSipSubdomainReceiveSettings {
	return s.SipSubdomainReceiveSettings
}

// SetChannelLimit sets the value of ChannelLimit.
func (s *CallControlApplicationInbound) SetChannelLimit(val OptNilInt) {
	s.ChannelLimit = val
}

// SetShakenStirEnabled sets the value of ShakenStirEnabled.
func (s *CallControlApplicationInbound) SetShakenStirEnabled(val OptBool) {
	s.ShakenStirEnabled = val
}

// SetSipSubdomain sets the value of SipSubdomain.
func (s *CallControlApplicationInbound) SetSipSubdomain(val OptNilString) {
	s.SipSubdomain = val
}

// SetSipSubdomainReceiveSettings sets the value of SipSubdomainReceiveSettings.
func (s *CallControlApplicationInbound) SetSipSubdomainReceiveSettings(val OptCallControlApplicationInboundSipSubdomainReceiveSettings) {
	s.SipSubdomainReceiveSettings = val
}

// This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public
// Internet) or "Only my connections" (any connection assigned to the same Telnyx user).
type CallControlApplicationInboundSipSubdomainReceiveSettings string

const (
	CallControlApplicationInboundSipSubdomainReceiveSettingsOnlyMyConnections CallControlApplicationInboundSipSubdomainReceiveSettings = "only_my_connections"
	CallControlApplicationInboundSipSubdomainReceiveSettingsFromAnyone        CallControlApplicationInboundSipSubdomainReceiveSettings = "from_anyone"
)

// AllValues returns all CallControlApplicationInboundSipSubdomainReceiveSettings values.
func (CallControlApplicationInboundSipSubdomainReceiveSettings) AllValues() []CallControlApplicationInboundSipSubdomainReceiveSettings {
	return []CallControlApplicationInboundSipSubdomainReceiveSettings{
		CallControlApplicationInboundSipSubdomainReceiveSettingsOnlyMyConnections,
		CallControlApplicationInboundSipSubdomainReceiveSettingsFromAnyone,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallControlApplicationInboundSipSubdomainReceiveSettings) MarshalText() ([]byte, error) {
	switch s {
	case CallControlApplicationInboundSipSubdomainReceiveSettingsOnlyMyConnections:
		return []byte(s), nil
	case CallControlApplicationInboundSipSubdomainReceiveSettingsFromAnyone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallControlApplicationInboundSipSubdomainReceiveSettings) UnmarshalText(data []byte) error {
	switch CallControlApplicationInboundSipSubdomainReceiveSettings(data) {
	case CallControlApplicationInboundSipSubdomainReceiveSettingsOnlyMyConnections:
		*s = CallControlApplicationInboundSipSubdomainReceiveSettingsOnlyMyConnections
		return nil
	case CallControlApplicationInboundSipSubdomainReceiveSettingsFromAnyone:
		*s = CallControlApplicationInboundSipSubdomainReceiveSettingsFromAnyone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CallControlApplicationOutbound
type CallControlApplicationOutbound struct {
	// When set, this will limit the total number of outbound calls to phone numbers associated with this
	// connection.
	ChannelLimit OptNilInt `json:"channel_limit"`
	// Identifies the associated outbound voice profile.
	OutboundVoiceProfileID OptStringInt64 `json:"outbound_voice_profile_id"`
}

// GetChannelLimit returns the value of ChannelLimit.
func (s *CallControlApplicationOutbound) GetChannelLimit() OptNilInt {
	return s.ChannelLimit
}

// GetOutboundVoiceProfileID returns the value of OutboundVoiceProfileID.
func (s *CallControlApplicationOutbound) GetOutboundVoiceProfileID() OptStringInt64 {
	return s.OutboundVoiceProfileID
}

// SetChannelLimit sets the value of ChannelLimit.
func (s *CallControlApplicationOutbound) SetChannelLimit(val OptNilInt) {
	s.ChannelLimit = val
}

// SetOutboundVoiceProfileID sets the value of OutboundVoiceProfileID.
func (s *CallControlApplicationOutbound) SetOutboundVoiceProfileID(val OptStringInt64) {
	s.OutboundVoiceProfileID = val
}

type CallControlApplicationRecordType string

const (
	CallControlApplicationRecordTypeCallControlApplication CallControlApplicationRecordType = "call_control_application"
)

// AllValues returns all CallControlApplicationRecordType values.
func (CallControlApplicationRecordType) AllValues() []CallControlApplicationRecordType {
	return []CallControlApplicationRecordType{
		CallControlApplicationRecordTypeCallControlApplication,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallControlApplicationRecordType) MarshalText() ([]byte, error) {
	switch s {
	case CallControlApplicationRecordTypeCallControlApplication:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallControlApplicationRecordType) UnmarshalText(data []byte) error {
	switch CallControlApplicationRecordType(data) {
	case CallControlApplicationRecordTypeCallControlApplication:
		*s = CallControlApplicationRecordTypeCallControlApplication
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CallControlApplicationResponse struct {
	Data OptCallControlApplication `json:"data"`
}

// GetData returns the value of Data.
func (s *CallControlApplicationResponse) GetData() OptCallControlApplication {
	return s.Data
}

// SetData sets the value of Data.
func (s *CallControlApplicationResponse) SetData(val OptCallControlApplication) {
	s.Data = val
}

func (*CallControlApplicationResponse) createCallControlApplicationRes()   {}
func (*CallControlApplicationResponse) deleteCallControlApplicationRes()   {}
func (*CallControlApplicationResponse) retrieveCallControlApplicationRes() {}
func (*CallControlApplicationResponse) updateCallControlApplicationRes()   {}

// Determines which webhook format will be used, Telnyx API v1 or v2.
type CallControlApplicationWebhookAPIVersion string

const (
	CallControlApplicationWebhookAPIVersion1 CallControlApplicationWebhookAPIVersion = "1"
	CallControlApplicationWebhookAPIVersion2 CallControlApplicationWebhookAPIVersion = "2"
)

// AllValues returns all CallControlApplicationWebhookAPIVersion values.
func (CallControlApplicationWebhookAPIVersion) AllValues() []CallControlApplicationWebhookAPIVersion {
	return []CallControlApplicationWebhookAPIVersion{
		CallControlApplicationWebhookAPIVersion1,
		CallControlApplicationWebhookAPIVersion2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallControlApplicationWebhookAPIVersion) MarshalText() ([]byte, error) {
	switch s {
	case CallControlApplicationWebhookAPIVersion1:
		return []byte(s), nil
	case CallControlApplicationWebhookAPIVersion2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallControlApplicationWebhookAPIVersion) UnmarshalText(data []byte) error {
	switch CallControlApplicationWebhookAPIVersion(data) {
	case CallControlApplicationWebhookAPIVersion1:
		*s = CallControlApplicationWebhookAPIVersion1
		return nil
	case CallControlApplicationWebhookAPIVersion2:
		*s = CallControlApplicationWebhookAPIVersion2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CallControlCommandResponse struct {
	Data OptCallControlCommandResult `json:"data"`
}

// GetData returns the value of Data.
func (s *CallControlCommandResponse) GetData() OptCallControlCommandResult {
	return s.Data
}

// SetData sets the value of Data.
func (s *CallControlCommandResponse) SetData(val OptCallControlCommandResult) {
	s.Data = val
}

func (*CallControlCommandResponse) answerCallRes()             {}
func (*CallControlCommandResponse) bridgeCallRes()             {}
func (*CallControlCommandResponse) enqueueCallRes()            {}
func (*CallControlCommandResponse) gatherCallRes()             {}
func (*CallControlCommandResponse) gatherUsingAudioRes()       {}
func (*CallControlCommandResponse) gatherUsingSpeakRes()       {}
func (*CallControlCommandResponse) hangupCallRes()             {}
func (*CallControlCommandResponse) leaveQueueRes()             {}
func (*CallControlCommandResponse) noiseSuppressionStartRes()  {}
func (*CallControlCommandResponse) noiseSuppressionStopRes()   {}
func (*CallControlCommandResponse) pauseCallRecordingRes()     {}
func (*CallControlCommandResponse) referCallRes()              {}
func (*CallControlCommandResponse) rejectCallRes()             {}
func (*CallControlCommandResponse) resumeCallRecordingRes()    {}
func (*CallControlCommandResponse) sendDTMFRes()               {}
func (*CallControlCommandResponse) speakCallRes()              {}
func (*CallControlCommandResponse) startCallForkRes()          {}
func (*CallControlCommandResponse) startCallPlaybackRes()      {}
func (*CallControlCommandResponse) startCallRecordRes()        {}
func (*CallControlCommandResponse) startCallStreamingRes()     {}
func (*CallControlCommandResponse) startCallTranscriptionRes() {}
func (*CallControlCommandResponse) stopCallForkRes()           {}
func (*CallControlCommandResponse) stopCallGatherRes()         {}
func (*CallControlCommandResponse) stopCallPlaybackRes()       {}
func (*CallControlCommandResponse) stopCallRecordingRes()      {}
func (*CallControlCommandResponse) stopCallStreamingRes()      {}
func (*CallControlCommandResponse) stopCallTranscriptionRes()  {}
func (*CallControlCommandResponse) transferCallRes()           {}
func (*CallControlCommandResponse) updateClientStateRes()      {}

// Ref: #/components/schemas/CallControlCommandResult
type CallControlCommandResult struct {
	Result OptString `json:"result"`
}

// GetResult returns the value of Result.
func (s *CallControlCommandResult) GetResult() OptString {
	return s.Result
}

// SetResult sets the value of Result.
func (s *CallControlCommandResult) SetResult(val OptString) {
	s.Result = val
}

type CallControlId string

type CallReasons []CallReasonsItem

// The Call Reason to be displayed to the call recipient.
type CallReasonsItem struct {
	RecordType OptString `json:"record_type"`
	ID         OptUUID   `json:"id"`
	// The Call Reason text to be displayed to the call recipient.
	Reason OptString `json:"reason"`
	// The approval status of this individual call reason in Google.
	GoogleVerificationStatus OptCallReasonsItemGoogleVerificationStatus `json:"google_verification_status"`
	// Additional information about the decision, if available.
	GoogleApprovalInfo OptString `json:"google_approval_info"`
	DisplayProfileID   OptUUID   `json:"display_profile_id"`
	// Marks the Phone Number to be removed from the Display Profile.
	Delete OptBool `json:"delete"`
}

// GetRecordType returns the value of RecordType.
func (s *CallReasonsItem) GetRecordType() OptString {
	return s.RecordType
}

// GetID returns the value of ID.
func (s *CallReasonsItem) GetID() OptUUID {
	return s.ID
}

// GetReason returns the value of Reason.
func (s *CallReasonsItem) GetReason() OptString {
	return s.Reason
}

// GetGoogleVerificationStatus returns the value of GoogleVerificationStatus.
func (s *CallReasonsItem) GetGoogleVerificationStatus() OptCallReasonsItemGoogleVerificationStatus {
	return s.GoogleVerificationStatus
}

// GetGoogleApprovalInfo returns the value of GoogleApprovalInfo.
func (s *CallReasonsItem) GetGoogleApprovalInfo() OptString {
	return s.GoogleApprovalInfo
}

// GetDisplayProfileID returns the value of DisplayProfileID.
func (s *CallReasonsItem) GetDisplayProfileID() OptUUID {
	return s.DisplayProfileID
}

// GetDelete returns the value of Delete.
func (s *CallReasonsItem) GetDelete() OptBool {
	return s.Delete
}

// SetRecordType sets the value of RecordType.
func (s *CallReasonsItem) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetID sets the value of ID.
func (s *CallReasonsItem) SetID(val OptUUID) {
	s.ID = val
}

// SetReason sets the value of Reason.
func (s *CallReasonsItem) SetReason(val OptString) {
	s.Reason = val
}

// SetGoogleVerificationStatus sets the value of GoogleVerificationStatus.
func (s *CallReasonsItem) SetGoogleVerificationStatus(val OptCallReasonsItemGoogleVerificationStatus) {
	s.GoogleVerificationStatus = val
}

// SetGoogleApprovalInfo sets the value of GoogleApprovalInfo.
func (s *CallReasonsItem) SetGoogleApprovalInfo(val OptString) {
	s.GoogleApprovalInfo = val
}

// SetDisplayProfileID sets the value of DisplayProfileID.
func (s *CallReasonsItem) SetDisplayProfileID(val OptUUID) {
	s.DisplayProfileID = val
}

// SetDelete sets the value of Delete.
func (s *CallReasonsItem) SetDelete(val OptBool) {
	s.Delete = val
}

// The approval status of this individual call reason in Google.
type CallReasonsItemGoogleVerificationStatus string

const (
	CallReasonsItemGoogleVerificationStatusSTATEUNSPECIFIED CallReasonsItemGoogleVerificationStatus = "STATE_UNSPECIFIED"
	CallReasonsItemGoogleVerificationStatusPENDINGAPPROVAL  CallReasonsItemGoogleVerificationStatus = "PENDING_APPROVAL"
	CallReasonsItemGoogleVerificationStatusAPPROVED         CallReasonsItemGoogleVerificationStatus = "APPROVED"
	CallReasonsItemGoogleVerificationStatusDENIED           CallReasonsItemGoogleVerificationStatus = "DENIED"
	CallReasonsItemGoogleVerificationStatusPENDINGREMOVAL   CallReasonsItemGoogleVerificationStatus = "PENDING_REMOVAL"
)

// AllValues returns all CallReasonsItemGoogleVerificationStatus values.
func (CallReasonsItemGoogleVerificationStatus) AllValues() []CallReasonsItemGoogleVerificationStatus {
	return []CallReasonsItemGoogleVerificationStatus{
		CallReasonsItemGoogleVerificationStatusSTATEUNSPECIFIED,
		CallReasonsItemGoogleVerificationStatusPENDINGAPPROVAL,
		CallReasonsItemGoogleVerificationStatusAPPROVED,
		CallReasonsItemGoogleVerificationStatusDENIED,
		CallReasonsItemGoogleVerificationStatusPENDINGREMOVAL,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallReasonsItemGoogleVerificationStatus) MarshalText() ([]byte, error) {
	switch s {
	case CallReasonsItemGoogleVerificationStatusSTATEUNSPECIFIED:
		return []byte(s), nil
	case CallReasonsItemGoogleVerificationStatusPENDINGAPPROVAL:
		return []byte(s), nil
	case CallReasonsItemGoogleVerificationStatusAPPROVED:
		return []byte(s), nil
	case CallReasonsItemGoogleVerificationStatusDENIED:
		return []byte(s), nil
	case CallReasonsItemGoogleVerificationStatusPENDINGREMOVAL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallReasonsItemGoogleVerificationStatus) UnmarshalText(data []byte) error {
	switch CallReasonsItemGoogleVerificationStatus(data) {
	case CallReasonsItemGoogleVerificationStatusSTATEUNSPECIFIED:
		*s = CallReasonsItemGoogleVerificationStatusSTATEUNSPECIFIED
		return nil
	case CallReasonsItemGoogleVerificationStatusPENDINGAPPROVAL:
		*s = CallReasonsItemGoogleVerificationStatusPENDINGAPPROVAL
		return nil
	case CallReasonsItemGoogleVerificationStatusAPPROVED:
		*s = CallReasonsItemGoogleVerificationStatusAPPROVED
		return nil
	case CallReasonsItemGoogleVerificationStatusDENIED:
		*s = CallReasonsItemGoogleVerificationStatusDENIED
		return nil
	case CallReasonsItemGoogleVerificationStatusPENDINGREMOVAL:
		*s = CallReasonsItemGoogleVerificationStatusPENDINGREMOVAL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CallRecordType string

const (
	CallRecordTypeCall CallRecordType = "call"
)

// AllValues returns all CallRecordType values.
func (CallRecordType) AllValues() []CallRecordType {
	return []CallRecordType{
		CallRecordTypeCall,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRecordType) MarshalText() ([]byte, error) {
	switch s {
	case CallRecordTypeCall:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRecordType) UnmarshalText(data []byte) error {
	switch CallRecordType(data) {
	case CallRecordTypeCall:
		*s = CallRecordTypeCall
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CallRequest
type CallRequest struct {
	// The DID or SIP URI to dial out to. Multiple DID or SIP URIs can be provided using an array of
	// strings.
	To CallRequestTo `json:"to"`
	// The `from` number to be used as the caller id presented to the destination (`to` number). The
	// number should be in +E164 format.
	From string `json:"from"`
	// The `from_display_name` string to be used as the caller id name (SIP From Display Name) presented
	// to the destination (`to` number). The string should have a maximum of 128 characters, containing
	// only letters, numbers, spaces, and -_~!.+ special characters. If ommited, the display name will be
	// the same as the number in the `from` field.
	FromDisplayName OptString `json:"from_display_name"`
	// The ID of the Call Control App (formerly ID of the connection) to be used when dialing the
	// destination.
	ConnectionID string `json:"connection_id"`
	// The URL of a file to be played back to the callee when the call is answered. The URL can point to
	// either a WAV or MP3 file. media_name and audio_url cannot be used together in one request.
	AudioURL OptString `json:"audio_url"`
	// The media_name of a file to be played back to the callee when the call is answered. The media_name
	// must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization.
	// The file must either be a WAV or MP3 file.
	MediaName OptString `json:"media_name"`
	// The list of comma-separated codecs in a preferred order for the forked media to be received.
	PreferredCodecs OptString `json:"preferred_codecs"`
	// The number of seconds that Telnyx will wait for the call to be answered by the destination to
	// which it is being called. If the timeout is reached before an answer is received, the call will
	// hangup and a `call.hangup` webhook with a `hangup_cause` of `timeout` will be sent. Minimum value
	// is 5 seconds. Maximum value is 120 seconds.
	TimeoutSecs OptInt32 `json:"timeout_secs"`
	// Sets the maximum duration of a Call Control Leg in seconds. If the time limit is reached, the call
	// will hangup and a `call.hangup` webhook with a `hangup_cause` of `time_limit` will be sent. For
	// example, by setting a time limit of 120 seconds, a Call Leg will be automatically terminated two
	// minutes after being answered. The default time limit is 14400 seconds or 4 hours and this is also
	// the maximum allowed call length.
	TimeLimitSecs OptInt32 `json:"time_limit_secs"`
	// Enables Answering Machine Detection. Telnyx offers Premium and Standard detections. With Premium
	// detection, when a call is answered, Telnyx runs real-time detection and sends a `call.machine.
	// premium.detection.ended` webhook with one of the following results: `human_residence`,
	// `human_business`, `machine`, `silence` or `fax_detected`. If we detect a beep, we also send a
	// `call.machine.premium.greeting.ended` webhook with the result of `beep_detected`. If we detect a
	// beep before `call.machine.premium.detection.ended` we only send `call.machine.premium.greeting.
	// ended`, and if we detect a beep after `call.machine.premium.detection.ended`, we send both
	// webhooks. With Standard detection, when a call is answered, Telnyx runs real-time detection to
	// determine if it was picked up by a human or a machine and sends an `call.machine.detection.ended`
	// webhook with the analysis result. If `greeting_end` or `detect_words` is used and a `machine` is
	// detected, you will receive another `call.machine.greeting.ended` webhook when the answering
	// machine greeting ends with a beep or silence. If `detect_beep` is used, you will only receive
	// `call.machine.greeting.ended` if a beep is detected.
	AnsweringMachineDetection OptCallRequestAnsweringMachineDetection `json:"answering_machine_detection"`
	// Optional configuration parameters to modify 'answering_machine_detection' performance.
	AnsweringMachineDetectionConfig OptCallRequestAnsweringMachineDetectionConfig `json:"answering_machine_detection_config"`
	// Optional configuration parameters to dial new participant into a conference.
	ConferenceConfig OptCallRequestConferenceConfig `json:"conference_config"`
	// Custom headers to be added to the SIP INVITE.
	CustomHeaders []CustomSipHeader `json:"custom_headers"`
	// Use this field to set the Billing Group ID for the call. Must be a valid and existing Billing
	// Group ID.
	BillingGroupID OptUUID `json:"billing_group_id"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore others Dial commands with the same
	// `command_id`.
	CommandID OptString `json:"command_id"`
	// Use another call's control id for sharing the same call session id.
	LinkTo OptString `json:"link_to"`
	// Defines whether media should be encrypted on the call.
	MediaEncryption OptCallRequestMediaEncryption `json:"media_encryption"`
	// SIP Authentication username used for SIP challenges.
	SipAuthUsername OptString `json:"sip_auth_username"`
	// SIP Authentication password used for SIP challenges.
	SipAuthPassword OptString `json:"sip_auth_password"`
	// SIP headers to be added to the SIP INVITE request. Currently only User-to-User header is supported.
	SipHeaders []SipHeader `json:"sip_headers"`
	// Defines SIP transport protocol to be used on the call.
	SipTransportProtocol OptCallRequestSipTransportProtocol `json:"sip_transport_protocol"`
	SoundModifications   OptSoundModifications              `json:"sound_modifications"`
	// The destination WebSocket address where the stream is going to be delivered.
	StreamURL OptString `json:"stream_url"`
	// Specifies which track should be streamed.
	StreamTrack OptCallRequestStreamTrack `json:"stream_track"`
	// Generate silence RTP packets when no transmission available.
	SendSilenceWhenIdle OptBool `json:"send_silence_when_idle"`
	// Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.
	WebhookURL OptString `json:"webhook_url"`
	// HTTP request type used for `webhook_url`.
	WebhookURLMethod OptCallRequestWebhookURLMethod `json:"webhook_url_method"`
	// Start recording automatically after an event. Disabled by default.
	Record OptCallRequestRecord `json:"record"`
	// Defines which channel should be recorded ('single' or 'dual') when `record` is specified.
	RecordChannels OptCallRequestRecordChannels `json:"record_channels"`
	// Defines the format of the recording ('wav' or 'mp3') when `record` is specified.
	RecordFormat OptCallRequestRecordFormat `json:"record_format"`
	// Defines the maximum length for the recording in seconds when `record` is specified. The minimum
	// value is 0. The maximum value is 43200. The default value is 0 (infinite).
	RecordMaxLength OptInt32 `json:"record_max_length"`
	// The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected
	// when `record` is specified. The timer only starts when the speech is detected. Please note that
	// call transcription is used to detect silence and the related charge will be applied. The minimum
	// value is 0. The default value is 0 (infinite).
	RecordTimeoutSecs OptInt32 `json:"record_timeout_secs"`
	// When set to `trim-silence`, silence will be removed from the beginning and end of the recording.
	RecordTrim OptCallRequestRecordTrim `json:"record_trim"`
	// The custom recording file name to be used instead of the default `call_leg_id`. Telnyx will still
	// add a Unix timestamp suffix.
	RecordCustomFileName OptString `json:"record_custom_file_name"`
	// Enables Dialogflow for the current call. The default value is false.
	EnableDialogflow OptBool             `json:"enable_dialogflow"`
	DialogflowConfig OptDialogflowConfig `json:"dialogflow_config"`
}

// GetTo returns the value of To.
func (s *CallRequest) GetTo() CallRequestTo {
	return s.To
}

// GetFrom returns the value of From.
func (s *CallRequest) GetFrom() string {
	return s.From
}

// GetFromDisplayName returns the value of FromDisplayName.
func (s *CallRequest) GetFromDisplayName() OptString {
	return s.FromDisplayName
}

// GetConnectionID returns the value of ConnectionID.
func (s *CallRequest) GetConnectionID() string {
	return s.ConnectionID
}

// GetAudioURL returns the value of AudioURL.
func (s *CallRequest) GetAudioURL() OptString {
	return s.AudioURL
}

// GetMediaName returns the value of MediaName.
func (s *CallRequest) GetMediaName() OptString {
	return s.MediaName
}

// GetPreferredCodecs returns the value of PreferredCodecs.
func (s *CallRequest) GetPreferredCodecs() OptString {
	return s.PreferredCodecs
}

// GetTimeoutSecs returns the value of TimeoutSecs.
func (s *CallRequest) GetTimeoutSecs() OptInt32 {
	return s.TimeoutSecs
}

// GetTimeLimitSecs returns the value of TimeLimitSecs.
func (s *CallRequest) GetTimeLimitSecs() OptInt32 {
	return s.TimeLimitSecs
}

// GetAnsweringMachineDetection returns the value of AnsweringMachineDetection.
func (s *CallRequest) GetAnsweringMachineDetection() OptCallRequestAnsweringMachineDetection {
	return s.AnsweringMachineDetection
}

// GetAnsweringMachineDetectionConfig returns the value of AnsweringMachineDetectionConfig.
func (s *CallRequest) GetAnsweringMachineDetectionConfig() OptCallRequestAnsweringMachineDetectionConfig {
	return s.AnsweringMachineDetectionConfig
}

// GetConferenceConfig returns the value of ConferenceConfig.
func (s *CallRequest) GetConferenceConfig() OptCallRequestConferenceConfig {
	return s.ConferenceConfig
}

// GetCustomHeaders returns the value of CustomHeaders.
func (s *CallRequest) GetCustomHeaders() []CustomSipHeader {
	return s.CustomHeaders
}

// GetBillingGroupID returns the value of BillingGroupID.
func (s *CallRequest) GetBillingGroupID() OptUUID {
	return s.BillingGroupID
}

// GetClientState returns the value of ClientState.
func (s *CallRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *CallRequest) GetCommandID() OptString {
	return s.CommandID
}

// GetLinkTo returns the value of LinkTo.
func (s *CallRequest) GetLinkTo() OptString {
	return s.LinkTo
}

// GetMediaEncryption returns the value of MediaEncryption.
func (s *CallRequest) GetMediaEncryption() OptCallRequestMediaEncryption {
	return s.MediaEncryption
}

// GetSipAuthUsername returns the value of SipAuthUsername.
func (s *CallRequest) GetSipAuthUsername() OptString {
	return s.SipAuthUsername
}

// GetSipAuthPassword returns the value of SipAuthPassword.
func (s *CallRequest) GetSipAuthPassword() OptString {
	return s.SipAuthPassword
}

// GetSipHeaders returns the value of SipHeaders.
func (s *CallRequest) GetSipHeaders() []SipHeader {
	return s.SipHeaders
}

// GetSipTransportProtocol returns the value of SipTransportProtocol.
func (s *CallRequest) GetSipTransportProtocol() OptCallRequestSipTransportProtocol {
	return s.SipTransportProtocol
}

// GetSoundModifications returns the value of SoundModifications.
func (s *CallRequest) GetSoundModifications() OptSoundModifications {
	return s.SoundModifications
}

// GetStreamURL returns the value of StreamURL.
func (s *CallRequest) GetStreamURL() OptString {
	return s.StreamURL
}

// GetStreamTrack returns the value of StreamTrack.
func (s *CallRequest) GetStreamTrack() OptCallRequestStreamTrack {
	return s.StreamTrack
}

// GetSendSilenceWhenIdle returns the value of SendSilenceWhenIdle.
func (s *CallRequest) GetSendSilenceWhenIdle() OptBool {
	return s.SendSilenceWhenIdle
}

// GetWebhookURL returns the value of WebhookURL.
func (s *CallRequest) GetWebhookURL() OptString {
	return s.WebhookURL
}

// GetWebhookURLMethod returns the value of WebhookURLMethod.
func (s *CallRequest) GetWebhookURLMethod() OptCallRequestWebhookURLMethod {
	return s.WebhookURLMethod
}

// GetRecord returns the value of Record.
func (s *CallRequest) GetRecord() OptCallRequestRecord {
	return s.Record
}

// GetRecordChannels returns the value of RecordChannels.
func (s *CallRequest) GetRecordChannels() OptCallRequestRecordChannels {
	return s.RecordChannels
}

// GetRecordFormat returns the value of RecordFormat.
func (s *CallRequest) GetRecordFormat() OptCallRequestRecordFormat {
	return s.RecordFormat
}

// GetRecordMaxLength returns the value of RecordMaxLength.
func (s *CallRequest) GetRecordMaxLength() OptInt32 {
	return s.RecordMaxLength
}

// GetRecordTimeoutSecs returns the value of RecordTimeoutSecs.
func (s *CallRequest) GetRecordTimeoutSecs() OptInt32 {
	return s.RecordTimeoutSecs
}

// GetRecordTrim returns the value of RecordTrim.
func (s *CallRequest) GetRecordTrim() OptCallRequestRecordTrim {
	return s.RecordTrim
}

// GetRecordCustomFileName returns the value of RecordCustomFileName.
func (s *CallRequest) GetRecordCustomFileName() OptString {
	return s.RecordCustomFileName
}

// GetEnableDialogflow returns the value of EnableDialogflow.
func (s *CallRequest) GetEnableDialogflow() OptBool {
	return s.EnableDialogflow
}

// GetDialogflowConfig returns the value of DialogflowConfig.
func (s *CallRequest) GetDialogflowConfig() OptDialogflowConfig {
	return s.DialogflowConfig
}

// SetTo sets the value of To.
func (s *CallRequest) SetTo(val CallRequestTo) {
	s.To = val
}

// SetFrom sets the value of From.
func (s *CallRequest) SetFrom(val string) {
	s.From = val
}

// SetFromDisplayName sets the value of FromDisplayName.
func (s *CallRequest) SetFromDisplayName(val OptString) {
	s.FromDisplayName = val
}

// SetConnectionID sets the value of ConnectionID.
func (s *CallRequest) SetConnectionID(val string) {
	s.ConnectionID = val
}

// SetAudioURL sets the value of AudioURL.
func (s *CallRequest) SetAudioURL(val OptString) {
	s.AudioURL = val
}

// SetMediaName sets the value of MediaName.
func (s *CallRequest) SetMediaName(val OptString) {
	s.MediaName = val
}

// SetPreferredCodecs sets the value of PreferredCodecs.
func (s *CallRequest) SetPreferredCodecs(val OptString) {
	s.PreferredCodecs = val
}

// SetTimeoutSecs sets the value of TimeoutSecs.
func (s *CallRequest) SetTimeoutSecs(val OptInt32) {
	s.TimeoutSecs = val
}

// SetTimeLimitSecs sets the value of TimeLimitSecs.
func (s *CallRequest) SetTimeLimitSecs(val OptInt32) {
	s.TimeLimitSecs = val
}

// SetAnsweringMachineDetection sets the value of AnsweringMachineDetection.
func (s *CallRequest) SetAnsweringMachineDetection(val OptCallRequestAnsweringMachineDetection) {
	s.AnsweringMachineDetection = val
}

// SetAnsweringMachineDetectionConfig sets the value of AnsweringMachineDetectionConfig.
func (s *CallRequest) SetAnsweringMachineDetectionConfig(val OptCallRequestAnsweringMachineDetectionConfig) {
	s.AnsweringMachineDetectionConfig = val
}

// SetConferenceConfig sets the value of ConferenceConfig.
func (s *CallRequest) SetConferenceConfig(val OptCallRequestConferenceConfig) {
	s.ConferenceConfig = val
}

// SetCustomHeaders sets the value of CustomHeaders.
func (s *CallRequest) SetCustomHeaders(val []CustomSipHeader) {
	s.CustomHeaders = val
}

// SetBillingGroupID sets the value of BillingGroupID.
func (s *CallRequest) SetBillingGroupID(val OptUUID) {
	s.BillingGroupID = val
}

// SetClientState sets the value of ClientState.
func (s *CallRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *CallRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// SetLinkTo sets the value of LinkTo.
func (s *CallRequest) SetLinkTo(val OptString) {
	s.LinkTo = val
}

// SetMediaEncryption sets the value of MediaEncryption.
func (s *CallRequest) SetMediaEncryption(val OptCallRequestMediaEncryption) {
	s.MediaEncryption = val
}

// SetSipAuthUsername sets the value of SipAuthUsername.
func (s *CallRequest) SetSipAuthUsername(val OptString) {
	s.SipAuthUsername = val
}

// SetSipAuthPassword sets the value of SipAuthPassword.
func (s *CallRequest) SetSipAuthPassword(val OptString) {
	s.SipAuthPassword = val
}

// SetSipHeaders sets the value of SipHeaders.
func (s *CallRequest) SetSipHeaders(val []SipHeader) {
	s.SipHeaders = val
}

// SetSipTransportProtocol sets the value of SipTransportProtocol.
func (s *CallRequest) SetSipTransportProtocol(val OptCallRequestSipTransportProtocol) {
	s.SipTransportProtocol = val
}

// SetSoundModifications sets the value of SoundModifications.
func (s *CallRequest) SetSoundModifications(val OptSoundModifications) {
	s.SoundModifications = val
}

// SetStreamURL sets the value of StreamURL.
func (s *CallRequest) SetStreamURL(val OptString) {
	s.StreamURL = val
}

// SetStreamTrack sets the value of StreamTrack.
func (s *CallRequest) SetStreamTrack(val OptCallRequestStreamTrack) {
	s.StreamTrack = val
}

// SetSendSilenceWhenIdle sets the value of SendSilenceWhenIdle.
func (s *CallRequest) SetSendSilenceWhenIdle(val OptBool) {
	s.SendSilenceWhenIdle = val
}

// SetWebhookURL sets the value of WebhookURL.
func (s *CallRequest) SetWebhookURL(val OptString) {
	s.WebhookURL = val
}

// SetWebhookURLMethod sets the value of WebhookURLMethod.
func (s *CallRequest) SetWebhookURLMethod(val OptCallRequestWebhookURLMethod) {
	s.WebhookURLMethod = val
}

// SetRecord sets the value of Record.
func (s *CallRequest) SetRecord(val OptCallRequestRecord) {
	s.Record = val
}

// SetRecordChannels sets the value of RecordChannels.
func (s *CallRequest) SetRecordChannels(val OptCallRequestRecordChannels) {
	s.RecordChannels = val
}

// SetRecordFormat sets the value of RecordFormat.
func (s *CallRequest) SetRecordFormat(val OptCallRequestRecordFormat) {
	s.RecordFormat = val
}

// SetRecordMaxLength sets the value of RecordMaxLength.
func (s *CallRequest) SetRecordMaxLength(val OptInt32) {
	s.RecordMaxLength = val
}

// SetRecordTimeoutSecs sets the value of RecordTimeoutSecs.
func (s *CallRequest) SetRecordTimeoutSecs(val OptInt32) {
	s.RecordTimeoutSecs = val
}

// SetRecordTrim sets the value of RecordTrim.
func (s *CallRequest) SetRecordTrim(val OptCallRequestRecordTrim) {
	s.RecordTrim = val
}

// SetRecordCustomFileName sets the value of RecordCustomFileName.
func (s *CallRequest) SetRecordCustomFileName(val OptString) {
	s.RecordCustomFileName = val
}

// SetEnableDialogflow sets the value of EnableDialogflow.
func (s *CallRequest) SetEnableDialogflow(val OptBool) {
	s.EnableDialogflow = val
}

// SetDialogflowConfig sets the value of DialogflowConfig.
func (s *CallRequest) SetDialogflowConfig(val OptDialogflowConfig) {
	s.DialogflowConfig = val
}

// Enables Answering Machine Detection. Telnyx offers Premium and Standard detections. With Premium
// detection, when a call is answered, Telnyx runs real-time detection and sends a `call.machine.
// premium.detection.ended` webhook with one of the following results: `human_residence`,
// `human_business`, `machine`, `silence` or `fax_detected`. If we detect a beep, we also send a
// `call.machine.premium.greeting.ended` webhook with the result of `beep_detected`. If we detect a
// beep before `call.machine.premium.detection.ended` we only send `call.machine.premium.greeting.
// ended`, and if we detect a beep after `call.machine.premium.detection.ended`, we send both
// webhooks. With Standard detection, when a call is answered, Telnyx runs real-time detection to
// determine if it was picked up by a human or a machine and sends an `call.machine.detection.ended`
// webhook with the analysis result. If `greeting_end` or `detect_words` is used and a `machine` is
// detected, you will receive another `call.machine.greeting.ended` webhook when the answering
// machine greeting ends with a beep or silence. If `detect_beep` is used, you will only receive
// `call.machine.greeting.ended` if a beep is detected.
type CallRequestAnsweringMachineDetection string

const (
	CallRequestAnsweringMachineDetectionPremium     CallRequestAnsweringMachineDetection = "premium"
	CallRequestAnsweringMachineDetectionDetect      CallRequestAnsweringMachineDetection = "detect"
	CallRequestAnsweringMachineDetectionDetectBeep  CallRequestAnsweringMachineDetection = "detect_beep"
	CallRequestAnsweringMachineDetectionDetectWords CallRequestAnsweringMachineDetection = "detect_words"
	CallRequestAnsweringMachineDetectionGreetingEnd CallRequestAnsweringMachineDetection = "greeting_end"
	CallRequestAnsweringMachineDetectionDisabled    CallRequestAnsweringMachineDetection = "disabled"
)

// AllValues returns all CallRequestAnsweringMachineDetection values.
func (CallRequestAnsweringMachineDetection) AllValues() []CallRequestAnsweringMachineDetection {
	return []CallRequestAnsweringMachineDetection{
		CallRequestAnsweringMachineDetectionPremium,
		CallRequestAnsweringMachineDetectionDetect,
		CallRequestAnsweringMachineDetectionDetectBeep,
		CallRequestAnsweringMachineDetectionDetectWords,
		CallRequestAnsweringMachineDetectionGreetingEnd,
		CallRequestAnsweringMachineDetectionDisabled,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRequestAnsweringMachineDetection) MarshalText() ([]byte, error) {
	switch s {
	case CallRequestAnsweringMachineDetectionPremium:
		return []byte(s), nil
	case CallRequestAnsweringMachineDetectionDetect:
		return []byte(s), nil
	case CallRequestAnsweringMachineDetectionDetectBeep:
		return []byte(s), nil
	case CallRequestAnsweringMachineDetectionDetectWords:
		return []byte(s), nil
	case CallRequestAnsweringMachineDetectionGreetingEnd:
		return []byte(s), nil
	case CallRequestAnsweringMachineDetectionDisabled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRequestAnsweringMachineDetection) UnmarshalText(data []byte) error {
	switch CallRequestAnsweringMachineDetection(data) {
	case CallRequestAnsweringMachineDetectionPremium:
		*s = CallRequestAnsweringMachineDetectionPremium
		return nil
	case CallRequestAnsweringMachineDetectionDetect:
		*s = CallRequestAnsweringMachineDetectionDetect
		return nil
	case CallRequestAnsweringMachineDetectionDetectBeep:
		*s = CallRequestAnsweringMachineDetectionDetectBeep
		return nil
	case CallRequestAnsweringMachineDetectionDetectWords:
		*s = CallRequestAnsweringMachineDetectionDetectWords
		return nil
	case CallRequestAnsweringMachineDetectionGreetingEnd:
		*s = CallRequestAnsweringMachineDetectionGreetingEnd
		return nil
	case CallRequestAnsweringMachineDetectionDisabled:
		*s = CallRequestAnsweringMachineDetectionDisabled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Optional configuration parameters to modify 'answering_machine_detection' performance.
type CallRequestAnsweringMachineDetectionConfig struct {
	// Maximum timeout threshold for overall detection.
	TotalAnalysisTimeMillis OptInt32 `json:"total_analysis_time_millis"`
	// Silence duration threshold after a greeting message or voice for it be considered human.
	AfterGreetingSilenceMillis OptInt32 `json:"after_greeting_silence_millis"`
	// Maximum threshold for silence between words.
	BetweenWordsSilenceMillis OptInt32 `json:"between_words_silence_millis"`
	// Maximum threshold of a human greeting. If greeting longer than this value, considered machine.
	GreetingDurationMillis OptInt32 `json:"greeting_duration_millis"`
	// If initial silence duration is greater than this value, consider it a machine.
	InitialSilenceMillis OptInt32 `json:"initial_silence_millis"`
	// If number of detected words is greater than this value, consder it a machine.
	MaximumNumberOfWords OptInt32 `json:"maximum_number_of_words"`
	// If a single word lasts longer than this threshold, consider it a machine.
	MaximumWordLengthMillis OptInt32 `json:"maximum_word_length_millis"`
	// Minimum noise threshold for any analysis.
	SilenceThreshold OptInt32 `json:"silence_threshold"`
	// If machine already detected, maximum timeout threshold to determine the end of the machine
	// greeting.
	GreetingTotalAnalysisTimeMillis OptInt32 `json:"greeting_total_analysis_time_millis"`
	// If machine already detected, maximum threshold for silence between words. If exceeded, the
	// greeting is considered ended.
	GreetingSilenceDurationMillis OptInt32 `json:"greeting_silence_duration_millis"`
}

// GetTotalAnalysisTimeMillis returns the value of TotalAnalysisTimeMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) GetTotalAnalysisTimeMillis() OptInt32 {
	return s.TotalAnalysisTimeMillis
}

// GetAfterGreetingSilenceMillis returns the value of AfterGreetingSilenceMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) GetAfterGreetingSilenceMillis() OptInt32 {
	return s.AfterGreetingSilenceMillis
}

// GetBetweenWordsSilenceMillis returns the value of BetweenWordsSilenceMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) GetBetweenWordsSilenceMillis() OptInt32 {
	return s.BetweenWordsSilenceMillis
}

// GetGreetingDurationMillis returns the value of GreetingDurationMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) GetGreetingDurationMillis() OptInt32 {
	return s.GreetingDurationMillis
}

// GetInitialSilenceMillis returns the value of InitialSilenceMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) GetInitialSilenceMillis() OptInt32 {
	return s.InitialSilenceMillis
}

// GetMaximumNumberOfWords returns the value of MaximumNumberOfWords.
func (s *CallRequestAnsweringMachineDetectionConfig) GetMaximumNumberOfWords() OptInt32 {
	return s.MaximumNumberOfWords
}

// GetMaximumWordLengthMillis returns the value of MaximumWordLengthMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) GetMaximumWordLengthMillis() OptInt32 {
	return s.MaximumWordLengthMillis
}

// GetSilenceThreshold returns the value of SilenceThreshold.
func (s *CallRequestAnsweringMachineDetectionConfig) GetSilenceThreshold() OptInt32 {
	return s.SilenceThreshold
}

// GetGreetingTotalAnalysisTimeMillis returns the value of GreetingTotalAnalysisTimeMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) GetGreetingTotalAnalysisTimeMillis() OptInt32 {
	return s.GreetingTotalAnalysisTimeMillis
}

// GetGreetingSilenceDurationMillis returns the value of GreetingSilenceDurationMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) GetGreetingSilenceDurationMillis() OptInt32 {
	return s.GreetingSilenceDurationMillis
}

// SetTotalAnalysisTimeMillis sets the value of TotalAnalysisTimeMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) SetTotalAnalysisTimeMillis(val OptInt32) {
	s.TotalAnalysisTimeMillis = val
}

// SetAfterGreetingSilenceMillis sets the value of AfterGreetingSilenceMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) SetAfterGreetingSilenceMillis(val OptInt32) {
	s.AfterGreetingSilenceMillis = val
}

// SetBetweenWordsSilenceMillis sets the value of BetweenWordsSilenceMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) SetBetweenWordsSilenceMillis(val OptInt32) {
	s.BetweenWordsSilenceMillis = val
}

// SetGreetingDurationMillis sets the value of GreetingDurationMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) SetGreetingDurationMillis(val OptInt32) {
	s.GreetingDurationMillis = val
}

// SetInitialSilenceMillis sets the value of InitialSilenceMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) SetInitialSilenceMillis(val OptInt32) {
	s.InitialSilenceMillis = val
}

// SetMaximumNumberOfWords sets the value of MaximumNumberOfWords.
func (s *CallRequestAnsweringMachineDetectionConfig) SetMaximumNumberOfWords(val OptInt32) {
	s.MaximumNumberOfWords = val
}

// SetMaximumWordLengthMillis sets the value of MaximumWordLengthMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) SetMaximumWordLengthMillis(val OptInt32) {
	s.MaximumWordLengthMillis = val
}

// SetSilenceThreshold sets the value of SilenceThreshold.
func (s *CallRequestAnsweringMachineDetectionConfig) SetSilenceThreshold(val OptInt32) {
	s.SilenceThreshold = val
}

// SetGreetingTotalAnalysisTimeMillis sets the value of GreetingTotalAnalysisTimeMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) SetGreetingTotalAnalysisTimeMillis(val OptInt32) {
	s.GreetingTotalAnalysisTimeMillis = val
}

// SetGreetingSilenceDurationMillis sets the value of GreetingSilenceDurationMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) SetGreetingSilenceDurationMillis(val OptInt32) {
	s.GreetingSilenceDurationMillis = val
}

// Optional configuration parameters to dial new participant into a conference.
type CallRequestConferenceConfig struct {
	// Conference ID to be joined.
	ID OptUUID `json:"id"`
	// Conference name to be joined.
	ConferenceName OptString `json:"conference_name"`
	// Whether the conference should end and all remaining participants be hung up after the participant
	// leaves the conference. Defaults to "false".
	EndConferenceOnExit OptBool `json:"end_conference_on_exit"`
	// Whether the conference should end after the participant leaves the conference. NOTE this doesn't
	// hang up the other participants. Defaults to "false".
	SoftEndConferenceOnExit OptBool `json:"soft_end_conference_on_exit"`
	// Whether the participant should be put on hold immediately after joining the conference. Defaults
	// to "false".
	Hold OptBool `json:"hold"`
	// The URL of a file to be played to the participant when they are put on hold after joining the
	// conference. hold_media_name and hold_audio_url cannot be used together in one request. Takes
	// effect only when "start_conference_on_create" is set to "false". This property takes effect only
	// if "hold" is set to "true".
	HoldAudioURL OptString `json:"hold_audio_url"`
	// The media_name of a file to be played to the participant when they are put on hold after joining
	// the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media
	// by the same user/organization. The file must either be a WAV or MP3 file. Takes effect only when
	// "start_conference_on_create" is set to "false". This property takes effect only if "hold" is set
	// to "true".
	HoldMediaName OptString `json:"hold_media_name"`
	// Whether the participant should be muted immediately after joining the conference. Defaults to
	// "false".
	Mute OptBool `json:"mute"`
	// Whether the conference should be started after the participant joins the conference. Defaults to
	// "false".
	StartConferenceOnEnter OptBool `json:"start_conference_on_enter"`
	// Whether the conference should be started on creation. If the conference isn't started all
	// participants that join are automatically put on hold. Defaults to "true".
	StartConferenceOnCreate OptBool `json:"start_conference_on_create"`
	// Sets the joining participant as a supervisor for the conference. A conference can have multiple
	// supervisors. "barge" means the supervisor enters the conference as a normal participant. This is
	// the same as "none". "monitor" means the supervisor is muted but can hear all participants.
	// "whisper" means that only the specified "whisper_call_control_ids" can hear the supervisor.
	// Defaults to "none".
	SupervisorRole OptCallRequestConferenceConfigSupervisorRole `json:"supervisor_role"`
	// Array of unique call_control_ids the joining supervisor can whisper to. If none provided, the
	// supervisor will join the conference as a monitoring participant only.
	WhisperCallControlIds []string `json:"whisper_call_control_ids"`
	// Whether a beep sound should be played when the participant joins and/or leaves the conference. Can
	// be used to override the conference-level setting.
	BeepEnabled OptCallRequestConferenceConfigBeepEnabled `json:"beep_enabled"`
}

// GetID returns the value of ID.
func (s *CallRequestConferenceConfig) GetID() OptUUID {
	return s.ID
}

// GetConferenceName returns the value of ConferenceName.
func (s *CallRequestConferenceConfig) GetConferenceName() OptString {
	return s.ConferenceName
}

// GetEndConferenceOnExit returns the value of EndConferenceOnExit.
func (s *CallRequestConferenceConfig) GetEndConferenceOnExit() OptBool {
	return s.EndConferenceOnExit
}

// GetSoftEndConferenceOnExit returns the value of SoftEndConferenceOnExit.
func (s *CallRequestConferenceConfig) GetSoftEndConferenceOnExit() OptBool {
	return s.SoftEndConferenceOnExit
}

// GetHold returns the value of Hold.
func (s *CallRequestConferenceConfig) GetHold() OptBool {
	return s.Hold
}

// GetHoldAudioURL returns the value of HoldAudioURL.
func (s *CallRequestConferenceConfig) GetHoldAudioURL() OptString {
	return s.HoldAudioURL
}

// GetHoldMediaName returns the value of HoldMediaName.
func (s *CallRequestConferenceConfig) GetHoldMediaName() OptString {
	return s.HoldMediaName
}

// GetMute returns the value of Mute.
func (s *CallRequestConferenceConfig) GetMute() OptBool {
	return s.Mute
}

// GetStartConferenceOnEnter returns the value of StartConferenceOnEnter.
func (s *CallRequestConferenceConfig) GetStartConferenceOnEnter() OptBool {
	return s.StartConferenceOnEnter
}

// GetStartConferenceOnCreate returns the value of StartConferenceOnCreate.
func (s *CallRequestConferenceConfig) GetStartConferenceOnCreate() OptBool {
	return s.StartConferenceOnCreate
}

// GetSupervisorRole returns the value of SupervisorRole.
func (s *CallRequestConferenceConfig) GetSupervisorRole() OptCallRequestConferenceConfigSupervisorRole {
	return s.SupervisorRole
}

// GetWhisperCallControlIds returns the value of WhisperCallControlIds.
func (s *CallRequestConferenceConfig) GetWhisperCallControlIds() []string {
	return s.WhisperCallControlIds
}

// GetBeepEnabled returns the value of BeepEnabled.
func (s *CallRequestConferenceConfig) GetBeepEnabled() OptCallRequestConferenceConfigBeepEnabled {
	return s.BeepEnabled
}

// SetID sets the value of ID.
func (s *CallRequestConferenceConfig) SetID(val OptUUID) {
	s.ID = val
}

// SetConferenceName sets the value of ConferenceName.
func (s *CallRequestConferenceConfig) SetConferenceName(val OptString) {
	s.ConferenceName = val
}

// SetEndConferenceOnExit sets the value of EndConferenceOnExit.
func (s *CallRequestConferenceConfig) SetEndConferenceOnExit(val OptBool) {
	s.EndConferenceOnExit = val
}

// SetSoftEndConferenceOnExit sets the value of SoftEndConferenceOnExit.
func (s *CallRequestConferenceConfig) SetSoftEndConferenceOnExit(val OptBool) {
	s.SoftEndConferenceOnExit = val
}

// SetHold sets the value of Hold.
func (s *CallRequestConferenceConfig) SetHold(val OptBool) {
	s.Hold = val
}

// SetHoldAudioURL sets the value of HoldAudioURL.
func (s *CallRequestConferenceConfig) SetHoldAudioURL(val OptString) {
	s.HoldAudioURL = val
}

// SetHoldMediaName sets the value of HoldMediaName.
func (s *CallRequestConferenceConfig) SetHoldMediaName(val OptString) {
	s.HoldMediaName = val
}

// SetMute sets the value of Mute.
func (s *CallRequestConferenceConfig) SetMute(val OptBool) {
	s.Mute = val
}

// SetStartConferenceOnEnter sets the value of StartConferenceOnEnter.
func (s *CallRequestConferenceConfig) SetStartConferenceOnEnter(val OptBool) {
	s.StartConferenceOnEnter = val
}

// SetStartConferenceOnCreate sets the value of StartConferenceOnCreate.
func (s *CallRequestConferenceConfig) SetStartConferenceOnCreate(val OptBool) {
	s.StartConferenceOnCreate = val
}

// SetSupervisorRole sets the value of SupervisorRole.
func (s *CallRequestConferenceConfig) SetSupervisorRole(val OptCallRequestConferenceConfigSupervisorRole) {
	s.SupervisorRole = val
}

// SetWhisperCallControlIds sets the value of WhisperCallControlIds.
func (s *CallRequestConferenceConfig) SetWhisperCallControlIds(val []string) {
	s.WhisperCallControlIds = val
}

// SetBeepEnabled sets the value of BeepEnabled.
func (s *CallRequestConferenceConfig) SetBeepEnabled(val OptCallRequestConferenceConfigBeepEnabled) {
	s.BeepEnabled = val
}

// Whether a beep sound should be played when the participant joins and/or leaves the conference. Can
// be used to override the conference-level setting.
type CallRequestConferenceConfigBeepEnabled string

const (
	CallRequestConferenceConfigBeepEnabledAlways  CallRequestConferenceConfigBeepEnabled = "always"
	CallRequestConferenceConfigBeepEnabledNever   CallRequestConferenceConfigBeepEnabled = "never"
	CallRequestConferenceConfigBeepEnabledOnEnter CallRequestConferenceConfigBeepEnabled = "on_enter"
	CallRequestConferenceConfigBeepEnabledOnExit  CallRequestConferenceConfigBeepEnabled = "on_exit"
)

// AllValues returns all CallRequestConferenceConfigBeepEnabled values.
func (CallRequestConferenceConfigBeepEnabled) AllValues() []CallRequestConferenceConfigBeepEnabled {
	return []CallRequestConferenceConfigBeepEnabled{
		CallRequestConferenceConfigBeepEnabledAlways,
		CallRequestConferenceConfigBeepEnabledNever,
		CallRequestConferenceConfigBeepEnabledOnEnter,
		CallRequestConferenceConfigBeepEnabledOnExit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRequestConferenceConfigBeepEnabled) MarshalText() ([]byte, error) {
	switch s {
	case CallRequestConferenceConfigBeepEnabledAlways:
		return []byte(s), nil
	case CallRequestConferenceConfigBeepEnabledNever:
		return []byte(s), nil
	case CallRequestConferenceConfigBeepEnabledOnEnter:
		return []byte(s), nil
	case CallRequestConferenceConfigBeepEnabledOnExit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRequestConferenceConfigBeepEnabled) UnmarshalText(data []byte) error {
	switch CallRequestConferenceConfigBeepEnabled(data) {
	case CallRequestConferenceConfigBeepEnabledAlways:
		*s = CallRequestConferenceConfigBeepEnabledAlways
		return nil
	case CallRequestConferenceConfigBeepEnabledNever:
		*s = CallRequestConferenceConfigBeepEnabledNever
		return nil
	case CallRequestConferenceConfigBeepEnabledOnEnter:
		*s = CallRequestConferenceConfigBeepEnabledOnEnter
		return nil
	case CallRequestConferenceConfigBeepEnabledOnExit:
		*s = CallRequestConferenceConfigBeepEnabledOnExit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Sets the joining participant as a supervisor for the conference. A conference can have multiple
// supervisors. "barge" means the supervisor enters the conference as a normal participant. This is
// the same as "none". "monitor" means the supervisor is muted but can hear all participants.
// "whisper" means that only the specified "whisper_call_control_ids" can hear the supervisor.
// Defaults to "none".
type CallRequestConferenceConfigSupervisorRole string

const (
	CallRequestConferenceConfigSupervisorRoleBarge   CallRequestConferenceConfigSupervisorRole = "barge"
	CallRequestConferenceConfigSupervisorRoleMonitor CallRequestConferenceConfigSupervisorRole = "monitor"
	CallRequestConferenceConfigSupervisorRoleNone    CallRequestConferenceConfigSupervisorRole = "none"
	CallRequestConferenceConfigSupervisorRoleWhisper CallRequestConferenceConfigSupervisorRole = "whisper"
)

// AllValues returns all CallRequestConferenceConfigSupervisorRole values.
func (CallRequestConferenceConfigSupervisorRole) AllValues() []CallRequestConferenceConfigSupervisorRole {
	return []CallRequestConferenceConfigSupervisorRole{
		CallRequestConferenceConfigSupervisorRoleBarge,
		CallRequestConferenceConfigSupervisorRoleMonitor,
		CallRequestConferenceConfigSupervisorRoleNone,
		CallRequestConferenceConfigSupervisorRoleWhisper,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRequestConferenceConfigSupervisorRole) MarshalText() ([]byte, error) {
	switch s {
	case CallRequestConferenceConfigSupervisorRoleBarge:
		return []byte(s), nil
	case CallRequestConferenceConfigSupervisorRoleMonitor:
		return []byte(s), nil
	case CallRequestConferenceConfigSupervisorRoleNone:
		return []byte(s), nil
	case CallRequestConferenceConfigSupervisorRoleWhisper:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRequestConferenceConfigSupervisorRole) UnmarshalText(data []byte) error {
	switch CallRequestConferenceConfigSupervisorRole(data) {
	case CallRequestConferenceConfigSupervisorRoleBarge:
		*s = CallRequestConferenceConfigSupervisorRoleBarge
		return nil
	case CallRequestConferenceConfigSupervisorRoleMonitor:
		*s = CallRequestConferenceConfigSupervisorRoleMonitor
		return nil
	case CallRequestConferenceConfigSupervisorRoleNone:
		*s = CallRequestConferenceConfigSupervisorRoleNone
		return nil
	case CallRequestConferenceConfigSupervisorRoleWhisper:
		*s = CallRequestConferenceConfigSupervisorRoleWhisper
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Defines whether media should be encrypted on the call.
type CallRequestMediaEncryption string

const (
	CallRequestMediaEncryptionDisabled CallRequestMediaEncryption = "disabled"
	CallRequestMediaEncryptionSRTP     CallRequestMediaEncryption = "SRTP"
)

// AllValues returns all CallRequestMediaEncryption values.
func (CallRequestMediaEncryption) AllValues() []CallRequestMediaEncryption {
	return []CallRequestMediaEncryption{
		CallRequestMediaEncryptionDisabled,
		CallRequestMediaEncryptionSRTP,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRequestMediaEncryption) MarshalText() ([]byte, error) {
	switch s {
	case CallRequestMediaEncryptionDisabled:
		return []byte(s), nil
	case CallRequestMediaEncryptionSRTP:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRequestMediaEncryption) UnmarshalText(data []byte) error {
	switch CallRequestMediaEncryption(data) {
	case CallRequestMediaEncryptionDisabled:
		*s = CallRequestMediaEncryptionDisabled
		return nil
	case CallRequestMediaEncryptionSRTP:
		*s = CallRequestMediaEncryptionSRTP
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Start recording automatically after an event. Disabled by default.
type CallRequestRecord string

const (
	CallRequestRecordRecordFromAnswer CallRequestRecord = "record-from-answer"
)

// AllValues returns all CallRequestRecord values.
func (CallRequestRecord) AllValues() []CallRequestRecord {
	return []CallRequestRecord{
		CallRequestRecordRecordFromAnswer,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRequestRecord) MarshalText() ([]byte, error) {
	switch s {
	case CallRequestRecordRecordFromAnswer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRequestRecord) UnmarshalText(data []byte) error {
	switch CallRequestRecord(data) {
	case CallRequestRecordRecordFromAnswer:
		*s = CallRequestRecordRecordFromAnswer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Defines which channel should be recorded ('single' or 'dual') when `record` is specified.
type CallRequestRecordChannels string

const (
	CallRequestRecordChannelsSingle CallRequestRecordChannels = "single"
	CallRequestRecordChannelsDual   CallRequestRecordChannels = "dual"
)

// AllValues returns all CallRequestRecordChannels values.
func (CallRequestRecordChannels) AllValues() []CallRequestRecordChannels {
	return []CallRequestRecordChannels{
		CallRequestRecordChannelsSingle,
		CallRequestRecordChannelsDual,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRequestRecordChannels) MarshalText() ([]byte, error) {
	switch s {
	case CallRequestRecordChannelsSingle:
		return []byte(s), nil
	case CallRequestRecordChannelsDual:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRequestRecordChannels) UnmarshalText(data []byte) error {
	switch CallRequestRecordChannels(data) {
	case CallRequestRecordChannelsSingle:
		*s = CallRequestRecordChannelsSingle
		return nil
	case CallRequestRecordChannelsDual:
		*s = CallRequestRecordChannelsDual
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Defines the format of the recording ('wav' or 'mp3') when `record` is specified.
type CallRequestRecordFormat string

const (
	CallRequestRecordFormatWav CallRequestRecordFormat = "wav"
	CallRequestRecordFormatMp3 CallRequestRecordFormat = "mp3"
)

// AllValues returns all CallRequestRecordFormat values.
func (CallRequestRecordFormat) AllValues() []CallRequestRecordFormat {
	return []CallRequestRecordFormat{
		CallRequestRecordFormatWav,
		CallRequestRecordFormatMp3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRequestRecordFormat) MarshalText() ([]byte, error) {
	switch s {
	case CallRequestRecordFormatWav:
		return []byte(s), nil
	case CallRequestRecordFormatMp3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRequestRecordFormat) UnmarshalText(data []byte) error {
	switch CallRequestRecordFormat(data) {
	case CallRequestRecordFormatWav:
		*s = CallRequestRecordFormatWav
		return nil
	case CallRequestRecordFormatMp3:
		*s = CallRequestRecordFormatMp3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// When set to `trim-silence`, silence will be removed from the beginning and end of the recording.
type CallRequestRecordTrim string

const (
	CallRequestRecordTrimTrimSilence CallRequestRecordTrim = "trim-silence"
)

// AllValues returns all CallRequestRecordTrim values.
func (CallRequestRecordTrim) AllValues() []CallRequestRecordTrim {
	return []CallRequestRecordTrim{
		CallRequestRecordTrimTrimSilence,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRequestRecordTrim) MarshalText() ([]byte, error) {
	switch s {
	case CallRequestRecordTrimTrimSilence:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRequestRecordTrim) UnmarshalText(data []byte) error {
	switch CallRequestRecordTrim(data) {
	case CallRequestRecordTrimTrimSilence:
		*s = CallRequestRecordTrimTrimSilence
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Defines SIP transport protocol to be used on the call.
type CallRequestSipTransportProtocol string

const (
	CallRequestSipTransportProtocolUDP CallRequestSipTransportProtocol = "UDP"
	CallRequestSipTransportProtocolTCP CallRequestSipTransportProtocol = "TCP"
	CallRequestSipTransportProtocolTLS CallRequestSipTransportProtocol = "TLS"
)

// AllValues returns all CallRequestSipTransportProtocol values.
func (CallRequestSipTransportProtocol) AllValues() []CallRequestSipTransportProtocol {
	return []CallRequestSipTransportProtocol{
		CallRequestSipTransportProtocolUDP,
		CallRequestSipTransportProtocolTCP,
		CallRequestSipTransportProtocolTLS,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRequestSipTransportProtocol) MarshalText() ([]byte, error) {
	switch s {
	case CallRequestSipTransportProtocolUDP:
		return []byte(s), nil
	case CallRequestSipTransportProtocolTCP:
		return []byte(s), nil
	case CallRequestSipTransportProtocolTLS:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRequestSipTransportProtocol) UnmarshalText(data []byte) error {
	switch CallRequestSipTransportProtocol(data) {
	case CallRequestSipTransportProtocolUDP:
		*s = CallRequestSipTransportProtocolUDP
		return nil
	case CallRequestSipTransportProtocolTCP:
		*s = CallRequestSipTransportProtocolTCP
		return nil
	case CallRequestSipTransportProtocolTLS:
		*s = CallRequestSipTransportProtocolTLS
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Specifies which track should be streamed.
type CallRequestStreamTrack string

const (
	CallRequestStreamTrackInboundTrack  CallRequestStreamTrack = "inbound_track"
	CallRequestStreamTrackOutboundTrack CallRequestStreamTrack = "outbound_track"
	CallRequestStreamTrackBothTracks    CallRequestStreamTrack = "both_tracks"
)

// AllValues returns all CallRequestStreamTrack values.
func (CallRequestStreamTrack) AllValues() []CallRequestStreamTrack {
	return []CallRequestStreamTrack{
		CallRequestStreamTrackInboundTrack,
		CallRequestStreamTrackOutboundTrack,
		CallRequestStreamTrackBothTracks,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRequestStreamTrack) MarshalText() ([]byte, error) {
	switch s {
	case CallRequestStreamTrackInboundTrack:
		return []byte(s), nil
	case CallRequestStreamTrackOutboundTrack:
		return []byte(s), nil
	case CallRequestStreamTrackBothTracks:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRequestStreamTrack) UnmarshalText(data []byte) error {
	switch CallRequestStreamTrack(data) {
	case CallRequestStreamTrackInboundTrack:
		*s = CallRequestStreamTrackInboundTrack
		return nil
	case CallRequestStreamTrackOutboundTrack:
		*s = CallRequestStreamTrackOutboundTrack
		return nil
	case CallRequestStreamTrackBothTracks:
		*s = CallRequestStreamTrackBothTracks
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The DID or SIP URI to dial out to. Multiple DID or SIP URIs can be provided using an array of
// strings.
// CallRequestTo represents sum type.
type CallRequestTo struct {
	Type        CallRequestToType // switch on this field
	String      string
	StringArray []string
}

// CallRequestToType is oneOf type of CallRequestTo.
type CallRequestToType string

// Possible values for CallRequestToType.
const (
	StringCallRequestTo      CallRequestToType = "string"
	StringArrayCallRequestTo CallRequestToType = "[]string"
)

// IsString reports whether CallRequestTo is string.
func (s CallRequestTo) IsString() bool { return s.Type == StringCallRequestTo }

// IsStringArray reports whether CallRequestTo is []string.
func (s CallRequestTo) IsStringArray() bool { return s.Type == StringArrayCallRequestTo }

// SetString sets CallRequestTo to string.
func (s *CallRequestTo) SetString(v string) {
	s.Type = StringCallRequestTo
	s.String = v
}

// GetString returns string and true boolean if CallRequestTo is string.
func (s CallRequestTo) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringCallRequestTo returns new CallRequestTo from string.
func NewStringCallRequestTo(v string) CallRequestTo {
	var s CallRequestTo
	s.SetString(v)
	return s
}

// SetStringArray sets CallRequestTo to []string.
func (s *CallRequestTo) SetStringArray(v []string) {
	s.Type = StringArrayCallRequestTo
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if CallRequestTo is []string.
func (s CallRequestTo) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayCallRequestTo returns new CallRequestTo from []string.
func NewStringArrayCallRequestTo(v []string) CallRequestTo {
	var s CallRequestTo
	s.SetStringArray(v)
	return s
}

// HTTP request type used for `webhook_url`.
type CallRequestWebhookURLMethod string

const (
	CallRequestWebhookURLMethodPOST CallRequestWebhookURLMethod = "POST"
	CallRequestWebhookURLMethodGET  CallRequestWebhookURLMethod = "GET"
)

// AllValues returns all CallRequestWebhookURLMethod values.
func (CallRequestWebhookURLMethod) AllValues() []CallRequestWebhookURLMethod {
	return []CallRequestWebhookURLMethod{
		CallRequestWebhookURLMethodPOST,
		CallRequestWebhookURLMethodGET,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRequestWebhookURLMethod) MarshalText() ([]byte, error) {
	switch s {
	case CallRequestWebhookURLMethodPOST:
		return []byte(s), nil
	case CallRequestWebhookURLMethodGET:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRequestWebhookURLMethod) UnmarshalText(data []byte) error {
	switch CallRequestWebhookURLMethod(data) {
	case CallRequestWebhookURLMethodPOST:
		*s = CallRequestWebhookURLMethodPOST
		return nil
	case CallRequestWebhookURLMethodGET:
		*s = CallRequestWebhookURLMethodGET
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CallResource
type CallResource struct {
	// The id of the account the resource belongs to.
	AccountSid OptString `json:"account_sid"`
	// The value of the answering machine detection result, if this feature was enabled for the call.
	AnsweredBy OptCallResourceAnsweredBy `json:"answered_by"`
	// Caller ID, if present.
	CallerName OptString `json:"caller_name"`
	// The timestamp of when the resource was created.
	DateCreated OptString `json:"date_created"`
	// The timestamp of when the resource was last updated.
	DateUpdated OptString `json:"date_updated"`
	// The direction of this call.
	Direction OptCallResourceDirection `json:"direction"`
	// The duration of this call, given in seconds.
	Duration OptString `json:"duration"`
	// The end time of this call.
	EndTime OptString `json:"end_time"`
	// The phone number or SIP address that made this call.
	From OptString `json:"from"`
	// The from number formatted for display.
	FromFormatted OptString `json:"from_formatted"`
	// The price of this call, the currency is specified in the price_unit field. Only populated when the
	// call cost feature is enabled for the account.
	Price OptString `json:"price"`
	// The unit in which the price is given.
	PriceUnit OptString `json:"price_unit"`
	// The identifier of this call.
	Sid OptString `json:"sid"`
	// The start time of this call.
	StartTime OptString `json:"start_time"`
	// The status of this call.
	Status OptCallResourceStatus `json:"status"`
	// The phone number or SIP address that received this call.
	To OptString `json:"to"`
	// The to number formatted for display.
	ToFormatted OptString `json:"to_formatted"`
	// The relative URI for this call.
	URI OptString `json:"uri"`
}

// GetAccountSid returns the value of AccountSid.
func (s *CallResource) GetAccountSid() OptString {
	return s.AccountSid
}

// GetAnsweredBy returns the value of AnsweredBy.
func (s *CallResource) GetAnsweredBy() OptCallResourceAnsweredBy {
	return s.AnsweredBy
}

// GetCallerName returns the value of CallerName.
func (s *CallResource) GetCallerName() OptString {
	return s.CallerName
}

// GetDateCreated returns the value of DateCreated.
func (s *CallResource) GetDateCreated() OptString {
	return s.DateCreated
}

// GetDateUpdated returns the value of DateUpdated.
func (s *CallResource) GetDateUpdated() OptString {
	return s.DateUpdated
}

// GetDirection returns the value of Direction.
func (s *CallResource) GetDirection() OptCallResourceDirection {
	return s.Direction
}

// GetDuration returns the value of Duration.
func (s *CallResource) GetDuration() OptString {
	return s.Duration
}

// GetEndTime returns the value of EndTime.
func (s *CallResource) GetEndTime() OptString {
	return s.EndTime
}

// GetFrom returns the value of From.
func (s *CallResource) GetFrom() OptString {
	return s.From
}

// GetFromFormatted returns the value of FromFormatted.
func (s *CallResource) GetFromFormatted() OptString {
	return s.FromFormatted
}

// GetPrice returns the value of Price.
func (s *CallResource) GetPrice() OptString {
	return s.Price
}

// GetPriceUnit returns the value of PriceUnit.
func (s *CallResource) GetPriceUnit() OptString {
	return s.PriceUnit
}

// GetSid returns the value of Sid.
func (s *CallResource) GetSid() OptString {
	return s.Sid
}

// GetStartTime returns the value of StartTime.
func (s *CallResource) GetStartTime() OptString {
	return s.StartTime
}

// GetStatus returns the value of Status.
func (s *CallResource) GetStatus() OptCallResourceStatus {
	return s.Status
}

// GetTo returns the value of To.
func (s *CallResource) GetTo() OptString {
	return s.To
}

// GetToFormatted returns the value of ToFormatted.
func (s *CallResource) GetToFormatted() OptString {
	return s.ToFormatted
}

// GetURI returns the value of URI.
func (s *CallResource) GetURI() OptString {
	return s.URI
}

// SetAccountSid sets the value of AccountSid.
func (s *CallResource) SetAccountSid(val OptString) {
	s.AccountSid = val
}

// SetAnsweredBy sets the value of AnsweredBy.
func (s *CallResource) SetAnsweredBy(val OptCallResourceAnsweredBy) {
	s.AnsweredBy = val
}

// SetCallerName sets the value of CallerName.
func (s *CallResource) SetCallerName(val OptString) {
	s.CallerName = val
}

// SetDateCreated sets the value of DateCreated.
func (s *CallResource) SetDateCreated(val OptString) {
	s.DateCreated = val
}

// SetDateUpdated sets the value of DateUpdated.
func (s *CallResource) SetDateUpdated(val OptString) {
	s.DateUpdated = val
}

// SetDirection sets the value of Direction.
func (s *CallResource) SetDirection(val OptCallResourceDirection) {
	s.Direction = val
}

// SetDuration sets the value of Duration.
func (s *CallResource) SetDuration(val OptString) {
	s.Duration = val
}

// SetEndTime sets the value of EndTime.
func (s *CallResource) SetEndTime(val OptString) {
	s.EndTime = val
}

// SetFrom sets the value of From.
func (s *CallResource) SetFrom(val OptString) {
	s.From = val
}

// SetFromFormatted sets the value of FromFormatted.
func (s *CallResource) SetFromFormatted(val OptString) {
	s.FromFormatted = val
}

// SetPrice sets the value of Price.
func (s *CallResource) SetPrice(val OptString) {
	s.Price = val
}

// SetPriceUnit sets the value of PriceUnit.
func (s *CallResource) SetPriceUnit(val OptString) {
	s.PriceUnit = val
}

// SetSid sets the value of Sid.
func (s *CallResource) SetSid(val OptString) {
	s.Sid = val
}

// SetStartTime sets the value of StartTime.
func (s *CallResource) SetStartTime(val OptString) {
	s.StartTime = val
}

// SetStatus sets the value of Status.
func (s *CallResource) SetStatus(val OptCallResourceStatus) {
	s.Status = val
}

// SetTo sets the value of To.
func (s *CallResource) SetTo(val OptString) {
	s.To = val
}

// SetToFormatted sets the value of ToFormatted.
func (s *CallResource) SetToFormatted(val OptString) {
	s.ToFormatted = val
}

// SetURI sets the value of URI.
func (s *CallResource) SetURI(val OptString) {
	s.URI = val
}

// The value of the answering machine detection result, if this feature was enabled for the call.
type CallResourceAnsweredBy string

const (
	CallResourceAnsweredByHuman   CallResourceAnsweredBy = "human"
	CallResourceAnsweredByMachine CallResourceAnsweredBy = "machine"
	CallResourceAnsweredByNotSure CallResourceAnsweredBy = "not_sure"
)

// AllValues returns all CallResourceAnsweredBy values.
func (CallResourceAnsweredBy) AllValues() []CallResourceAnsweredBy {
	return []CallResourceAnsweredBy{
		CallResourceAnsweredByHuman,
		CallResourceAnsweredByMachine,
		CallResourceAnsweredByNotSure,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallResourceAnsweredBy) MarshalText() ([]byte, error) {
	switch s {
	case CallResourceAnsweredByHuman:
		return []byte(s), nil
	case CallResourceAnsweredByMachine:
		return []byte(s), nil
	case CallResourceAnsweredByNotSure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallResourceAnsweredBy) UnmarshalText(data []byte) error {
	switch CallResourceAnsweredBy(data) {
	case CallResourceAnsweredByHuman:
		*s = CallResourceAnsweredByHuman
		return nil
	case CallResourceAnsweredByMachine:
		*s = CallResourceAnsweredByMachine
		return nil
	case CallResourceAnsweredByNotSure:
		*s = CallResourceAnsweredByNotSure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The direction of this call.
type CallResourceDirection string

const (
	CallResourceDirectionInbound  CallResourceDirection = "inbound"
	CallResourceDirectionOutbound CallResourceDirection = "outbound"
)

// AllValues returns all CallResourceDirection values.
func (CallResourceDirection) AllValues() []CallResourceDirection {
	return []CallResourceDirection{
		CallResourceDirectionInbound,
		CallResourceDirectionOutbound,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallResourceDirection) MarshalText() ([]byte, error) {
	switch s {
	case CallResourceDirectionInbound:
		return []byte(s), nil
	case CallResourceDirectionOutbound:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallResourceDirection) UnmarshalText(data []byte) error {
	switch CallResourceDirection(data) {
	case CallResourceDirectionInbound:
		*s = CallResourceDirectionInbound
		return nil
	case CallResourceDirectionOutbound:
		*s = CallResourceDirectionOutbound
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CallResourceIndex
type CallResourceIndex struct {
	Calls []CallResource `json:"calls"`
	// The number of the last element on the page, zero-indexed.
	End OptInt `json:"end"`
	// /v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Calls.json?Page=0&PageSize=1.
	FirstPageURI OptString `json:"first_page_uri"`
	// /v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Calls.
	// json?Page=1&PageSize=1&PageToken=MTY4AjgyNDkwNzIxMQ.
	NextPageURI OptString `json:"next_page_uri"`
	// Current page number, zero-indexed.
	Page OptInt `json:"page"`
	// The number of items on the page.
	PageSize OptInt `json:"page_size"`
	// The number of the first element on the page, zero-indexed.
	Start OptInt `json:"start"`
	// The URI of the current page.
	URI OptString `json:"uri"`
}

// GetCalls returns the value of Calls.
func (s *CallResourceIndex) GetCalls() []CallResource {
	return s.Calls
}

// GetEnd returns the value of End.
func (s *CallResourceIndex) GetEnd() OptInt {
	return s.End
}

// GetFirstPageURI returns the value of FirstPageURI.
func (s *CallResourceIndex) GetFirstPageURI() OptString {
	return s.FirstPageURI
}

// GetNextPageURI returns the value of NextPageURI.
func (s *CallResourceIndex) GetNextPageURI() OptString {
	return s.NextPageURI
}

// GetPage returns the value of Page.
func (s *CallResourceIndex) GetPage() OptInt {
	return s.Page
}

// GetPageSize returns the value of PageSize.
func (s *CallResourceIndex) GetPageSize() OptInt {
	return s.PageSize
}

// GetStart returns the value of Start.
func (s *CallResourceIndex) GetStart() OptInt {
	return s.Start
}

// GetURI returns the value of URI.
func (s *CallResourceIndex) GetURI() OptString {
	return s.URI
}

// SetCalls sets the value of Calls.
func (s *CallResourceIndex) SetCalls(val []CallResource) {
	s.Calls = val
}

// SetEnd sets the value of End.
func (s *CallResourceIndex) SetEnd(val OptInt) {
	s.End = val
}

// SetFirstPageURI sets the value of FirstPageURI.
func (s *CallResourceIndex) SetFirstPageURI(val OptString) {
	s.FirstPageURI = val
}

// SetNextPageURI sets the value of NextPageURI.
func (s *CallResourceIndex) SetNextPageURI(val OptString) {
	s.NextPageURI = val
}

// SetPage sets the value of Page.
func (s *CallResourceIndex) SetPage(val OptInt) {
	s.Page = val
}

// SetPageSize sets the value of PageSize.
func (s *CallResourceIndex) SetPageSize(val OptInt) {
	s.PageSize = val
}

// SetStart sets the value of Start.
func (s *CallResourceIndex) SetStart(val OptInt) {
	s.Start = val
}

// SetURI sets the value of URI.
func (s *CallResourceIndex) SetURI(val OptString) {
	s.URI = val
}

// The status of this call.
type CallResourceStatus string

const (
	CallResourceStatusRinging    CallResourceStatus = "ringing"
	CallResourceStatusInProgress CallResourceStatus = "in-progress"
	CallResourceStatusCanceled   CallResourceStatus = "canceled"
	CallResourceStatusCompleted  CallResourceStatus = "completed"
	CallResourceStatusFailed     CallResourceStatus = "failed"
	CallResourceStatusBusy       CallResourceStatus = "busy"
	CallResourceStatusNoAnswer   CallResourceStatus = "no-answer"
)

// AllValues returns all CallResourceStatus values.
func (CallResourceStatus) AllValues() []CallResourceStatus {
	return []CallResourceStatus{
		CallResourceStatusRinging,
		CallResourceStatusInProgress,
		CallResourceStatusCanceled,
		CallResourceStatusCompleted,
		CallResourceStatusFailed,
		CallResourceStatusBusy,
		CallResourceStatusNoAnswer,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallResourceStatus) MarshalText() ([]byte, error) {
	switch s {
	case CallResourceStatusRinging:
		return []byte(s), nil
	case CallResourceStatusInProgress:
		return []byte(s), nil
	case CallResourceStatusCanceled:
		return []byte(s), nil
	case CallResourceStatusCompleted:
		return []byte(s), nil
	case CallResourceStatusFailed:
		return []byte(s), nil
	case CallResourceStatusBusy:
		return []byte(s), nil
	case CallResourceStatusNoAnswer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallResourceStatus) UnmarshalText(data []byte) error {
	switch CallResourceStatus(data) {
	case CallResourceStatusRinging:
		*s = CallResourceStatusRinging
		return nil
	case CallResourceStatusInProgress:
		*s = CallResourceStatusInProgress
		return nil
	case CallResourceStatusCanceled:
		*s = CallResourceStatusCanceled
		return nil
	case CallResourceStatusCompleted:
		*s = CallResourceStatusCompleted
		return nil
	case CallResourceStatusFailed:
		*s = CallResourceStatusFailed
		return nil
	case CallResourceStatusBusy:
		*s = CallResourceStatusBusy
		return nil
	case CallResourceStatusNoAnswer:
		*s = CallResourceStatusNoAnswer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ClientStateUpdateRequest
type ClientStateUpdateRequest struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState string `json:"client_state"`
}

// GetClientState returns the value of ClientState.
func (s *ClientStateUpdateRequest) GetClientState() string {
	return s.ClientState
}

// SetClientState sets the value of ClientState.
func (s *ClientStateUpdateRequest) SetClientState(val string) {
	s.ClientState = val
}

// Ref: #/components/schemas/ConferenceRecordingResource
type ConferenceRecordingResource struct {
	// The id of the account the resource belongs to.
	AccountSid OptString `json:"account_sid"`
	// The identifier of the related participant's call.
	CallSid OptString `json:"call_sid"`
	// The number of channels in the recording.
	Channels OptInt `json:"channels"`
	// The identifier of the related conference.
	ConferenceSid OptString `json:"conference_sid"`
	// The timestamp of when the resource was created.
	DateCreated OptString `json:"date_created"`
	// The timestamp of when the resource was last updated.
	DateUpdated OptString `json:"date_updated"`
	// Duratin of the recording in seconds.
	Duration OptInt `json:"duration"`
	// The recording error, if any.
	ErrorCode OptString `json:"error_code"`
	// The URL to use to download the recording.
	MediaURL OptString `json:"media_url"`
	// The unique identifier of the recording.
	Sid OptString `json:"sid"`
	// How the recording was started.
	Source OptConferenceRecordingResourceSource `json:"source"`
	// The timestamp of when the recording was started.
	StartTime OptString `json:"start_time"`
	// The status of the recording.
	Status OptConferenceRecordingResourceStatus `json:"status"`
	// A list of related resources identified by their relative URIs.
	SubresourceUris OptConferenceRecordingResourceSubresourceUris `json:"subresource_uris"`
	// The relative URI for this recording.
	URI OptString `json:"uri"`
}

// GetAccountSid returns the value of AccountSid.
func (s *ConferenceRecordingResource) GetAccountSid() OptString {
	return s.AccountSid
}

// GetCallSid returns the value of CallSid.
func (s *ConferenceRecordingResource) GetCallSid() OptString {
	return s.CallSid
}

// GetChannels returns the value of Channels.
func (s *ConferenceRecordingResource) GetChannels() OptInt {
	return s.Channels
}

// GetConferenceSid returns the value of ConferenceSid.
func (s *ConferenceRecordingResource) GetConferenceSid() OptString {
	return s.ConferenceSid
}

// GetDateCreated returns the value of DateCreated.
func (s *ConferenceRecordingResource) GetDateCreated() OptString {
	return s.DateCreated
}

// GetDateUpdated returns the value of DateUpdated.
func (s *ConferenceRecordingResource) GetDateUpdated() OptString {
	return s.DateUpdated
}

// GetDuration returns the value of Duration.
func (s *ConferenceRecordingResource) GetDuration() OptInt {
	return s.Duration
}

// GetErrorCode returns the value of ErrorCode.
func (s *ConferenceRecordingResource) GetErrorCode() OptString {
	return s.ErrorCode
}

// GetMediaURL returns the value of MediaURL.
func (s *ConferenceRecordingResource) GetMediaURL() OptString {
	return s.MediaURL
}

// GetSid returns the value of Sid.
func (s *ConferenceRecordingResource) GetSid() OptString {
	return s.Sid
}

// GetSource returns the value of Source.
func (s *ConferenceRecordingResource) GetSource() OptConferenceRecordingResourceSource {
	return s.Source
}

// GetStartTime returns the value of StartTime.
func (s *ConferenceRecordingResource) GetStartTime() OptString {
	return s.StartTime
}

// GetStatus returns the value of Status.
func (s *ConferenceRecordingResource) GetStatus() OptConferenceRecordingResourceStatus {
	return s.Status
}

// GetSubresourceUris returns the value of SubresourceUris.
func (s *ConferenceRecordingResource) GetSubresourceUris() OptConferenceRecordingResourceSubresourceUris {
	return s.SubresourceUris
}

// GetURI returns the value of URI.
func (s *ConferenceRecordingResource) GetURI() OptString {
	return s.URI
}

// SetAccountSid sets the value of AccountSid.
func (s *ConferenceRecordingResource) SetAccountSid(val OptString) {
	s.AccountSid = val
}

// SetCallSid sets the value of CallSid.
func (s *ConferenceRecordingResource) SetCallSid(val OptString) {
	s.CallSid = val
}

// SetChannels sets the value of Channels.
func (s *ConferenceRecordingResource) SetChannels(val OptInt) {
	s.Channels = val
}

// SetConferenceSid sets the value of ConferenceSid.
func (s *ConferenceRecordingResource) SetConferenceSid(val OptString) {
	s.ConferenceSid = val
}

// SetDateCreated sets the value of DateCreated.
func (s *ConferenceRecordingResource) SetDateCreated(val OptString) {
	s.DateCreated = val
}

// SetDateUpdated sets the value of DateUpdated.
func (s *ConferenceRecordingResource) SetDateUpdated(val OptString) {
	s.DateUpdated = val
}

// SetDuration sets the value of Duration.
func (s *ConferenceRecordingResource) SetDuration(val OptInt) {
	s.Duration = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *ConferenceRecordingResource) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

// SetMediaURL sets the value of MediaURL.
func (s *ConferenceRecordingResource) SetMediaURL(val OptString) {
	s.MediaURL = val
}

// SetSid sets the value of Sid.
func (s *ConferenceRecordingResource) SetSid(val OptString) {
	s.Sid = val
}

// SetSource sets the value of Source.
func (s *ConferenceRecordingResource) SetSource(val OptConferenceRecordingResourceSource) {
	s.Source = val
}

// SetStartTime sets the value of StartTime.
func (s *ConferenceRecordingResource) SetStartTime(val OptString) {
	s.StartTime = val
}

// SetStatus sets the value of Status.
func (s *ConferenceRecordingResource) SetStatus(val OptConferenceRecordingResourceStatus) {
	s.Status = val
}

// SetSubresourceUris sets the value of SubresourceUris.
func (s *ConferenceRecordingResource) SetSubresourceUris(val OptConferenceRecordingResourceSubresourceUris) {
	s.SubresourceUris = val
}

// SetURI sets the value of URI.
func (s *ConferenceRecordingResource) SetURI(val OptString) {
	s.URI = val
}

// Ref: #/components/schemas/ConferenceRecordingResourceIndex
type ConferenceRecordingResourceIndex struct {
	Recordings []ConferenceRecordingResource `json:"recordings"`
	// The number of the last element on the page, zero-indexed.
	End OptInt `json:"end"`
	// /v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences/6dc6cc1a-1ba1-4351-86b8-4c22c95cd98f/Recordings.json?page=0&pagesize=20.
	FirstPageURI OptString `json:"first_page_uri"`
	// /v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences/6dc6cc1a-1ba1-4351-86b8-4c22c95cd98f/Recordings.json?Page=1&PageSize=1&PageToken=MTY4AjgyNDkwNzIxMQ.
	NextPageURI OptString `json:"next_page_uri"`
	// Current page number, zero-indexed.
	Page OptInt `json:"page"`
	// The number of items on the page.
	PageSize OptInt `json:"page_size"`
	// The number of the first element on the page, zero-indexed.
	Start OptInt `json:"start"`
	// The URI of the current page.
	URI OptString `json:"uri"`
}

// GetRecordings returns the value of Recordings.
func (s *ConferenceRecordingResourceIndex) GetRecordings() []ConferenceRecordingResource {
	return s.Recordings
}

// GetEnd returns the value of End.
func (s *ConferenceRecordingResourceIndex) GetEnd() OptInt {
	return s.End
}

// GetFirstPageURI returns the value of FirstPageURI.
func (s *ConferenceRecordingResourceIndex) GetFirstPageURI() OptString {
	return s.FirstPageURI
}

// GetNextPageURI returns the value of NextPageURI.
func (s *ConferenceRecordingResourceIndex) GetNextPageURI() OptString {
	return s.NextPageURI
}

// GetPage returns the value of Page.
func (s *ConferenceRecordingResourceIndex) GetPage() OptInt {
	return s.Page
}

// GetPageSize returns the value of PageSize.
func (s *ConferenceRecordingResourceIndex) GetPageSize() OptInt {
	return s.PageSize
}

// GetStart returns the value of Start.
func (s *ConferenceRecordingResourceIndex) GetStart() OptInt {
	return s.Start
}

// GetURI returns the value of URI.
func (s *ConferenceRecordingResourceIndex) GetURI() OptString {
	return s.URI
}

// SetRecordings sets the value of Recordings.
func (s *ConferenceRecordingResourceIndex) SetRecordings(val []ConferenceRecordingResource) {
	s.Recordings = val
}

// SetEnd sets the value of End.
func (s *ConferenceRecordingResourceIndex) SetEnd(val OptInt) {
	s.End = val
}

// SetFirstPageURI sets the value of FirstPageURI.
func (s *ConferenceRecordingResourceIndex) SetFirstPageURI(val OptString) {
	s.FirstPageURI = val
}

// SetNextPageURI sets the value of NextPageURI.
func (s *ConferenceRecordingResourceIndex) SetNextPageURI(val OptString) {
	s.NextPageURI = val
}

// SetPage sets the value of Page.
func (s *ConferenceRecordingResourceIndex) SetPage(val OptInt) {
	s.Page = val
}

// SetPageSize sets the value of PageSize.
func (s *ConferenceRecordingResourceIndex) SetPageSize(val OptInt) {
	s.PageSize = val
}

// SetStart sets the value of Start.
func (s *ConferenceRecordingResourceIndex) SetStart(val OptInt) {
	s.Start = val
}

// SetURI sets the value of URI.
func (s *ConferenceRecordingResourceIndex) SetURI(val OptString) {
	s.URI = val
}

// How the recording was started.
type ConferenceRecordingResourceSource string

const (
	ConferenceRecordingResourceSourceDialVerb                    ConferenceRecordingResourceSource = "DialVerb"
	ConferenceRecordingResourceSourceConference                  ConferenceRecordingResourceSource = "Conference"
	ConferenceRecordingResourceSourceOutboundAPI                 ConferenceRecordingResourceSource = "OutboundAPI"
	ConferenceRecordingResourceSourceTrunking                    ConferenceRecordingResourceSource = "Trunking"
	ConferenceRecordingResourceSourceRecordVerb                  ConferenceRecordingResourceSource = "RecordVerb"
	ConferenceRecordingResourceSourceStartCallRecordingAPI       ConferenceRecordingResourceSource = "StartCallRecordingAPI"
	ConferenceRecordingResourceSourceStartConferenceRecordingAPI ConferenceRecordingResourceSource = "StartConferenceRecordingAPI"
)

// AllValues returns all ConferenceRecordingResourceSource values.
func (ConferenceRecordingResourceSource) AllValues() []ConferenceRecordingResourceSource {
	return []ConferenceRecordingResourceSource{
		ConferenceRecordingResourceSourceDialVerb,
		ConferenceRecordingResourceSourceConference,
		ConferenceRecordingResourceSourceOutboundAPI,
		ConferenceRecordingResourceSourceTrunking,
		ConferenceRecordingResourceSourceRecordVerb,
		ConferenceRecordingResourceSourceStartCallRecordingAPI,
		ConferenceRecordingResourceSourceStartConferenceRecordingAPI,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ConferenceRecordingResourceSource) MarshalText() ([]byte, error) {
	switch s {
	case ConferenceRecordingResourceSourceDialVerb:
		return []byte(s), nil
	case ConferenceRecordingResourceSourceConference:
		return []byte(s), nil
	case ConferenceRecordingResourceSourceOutboundAPI:
		return []byte(s), nil
	case ConferenceRecordingResourceSourceTrunking:
		return []byte(s), nil
	case ConferenceRecordingResourceSourceRecordVerb:
		return []byte(s), nil
	case ConferenceRecordingResourceSourceStartCallRecordingAPI:
		return []byte(s), nil
	case ConferenceRecordingResourceSourceStartConferenceRecordingAPI:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConferenceRecordingResourceSource) UnmarshalText(data []byte) error {
	switch ConferenceRecordingResourceSource(data) {
	case ConferenceRecordingResourceSourceDialVerb:
		*s = ConferenceRecordingResourceSourceDialVerb
		return nil
	case ConferenceRecordingResourceSourceConference:
		*s = ConferenceRecordingResourceSourceConference
		return nil
	case ConferenceRecordingResourceSourceOutboundAPI:
		*s = ConferenceRecordingResourceSourceOutboundAPI
		return nil
	case ConferenceRecordingResourceSourceTrunking:
		*s = ConferenceRecordingResourceSourceTrunking
		return nil
	case ConferenceRecordingResourceSourceRecordVerb:
		*s = ConferenceRecordingResourceSourceRecordVerb
		return nil
	case ConferenceRecordingResourceSourceStartCallRecordingAPI:
		*s = ConferenceRecordingResourceSourceStartCallRecordingAPI
		return nil
	case ConferenceRecordingResourceSourceStartConferenceRecordingAPI:
		*s = ConferenceRecordingResourceSourceStartConferenceRecordingAPI
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The status of the recording.
type ConferenceRecordingResourceStatus string

const (
	ConferenceRecordingResourceStatusProcessing ConferenceRecordingResourceStatus = "processing"
	ConferenceRecordingResourceStatusAbsent     ConferenceRecordingResourceStatus = "absent"
	ConferenceRecordingResourceStatusCompleted  ConferenceRecordingResourceStatus = "completed"
	ConferenceRecordingResourceStatusDeleted    ConferenceRecordingResourceStatus = "deleted"
)

// AllValues returns all ConferenceRecordingResourceStatus values.
func (ConferenceRecordingResourceStatus) AllValues() []ConferenceRecordingResourceStatus {
	return []ConferenceRecordingResourceStatus{
		ConferenceRecordingResourceStatusProcessing,
		ConferenceRecordingResourceStatusAbsent,
		ConferenceRecordingResourceStatusCompleted,
		ConferenceRecordingResourceStatusDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ConferenceRecordingResourceStatus) MarshalText() ([]byte, error) {
	switch s {
	case ConferenceRecordingResourceStatusProcessing:
		return []byte(s), nil
	case ConferenceRecordingResourceStatusAbsent:
		return []byte(s), nil
	case ConferenceRecordingResourceStatusCompleted:
		return []byte(s), nil
	case ConferenceRecordingResourceStatusDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConferenceRecordingResourceStatus) UnmarshalText(data []byte) error {
	switch ConferenceRecordingResourceStatus(data) {
	case ConferenceRecordingResourceStatusProcessing:
		*s = ConferenceRecordingResourceStatusProcessing
		return nil
	case ConferenceRecordingResourceStatusAbsent:
		*s = ConferenceRecordingResourceStatusAbsent
		return nil
	case ConferenceRecordingResourceStatusCompleted:
		*s = ConferenceRecordingResourceStatusCompleted
		return nil
	case ConferenceRecordingResourceStatusDeleted:
		*s = ConferenceRecordingResourceStatusDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A list of related resources identified by their relative URIs.
type ConferenceRecordingResourceSubresourceUris map[string]jx.Raw

func (s *ConferenceRecordingResourceSubresourceUris) init() ConferenceRecordingResourceSubresourceUris {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/ConferenceResource
type ConferenceResource struct {
	// The id of the account the resource belongs to.
	AccountSid OptString `json:"account_sid"`
	// The version of the API that was used to make the request.
	APIVersion OptString `json:"api_version"`
	// Caller ID, if present.
	CallSidEndingConference OptString `json:"call_sid_ending_conference"`
	// The timestamp of when the resource was created.
	DateCreated OptString `json:"date_created"`
	// The timestamp of when the resource was last updated.
	DateUpdated OptString `json:"date_updated"`
	// A string that you assigned to describe this conference room.
	FriendlyName OptString `json:"friendly_name"`
	// The reason why a conference ended. When a conference is in progress, will be null.
	ReasonConferenceEnded OptConferenceResourceReasonConferenceEnded `json:"reason_conference_ended"`
	// A string representing the region where the conference is hosted.
	Region OptString `json:"region"`
	// The unique identifier of the conference.
	Sid OptString `json:"sid"`
	// The status of this conference.
	Status OptConferenceResourceStatus `json:"status"`
	// A list of related resources identified by their relative URIs.
	SubresourceUris OptConferenceResourceSubresourceUris `json:"subresource_uris"`
	// The relative URI for this conference.
	URI OptString `json:"uri"`
}

// GetAccountSid returns the value of AccountSid.
func (s *ConferenceResource) GetAccountSid() OptString {
	return s.AccountSid
}

// GetAPIVersion returns the value of APIVersion.
func (s *ConferenceResource) GetAPIVersion() OptString {
	return s.APIVersion
}

// GetCallSidEndingConference returns the value of CallSidEndingConference.
func (s *ConferenceResource) GetCallSidEndingConference() OptString {
	return s.CallSidEndingConference
}

// GetDateCreated returns the value of DateCreated.
func (s *ConferenceResource) GetDateCreated() OptString {
	return s.DateCreated
}

// GetDateUpdated returns the value of DateUpdated.
func (s *ConferenceResource) GetDateUpdated() OptString {
	return s.DateUpdated
}

// GetFriendlyName returns the value of FriendlyName.
func (s *ConferenceResource) GetFriendlyName() OptString {
	return s.FriendlyName
}

// GetReasonConferenceEnded returns the value of ReasonConferenceEnded.
func (s *ConferenceResource) GetReasonConferenceEnded() OptConferenceResourceReasonConferenceEnded {
	return s.ReasonConferenceEnded
}

// GetRegion returns the value of Region.
func (s *ConferenceResource) GetRegion() OptString {
	return s.Region
}

// GetSid returns the value of Sid.
func (s *ConferenceResource) GetSid() OptString {
	return s.Sid
}

// GetStatus returns the value of Status.
func (s *ConferenceResource) GetStatus() OptConferenceResourceStatus {
	return s.Status
}

// GetSubresourceUris returns the value of SubresourceUris.
func (s *ConferenceResource) GetSubresourceUris() OptConferenceResourceSubresourceUris {
	return s.SubresourceUris
}

// GetURI returns the value of URI.
func (s *ConferenceResource) GetURI() OptString {
	return s.URI
}

// SetAccountSid sets the value of AccountSid.
func (s *ConferenceResource) SetAccountSid(val OptString) {
	s.AccountSid = val
}

// SetAPIVersion sets the value of APIVersion.
func (s *ConferenceResource) SetAPIVersion(val OptString) {
	s.APIVersion = val
}

// SetCallSidEndingConference sets the value of CallSidEndingConference.
func (s *ConferenceResource) SetCallSidEndingConference(val OptString) {
	s.CallSidEndingConference = val
}

// SetDateCreated sets the value of DateCreated.
func (s *ConferenceResource) SetDateCreated(val OptString) {
	s.DateCreated = val
}

// SetDateUpdated sets the value of DateUpdated.
func (s *ConferenceResource) SetDateUpdated(val OptString) {
	s.DateUpdated = val
}

// SetFriendlyName sets the value of FriendlyName.
func (s *ConferenceResource) SetFriendlyName(val OptString) {
	s.FriendlyName = val
}

// SetReasonConferenceEnded sets the value of ReasonConferenceEnded.
func (s *ConferenceResource) SetReasonConferenceEnded(val OptConferenceResourceReasonConferenceEnded) {
	s.ReasonConferenceEnded = val
}

// SetRegion sets the value of Region.
func (s *ConferenceResource) SetRegion(val OptString) {
	s.Region = val
}

// SetSid sets the value of Sid.
func (s *ConferenceResource) SetSid(val OptString) {
	s.Sid = val
}

// SetStatus sets the value of Status.
func (s *ConferenceResource) SetStatus(val OptConferenceResourceStatus) {
	s.Status = val
}

// SetSubresourceUris sets the value of SubresourceUris.
func (s *ConferenceResource) SetSubresourceUris(val OptConferenceResourceSubresourceUris) {
	s.SubresourceUris = val
}

// SetURI sets the value of URI.
func (s *ConferenceResource) SetURI(val OptString) {
	s.URI = val
}

// Ref: #/components/schemas/ConferenceResourceIndex
type ConferenceResourceIndex struct {
	Conferences []ConferenceResource `json:"conferences"`
	// The number of the last element on the page, zero-indexed.
	End OptInt `json:"end"`
	// /v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences.json?Page=0&PageSize=1.
	FirstPageURI OptString `json:"first_page_uri"`
	// /v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences.
	// json?Page=1&PageSize=1&PageToken=MTY4AjgyNDkwNzIxMQ.
	NextPageURI OptString `json:"next_page_uri"`
	// Current page number, zero-indexed.
	Page OptInt `json:"page"`
	// The number of items on the page.
	PageSize OptInt `json:"page_size"`
	// The number of the first element on the page, zero-indexed.
	Start OptInt `json:"start"`
	// The URI of the current page.
	URI OptString `json:"uri"`
}

// GetConferences returns the value of Conferences.
func (s *ConferenceResourceIndex) GetConferences() []ConferenceResource {
	return s.Conferences
}

// GetEnd returns the value of End.
func (s *ConferenceResourceIndex) GetEnd() OptInt {
	return s.End
}

// GetFirstPageURI returns the value of FirstPageURI.
func (s *ConferenceResourceIndex) GetFirstPageURI() OptString {
	return s.FirstPageURI
}

// GetNextPageURI returns the value of NextPageURI.
func (s *ConferenceResourceIndex) GetNextPageURI() OptString {
	return s.NextPageURI
}

// GetPage returns the value of Page.
func (s *ConferenceResourceIndex) GetPage() OptInt {
	return s.Page
}

// GetPageSize returns the value of PageSize.
func (s *ConferenceResourceIndex) GetPageSize() OptInt {
	return s.PageSize
}

// GetStart returns the value of Start.
func (s *ConferenceResourceIndex) GetStart() OptInt {
	return s.Start
}

// GetURI returns the value of URI.
func (s *ConferenceResourceIndex) GetURI() OptString {
	return s.URI
}

// SetConferences sets the value of Conferences.
func (s *ConferenceResourceIndex) SetConferences(val []ConferenceResource) {
	s.Conferences = val
}

// SetEnd sets the value of End.
func (s *ConferenceResourceIndex) SetEnd(val OptInt) {
	s.End = val
}

// SetFirstPageURI sets the value of FirstPageURI.
func (s *ConferenceResourceIndex) SetFirstPageURI(val OptString) {
	s.FirstPageURI = val
}

// SetNextPageURI sets the value of NextPageURI.
func (s *ConferenceResourceIndex) SetNextPageURI(val OptString) {
	s.NextPageURI = val
}

// SetPage sets the value of Page.
func (s *ConferenceResourceIndex) SetPage(val OptInt) {
	s.Page = val
}

// SetPageSize sets the value of PageSize.
func (s *ConferenceResourceIndex) SetPageSize(val OptInt) {
	s.PageSize = val
}

// SetStart sets the value of Start.
func (s *ConferenceResourceIndex) SetStart(val OptInt) {
	s.Start = val
}

// SetURI sets the value of URI.
func (s *ConferenceResourceIndex) SetURI(val OptString) {
	s.URI = val
}

// The reason why a conference ended. When a conference is in progress, will be null.
type ConferenceResourceReasonConferenceEnded string

const (
	ConferenceResourceReasonConferenceEndedParticipantWithEndConferenceOnExitLeft ConferenceResourceReasonConferenceEnded = "participant-with-end-conference-on-exit-left"
	ConferenceResourceReasonConferenceEndedLastParticipantLeft                    ConferenceResourceReasonConferenceEnded = "last-participant-left"
	ConferenceResourceReasonConferenceEndedConferenceEndedViaAPI                  ConferenceResourceReasonConferenceEnded = "conference-ended-via-api"
	ConferenceResourceReasonConferenceEndedTimeExceeded                           ConferenceResourceReasonConferenceEnded = "time-exceeded"
)

// AllValues returns all ConferenceResourceReasonConferenceEnded values.
func (ConferenceResourceReasonConferenceEnded) AllValues() []ConferenceResourceReasonConferenceEnded {
	return []ConferenceResourceReasonConferenceEnded{
		ConferenceResourceReasonConferenceEndedParticipantWithEndConferenceOnExitLeft,
		ConferenceResourceReasonConferenceEndedLastParticipantLeft,
		ConferenceResourceReasonConferenceEndedConferenceEndedViaAPI,
		ConferenceResourceReasonConferenceEndedTimeExceeded,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ConferenceResourceReasonConferenceEnded) MarshalText() ([]byte, error) {
	switch s {
	case ConferenceResourceReasonConferenceEndedParticipantWithEndConferenceOnExitLeft:
		return []byte(s), nil
	case ConferenceResourceReasonConferenceEndedLastParticipantLeft:
		return []byte(s), nil
	case ConferenceResourceReasonConferenceEndedConferenceEndedViaAPI:
		return []byte(s), nil
	case ConferenceResourceReasonConferenceEndedTimeExceeded:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConferenceResourceReasonConferenceEnded) UnmarshalText(data []byte) error {
	switch ConferenceResourceReasonConferenceEnded(data) {
	case ConferenceResourceReasonConferenceEndedParticipantWithEndConferenceOnExitLeft:
		*s = ConferenceResourceReasonConferenceEndedParticipantWithEndConferenceOnExitLeft
		return nil
	case ConferenceResourceReasonConferenceEndedLastParticipantLeft:
		*s = ConferenceResourceReasonConferenceEndedLastParticipantLeft
		return nil
	case ConferenceResourceReasonConferenceEndedConferenceEndedViaAPI:
		*s = ConferenceResourceReasonConferenceEndedConferenceEndedViaAPI
		return nil
	case ConferenceResourceReasonConferenceEndedTimeExceeded:
		*s = ConferenceResourceReasonConferenceEndedTimeExceeded
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The status of this conference.
type ConferenceResourceStatus string

const (
	ConferenceResourceStatusInit       ConferenceResourceStatus = "init"
	ConferenceResourceStatusInProgress ConferenceResourceStatus = "in-progress"
	ConferenceResourceStatusCompleted  ConferenceResourceStatus = "completed"
)

// AllValues returns all ConferenceResourceStatus values.
func (ConferenceResourceStatus) AllValues() []ConferenceResourceStatus {
	return []ConferenceResourceStatus{
		ConferenceResourceStatusInit,
		ConferenceResourceStatusInProgress,
		ConferenceResourceStatusCompleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ConferenceResourceStatus) MarshalText() ([]byte, error) {
	switch s {
	case ConferenceResourceStatusInit:
		return []byte(s), nil
	case ConferenceResourceStatusInProgress:
		return []byte(s), nil
	case ConferenceResourceStatusCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConferenceResourceStatus) UnmarshalText(data []byte) error {
	switch ConferenceResourceStatus(data) {
	case ConferenceResourceStatusInit:
		*s = ConferenceResourceStatusInit
		return nil
	case ConferenceResourceStatusInProgress:
		*s = ConferenceResourceStatusInProgress
		return nil
	case ConferenceResourceStatusCompleted:
		*s = ConferenceResourceStatusCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A list of related resources identified by their relative URIs.
type ConferenceResourceSubresourceUris map[string]jx.Raw

func (s *ConferenceResourceSubresourceUris) init() ConferenceResourceSubresourceUris {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type ConferenceSid uuid.UUID

type ConferenceStatus string

const (
	ConferenceStatusInit       ConferenceStatus = "init"
	ConferenceStatusInProgress ConferenceStatus = "in-progress"
	ConferenceStatusCompleted  ConferenceStatus = "completed"
)

// AllValues returns all ConferenceStatus values.
func (ConferenceStatus) AllValues() []ConferenceStatus {
	return []ConferenceStatus{
		ConferenceStatusInit,
		ConferenceStatusInProgress,
		ConferenceStatusCompleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ConferenceStatus) MarshalText() ([]byte, error) {
	switch s {
	case ConferenceStatusInit:
		return []byte(s), nil
	case ConferenceStatusInProgress:
		return []byte(s), nil
	case ConferenceStatusCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConferenceStatus) UnmarshalText(data []byte) error {
	switch ConferenceStatus(data) {
	case ConferenceStatusInit:
		*s = ConferenceStatusInit
		return nil
	case ConferenceStatusInProgress:
		*s = ConferenceStatusInProgress
		return nil
	case ConferenceStatusCompleted:
		*s = ConferenceStatusCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ConnectionActive bool

// CreateBulkTelephonyCredentialsUnprocessableEntity is response for CreateBulkTelephonyCredentials operation.
type CreateBulkTelephonyCredentialsUnprocessableEntity struct{}

func (*CreateBulkTelephonyCredentialsUnprocessableEntity) createBulkTelephonyCredentialsRes() {}

// Ref: #/components/schemas/CreateCallControlApplicationRequest
type CreateCallControlApplicationRequest struct {
	// A user-assigned name to help manage the application.
	ApplicationName string `json:"application_name"`
	// The URL where webhooks related to this connection will be sent. Must include a scheme, such as
	// 'https'.
	WebhookEventURL string `json:"webhook_event_url"`
	// Specifies whether the connection can be used.
	Active OptBool `json:"active"`
	// <code>Latency</code> directs Telnyx to route media through the site with the lowest round-trip
	// time to the user's connection. Telnyx calculates this time using ICMP ping messages. This can be
	// disabled by specifying a site to handle all media.
	AnchorsiteOverride OptCreateCallControlApplicationRequestAnchorsiteOverride `json:"anchorsite_override"`
	// Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to
	// Telnyx will be accepted in all formats.
	DtmfType OptCreateCallControlApplicationRequestDtmfType `json:"dtmf_type"`
	// Specifies whether calls to phone numbers associated with this connection should hangup after
	// timing out.
	FirstCommandTimeout OptBool `json:"first_command_timeout"`
	// Specifies how many seconds to wait before timing out a dial command.
	FirstCommandTimeoutSecs OptInt                            `json:"first_command_timeout_secs"`
	Inbound                 OptCallControlApplicationInbound  `json:"inbound"`
	Outbound                OptCallControlApplicationOutbound `json:"outbound"`
	// Determines which webhook format will be used, Telnyx API v1 or v2.
	WebhookAPIVersion OptCreateCallControlApplicationRequestWebhookAPIVersion `json:"webhook_api_version"`
	// The failover URL where webhooks related to this connection will be sent if sending to the primary
	// URL fails. Must include a scheme, such as 'https'.
	WebhookEventFailoverURL OptNilString `json:"webhook_event_failover_url"`
	// Specifies how many seconds to wait before timing out a webhook.
	WebhookTimeoutSecs OptNilInt `json:"webhook_timeout_secs"`
}

// GetApplicationName returns the value of ApplicationName.
func (s *CreateCallControlApplicationRequest) GetApplicationName() string {
	return s.ApplicationName
}

// GetWebhookEventURL returns the value of WebhookEventURL.
func (s *CreateCallControlApplicationRequest) GetWebhookEventURL() string {
	return s.WebhookEventURL
}

// GetActive returns the value of Active.
func (s *CreateCallControlApplicationRequest) GetActive() OptBool {
	return s.Active
}

// GetAnchorsiteOverride returns the value of AnchorsiteOverride.
func (s *CreateCallControlApplicationRequest) GetAnchorsiteOverride() OptCreateCallControlApplicationRequestAnchorsiteOverride {
	return s.AnchorsiteOverride
}

// GetDtmfType returns the value of DtmfType.
func (s *CreateCallControlApplicationRequest) GetDtmfType() OptCreateCallControlApplicationRequestDtmfType {
	return s.DtmfType
}

// GetFirstCommandTimeout returns the value of FirstCommandTimeout.
func (s *CreateCallControlApplicationRequest) GetFirstCommandTimeout() OptBool {
	return s.FirstCommandTimeout
}

// GetFirstCommandTimeoutSecs returns the value of FirstCommandTimeoutSecs.
func (s *CreateCallControlApplicationRequest) GetFirstCommandTimeoutSecs() OptInt {
	return s.FirstCommandTimeoutSecs
}

// GetInbound returns the value of Inbound.
func (s *CreateCallControlApplicationRequest) GetInbound() OptCallControlApplicationInbound {
	return s.Inbound
}

// GetOutbound returns the value of Outbound.
func (s *CreateCallControlApplicationRequest) GetOutbound() OptCallControlApplicationOutbound {
	return s.Outbound
}

// GetWebhookAPIVersion returns the value of WebhookAPIVersion.
func (s *CreateCallControlApplicationRequest) GetWebhookAPIVersion() OptCreateCallControlApplicationRequestWebhookAPIVersion {
	return s.WebhookAPIVersion
}

// GetWebhookEventFailoverURL returns the value of WebhookEventFailoverURL.
func (s *CreateCallControlApplicationRequest) GetWebhookEventFailoverURL() OptNilString {
	return s.WebhookEventFailoverURL
}

// GetWebhookTimeoutSecs returns the value of WebhookTimeoutSecs.
func (s *CreateCallControlApplicationRequest) GetWebhookTimeoutSecs() OptNilInt {
	return s.WebhookTimeoutSecs
}

// SetApplicationName sets the value of ApplicationName.
func (s *CreateCallControlApplicationRequest) SetApplicationName(val string) {
	s.ApplicationName = val
}

// SetWebhookEventURL sets the value of WebhookEventURL.
func (s *CreateCallControlApplicationRequest) SetWebhookEventURL(val string) {
	s.WebhookEventURL = val
}

// SetActive sets the value of Active.
func (s *CreateCallControlApplicationRequest) SetActive(val OptBool) {
	s.Active = val
}

// SetAnchorsiteOverride sets the value of AnchorsiteOverride.
func (s *CreateCallControlApplicationRequest) SetAnchorsiteOverride(val OptCreateCallControlApplicationRequestAnchorsiteOverride) {
	s.AnchorsiteOverride = val
}

// SetDtmfType sets the value of DtmfType.
func (s *CreateCallControlApplicationRequest) SetDtmfType(val OptCreateCallControlApplicationRequestDtmfType) {
	s.DtmfType = val
}

// SetFirstCommandTimeout sets the value of FirstCommandTimeout.
func (s *CreateCallControlApplicationRequest) SetFirstCommandTimeout(val OptBool) {
	s.FirstCommandTimeout = val
}

// SetFirstCommandTimeoutSecs sets the value of FirstCommandTimeoutSecs.
func (s *CreateCallControlApplicationRequest) SetFirstCommandTimeoutSecs(val OptInt) {
	s.FirstCommandTimeoutSecs = val
}

// SetInbound sets the value of Inbound.
func (s *CreateCallControlApplicationRequest) SetInbound(val OptCallControlApplicationInbound) {
	s.Inbound = val
}

// SetOutbound sets the value of Outbound.
func (s *CreateCallControlApplicationRequest) SetOutbound(val OptCallControlApplicationOutbound) {
	s.Outbound = val
}

// SetWebhookAPIVersion sets the value of WebhookAPIVersion.
func (s *CreateCallControlApplicationRequest) SetWebhookAPIVersion(val OptCreateCallControlApplicationRequestWebhookAPIVersion) {
	s.WebhookAPIVersion = val
}

// SetWebhookEventFailoverURL sets the value of WebhookEventFailoverURL.
func (s *CreateCallControlApplicationRequest) SetWebhookEventFailoverURL(val OptNilString) {
	s.WebhookEventFailoverURL = val
}

// SetWebhookTimeoutSecs sets the value of WebhookTimeoutSecs.
func (s *CreateCallControlApplicationRequest) SetWebhookTimeoutSecs(val OptNilInt) {
	s.WebhookTimeoutSecs = val
}

// <code>Latency</code> directs Telnyx to route media through the site with the lowest round-trip
// time to the user's connection. Telnyx calculates this time using ICMP ping messages. This can be
// disabled by specifying a site to handle all media.
type CreateCallControlApplicationRequestAnchorsiteOverride string

const (
	CreateCallControlApplicationRequestAnchorsiteOverrideLatency   CreateCallControlApplicationRequestAnchorsiteOverride = "\"Latency\""
	CreateCallControlApplicationRequestAnchorsiteOverrideChicagoIL CreateCallControlApplicationRequestAnchorsiteOverride = "\"Chicago, IL\""
	CreateCallControlApplicationRequestAnchorsiteOverrideAshburnVA CreateCallControlApplicationRequestAnchorsiteOverride = "\"Ashburn, VA\""
	CreateCallControlApplicationRequestAnchorsiteOverrideSanJoseCA CreateCallControlApplicationRequestAnchorsiteOverride = "\"San Jose, CA\""
)

// AllValues returns all CreateCallControlApplicationRequestAnchorsiteOverride values.
func (CreateCallControlApplicationRequestAnchorsiteOverride) AllValues() []CreateCallControlApplicationRequestAnchorsiteOverride {
	return []CreateCallControlApplicationRequestAnchorsiteOverride{
		CreateCallControlApplicationRequestAnchorsiteOverrideLatency,
		CreateCallControlApplicationRequestAnchorsiteOverrideChicagoIL,
		CreateCallControlApplicationRequestAnchorsiteOverrideAshburnVA,
		CreateCallControlApplicationRequestAnchorsiteOverrideSanJoseCA,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateCallControlApplicationRequestAnchorsiteOverride) MarshalText() ([]byte, error) {
	switch s {
	case CreateCallControlApplicationRequestAnchorsiteOverrideLatency:
		return []byte(s), nil
	case CreateCallControlApplicationRequestAnchorsiteOverrideChicagoIL:
		return []byte(s), nil
	case CreateCallControlApplicationRequestAnchorsiteOverrideAshburnVA:
		return []byte(s), nil
	case CreateCallControlApplicationRequestAnchorsiteOverrideSanJoseCA:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateCallControlApplicationRequestAnchorsiteOverride) UnmarshalText(data []byte) error {
	switch CreateCallControlApplicationRequestAnchorsiteOverride(data) {
	case CreateCallControlApplicationRequestAnchorsiteOverrideLatency:
		*s = CreateCallControlApplicationRequestAnchorsiteOverrideLatency
		return nil
	case CreateCallControlApplicationRequestAnchorsiteOverrideChicagoIL:
		*s = CreateCallControlApplicationRequestAnchorsiteOverrideChicagoIL
		return nil
	case CreateCallControlApplicationRequestAnchorsiteOverrideAshburnVA:
		*s = CreateCallControlApplicationRequestAnchorsiteOverrideAshburnVA
		return nil
	case CreateCallControlApplicationRequestAnchorsiteOverrideSanJoseCA:
		*s = CreateCallControlApplicationRequestAnchorsiteOverrideSanJoseCA
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to
// Telnyx will be accepted in all formats.
type CreateCallControlApplicationRequestDtmfType string

const (
	CreateCallControlApplicationRequestDtmfTypeRFC2833 CreateCallControlApplicationRequestDtmfType = "RFC 2833"
	CreateCallControlApplicationRequestDtmfTypeInband  CreateCallControlApplicationRequestDtmfType = "Inband"
	CreateCallControlApplicationRequestDtmfTypeSIPINFO CreateCallControlApplicationRequestDtmfType = "SIP INFO"
)

// AllValues returns all CreateCallControlApplicationRequestDtmfType values.
func (CreateCallControlApplicationRequestDtmfType) AllValues() []CreateCallControlApplicationRequestDtmfType {
	return []CreateCallControlApplicationRequestDtmfType{
		CreateCallControlApplicationRequestDtmfTypeRFC2833,
		CreateCallControlApplicationRequestDtmfTypeInband,
		CreateCallControlApplicationRequestDtmfTypeSIPINFO,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateCallControlApplicationRequestDtmfType) MarshalText() ([]byte, error) {
	switch s {
	case CreateCallControlApplicationRequestDtmfTypeRFC2833:
		return []byte(s), nil
	case CreateCallControlApplicationRequestDtmfTypeInband:
		return []byte(s), nil
	case CreateCallControlApplicationRequestDtmfTypeSIPINFO:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateCallControlApplicationRequestDtmfType) UnmarshalText(data []byte) error {
	switch CreateCallControlApplicationRequestDtmfType(data) {
	case CreateCallControlApplicationRequestDtmfTypeRFC2833:
		*s = CreateCallControlApplicationRequestDtmfTypeRFC2833
		return nil
	case CreateCallControlApplicationRequestDtmfTypeInband:
		*s = CreateCallControlApplicationRequestDtmfTypeInband
		return nil
	case CreateCallControlApplicationRequestDtmfTypeSIPINFO:
		*s = CreateCallControlApplicationRequestDtmfTypeSIPINFO
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Determines which webhook format will be used, Telnyx API v1 or v2.
type CreateCallControlApplicationRequestWebhookAPIVersion string

const (
	CreateCallControlApplicationRequestWebhookAPIVersion1 CreateCallControlApplicationRequestWebhookAPIVersion = "1"
	CreateCallControlApplicationRequestWebhookAPIVersion2 CreateCallControlApplicationRequestWebhookAPIVersion = "2"
)

// AllValues returns all CreateCallControlApplicationRequestWebhookAPIVersion values.
func (CreateCallControlApplicationRequestWebhookAPIVersion) AllValues() []CreateCallControlApplicationRequestWebhookAPIVersion {
	return []CreateCallControlApplicationRequestWebhookAPIVersion{
		CreateCallControlApplicationRequestWebhookAPIVersion1,
		CreateCallControlApplicationRequestWebhookAPIVersion2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateCallControlApplicationRequestWebhookAPIVersion) MarshalText() ([]byte, error) {
	switch s {
	case CreateCallControlApplicationRequestWebhookAPIVersion1:
		return []byte(s), nil
	case CreateCallControlApplicationRequestWebhookAPIVersion2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateCallControlApplicationRequestWebhookAPIVersion) UnmarshalText(data []byte) error {
	switch CreateCallControlApplicationRequestWebhookAPIVersion(data) {
	case CreateCallControlApplicationRequestWebhookAPIVersion1:
		*s = CreateCallControlApplicationRequestWebhookAPIVersion1
		return nil
	case CreateCallControlApplicationRequestWebhookAPIVersion2:
		*s = CreateCallControlApplicationRequestWebhookAPIVersion2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// CreateCallControlApplicationUnprocessableEntity is response for CreateCallControlApplication operation.
type CreateCallControlApplicationUnprocessableEntity struct{}

func (*CreateCallControlApplicationUnprocessableEntity) createCallControlApplicationRes() {}

// CreateProfileVerificationRequestCreated is response for CreateProfileVerificationRequest operation.
type CreateProfileVerificationRequestCreated struct{}

func (*CreateProfileVerificationRequestCreated) createProfileVerificationRequestRes() {}

// Ref: #/components/schemas/CreateTeXMLSecretRequest
type CreateTeXMLSecretRequest struct {
	// Name used as a reference for the secret, if the name already exists within the account its value
	// will be replaced.
	Name string `json:"name"`
	// Secret value which will be used when rendering the TeXML template.
	Value string `json:"value"`
}

// GetName returns the value of Name.
func (s *CreateTeXMLSecretRequest) GetName() string {
	return s.Name
}

// GetValue returns the value of Value.
func (s *CreateTeXMLSecretRequest) GetValue() string {
	return s.Value
}

// SetName sets the value of Name.
func (s *CreateTeXMLSecretRequest) SetName(val string) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *CreateTeXMLSecretRequest) SetValue(val string) {
	s.Value = val
}

type CreateTeXMLSecretResponse struct {
	Data OptCreateTeXMLSecretResult `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateTeXMLSecretResponse) GetData() OptCreateTeXMLSecretResult {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateTeXMLSecretResponse) SetData(val OptCreateTeXMLSecretResult) {
	s.Data = val
}

func (*CreateTeXMLSecretResponse) createTexmlSecretRes() {}

// Ref: #/components/schemas/CreateTeXMLSecretResult
type CreateTeXMLSecretResult struct {
	Name  OptString                       `json:"name"`
	Value OptCreateTeXMLSecretResultValue `json:"value"`
}

// GetName returns the value of Name.
func (s *CreateTeXMLSecretResult) GetName() OptString {
	return s.Name
}

// GetValue returns the value of Value.
func (s *CreateTeXMLSecretResult) GetValue() OptCreateTeXMLSecretResultValue {
	return s.Value
}

// SetName sets the value of Name.
func (s *CreateTeXMLSecretResult) SetName(val OptString) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *CreateTeXMLSecretResult) SetValue(val OptCreateTeXMLSecretResultValue) {
	s.Value = val
}

type CreateTeXMLSecretResultValue string

const (
	CreateTeXMLSecretResultValue_ CreateTeXMLSecretResultValue = "*****"
)

// AllValues returns all CreateTeXMLSecretResultValue values.
func (CreateTeXMLSecretResultValue) AllValues() []CreateTeXMLSecretResultValue {
	return []CreateTeXMLSecretResultValue{
		CreateTeXMLSecretResultValue_,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateTeXMLSecretResultValue) MarshalText() ([]byte, error) {
	switch s {
	case CreateTeXMLSecretResultValue_:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateTeXMLSecretResultValue) UnmarshalText(data []byte) error {
	switch CreateTeXMLSecretResultValue(data) {
	case CreateTeXMLSecretResultValue_:
		*s = CreateTeXMLSecretResultValue_
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateTelephonyCredentialTokenCreated struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s CreateTelephonyCredentialTokenCreated) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*CreateTelephonyCredentialTokenCreated) createTelephonyCredentialTokenRes() {}

// CreateTelephonyCredentialTokenNotFound is response for CreateTelephonyCredentialToken operation.
type CreateTelephonyCredentialTokenNotFound struct{}

func (*CreateTelephonyCredentialTokenNotFound) createTelephonyCredentialTokenRes() {}

// CreateTelephonyCredentialUnprocessableEntity is response for CreateTelephonyCredential operation.
type CreateTelephonyCredentialUnprocessableEntity struct{}

func (*CreateTelephonyCredentialUnprocessableEntity) createTelephonyCredentialRes() {}

type CreateTexmlApplicationNotFound ErrorResponse

func (*CreateTexmlApplicationNotFound) createTexmlApplicationRes() {}

// Ref: #/components/schemas/CreateTexmlApplicationRequest
type CreateTexmlApplicationRequest struct {
	FriendlyName            ApplicationName            `json:"friendly_name"`
	Active                  OptConnectionActive        `json:"active"`
	AnchorsiteOverride      OptAnchorsiteOverride      `json:"anchorsite_override"`
	DtmfType                OptDtmfType                `json:"dtmf_type"`
	FirstCommandTimeout     OptFirstCommandTimeout     `json:"first_command_timeout"`
	FirstCommandTimeoutSecs OptFirstCommandTimeoutSecs `json:"first_command_timeout_secs"`
	// URL to which Telnyx will deliver your XML Translator webhooks.
	VoiceURL string `json:"voice_url"`
	// URL to which Telnyx will deliver your XML Translator webhooks if we get an error response from
	// your voice_url.
	VoiceFallbackURL OptString `json:"voice_fallback_url"`
	// HTTP request method Telnyx will use to interact with your XML Translator webhooks. Either 'get' or
	// 'post'.
	VoiceMethod OptCreateTexmlApplicationRequestVoiceMethod `json:"voice_method"`
	// URL for Telnyx to send requests to containing information about call progress events.
	StatusCallback OptString `json:"status_callback"`
	// HTTP request method Telnyx should use when requesting the status_callback URL.
	StatusCallbackMethod OptCreateTexmlApplicationRequestStatusCallbackMethod `json:"status_callback_method"`
	Inbound              OptCreateTexmlApplicationRequestInbound              `json:"inbound"`
	Outbound             OptCreateTexmlApplicationRequestOutbound             `json:"outbound"`
}

// GetFriendlyName returns the value of FriendlyName.
func (s *CreateTexmlApplicationRequest) GetFriendlyName() ApplicationName {
	return s.FriendlyName
}

// GetActive returns the value of Active.
func (s *CreateTexmlApplicationRequest) GetActive() OptConnectionActive {
	return s.Active
}

// GetAnchorsiteOverride returns the value of AnchorsiteOverride.
func (s *CreateTexmlApplicationRequest) GetAnchorsiteOverride() OptAnchorsiteOverride {
	return s.AnchorsiteOverride
}

// GetDtmfType returns the value of DtmfType.
func (s *CreateTexmlApplicationRequest) GetDtmfType() OptDtmfType {
	return s.DtmfType
}

// GetFirstCommandTimeout returns the value of FirstCommandTimeout.
func (s *CreateTexmlApplicationRequest) GetFirstCommandTimeout() OptFirstCommandTimeout {
	return s.FirstCommandTimeout
}

// GetFirstCommandTimeoutSecs returns the value of FirstCommandTimeoutSecs.
func (s *CreateTexmlApplicationRequest) GetFirstCommandTimeoutSecs() OptFirstCommandTimeoutSecs {
	return s.FirstCommandTimeoutSecs
}

// GetVoiceURL returns the value of VoiceURL.
func (s *CreateTexmlApplicationRequest) GetVoiceURL() string {
	return s.VoiceURL
}

// GetVoiceFallbackURL returns the value of VoiceFallbackURL.
func (s *CreateTexmlApplicationRequest) GetVoiceFallbackURL() OptString {
	return s.VoiceFallbackURL
}

// GetVoiceMethod returns the value of VoiceMethod.
func (s *CreateTexmlApplicationRequest) GetVoiceMethod() OptCreateTexmlApplicationRequestVoiceMethod {
	return s.VoiceMethod
}

// GetStatusCallback returns the value of StatusCallback.
func (s *CreateTexmlApplicationRequest) GetStatusCallback() OptString {
	return s.StatusCallback
}

// GetStatusCallbackMethod returns the value of StatusCallbackMethod.
func (s *CreateTexmlApplicationRequest) GetStatusCallbackMethod() OptCreateTexmlApplicationRequestStatusCallbackMethod {
	return s.StatusCallbackMethod
}

// GetInbound returns the value of Inbound.
func (s *CreateTexmlApplicationRequest) GetInbound() OptCreateTexmlApplicationRequestInbound {
	return s.Inbound
}

// GetOutbound returns the value of Outbound.
func (s *CreateTexmlApplicationRequest) GetOutbound() OptCreateTexmlApplicationRequestOutbound {
	return s.Outbound
}

// SetFriendlyName sets the value of FriendlyName.
func (s *CreateTexmlApplicationRequest) SetFriendlyName(val ApplicationName) {
	s.FriendlyName = val
}

// SetActive sets the value of Active.
func (s *CreateTexmlApplicationRequest) SetActive(val OptConnectionActive) {
	s.Active = val
}

// SetAnchorsiteOverride sets the value of AnchorsiteOverride.
func (s *CreateTexmlApplicationRequest) SetAnchorsiteOverride(val OptAnchorsiteOverride) {
	s.AnchorsiteOverride = val
}

// SetDtmfType sets the value of DtmfType.
func (s *CreateTexmlApplicationRequest) SetDtmfType(val OptDtmfType) {
	s.DtmfType = val
}

// SetFirstCommandTimeout sets the value of FirstCommandTimeout.
func (s *CreateTexmlApplicationRequest) SetFirstCommandTimeout(val OptFirstCommandTimeout) {
	s.FirstCommandTimeout = val
}

// SetFirstCommandTimeoutSecs sets the value of FirstCommandTimeoutSecs.
func (s *CreateTexmlApplicationRequest) SetFirstCommandTimeoutSecs(val OptFirstCommandTimeoutSecs) {
	s.FirstCommandTimeoutSecs = val
}

// SetVoiceURL sets the value of VoiceURL.
func (s *CreateTexmlApplicationRequest) SetVoiceURL(val string) {
	s.VoiceURL = val
}

// SetVoiceFallbackURL sets the value of VoiceFallbackURL.
func (s *CreateTexmlApplicationRequest) SetVoiceFallbackURL(val OptString) {
	s.VoiceFallbackURL = val
}

// SetVoiceMethod sets the value of VoiceMethod.
func (s *CreateTexmlApplicationRequest) SetVoiceMethod(val OptCreateTexmlApplicationRequestVoiceMethod) {
	s.VoiceMethod = val
}

// SetStatusCallback sets the value of StatusCallback.
func (s *CreateTexmlApplicationRequest) SetStatusCallback(val OptString) {
	s.StatusCallback = val
}

// SetStatusCallbackMethod sets the value of StatusCallbackMethod.
func (s *CreateTexmlApplicationRequest) SetStatusCallbackMethod(val OptCreateTexmlApplicationRequestStatusCallbackMethod) {
	s.StatusCallbackMethod = val
}

// SetInbound sets the value of Inbound.
func (s *CreateTexmlApplicationRequest) SetInbound(val OptCreateTexmlApplicationRequestInbound) {
	s.Inbound = val
}

// SetOutbound sets the value of Outbound.
func (s *CreateTexmlApplicationRequest) SetOutbound(val OptCreateTexmlApplicationRequestOutbound) {
	s.Outbound = val
}

type CreateTexmlApplicationRequestInbound struct {
	// When set, this will limit the total number of inbound calls to phone numbers associated with this
	// connection.
	ChannelLimit OptInt `json:"channel_limit"`
	// When enabled Telnyx will include Shaken/Stir data in the Webhook for new inbound calls.
	ShakenStirEnabled OptBool `json:"shaken_stir_enabled"`
	// Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a
	// phone number is used, from a SIP endpoint. Example: the subdomain "example.sip.telnyx.com" can be
	// called from any SIP endpoint by using the SIP URI "sip:@example.sip.telnyx.com" where the user
	// part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain
	// calls.
	SipSubdomain OptNilString `json:"sip_subdomain"`
	// This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public
	// Internet) or "Only my connections" (any connection assigned to the same Telnyx user).
	SipSubdomainReceiveSettings OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings `json:"sip_subdomain_receive_settings"`
}

// GetChannelLimit returns the value of ChannelLimit.
func (s *CreateTexmlApplicationRequestInbound) GetChannelLimit() OptInt {
	return s.ChannelLimit
}

// GetShakenStirEnabled returns the value of ShakenStirEnabled.
func (s *CreateTexmlApplicationRequestInbound) GetShakenStirEnabled() OptBool {
	return s.ShakenStirEnabled
}

// GetSipSubdomain returns the value of SipSubdomain.
func (s *CreateTexmlApplicationRequestInbound) GetSipSubdomain() OptNilString {
	return s.SipSubdomain
}

// GetSipSubdomainReceiveSettings returns the value of SipSubdomainReceiveSettings.
func (s *CreateTexmlApplicationRequestInbound) GetSipSubdomainReceiveSettings() OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings {
	return s.SipSubdomainReceiveSettings
}

// SetChannelLimit sets the value of ChannelLimit.
func (s *CreateTexmlApplicationRequestInbound) SetChannelLimit(val OptInt) {
	s.ChannelLimit = val
}

// SetShakenStirEnabled sets the value of ShakenStirEnabled.
func (s *CreateTexmlApplicationRequestInbound) SetShakenStirEnabled(val OptBool) {
	s.ShakenStirEnabled = val
}

// SetSipSubdomain sets the value of SipSubdomain.
func (s *CreateTexmlApplicationRequestInbound) SetSipSubdomain(val OptNilString) {
	s.SipSubdomain = val
}

// SetSipSubdomainReceiveSettings sets the value of SipSubdomainReceiveSettings.
func (s *CreateTexmlApplicationRequestInbound) SetSipSubdomainReceiveSettings(val OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) {
	s.SipSubdomainReceiveSettings = val
}

// This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public
// Internet) or "Only my connections" (any connection assigned to the same Telnyx user).
type CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings string

const (
	CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsOnlyMyConnections CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings = "only_my_connections"
	CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsFromAnyone        CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings = "from_anyone"
)

// AllValues returns all CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings values.
func (CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) AllValues() []CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings {
	return []CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings{
		CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsOnlyMyConnections,
		CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsFromAnyone,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) MarshalText() ([]byte, error) {
	switch s {
	case CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsOnlyMyConnections:
		return []byte(s), nil
	case CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsFromAnyone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) UnmarshalText(data []byte) error {
	switch CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings(data) {
	case CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsOnlyMyConnections:
		*s = CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsOnlyMyConnections
		return nil
	case CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsFromAnyone:
		*s = CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsFromAnyone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateTexmlApplicationRequestOutbound struct {
	// When set, this will limit the total number of outbound calls to phone numbers associated with this
	// connection.
	ChannelLimit           OptInt                    `json:"channel_limit"`
	OutboundVoiceProfileID OptOutboundVoiceProfileId `json:"outbound_voice_profile_id"`
}

// GetChannelLimit returns the value of ChannelLimit.
func (s *CreateTexmlApplicationRequestOutbound) GetChannelLimit() OptInt {
	return s.ChannelLimit
}

// GetOutboundVoiceProfileID returns the value of OutboundVoiceProfileID.
func (s *CreateTexmlApplicationRequestOutbound) GetOutboundVoiceProfileID() OptOutboundVoiceProfileId {
	return s.OutboundVoiceProfileID
}

// SetChannelLimit sets the value of ChannelLimit.
func (s *CreateTexmlApplicationRequestOutbound) SetChannelLimit(val OptInt) {
	s.ChannelLimit = val
}

// SetOutboundVoiceProfileID sets the value of OutboundVoiceProfileID.
func (s *CreateTexmlApplicationRequestOutbound) SetOutboundVoiceProfileID(val OptOutboundVoiceProfileId) {
	s.OutboundVoiceProfileID = val
}

// HTTP request method Telnyx should use when requesting the status_callback URL.
type CreateTexmlApplicationRequestStatusCallbackMethod string

const (
	CreateTexmlApplicationRequestStatusCallbackMethodGet  CreateTexmlApplicationRequestStatusCallbackMethod = "get"
	CreateTexmlApplicationRequestStatusCallbackMethodPost CreateTexmlApplicationRequestStatusCallbackMethod = "post"
)

// AllValues returns all CreateTexmlApplicationRequestStatusCallbackMethod values.
func (CreateTexmlApplicationRequestStatusCallbackMethod) AllValues() []CreateTexmlApplicationRequestStatusCallbackMethod {
	return []CreateTexmlApplicationRequestStatusCallbackMethod{
		CreateTexmlApplicationRequestStatusCallbackMethodGet,
		CreateTexmlApplicationRequestStatusCallbackMethodPost,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateTexmlApplicationRequestStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case CreateTexmlApplicationRequestStatusCallbackMethodGet:
		return []byte(s), nil
	case CreateTexmlApplicationRequestStatusCallbackMethodPost:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateTexmlApplicationRequestStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch CreateTexmlApplicationRequestStatusCallbackMethod(data) {
	case CreateTexmlApplicationRequestStatusCallbackMethodGet:
		*s = CreateTexmlApplicationRequestStatusCallbackMethodGet
		return nil
	case CreateTexmlApplicationRequestStatusCallbackMethodPost:
		*s = CreateTexmlApplicationRequestStatusCallbackMethodPost
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request method Telnyx will use to interact with your XML Translator webhooks. Either 'get' or
// 'post'.
type CreateTexmlApplicationRequestVoiceMethod string

const (
	CreateTexmlApplicationRequestVoiceMethodGet  CreateTexmlApplicationRequestVoiceMethod = "get"
	CreateTexmlApplicationRequestVoiceMethodPost CreateTexmlApplicationRequestVoiceMethod = "post"
)

// AllValues returns all CreateTexmlApplicationRequestVoiceMethod values.
func (CreateTexmlApplicationRequestVoiceMethod) AllValues() []CreateTexmlApplicationRequestVoiceMethod {
	return []CreateTexmlApplicationRequestVoiceMethod{
		CreateTexmlApplicationRequestVoiceMethodGet,
		CreateTexmlApplicationRequestVoiceMethodPost,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateTexmlApplicationRequestVoiceMethod) MarshalText() ([]byte, error) {
	switch s {
	case CreateTexmlApplicationRequestVoiceMethodGet:
		return []byte(s), nil
	case CreateTexmlApplicationRequestVoiceMethodPost:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateTexmlApplicationRequestVoiceMethod) UnmarshalText(data []byte) error {
	switch CreateTexmlApplicationRequestVoiceMethod(data) {
	case CreateTexmlApplicationRequestVoiceMethodGet:
		*s = CreateTexmlApplicationRequestVoiceMethodGet
		return nil
	case CreateTexmlApplicationRequestVoiceMethodPost:
		*s = CreateTexmlApplicationRequestVoiceMethodPost
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateTexmlApplicationUnauthorized ErrorResponse

func (*CreateTexmlApplicationUnauthorized) createTexmlApplicationRes() {}

type CreateTexmlApplicationUnprocessableEntity ErrorResponse

func (*CreateTexmlApplicationUnprocessableEntity) createTexmlApplicationRes() {}

// The request body when creating a verification.
// Ref: #/components/schemas/CreateVerificationRequestCall
type CreateVerificationRequestCall struct {
	// +E164 formatted phone number.
	PhoneNumber string `json:"phone_number"`
	// The identifier of the associated Verify profile.
	VerifyProfileID uuid.UUID `json:"verify_profile_id"`
	// The number of seconds the verification code is valid for.
	TimeoutSecs OptInt `json:"timeout_secs"`
	// Must be less than the profile's default_verification_timeout_secs or timeout_secs, whichever is
	// lesser.
	CallTimeoutSecs OptInt `json:"call_timeout_secs"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *CreateVerificationRequestCall) GetPhoneNumber() string {
	return s.PhoneNumber
}

// GetVerifyProfileID returns the value of VerifyProfileID.
func (s *CreateVerificationRequestCall) GetVerifyProfileID() uuid.UUID {
	return s.VerifyProfileID
}

// GetTimeoutSecs returns the value of TimeoutSecs.
func (s *CreateVerificationRequestCall) GetTimeoutSecs() OptInt {
	return s.TimeoutSecs
}

// GetCallTimeoutSecs returns the value of CallTimeoutSecs.
func (s *CreateVerificationRequestCall) GetCallTimeoutSecs() OptInt {
	return s.CallTimeoutSecs
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *CreateVerificationRequestCall) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// SetVerifyProfileID sets the value of VerifyProfileID.
func (s *CreateVerificationRequestCall) SetVerifyProfileID(val uuid.UUID) {
	s.VerifyProfileID = val
}

// SetTimeoutSecs sets the value of TimeoutSecs.
func (s *CreateVerificationRequestCall) SetTimeoutSecs(val OptInt) {
	s.TimeoutSecs = val
}

// SetCallTimeoutSecs sets the value of CallTimeoutSecs.
func (s *CreateVerificationRequestCall) SetCallTimeoutSecs(val OptInt) {
	s.CallTimeoutSecs = val
}

// The request body when creating a verification.
// Ref: #/components/schemas/CreateVerificationRequestFlashcall
type CreateVerificationRequestFlashcall struct {
	// +E164 formatted phone number.
	PhoneNumber string `json:"phone_number"`
	// The identifier of the associated Verify profile.
	VerifyProfileID uuid.UUID `json:"verify_profile_id"`
	// The number of seconds the verification code is valid for.
	TimeoutSecs OptInt `json:"timeout_secs"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *CreateVerificationRequestFlashcall) GetPhoneNumber() string {
	return s.PhoneNumber
}

// GetVerifyProfileID returns the value of VerifyProfileID.
func (s *CreateVerificationRequestFlashcall) GetVerifyProfileID() uuid.UUID {
	return s.VerifyProfileID
}

// GetTimeoutSecs returns the value of TimeoutSecs.
func (s *CreateVerificationRequestFlashcall) GetTimeoutSecs() OptInt {
	return s.TimeoutSecs
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *CreateVerificationRequestFlashcall) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// SetVerifyProfileID sets the value of VerifyProfileID.
func (s *CreateVerificationRequestFlashcall) SetVerifyProfileID(val uuid.UUID) {
	s.VerifyProfileID = val
}

// SetTimeoutSecs sets the value of TimeoutSecs.
func (s *CreateVerificationRequestFlashcall) SetTimeoutSecs(val OptInt) {
	s.TimeoutSecs = val
}

// The request body when creating a verification.
// Ref: #/components/schemas/CreateVerificationRequestSMS
type CreateVerificationRequestSMS struct {
	// +E164 formatted phone number.
	PhoneNumber string `json:"phone_number"`
	// The identifier of the associated Verify profile.
	VerifyProfileID uuid.UUID `json:"verify_profile_id"`
	// The number of seconds the verification code is valid for.
	TimeoutSecs OptInt `json:"timeout_secs"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *CreateVerificationRequestSMS) GetPhoneNumber() string {
	return s.PhoneNumber
}

// GetVerifyProfileID returns the value of VerifyProfileID.
func (s *CreateVerificationRequestSMS) GetVerifyProfileID() uuid.UUID {
	return s.VerifyProfileID
}

// GetTimeoutSecs returns the value of TimeoutSecs.
func (s *CreateVerificationRequestSMS) GetTimeoutSecs() OptInt {
	return s.TimeoutSecs
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *CreateVerificationRequestSMS) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// SetVerifyProfileID sets the value of VerifyProfileID.
func (s *CreateVerificationRequestSMS) SetVerifyProfileID(val uuid.UUID) {
	s.VerifyProfileID = val
}

// SetTimeoutSecs sets the value of TimeoutSecs.
func (s *CreateVerificationRequestSMS) SetTimeoutSecs(val OptInt) {
	s.TimeoutSecs = val
}

// Ref: #/components/schemas/CreateVerificationResponse
type CreateVerificationResponse struct {
	Data Verification `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateVerificationResponse) GetData() Verification {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateVerificationResponse) SetData(val Verification) {
	s.Data = val
}

func (*CreateVerificationResponse) createFlashcallVerificationRes() {}
func (*CreateVerificationResponse) createVerificationCallRes()      {}
func (*CreateVerificationResponse) createVerificationSmsRes()       {}

// Ref: #/components/schemas/CreateVerifiedCallsDisplayProfileRequest
type CreateVerifiedCallsDisplayProfileRequest struct {
	// The ID of the business identity that owns the record.
	BusinessIdentityID uuid.UUID      `json:"business_identity_id"`
	Name               Name           `json:"name"`
	DisplayName        OptDisplayName `json:"display_name"`
	LogoURL            OptLogoURL     `json:"logo_url"`
	CallReasons        CallReasons    `json:"call_reasons"`
	PhoneNumbers       PhoneNumbers   `json:"phone_numbers"`
}

// GetBusinessIdentityID returns the value of BusinessIdentityID.
func (s *CreateVerifiedCallsDisplayProfileRequest) GetBusinessIdentityID() uuid.UUID {
	return s.BusinessIdentityID
}

// GetName returns the value of Name.
func (s *CreateVerifiedCallsDisplayProfileRequest) GetName() Name {
	return s.Name
}

// GetDisplayName returns the value of DisplayName.
func (s *CreateVerifiedCallsDisplayProfileRequest) GetDisplayName() OptDisplayName {
	return s.DisplayName
}

// GetLogoURL returns the value of LogoURL.
func (s *CreateVerifiedCallsDisplayProfileRequest) GetLogoURL() OptLogoURL {
	return s.LogoURL
}

// GetCallReasons returns the value of CallReasons.
func (s *CreateVerifiedCallsDisplayProfileRequest) GetCallReasons() CallReasons {
	return s.CallReasons
}

// GetPhoneNumbers returns the value of PhoneNumbers.
func (s *CreateVerifiedCallsDisplayProfileRequest) GetPhoneNumbers() PhoneNumbers {
	return s.PhoneNumbers
}

// SetBusinessIdentityID sets the value of BusinessIdentityID.
func (s *CreateVerifiedCallsDisplayProfileRequest) SetBusinessIdentityID(val uuid.UUID) {
	s.BusinessIdentityID = val
}

// SetName sets the value of Name.
func (s *CreateVerifiedCallsDisplayProfileRequest) SetName(val Name) {
	s.Name = val
}

// SetDisplayName sets the value of DisplayName.
func (s *CreateVerifiedCallsDisplayProfileRequest) SetDisplayName(val OptDisplayName) {
	s.DisplayName = val
}

// SetLogoURL sets the value of LogoURL.
func (s *CreateVerifiedCallsDisplayProfileRequest) SetLogoURL(val OptLogoURL) {
	s.LogoURL = val
}

// SetCallReasons sets the value of CallReasons.
func (s *CreateVerifiedCallsDisplayProfileRequest) SetCallReasons(val CallReasons) {
	s.CallReasons = val
}

// SetPhoneNumbers sets the value of PhoneNumbers.
func (s *CreateVerifiedCallsDisplayProfileRequest) SetPhoneNumbers(val PhoneNumbers) {
	s.PhoneNumbers = val
}

type CreateVerifiedNumberReq struct {
	PhoneNumber string `json:"phone_number"`
	// Verification method.
	VerificationMethod CreateVerifiedNumberReqVerificationMethod `json:"verification_method"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *CreateVerifiedNumberReq) GetPhoneNumber() string {
	return s.PhoneNumber
}

// GetVerificationMethod returns the value of VerificationMethod.
func (s *CreateVerifiedNumberReq) GetVerificationMethod() CreateVerifiedNumberReqVerificationMethod {
	return s.VerificationMethod
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *CreateVerifiedNumberReq) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// SetVerificationMethod sets the value of VerificationMethod.
func (s *CreateVerifiedNumberReq) SetVerificationMethod(val CreateVerifiedNumberReqVerificationMethod) {
	s.VerificationMethod = val
}

// Verification method.
type CreateVerifiedNumberReqVerificationMethod string

const (
	CreateVerifiedNumberReqVerificationMethodSMS  CreateVerifiedNumberReqVerificationMethod = "sms"
	CreateVerifiedNumberReqVerificationMethodCall CreateVerifiedNumberReqVerificationMethod = "call"
)

// AllValues returns all CreateVerifiedNumberReqVerificationMethod values.
func (CreateVerifiedNumberReqVerificationMethod) AllValues() []CreateVerifiedNumberReqVerificationMethod {
	return []CreateVerifiedNumberReqVerificationMethod{
		CreateVerifiedNumberReqVerificationMethodSMS,
		CreateVerifiedNumberReqVerificationMethodCall,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateVerifiedNumberReqVerificationMethod) MarshalText() ([]byte, error) {
	switch s {
	case CreateVerifiedNumberReqVerificationMethodSMS:
		return []byte(s), nil
	case CreateVerifiedNumberReqVerificationMethodCall:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateVerifiedNumberReqVerificationMethod) UnmarshalText(data []byte) error {
	switch CreateVerifiedNumberReqVerificationMethod(data) {
	case CreateVerifiedNumberReqVerificationMethodSMS:
		*s = CreateVerifiedNumberReqVerificationMethodSMS
		return nil
	case CreateVerifiedNumberReqVerificationMethodCall:
		*s = CreateVerifiedNumberReqVerificationMethodCall
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CreateVerifiedNumberResponse
type CreateVerifiedNumberResponse struct {
	PhoneNumber        OptString `json:"phone_number"`
	VerificationMethod OptString `json:"verification_method"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *CreateVerifiedNumberResponse) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetVerificationMethod returns the value of VerificationMethod.
func (s *CreateVerifiedNumberResponse) GetVerificationMethod() OptString {
	return s.VerificationMethod
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *CreateVerifiedNumberResponse) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetVerificationMethod sets the value of VerificationMethod.
func (s *CreateVerifiedNumberResponse) SetVerificationMethod(val OptString) {
	s.VerificationMethod = val
}

func (*CreateVerifiedNumberResponse) createVerifiedNumberRes() {}

// Ref: #/components/schemas/CreateVerifyProfileCallRequest
type CreateVerifyProfileCallRequest struct {
	// The message template identifier selected from /verify_profiles/templates.
	MessagingTemplateID OptUUID `json:"messaging_template_id"`
	// The name that identifies the application requesting 2fa in the verification message.
	AppName OptString `json:"app_name"`
	// Enabled country destinations to send verification codes. The elements in the list must be valid
	// ISO 3166-1 alpha-2 country codes. If set to `["*"]`, all destinations will be allowed.
	WhitelistedDestinations []string `json:"whitelisted_destinations"`
	// For every request that is initiated via this Verify profile, this sets the number of seconds
	// before a verification request code expires. Once the verification request expires, the user cannot
	// use the code to verify their identity.
	DefaultVerificationTimeoutSecs OptInt `json:"default_verification_timeout_secs"`
}

// GetMessagingTemplateID returns the value of MessagingTemplateID.
func (s *CreateVerifyProfileCallRequest) GetMessagingTemplateID() OptUUID {
	return s.MessagingTemplateID
}

// GetAppName returns the value of AppName.
func (s *CreateVerifyProfileCallRequest) GetAppName() OptString {
	return s.AppName
}

// GetWhitelistedDestinations returns the value of WhitelistedDestinations.
func (s *CreateVerifyProfileCallRequest) GetWhitelistedDestinations() []string {
	return s.WhitelistedDestinations
}

// GetDefaultVerificationTimeoutSecs returns the value of DefaultVerificationTimeoutSecs.
func (s *CreateVerifyProfileCallRequest) GetDefaultVerificationTimeoutSecs() OptInt {
	return s.DefaultVerificationTimeoutSecs
}

// SetMessagingTemplateID sets the value of MessagingTemplateID.
func (s *CreateVerifyProfileCallRequest) SetMessagingTemplateID(val OptUUID) {
	s.MessagingTemplateID = val
}

// SetAppName sets the value of AppName.
func (s *CreateVerifyProfileCallRequest) SetAppName(val OptString) {
	s.AppName = val
}

// SetWhitelistedDestinations sets the value of WhitelistedDestinations.
func (s *CreateVerifyProfileCallRequest) SetWhitelistedDestinations(val []string) {
	s.WhitelistedDestinations = val
}

// SetDefaultVerificationTimeoutSecs sets the value of DefaultVerificationTimeoutSecs.
func (s *CreateVerifyProfileCallRequest) SetDefaultVerificationTimeoutSecs(val OptInt) {
	s.DefaultVerificationTimeoutSecs = val
}

// Ref: #/components/schemas/CreateVerifyProfileFlashcallRequest
type CreateVerifyProfileFlashcallRequest struct {
	// Enabled country destinations to send verification codes. The elements in the list must be valid
	// ISO 3166-1 alpha-2 country codes. If set to `["*"]`, all destinations will be allowed.
	WhitelistedDestinations []string `json:"whitelisted_destinations"`
	// For every request that is initiated via this Verify profile, this sets the number of seconds
	// before a verification request code expires. Once the verification request expires, the user cannot
	// use the code to verify their identity.
	DefaultVerificationTimeoutSecs OptInt `json:"default_verification_timeout_secs"`
}

// GetWhitelistedDestinations returns the value of WhitelistedDestinations.
func (s *CreateVerifyProfileFlashcallRequest) GetWhitelistedDestinations() []string {
	return s.WhitelistedDestinations
}

// GetDefaultVerificationTimeoutSecs returns the value of DefaultVerificationTimeoutSecs.
func (s *CreateVerifyProfileFlashcallRequest) GetDefaultVerificationTimeoutSecs() OptInt {
	return s.DefaultVerificationTimeoutSecs
}

// SetWhitelistedDestinations sets the value of WhitelistedDestinations.
func (s *CreateVerifyProfileFlashcallRequest) SetWhitelistedDestinations(val []string) {
	s.WhitelistedDestinations = val
}

// SetDefaultVerificationTimeoutSecs sets the value of DefaultVerificationTimeoutSecs.
func (s *CreateVerifyProfileFlashcallRequest) SetDefaultVerificationTimeoutSecs(val OptInt) {
	s.DefaultVerificationTimeoutSecs = val
}

type CreateVerifyProfileReq struct {
	Name               string                                 `json:"name"`
	WebhookURL         OptString                              `json:"webhook_url"`
	WebhookFailoverURL OptString                              `json:"webhook_failover_url"`
	SMS                OptCreateVerifyProfileSMSRequest       `json:"sms"`
	Call               OptCreateVerifyProfileCallRequest      `json:"call"`
	Flashcall          OptCreateVerifyProfileFlashcallRequest `json:"flashcall"`
	Language           OptString                              `json:"language"`
}

// GetName returns the value of Name.
func (s *CreateVerifyProfileReq) GetName() string {
	return s.Name
}

// GetWebhookURL returns the value of WebhookURL.
func (s *CreateVerifyProfileReq) GetWebhookURL() OptString {
	return s.WebhookURL
}

// GetWebhookFailoverURL returns the value of WebhookFailoverURL.
func (s *CreateVerifyProfileReq) GetWebhookFailoverURL() OptString {
	return s.WebhookFailoverURL
}

// GetSMS returns the value of SMS.
func (s *CreateVerifyProfileReq) GetSMS() OptCreateVerifyProfileSMSRequest {
	return s.SMS
}

// GetCall returns the value of Call.
func (s *CreateVerifyProfileReq) GetCall() OptCreateVerifyProfileCallRequest {
	return s.Call
}

// GetFlashcall returns the value of Flashcall.
func (s *CreateVerifyProfileReq) GetFlashcall() OptCreateVerifyProfileFlashcallRequest {
	return s.Flashcall
}

// GetLanguage returns the value of Language.
func (s *CreateVerifyProfileReq) GetLanguage() OptString {
	return s.Language
}

// SetName sets the value of Name.
func (s *CreateVerifyProfileReq) SetName(val string) {
	s.Name = val
}

// SetWebhookURL sets the value of WebhookURL.
func (s *CreateVerifyProfileReq) SetWebhookURL(val OptString) {
	s.WebhookURL = val
}

// SetWebhookFailoverURL sets the value of WebhookFailoverURL.
func (s *CreateVerifyProfileReq) SetWebhookFailoverURL(val OptString) {
	s.WebhookFailoverURL = val
}

// SetSMS sets the value of SMS.
func (s *CreateVerifyProfileReq) SetSMS(val OptCreateVerifyProfileSMSRequest) {
	s.SMS = val
}

// SetCall sets the value of Call.
func (s *CreateVerifyProfileReq) SetCall(val OptCreateVerifyProfileCallRequest) {
	s.Call = val
}

// SetFlashcall sets the value of Flashcall.
func (s *CreateVerifyProfileReq) SetFlashcall(val OptCreateVerifyProfileFlashcallRequest) {
	s.Flashcall = val
}

// SetLanguage sets the value of Language.
func (s *CreateVerifyProfileReq) SetLanguage(val OptString) {
	s.Language = val
}

// Ref: #/components/schemas/CreateVerifyProfileSMSRequest
type CreateVerifyProfileSMSRequest struct {
	// The message template identifier selected from /verify_profiles/templates.
	MessagingTemplateID OptUUID `json:"messaging_template_id"`
	// The name that identifies the application requesting 2fa in the verification message.
	AppName OptString `json:"app_name"`
	// The alphanumeric sender ID to use when sending to destinations that require an alphanumeric sender
	// ID.
	AlphaSender OptNilString `json:"alpha_sender"`
	// Enabled country destinations to send verification codes. The elements in the list must be valid
	// ISO 3166-1 alpha-2 country codes. If set to `["*"]`, all destinations will be allowed.
	WhitelistedDestinations []string `json:"whitelisted_destinations"`
	// For every request that is initiated via this Verify profile, this sets the number of seconds
	// before a verification request code expires. Once the verification request expires, the user cannot
	// use the code to verify their identity.
	DefaultVerificationTimeoutSecs OptInt `json:"default_verification_timeout_secs"`
}

// GetMessagingTemplateID returns the value of MessagingTemplateID.
func (s *CreateVerifyProfileSMSRequest) GetMessagingTemplateID() OptUUID {
	return s.MessagingTemplateID
}

// GetAppName returns the value of AppName.
func (s *CreateVerifyProfileSMSRequest) GetAppName() OptString {
	return s.AppName
}

// GetAlphaSender returns the value of AlphaSender.
func (s *CreateVerifyProfileSMSRequest) GetAlphaSender() OptNilString {
	return s.AlphaSender
}

// GetWhitelistedDestinations returns the value of WhitelistedDestinations.
func (s *CreateVerifyProfileSMSRequest) GetWhitelistedDestinations() []string {
	return s.WhitelistedDestinations
}

// GetDefaultVerificationTimeoutSecs returns the value of DefaultVerificationTimeoutSecs.
func (s *CreateVerifyProfileSMSRequest) GetDefaultVerificationTimeoutSecs() OptInt {
	return s.DefaultVerificationTimeoutSecs
}

// SetMessagingTemplateID sets the value of MessagingTemplateID.
func (s *CreateVerifyProfileSMSRequest) SetMessagingTemplateID(val OptUUID) {
	s.MessagingTemplateID = val
}

// SetAppName sets the value of AppName.
func (s *CreateVerifyProfileSMSRequest) SetAppName(val OptString) {
	s.AppName = val
}

// SetAlphaSender sets the value of AlphaSender.
func (s *CreateVerifyProfileSMSRequest) SetAlphaSender(val OptNilString) {
	s.AlphaSender = val
}

// SetWhitelistedDestinations sets the value of WhitelistedDestinations.
func (s *CreateVerifyProfileSMSRequest) SetWhitelistedDestinations(val []string) {
	s.WhitelistedDestinations = val
}

// SetDefaultVerificationTimeoutSecs sets the value of DefaultVerificationTimeoutSecs.
func (s *CreateVerifyProfileSMSRequest) SetDefaultVerificationTimeoutSecs(val OptInt) {
	s.DefaultVerificationTimeoutSecs = val
}

type CreatedAt string

type Credentials string

// Ref: #/components/schemas/CredentialsResponse
type CredentialsResponse struct {
	Data CustomStorageConfiguration `json:"data"`
	// Uniquely identifies a Telnyx application (Call Control, TeXML) or Sip connection resource.
	ConnectionID string     `json:"connection_id"`
	RecordType   RecordType `json:"record_type"`
}

// GetData returns the value of Data.
func (s *CredentialsResponse) GetData() CustomStorageConfiguration {
	return s.Data
}

// GetConnectionID returns the value of ConnectionID.
func (s *CredentialsResponse) GetConnectionID() string {
	return s.ConnectionID
}

// GetRecordType returns the value of RecordType.
func (s *CredentialsResponse) GetRecordType() RecordType {
	return s.RecordType
}

// SetData sets the value of Data.
func (s *CredentialsResponse) SetData(val CustomStorageConfiguration) {
	s.Data = val
}

// SetConnectionID sets the value of ConnectionID.
func (s *CredentialsResponse) SetConnectionID(val string) {
	s.ConnectionID = val
}

// SetRecordType sets the value of RecordType.
func (s *CredentialsResponse) SetRecordType(val RecordType) {
	s.RecordType = val
}

func (*CredentialsResponse) createCustomStorageCredentialsRes() {}
func (*CredentialsResponse) getCustomStorageCredentialsRes()    {}
func (*CredentialsResponse) updateCustomStorageCredentialsRes() {}

// Ref: #/components/schemas/Cursor
type Cursor struct {
	// Opaque identifier of next page.
	After OptString `json:"after"`
	// Opaque identifier of previous page.
	Before OptString `json:"before"`
}

// GetAfter returns the value of After.
func (s *Cursor) GetAfter() OptString {
	return s.After
}

// GetBefore returns the value of Before.
func (s *Cursor) GetBefore() OptString {
	return s.Before
}

// SetAfter sets the value of After.
func (s *Cursor) SetAfter(val OptString) {
	s.After = val
}

// SetBefore sets the value of Before.
func (s *Cursor) SetBefore(val OptString) {
	s.Before = val
}

// Ref: #/components/schemas/CursorPaginationMeta
type CursorPaginationMeta struct {
	Cursors OptCursor `json:"cursors"`
	// Path to next page.
	Next OptString `json:"next"`
	// Path to previous page.
	Previous OptString `json:"previous"`
}

// GetCursors returns the value of Cursors.
func (s *CursorPaginationMeta) GetCursors() OptCursor {
	return s.Cursors
}

// GetNext returns the value of Next.
func (s *CursorPaginationMeta) GetNext() OptString {
	return s.Next
}

// GetPrevious returns the value of Previous.
func (s *CursorPaginationMeta) GetPrevious() OptString {
	return s.Previous
}

// SetCursors sets the value of Cursors.
func (s *CursorPaginationMeta) SetCursors(val OptCursor) {
	s.Cursors = val
}

// SetNext sets the value of Next.
func (s *CursorPaginationMeta) SetNext(val OptString) {
	s.Next = val
}

// SetPrevious sets the value of Previous.
func (s *CursorPaginationMeta) SetPrevious(val OptString) {
	s.Previous = val
}

// Ref: #/components/schemas/CustomSipHeader
type CustomSipHeader struct {
	// The name of the header to add.
	Name string `json:"name"`
	// The value of the header.
	Value string `json:"value"`
}

// GetName returns the value of Name.
func (s *CustomSipHeader) GetName() string {
	return s.Name
}

// GetValue returns the value of Value.
func (s *CustomSipHeader) GetValue() string {
	return s.Value
}

// SetName sets the value of Name.
func (s *CustomSipHeader) SetName(val string) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *CustomSipHeader) SetValue(val string) {
	s.Value = val
}

// Ref: #/components/schemas/CustomStorageConfiguration
type CustomStorageConfiguration struct {
	Backend       CustomStorageConfigurationBackend       `json:"backend"`
	Configuration CustomStorageConfigurationConfiguration `json:"configuration"`
}

// GetBackend returns the value of Backend.
func (s *CustomStorageConfiguration) GetBackend() CustomStorageConfigurationBackend {
	return s.Backend
}

// GetConfiguration returns the value of Configuration.
func (s *CustomStorageConfiguration) GetConfiguration() CustomStorageConfigurationConfiguration {
	return s.Configuration
}

// SetBackend sets the value of Backend.
func (s *CustomStorageConfiguration) SetBackend(val CustomStorageConfigurationBackend) {
	s.Backend = val
}

// SetConfiguration sets the value of Configuration.
func (s *CustomStorageConfiguration) SetConfiguration(val CustomStorageConfigurationConfiguration) {
	s.Configuration = val
}

type CustomStorageConfigurationBackend string

const (
	CustomStorageConfigurationBackendGcs   CustomStorageConfigurationBackend = "gcs"
	CustomStorageConfigurationBackendS3    CustomStorageConfigurationBackend = "s3"
	CustomStorageConfigurationBackendAzure CustomStorageConfigurationBackend = "azure"
)

// AllValues returns all CustomStorageConfigurationBackend values.
func (CustomStorageConfigurationBackend) AllValues() []CustomStorageConfigurationBackend {
	return []CustomStorageConfigurationBackend{
		CustomStorageConfigurationBackendGcs,
		CustomStorageConfigurationBackendS3,
		CustomStorageConfigurationBackendAzure,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomStorageConfigurationBackend) MarshalText() ([]byte, error) {
	switch s {
	case CustomStorageConfigurationBackendGcs:
		return []byte(s), nil
	case CustomStorageConfigurationBackendS3:
		return []byte(s), nil
	case CustomStorageConfigurationBackendAzure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomStorageConfigurationBackend) UnmarshalText(data []byte) error {
	switch CustomStorageConfigurationBackend(data) {
	case CustomStorageConfigurationBackendGcs:
		*s = CustomStorageConfigurationBackendGcs
		return nil
	case CustomStorageConfigurationBackendS3:
		*s = CustomStorageConfigurationBackendS3
		return nil
	case CustomStorageConfigurationBackendAzure:
		*s = CustomStorageConfigurationBackendAzure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// CustomStorageConfigurationConfiguration represents sum type.
type CustomStorageConfigurationConfiguration struct {
	Type                   CustomStorageConfigurationConfigurationType // switch on this field
	GCSConfigurationData   GCSConfigurationData
	S3ConfigurationData    S3ConfigurationData
	AzureConfigurationData AzureConfigurationData
}

// CustomStorageConfigurationConfigurationType is oneOf type of CustomStorageConfigurationConfiguration.
type CustomStorageConfigurationConfigurationType string

// Possible values for CustomStorageConfigurationConfigurationType.
const (
	GCSConfigurationDataCustomStorageConfigurationConfiguration   CustomStorageConfigurationConfigurationType = "GCSConfigurationData"
	S3ConfigurationDataCustomStorageConfigurationConfiguration    CustomStorageConfigurationConfigurationType = "S3ConfigurationData"
	AzureConfigurationDataCustomStorageConfigurationConfiguration CustomStorageConfigurationConfigurationType = "AzureConfigurationData"
)

// IsGCSConfigurationData reports whether CustomStorageConfigurationConfiguration is GCSConfigurationData.
func (s CustomStorageConfigurationConfiguration) IsGCSConfigurationData() bool {
	return s.Type == GCSConfigurationDataCustomStorageConfigurationConfiguration
}

// IsS3ConfigurationData reports whether CustomStorageConfigurationConfiguration is S3ConfigurationData.
func (s CustomStorageConfigurationConfiguration) IsS3ConfigurationData() bool {
	return s.Type == S3ConfigurationDataCustomStorageConfigurationConfiguration
}

// IsAzureConfigurationData reports whether CustomStorageConfigurationConfiguration is AzureConfigurationData.
func (s CustomStorageConfigurationConfiguration) IsAzureConfigurationData() bool {
	return s.Type == AzureConfigurationDataCustomStorageConfigurationConfiguration
}

// SetGCSConfigurationData sets CustomStorageConfigurationConfiguration to GCSConfigurationData.
func (s *CustomStorageConfigurationConfiguration) SetGCSConfigurationData(v GCSConfigurationData) {
	s.Type = GCSConfigurationDataCustomStorageConfigurationConfiguration
	s.GCSConfigurationData = v
}

// GetGCSConfigurationData returns GCSConfigurationData and true boolean if CustomStorageConfigurationConfiguration is GCSConfigurationData.
func (s CustomStorageConfigurationConfiguration) GetGCSConfigurationData() (v GCSConfigurationData, ok bool) {
	if !s.IsGCSConfigurationData() {
		return v, false
	}
	return s.GCSConfigurationData, true
}

// NewGCSConfigurationDataCustomStorageConfigurationConfiguration returns new CustomStorageConfigurationConfiguration from GCSConfigurationData.
func NewGCSConfigurationDataCustomStorageConfigurationConfiguration(v GCSConfigurationData) CustomStorageConfigurationConfiguration {
	var s CustomStorageConfigurationConfiguration
	s.SetGCSConfigurationData(v)
	return s
}

// SetS3ConfigurationData sets CustomStorageConfigurationConfiguration to S3ConfigurationData.
func (s *CustomStorageConfigurationConfiguration) SetS3ConfigurationData(v S3ConfigurationData) {
	s.Type = S3ConfigurationDataCustomStorageConfigurationConfiguration
	s.S3ConfigurationData = v
}

// GetS3ConfigurationData returns S3ConfigurationData and true boolean if CustomStorageConfigurationConfiguration is S3ConfigurationData.
func (s CustomStorageConfigurationConfiguration) GetS3ConfigurationData() (v S3ConfigurationData, ok bool) {
	if !s.IsS3ConfigurationData() {
		return v, false
	}
	return s.S3ConfigurationData, true
}

// NewS3ConfigurationDataCustomStorageConfigurationConfiguration returns new CustomStorageConfigurationConfiguration from S3ConfigurationData.
func NewS3ConfigurationDataCustomStorageConfigurationConfiguration(v S3ConfigurationData) CustomStorageConfigurationConfiguration {
	var s CustomStorageConfigurationConfiguration
	s.SetS3ConfigurationData(v)
	return s
}

// SetAzureConfigurationData sets CustomStorageConfigurationConfiguration to AzureConfigurationData.
func (s *CustomStorageConfigurationConfiguration) SetAzureConfigurationData(v AzureConfigurationData) {
	s.Type = AzureConfigurationDataCustomStorageConfigurationConfiguration
	s.AzureConfigurationData = v
}

// GetAzureConfigurationData returns AzureConfigurationData and true boolean if CustomStorageConfigurationConfiguration is AzureConfigurationData.
func (s CustomStorageConfigurationConfiguration) GetAzureConfigurationData() (v AzureConfigurationData, ok bool) {
	if !s.IsAzureConfigurationData() {
		return v, false
	}
	return s.AzureConfigurationData, true
}

// NewAzureConfigurationDataCustomStorageConfigurationConfiguration returns new CustomStorageConfigurationConfiguration from AzureConfigurationData.
func NewAzureConfigurationDataCustomStorageConfigurationConfiguration(v AzureConfigurationData) CustomStorageConfigurationConfiguration {
	var s CustomStorageConfigurationConfiguration
	s.SetAzureConfigurationData(v)
	return s
}

type DateTimeRFC2822 string

// DeleteCallControlApplicationNotFound is response for DeleteCallControlApplication operation.
type DeleteCallControlApplicationNotFound struct{}

func (*DeleteCallControlApplicationNotFound) deleteCallControlApplicationRes() {}

// DeleteCallControlApplicationUnprocessableEntity is response for DeleteCallControlApplication operation.
type DeleteCallControlApplicationUnprocessableEntity struct{}

func (*DeleteCallControlApplicationUnprocessableEntity) deleteCallControlApplicationRes() {}

// DeleteCustomStorageCredentialsNoContent is response for DeleteCustomStorageCredentials operation.
type DeleteCustomStorageCredentialsNoContent struct{}

func (*DeleteCustomStorageCredentialsNoContent) deleteCustomStorageCredentialsRes() {}

// DeleteRecordingsNoContent is response for DeleteRecordings operation.
type DeleteRecordingsNoContent struct{}

func (*DeleteRecordingsNoContent) deleteRecordingsRes() {}

// DeleteRoomRecordingNoContent is response for DeleteRoomRecording operation.
type DeleteRoomRecordingNoContent struct{}

func (*DeleteRoomRecordingNoContent) deleteRoomRecordingRes() {}

// DeleteTeXMLCallRecordingNoContent is response for DeleteTeXMLCallRecording operation.
type DeleteTeXMLCallRecordingNoContent struct{}

func (*DeleteTeXMLCallRecordingNoContent) deleteTeXMLCallRecordingRes() {}

// DeleteTeXMLRecordingTranscriptionNoContent is response for DeleteTeXMLRecordingTranscription operation.
type DeleteTeXMLRecordingTranscriptionNoContent struct{}

func (*DeleteTeXMLRecordingTranscriptionNoContent) deleteTeXMLRecordingTranscriptionRes() {}

// DeleteTelephonyCredentialNotFound is response for DeleteTelephonyCredential operation.
type DeleteTelephonyCredentialNotFound struct{}

func (*DeleteTelephonyCredentialNotFound) deleteTelephonyCredentialRes() {}

// DeleteTelephonyCredentialUnauthorized is response for DeleteTelephonyCredential operation.
type DeleteTelephonyCredentialUnauthorized struct{}

func (*DeleteTelephonyCredentialUnauthorized) deleteTelephonyCredentialRes() {}

// DeleteTelephonyCredentialUnprocessableEntity is response for DeleteTelephonyCredential operation.
type DeleteTelephonyCredentialUnprocessableEntity struct{}

func (*DeleteTelephonyCredentialUnprocessableEntity) deleteTelephonyCredentialRes() {}

// DeleteTelephonyCredentialsUnprocessableEntity is response for DeleteTelephonyCredentials operation.
type DeleteTelephonyCredentialsUnprocessableEntity struct{}

func (*DeleteTelephonyCredentialsUnprocessableEntity) deleteTelephonyCredentialsRes() {}

type DeleteTexmlApplicationBadRequest ErrorResponse

func (*DeleteTexmlApplicationBadRequest) deleteTexmlApplicationRes() {}

type DeleteTexmlApplicationNotFound ErrorResponse

func (*DeleteTexmlApplicationNotFound) deleteTexmlApplicationRes() {}

type DeleteTexmlApplicationUnauthorized ErrorResponse

func (*DeleteTexmlApplicationUnauthorized) deleteTexmlApplicationRes() {}

// DeleteTexmlConferenceParticipantNoContent is response for DeleteTexmlConferenceParticipant operation.
type DeleteTexmlConferenceParticipantNoContent struct{}

func (*DeleteTexmlConferenceParticipantNoContent) deleteTexmlConferenceParticipantRes() {}

type DeleteVerifiedNumberNotFound Errors

func (*DeleteVerifiedNumberNotFound) deleteVerifiedNumberRes() {}

type DeleteVerifiedNumberUnauthorized Errors

func (*DeleteVerifiedNumberUnauthorized) deleteVerifiedNumberRes() {}

// Ref: #/components/schemas/DialConferenceParticipantRequest
type DialConferenceParticipantRequest struct {
	// Whether to play a notification beep to the conference when the participant enters and exits.
	Beep OptDialConferenceParticipantRequestBeep `json:"Beep"`
	// URL destination for Telnyx to send status callback events to for the call.
	StatusCallback OptString `json:"StatusCallback"`
	// HTTP request type used for `StatusCallback`.
	StatusCallbackMethod OptDialConferenceParticipantRequestStatusCallbackMethod `json:"StatusCallbackMethod"`
	// The changes to the call's state that should generate a call to `StatusCallback`. Can be:
	// `initiated`, `ringing`, `answered`, and `completed`. Separate multiple values with a space. The
	// default value is `completed`.
	StatusCallbackEvent OptString `json:"StatusCallbackEvent"`
	// The phone number of the called party. Phone numbers are formatted with a `+` and country code.
	To OptString `json:"To"`
	// The phone number of the party that initiated the call. Phone numbers are formatted with a `+` and
	// country code.
	From OptString `json:"From"`
	// The number of seconds that we should allow the phone to ring before assuming there is no answer.
	// Can be an integer between 5 and 120, inclusive. The default value is 30.
	Timeout OptInt `json:"Timeout"`
	// Whether the participant should be muted.
	Muted OptBool `json:"Muted"`
	// Whether to start the conference when the participant enters. Defaults to `true`.
	StartConferenceOnEnter OptBool `json:"StartConferenceOnEnter"`
	// Whether to end the conference when the participant leaves. Defaults to `false`.
	EndConferenceOnExit OptBool `json:"EndConferenceOnExit"`
	// Whether participant shall be bridged to conference before the participant answers (from early
	// media if available). Defaults to `false`.
	EarlyMedia OptBool `json:"EarlyMedia"`
	// The URL the conference callbacks will be sent to.
	ConferenceStatusCallback OptString `json:"ConferenceStatusCallback"`
	// HTTP request type used for `ConferenceStatusCallback`. Defaults to `POST`.
	ConferenceStatusCallbackMethod OptDialConferenceParticipantRequestConferenceStatusCallbackMethod `json:"ConferenceStatusCallbackMethod"`
	// The changes to the conference's state that should generate a call to `ConferenceStatusCallback`.
	// Can be: `start`, `end`, `join` and `leave`. Separate multiple values with a space. By default no
	// callbacks are sent.
	ConferenceStatusCallbackEvent OptString `json:"ConferenceStatusCallbackEvent"`
	// The URL to call for an audio file to play while the participant is waiting for the conference to
	// start.
	WaitUrl OptString `json:"WaitUrl"`
	// The maximum number of participants in the conference. Can be a positive integer from 2 to 800. The
	// default value is 250.
	MaxParticipants OptInt `json:"MaxParticipants"`
	// Whether the participant is coaching another call. When `true`, `CallSidToCoach` has to be given.
	Coaching OptBool `json:"Coaching"`
	// The SID of the participant who is being coached. The participant being coached is the only
	// participant who can hear the participant who is coaching.
	CallSidToCoach OptString `json:"CallSidToCoach"`
	// To be used as the caller id name (SIP From Display Name) presented to the destination (`To`
	// number). The string should have a maximum of 128 characters, containing only letters, numbers,
	// spaces, and `-_~!.+` special characters. If ommited, the display name will be the same as the
	// number in the `From` field.
	CallerId OptString `json:"CallerId"`
	// The maximum duration of the call in seconds.
	TimeLimit OptInt `json:"TimeLimit"`
	// Whether to detect if a human or an answering machine picked up the call. Use `Enable` if you would
	// like to ne notified as soon as the called party is identified. Use `DetectMessageEnd`, if you
	// would like to leave a message on an answering machine.
	MachineDetection OptDialConferenceParticipantRequestMachineDetection `json:"MachineDetection"`
	// How long answering machine detection should go on for before sending an `Unknown` result. Given in
	// milliseconds.
	MachineDetectionTimeout OptInt `json:"MachineDetectionTimeout"`
	// Maximum threshold of a human greeting. If greeting longer than this value, considered machine.
	// Ignored when `premium` detection is used.
	MachineDetectionSpeechThreshold OptInt `json:"MachineDetectionSpeechThreshold"`
	// Silence duration threshold after a greeting message or voice for it be considered human. Ignored
	// when `premium` detection is used.
	MachineDetectionSpeechEndThreshold OptInt `json:"MachineDetectionSpeechEndThreshold"`
	// If initial silence duration is greater than this value, consider it a machine. Ignored when
	// `premium` detection is used.
	MachineDetectionSilenceTimeout OptInt `json:"MachineDetectionSilenceTimeout"`
	// The URL the result of answering machine detection will be sent to.
	AmdStatusCallback OptString `json:"AmdStatusCallback"`
	// HTTP request type used for `AmdStatusCallback`. Defaults to `POST`.
	AmdStatusCallbackMethod OptDialConferenceParticipantRequestAmdStatusCallbackMethod `json:"AmdStatusCallbackMethod"`
	// Whether to cancel ongoing playback on `machine` detection. Defaults to `true`.
	CancelPlaybackOnMachineDetection OptBool `json:"CancelPlaybackOnMachineDetection"`
	// Whether to cancel ongoing playback on `greeting ended` detection. Defaults to `true`.
	CancelPlaybackOnDetectMessageEnd OptBool `json:"CancelPlaybackOnDetectMessageEnd"`
	// The list of comma-separated codecs to be offered on a call.
	PreferredCodecs OptString `json:"PreferredCodecs"`
	// Whether to record the entire participant's call leg. Defaults to `false`.
	Record OptBool `json:"Record"`
	// The number of channels in the final recording. Defaults to `mono`.
	RecordingChannels OptDialConferenceParticipantRequestRecordingChannels `json:"RecordingChannels"`
	// The URL the recording callbacks will be sent to.
	RecordingStatusCallback OptString `json:"RecordingStatusCallback"`
	// HTTP request type used for `RecordingStatusCallback`. Defaults to `POST`.
	RecordingStatusCallbackMethod OptDialConferenceParticipantRequestRecordingStatusCallbackMethod `json:"RecordingStatusCallbackMethod"`
	// The changes to the recording's state that should generate a call to `RecoridngStatusCallback`. Can
	// be: `in-progress`, `completed` and `absent`. Separate multiple values with a space. Defaults to
	// `completed`.
	RecordingStatusCallbackEvent OptString `json:"RecordingStatusCallbackEvent"`
	// The audio track to record for the call. The default is `both`.
	RecordingTrack OptDialConferenceParticipantRequestRecordingTrack `json:"RecordingTrack"`
	// The password to use for SIP authentication.
	SipAuthPassword OptString `json:"SipAuthPassword"`
	// The username to use for SIP authentication.
	SipAuthUsername OptString `json:"SipAuthUsername"`
	// Whether to trim any leading and trailing silence from the recording. Defaults to `trim-silence`.
	Trim OptDialConferenceParticipantRequestTrim `json:"Trim"`
	// Whether to record the conference the participant is joining. Defualts to `do-not-record`. The
	// boolean values `true` and `false` are synonymous with `record-from-start` and `do-not-record`
	// respectively.
	ConferenceRecord OptDialConferenceParticipantRequestConferenceRecord `json:"ConferenceRecord"`
	// The URL the conference recording callbacks will be sent to.
	ConferenceRecordingStatusCallback OptString `json:"ConferenceRecordingStatusCallback"`
	// HTTP request type used for `ConferenceRecordingStatusCallback`. Defaults to `POST`.
	ConferenceRecordingStatusCallbackMethod OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod `json:"ConferenceRecordingStatusCallbackMethod"`
	// The changes to the conference recording's state that should generate a call to
	// `RecoridngStatusCallback`. Can be: `in-progress`, `completed` and `absent`. Separate multiple
	// values with a space. Defaults to `completed`. `failed` and `absent` are synonymous.
	ConferenceRecordingStatusCallbackEvent OptString `json:"ConferenceRecordingStatusCallbackEvent"`
	// The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected.
	//  The timer only starts when the speech is detected. Please note that the transcription is used to
	// detect silence and the related charge will be applied. The minimum value is 0. The default value
	// is 0 (infinite).
	ConferenceRecordingTimeout OptInt `json:"ConferenceRecordingTimeout"`
	// Whether to trim any leading and trailing silence from the conference recording. Defaults to
	// `trim-silence`.
	ConferenceTrim OptDialConferenceParticipantRequestConferenceTrim `json:"ConferenceTrim"`
}

// GetBeep returns the value of Beep.
func (s *DialConferenceParticipantRequest) GetBeep() OptDialConferenceParticipantRequestBeep {
	return s.Beep
}

// GetStatusCallback returns the value of StatusCallback.
func (s *DialConferenceParticipantRequest) GetStatusCallback() OptString {
	return s.StatusCallback
}

// GetStatusCallbackMethod returns the value of StatusCallbackMethod.
func (s *DialConferenceParticipantRequest) GetStatusCallbackMethod() OptDialConferenceParticipantRequestStatusCallbackMethod {
	return s.StatusCallbackMethod
}

// GetStatusCallbackEvent returns the value of StatusCallbackEvent.
func (s *DialConferenceParticipantRequest) GetStatusCallbackEvent() OptString {
	return s.StatusCallbackEvent
}

// GetTo returns the value of To.
func (s *DialConferenceParticipantRequest) GetTo() OptString {
	return s.To
}

// GetFrom returns the value of From.
func (s *DialConferenceParticipantRequest) GetFrom() OptString {
	return s.From
}

// GetTimeout returns the value of Timeout.
func (s *DialConferenceParticipantRequest) GetTimeout() OptInt {
	return s.Timeout
}

// GetMuted returns the value of Muted.
func (s *DialConferenceParticipantRequest) GetMuted() OptBool {
	return s.Muted
}

// GetStartConferenceOnEnter returns the value of StartConferenceOnEnter.
func (s *DialConferenceParticipantRequest) GetStartConferenceOnEnter() OptBool {
	return s.StartConferenceOnEnter
}

// GetEndConferenceOnExit returns the value of EndConferenceOnExit.
func (s *DialConferenceParticipantRequest) GetEndConferenceOnExit() OptBool {
	return s.EndConferenceOnExit
}

// GetEarlyMedia returns the value of EarlyMedia.
func (s *DialConferenceParticipantRequest) GetEarlyMedia() OptBool {
	return s.EarlyMedia
}

// GetConferenceStatusCallback returns the value of ConferenceStatusCallback.
func (s *DialConferenceParticipantRequest) GetConferenceStatusCallback() OptString {
	return s.ConferenceStatusCallback
}

// GetConferenceStatusCallbackMethod returns the value of ConferenceStatusCallbackMethod.
func (s *DialConferenceParticipantRequest) GetConferenceStatusCallbackMethod() OptDialConferenceParticipantRequestConferenceStatusCallbackMethod {
	return s.ConferenceStatusCallbackMethod
}

// GetConferenceStatusCallbackEvent returns the value of ConferenceStatusCallbackEvent.
func (s *DialConferenceParticipantRequest) GetConferenceStatusCallbackEvent() OptString {
	return s.ConferenceStatusCallbackEvent
}

// GetWaitUrl returns the value of WaitUrl.
func (s *DialConferenceParticipantRequest) GetWaitUrl() OptString {
	return s.WaitUrl
}

// GetMaxParticipants returns the value of MaxParticipants.
func (s *DialConferenceParticipantRequest) GetMaxParticipants() OptInt {
	return s.MaxParticipants
}

// GetCoaching returns the value of Coaching.
func (s *DialConferenceParticipantRequest) GetCoaching() OptBool {
	return s.Coaching
}

// GetCallSidToCoach returns the value of CallSidToCoach.
func (s *DialConferenceParticipantRequest) GetCallSidToCoach() OptString {
	return s.CallSidToCoach
}

// GetCallerId returns the value of CallerId.
func (s *DialConferenceParticipantRequest) GetCallerId() OptString {
	return s.CallerId
}

// GetTimeLimit returns the value of TimeLimit.
func (s *DialConferenceParticipantRequest) GetTimeLimit() OptInt {
	return s.TimeLimit
}

// GetMachineDetection returns the value of MachineDetection.
func (s *DialConferenceParticipantRequest) GetMachineDetection() OptDialConferenceParticipantRequestMachineDetection {
	return s.MachineDetection
}

// GetMachineDetectionTimeout returns the value of MachineDetectionTimeout.
func (s *DialConferenceParticipantRequest) GetMachineDetectionTimeout() OptInt {
	return s.MachineDetectionTimeout
}

// GetMachineDetectionSpeechThreshold returns the value of MachineDetectionSpeechThreshold.
func (s *DialConferenceParticipantRequest) GetMachineDetectionSpeechThreshold() OptInt {
	return s.MachineDetectionSpeechThreshold
}

// GetMachineDetectionSpeechEndThreshold returns the value of MachineDetectionSpeechEndThreshold.
func (s *DialConferenceParticipantRequest) GetMachineDetectionSpeechEndThreshold() OptInt {
	return s.MachineDetectionSpeechEndThreshold
}

// GetMachineDetectionSilenceTimeout returns the value of MachineDetectionSilenceTimeout.
func (s *DialConferenceParticipantRequest) GetMachineDetectionSilenceTimeout() OptInt {
	return s.MachineDetectionSilenceTimeout
}

// GetAmdStatusCallback returns the value of AmdStatusCallback.
func (s *DialConferenceParticipantRequest) GetAmdStatusCallback() OptString {
	return s.AmdStatusCallback
}

// GetAmdStatusCallbackMethod returns the value of AmdStatusCallbackMethod.
func (s *DialConferenceParticipantRequest) GetAmdStatusCallbackMethod() OptDialConferenceParticipantRequestAmdStatusCallbackMethod {
	return s.AmdStatusCallbackMethod
}

// GetCancelPlaybackOnMachineDetection returns the value of CancelPlaybackOnMachineDetection.
func (s *DialConferenceParticipantRequest) GetCancelPlaybackOnMachineDetection() OptBool {
	return s.CancelPlaybackOnMachineDetection
}

// GetCancelPlaybackOnDetectMessageEnd returns the value of CancelPlaybackOnDetectMessageEnd.
func (s *DialConferenceParticipantRequest) GetCancelPlaybackOnDetectMessageEnd() OptBool {
	return s.CancelPlaybackOnDetectMessageEnd
}

// GetPreferredCodecs returns the value of PreferredCodecs.
func (s *DialConferenceParticipantRequest) GetPreferredCodecs() OptString {
	return s.PreferredCodecs
}

// GetRecord returns the value of Record.
func (s *DialConferenceParticipantRequest) GetRecord() OptBool {
	return s.Record
}

// GetRecordingChannels returns the value of RecordingChannels.
func (s *DialConferenceParticipantRequest) GetRecordingChannels() OptDialConferenceParticipantRequestRecordingChannels {
	return s.RecordingChannels
}

// GetRecordingStatusCallback returns the value of RecordingStatusCallback.
func (s *DialConferenceParticipantRequest) GetRecordingStatusCallback() OptString {
	return s.RecordingStatusCallback
}

// GetRecordingStatusCallbackMethod returns the value of RecordingStatusCallbackMethod.
func (s *DialConferenceParticipantRequest) GetRecordingStatusCallbackMethod() OptDialConferenceParticipantRequestRecordingStatusCallbackMethod {
	return s.RecordingStatusCallbackMethod
}

// GetRecordingStatusCallbackEvent returns the value of RecordingStatusCallbackEvent.
func (s *DialConferenceParticipantRequest) GetRecordingStatusCallbackEvent() OptString {
	return s.RecordingStatusCallbackEvent
}

// GetRecordingTrack returns the value of RecordingTrack.
func (s *DialConferenceParticipantRequest) GetRecordingTrack() OptDialConferenceParticipantRequestRecordingTrack {
	return s.RecordingTrack
}

// GetSipAuthPassword returns the value of SipAuthPassword.
func (s *DialConferenceParticipantRequest) GetSipAuthPassword() OptString {
	return s.SipAuthPassword
}

// GetSipAuthUsername returns the value of SipAuthUsername.
func (s *DialConferenceParticipantRequest) GetSipAuthUsername() OptString {
	return s.SipAuthUsername
}

// GetTrim returns the value of Trim.
func (s *DialConferenceParticipantRequest) GetTrim() OptDialConferenceParticipantRequestTrim {
	return s.Trim
}

// GetConferenceRecord returns the value of ConferenceRecord.
func (s *DialConferenceParticipantRequest) GetConferenceRecord() OptDialConferenceParticipantRequestConferenceRecord {
	return s.ConferenceRecord
}

// GetConferenceRecordingStatusCallback returns the value of ConferenceRecordingStatusCallback.
func (s *DialConferenceParticipantRequest) GetConferenceRecordingStatusCallback() OptString {
	return s.ConferenceRecordingStatusCallback
}

// GetConferenceRecordingStatusCallbackMethod returns the value of ConferenceRecordingStatusCallbackMethod.
func (s *DialConferenceParticipantRequest) GetConferenceRecordingStatusCallbackMethod() OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod {
	return s.ConferenceRecordingStatusCallbackMethod
}

// GetConferenceRecordingStatusCallbackEvent returns the value of ConferenceRecordingStatusCallbackEvent.
func (s *DialConferenceParticipantRequest) GetConferenceRecordingStatusCallbackEvent() OptString {
	return s.ConferenceRecordingStatusCallbackEvent
}

// GetConferenceRecordingTimeout returns the value of ConferenceRecordingTimeout.
func (s *DialConferenceParticipantRequest) GetConferenceRecordingTimeout() OptInt {
	return s.ConferenceRecordingTimeout
}

// GetConferenceTrim returns the value of ConferenceTrim.
func (s *DialConferenceParticipantRequest) GetConferenceTrim() OptDialConferenceParticipantRequestConferenceTrim {
	return s.ConferenceTrim
}

// SetBeep sets the value of Beep.
func (s *DialConferenceParticipantRequest) SetBeep(val OptDialConferenceParticipantRequestBeep) {
	s.Beep = val
}

// SetStatusCallback sets the value of StatusCallback.
func (s *DialConferenceParticipantRequest) SetStatusCallback(val OptString) {
	s.StatusCallback = val
}

// SetStatusCallbackMethod sets the value of StatusCallbackMethod.
func (s *DialConferenceParticipantRequest) SetStatusCallbackMethod(val OptDialConferenceParticipantRequestStatusCallbackMethod) {
	s.StatusCallbackMethod = val
}

// SetStatusCallbackEvent sets the value of StatusCallbackEvent.
func (s *DialConferenceParticipantRequest) SetStatusCallbackEvent(val OptString) {
	s.StatusCallbackEvent = val
}

// SetTo sets the value of To.
func (s *DialConferenceParticipantRequest) SetTo(val OptString) {
	s.To = val
}

// SetFrom sets the value of From.
func (s *DialConferenceParticipantRequest) SetFrom(val OptString) {
	s.From = val
}

// SetTimeout sets the value of Timeout.
func (s *DialConferenceParticipantRequest) SetTimeout(val OptInt) {
	s.Timeout = val
}

// SetMuted sets the value of Muted.
func (s *DialConferenceParticipantRequest) SetMuted(val OptBool) {
	s.Muted = val
}

// SetStartConferenceOnEnter sets the value of StartConferenceOnEnter.
func (s *DialConferenceParticipantRequest) SetStartConferenceOnEnter(val OptBool) {
	s.StartConferenceOnEnter = val
}

// SetEndConferenceOnExit sets the value of EndConferenceOnExit.
func (s *DialConferenceParticipantRequest) SetEndConferenceOnExit(val OptBool) {
	s.EndConferenceOnExit = val
}

// SetEarlyMedia sets the value of EarlyMedia.
func (s *DialConferenceParticipantRequest) SetEarlyMedia(val OptBool) {
	s.EarlyMedia = val
}

// SetConferenceStatusCallback sets the value of ConferenceStatusCallback.
func (s *DialConferenceParticipantRequest) SetConferenceStatusCallback(val OptString) {
	s.ConferenceStatusCallback = val
}

// SetConferenceStatusCallbackMethod sets the value of ConferenceStatusCallbackMethod.
func (s *DialConferenceParticipantRequest) SetConferenceStatusCallbackMethod(val OptDialConferenceParticipantRequestConferenceStatusCallbackMethod) {
	s.ConferenceStatusCallbackMethod = val
}

// SetConferenceStatusCallbackEvent sets the value of ConferenceStatusCallbackEvent.
func (s *DialConferenceParticipantRequest) SetConferenceStatusCallbackEvent(val OptString) {
	s.ConferenceStatusCallbackEvent = val
}

// SetWaitUrl sets the value of WaitUrl.
func (s *DialConferenceParticipantRequest) SetWaitUrl(val OptString) {
	s.WaitUrl = val
}

// SetMaxParticipants sets the value of MaxParticipants.
func (s *DialConferenceParticipantRequest) SetMaxParticipants(val OptInt) {
	s.MaxParticipants = val
}

// SetCoaching sets the value of Coaching.
func (s *DialConferenceParticipantRequest) SetCoaching(val OptBool) {
	s.Coaching = val
}

// SetCallSidToCoach sets the value of CallSidToCoach.
func (s *DialConferenceParticipantRequest) SetCallSidToCoach(val OptString) {
	s.CallSidToCoach = val
}

// SetCallerId sets the value of CallerId.
func (s *DialConferenceParticipantRequest) SetCallerId(val OptString) {
	s.CallerId = val
}

// SetTimeLimit sets the value of TimeLimit.
func (s *DialConferenceParticipantRequest) SetTimeLimit(val OptInt) {
	s.TimeLimit = val
}

// SetMachineDetection sets the value of MachineDetection.
func (s *DialConferenceParticipantRequest) SetMachineDetection(val OptDialConferenceParticipantRequestMachineDetection) {
	s.MachineDetection = val
}

// SetMachineDetectionTimeout sets the value of MachineDetectionTimeout.
func (s *DialConferenceParticipantRequest) SetMachineDetectionTimeout(val OptInt) {
	s.MachineDetectionTimeout = val
}

// SetMachineDetectionSpeechThreshold sets the value of MachineDetectionSpeechThreshold.
func (s *DialConferenceParticipantRequest) SetMachineDetectionSpeechThreshold(val OptInt) {
	s.MachineDetectionSpeechThreshold = val
}

// SetMachineDetectionSpeechEndThreshold sets the value of MachineDetectionSpeechEndThreshold.
func (s *DialConferenceParticipantRequest) SetMachineDetectionSpeechEndThreshold(val OptInt) {
	s.MachineDetectionSpeechEndThreshold = val
}

// SetMachineDetectionSilenceTimeout sets the value of MachineDetectionSilenceTimeout.
func (s *DialConferenceParticipantRequest) SetMachineDetectionSilenceTimeout(val OptInt) {
	s.MachineDetectionSilenceTimeout = val
}

// SetAmdStatusCallback sets the value of AmdStatusCallback.
func (s *DialConferenceParticipantRequest) SetAmdStatusCallback(val OptString) {
	s.AmdStatusCallback = val
}

// SetAmdStatusCallbackMethod sets the value of AmdStatusCallbackMethod.
func (s *DialConferenceParticipantRequest) SetAmdStatusCallbackMethod(val OptDialConferenceParticipantRequestAmdStatusCallbackMethod) {
	s.AmdStatusCallbackMethod = val
}

// SetCancelPlaybackOnMachineDetection sets the value of CancelPlaybackOnMachineDetection.
func (s *DialConferenceParticipantRequest) SetCancelPlaybackOnMachineDetection(val OptBool) {
	s.CancelPlaybackOnMachineDetection = val
}

// SetCancelPlaybackOnDetectMessageEnd sets the value of CancelPlaybackOnDetectMessageEnd.
func (s *DialConferenceParticipantRequest) SetCancelPlaybackOnDetectMessageEnd(val OptBool) {
	s.CancelPlaybackOnDetectMessageEnd = val
}

// SetPreferredCodecs sets the value of PreferredCodecs.
func (s *DialConferenceParticipantRequest) SetPreferredCodecs(val OptString) {
	s.PreferredCodecs = val
}

// SetRecord sets the value of Record.
func (s *DialConferenceParticipantRequest) SetRecord(val OptBool) {
	s.Record = val
}

// SetRecordingChannels sets the value of RecordingChannels.
func (s *DialConferenceParticipantRequest) SetRecordingChannels(val OptDialConferenceParticipantRequestRecordingChannels) {
	s.RecordingChannels = val
}

// SetRecordingStatusCallback sets the value of RecordingStatusCallback.
func (s *DialConferenceParticipantRequest) SetRecordingStatusCallback(val OptString) {
	s.RecordingStatusCallback = val
}

// SetRecordingStatusCallbackMethod sets the value of RecordingStatusCallbackMethod.
func (s *DialConferenceParticipantRequest) SetRecordingStatusCallbackMethod(val OptDialConferenceParticipantRequestRecordingStatusCallbackMethod) {
	s.RecordingStatusCallbackMethod = val
}

// SetRecordingStatusCallbackEvent sets the value of RecordingStatusCallbackEvent.
func (s *DialConferenceParticipantRequest) SetRecordingStatusCallbackEvent(val OptString) {
	s.RecordingStatusCallbackEvent = val
}

// SetRecordingTrack sets the value of RecordingTrack.
func (s *DialConferenceParticipantRequest) SetRecordingTrack(val OptDialConferenceParticipantRequestRecordingTrack) {
	s.RecordingTrack = val
}

// SetSipAuthPassword sets the value of SipAuthPassword.
func (s *DialConferenceParticipantRequest) SetSipAuthPassword(val OptString) {
	s.SipAuthPassword = val
}

// SetSipAuthUsername sets the value of SipAuthUsername.
func (s *DialConferenceParticipantRequest) SetSipAuthUsername(val OptString) {
	s.SipAuthUsername = val
}

// SetTrim sets the value of Trim.
func (s *DialConferenceParticipantRequest) SetTrim(val OptDialConferenceParticipantRequestTrim) {
	s.Trim = val
}

// SetConferenceRecord sets the value of ConferenceRecord.
func (s *DialConferenceParticipantRequest) SetConferenceRecord(val OptDialConferenceParticipantRequestConferenceRecord) {
	s.ConferenceRecord = val
}

// SetConferenceRecordingStatusCallback sets the value of ConferenceRecordingStatusCallback.
func (s *DialConferenceParticipantRequest) SetConferenceRecordingStatusCallback(val OptString) {
	s.ConferenceRecordingStatusCallback = val
}

// SetConferenceRecordingStatusCallbackMethod sets the value of ConferenceRecordingStatusCallbackMethod.
func (s *DialConferenceParticipantRequest) SetConferenceRecordingStatusCallbackMethod(val OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod) {
	s.ConferenceRecordingStatusCallbackMethod = val
}

// SetConferenceRecordingStatusCallbackEvent sets the value of ConferenceRecordingStatusCallbackEvent.
func (s *DialConferenceParticipantRequest) SetConferenceRecordingStatusCallbackEvent(val OptString) {
	s.ConferenceRecordingStatusCallbackEvent = val
}

// SetConferenceRecordingTimeout sets the value of ConferenceRecordingTimeout.
func (s *DialConferenceParticipantRequest) SetConferenceRecordingTimeout(val OptInt) {
	s.ConferenceRecordingTimeout = val
}

// SetConferenceTrim sets the value of ConferenceTrim.
func (s *DialConferenceParticipantRequest) SetConferenceTrim(val OptDialConferenceParticipantRequestConferenceTrim) {
	s.ConferenceTrim = val
}

// HTTP request type used for `AmdStatusCallback`. Defaults to `POST`.
type DialConferenceParticipantRequestAmdStatusCallbackMethod string

const (
	DialConferenceParticipantRequestAmdStatusCallbackMethodGET  DialConferenceParticipantRequestAmdStatusCallbackMethod = "GET"
	DialConferenceParticipantRequestAmdStatusCallbackMethodPOST DialConferenceParticipantRequestAmdStatusCallbackMethod = "POST"
)

// AllValues returns all DialConferenceParticipantRequestAmdStatusCallbackMethod values.
func (DialConferenceParticipantRequestAmdStatusCallbackMethod) AllValues() []DialConferenceParticipantRequestAmdStatusCallbackMethod {
	return []DialConferenceParticipantRequestAmdStatusCallbackMethod{
		DialConferenceParticipantRequestAmdStatusCallbackMethodGET,
		DialConferenceParticipantRequestAmdStatusCallbackMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DialConferenceParticipantRequestAmdStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case DialConferenceParticipantRequestAmdStatusCallbackMethodGET:
		return []byte(s), nil
	case DialConferenceParticipantRequestAmdStatusCallbackMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DialConferenceParticipantRequestAmdStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch DialConferenceParticipantRequestAmdStatusCallbackMethod(data) {
	case DialConferenceParticipantRequestAmdStatusCallbackMethodGET:
		*s = DialConferenceParticipantRequestAmdStatusCallbackMethodGET
		return nil
	case DialConferenceParticipantRequestAmdStatusCallbackMethodPOST:
		*s = DialConferenceParticipantRequestAmdStatusCallbackMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Whether to play a notification beep to the conference when the participant enters and exits.
type DialConferenceParticipantRequestBeep string

const (
	DialConferenceParticipantRequestBeepTrue    DialConferenceParticipantRequestBeep = "true"
	DialConferenceParticipantRequestBeepFalse   DialConferenceParticipantRequestBeep = "false"
	DialConferenceParticipantRequestBeepOnEnter DialConferenceParticipantRequestBeep = "onEnter"
	DialConferenceParticipantRequestBeepOnExit  DialConferenceParticipantRequestBeep = "onExit"
)

// AllValues returns all DialConferenceParticipantRequestBeep values.
func (DialConferenceParticipantRequestBeep) AllValues() []DialConferenceParticipantRequestBeep {
	return []DialConferenceParticipantRequestBeep{
		DialConferenceParticipantRequestBeepTrue,
		DialConferenceParticipantRequestBeepFalse,
		DialConferenceParticipantRequestBeepOnEnter,
		DialConferenceParticipantRequestBeepOnExit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DialConferenceParticipantRequestBeep) MarshalText() ([]byte, error) {
	switch s {
	case DialConferenceParticipantRequestBeepTrue:
		return []byte(s), nil
	case DialConferenceParticipantRequestBeepFalse:
		return []byte(s), nil
	case DialConferenceParticipantRequestBeepOnEnter:
		return []byte(s), nil
	case DialConferenceParticipantRequestBeepOnExit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DialConferenceParticipantRequestBeep) UnmarshalText(data []byte) error {
	switch DialConferenceParticipantRequestBeep(data) {
	case DialConferenceParticipantRequestBeepTrue:
		*s = DialConferenceParticipantRequestBeepTrue
		return nil
	case DialConferenceParticipantRequestBeepFalse:
		*s = DialConferenceParticipantRequestBeepFalse
		return nil
	case DialConferenceParticipantRequestBeepOnEnter:
		*s = DialConferenceParticipantRequestBeepOnEnter
		return nil
	case DialConferenceParticipantRequestBeepOnExit:
		*s = DialConferenceParticipantRequestBeepOnExit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Whether to record the conference the participant is joining. Defualts to `do-not-record`. The
// boolean values `true` and `false` are synonymous with `record-from-start` and `do-not-record`
// respectively.
type DialConferenceParticipantRequestConferenceRecord string

const (
	DialConferenceParticipantRequestConferenceRecordTrue            DialConferenceParticipantRequestConferenceRecord = "true"
	DialConferenceParticipantRequestConferenceRecordFalse           DialConferenceParticipantRequestConferenceRecord = "false"
	DialConferenceParticipantRequestConferenceRecordRecordFromStart DialConferenceParticipantRequestConferenceRecord = "record-from-start"
	DialConferenceParticipantRequestConferenceRecordDoNotRecord     DialConferenceParticipantRequestConferenceRecord = "do-not-record"
)

// AllValues returns all DialConferenceParticipantRequestConferenceRecord values.
func (DialConferenceParticipantRequestConferenceRecord) AllValues() []DialConferenceParticipantRequestConferenceRecord {
	return []DialConferenceParticipantRequestConferenceRecord{
		DialConferenceParticipantRequestConferenceRecordTrue,
		DialConferenceParticipantRequestConferenceRecordFalse,
		DialConferenceParticipantRequestConferenceRecordRecordFromStart,
		DialConferenceParticipantRequestConferenceRecordDoNotRecord,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DialConferenceParticipantRequestConferenceRecord) MarshalText() ([]byte, error) {
	switch s {
	case DialConferenceParticipantRequestConferenceRecordTrue:
		return []byte(s), nil
	case DialConferenceParticipantRequestConferenceRecordFalse:
		return []byte(s), nil
	case DialConferenceParticipantRequestConferenceRecordRecordFromStart:
		return []byte(s), nil
	case DialConferenceParticipantRequestConferenceRecordDoNotRecord:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DialConferenceParticipantRequestConferenceRecord) UnmarshalText(data []byte) error {
	switch DialConferenceParticipantRequestConferenceRecord(data) {
	case DialConferenceParticipantRequestConferenceRecordTrue:
		*s = DialConferenceParticipantRequestConferenceRecordTrue
		return nil
	case DialConferenceParticipantRequestConferenceRecordFalse:
		*s = DialConferenceParticipantRequestConferenceRecordFalse
		return nil
	case DialConferenceParticipantRequestConferenceRecordRecordFromStart:
		*s = DialConferenceParticipantRequestConferenceRecordRecordFromStart
		return nil
	case DialConferenceParticipantRequestConferenceRecordDoNotRecord:
		*s = DialConferenceParticipantRequestConferenceRecordDoNotRecord
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request type used for `ConferenceRecordingStatusCallback`. Defaults to `POST`.
type DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod string

const (
	DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethodGET  DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod = "GET"
	DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethodPOST DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod = "POST"
)

// AllValues returns all DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod values.
func (DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod) AllValues() []DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod {
	return []DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod{
		DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethodGET,
		DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethodGET:
		return []byte(s), nil
	case DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod(data) {
	case DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethodGET:
		*s = DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethodGET
		return nil
	case DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethodPOST:
		*s = DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request type used for `ConferenceStatusCallback`. Defaults to `POST`.
type DialConferenceParticipantRequestConferenceStatusCallbackMethod string

const (
	DialConferenceParticipantRequestConferenceStatusCallbackMethodGET  DialConferenceParticipantRequestConferenceStatusCallbackMethod = "GET"
	DialConferenceParticipantRequestConferenceStatusCallbackMethodPOST DialConferenceParticipantRequestConferenceStatusCallbackMethod = "POST"
)

// AllValues returns all DialConferenceParticipantRequestConferenceStatusCallbackMethod values.
func (DialConferenceParticipantRequestConferenceStatusCallbackMethod) AllValues() []DialConferenceParticipantRequestConferenceStatusCallbackMethod {
	return []DialConferenceParticipantRequestConferenceStatusCallbackMethod{
		DialConferenceParticipantRequestConferenceStatusCallbackMethodGET,
		DialConferenceParticipantRequestConferenceStatusCallbackMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DialConferenceParticipantRequestConferenceStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case DialConferenceParticipantRequestConferenceStatusCallbackMethodGET:
		return []byte(s), nil
	case DialConferenceParticipantRequestConferenceStatusCallbackMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DialConferenceParticipantRequestConferenceStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch DialConferenceParticipantRequestConferenceStatusCallbackMethod(data) {
	case DialConferenceParticipantRequestConferenceStatusCallbackMethodGET:
		*s = DialConferenceParticipantRequestConferenceStatusCallbackMethodGET
		return nil
	case DialConferenceParticipantRequestConferenceStatusCallbackMethodPOST:
		*s = DialConferenceParticipantRequestConferenceStatusCallbackMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Whether to trim any leading and trailing silence from the conference recording. Defaults to
// `trim-silence`.
type DialConferenceParticipantRequestConferenceTrim string

const (
	DialConferenceParticipantRequestConferenceTrimTrimSilence DialConferenceParticipantRequestConferenceTrim = "trim-silence"
	DialConferenceParticipantRequestConferenceTrimDoNotTrim   DialConferenceParticipantRequestConferenceTrim = "do-not-trim"
)

// AllValues returns all DialConferenceParticipantRequestConferenceTrim values.
func (DialConferenceParticipantRequestConferenceTrim) AllValues() []DialConferenceParticipantRequestConferenceTrim {
	return []DialConferenceParticipantRequestConferenceTrim{
		DialConferenceParticipantRequestConferenceTrimTrimSilence,
		DialConferenceParticipantRequestConferenceTrimDoNotTrim,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DialConferenceParticipantRequestConferenceTrim) MarshalText() ([]byte, error) {
	switch s {
	case DialConferenceParticipantRequestConferenceTrimTrimSilence:
		return []byte(s), nil
	case DialConferenceParticipantRequestConferenceTrimDoNotTrim:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DialConferenceParticipantRequestConferenceTrim) UnmarshalText(data []byte) error {
	switch DialConferenceParticipantRequestConferenceTrim(data) {
	case DialConferenceParticipantRequestConferenceTrimTrimSilence:
		*s = DialConferenceParticipantRequestConferenceTrimTrimSilence
		return nil
	case DialConferenceParticipantRequestConferenceTrimDoNotTrim:
		*s = DialConferenceParticipantRequestConferenceTrimDoNotTrim
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Whether to detect if a human or an answering machine picked up the call. Use `Enable` if you would
// like to ne notified as soon as the called party is identified. Use `DetectMessageEnd`, if you
// would like to leave a message on an answering machine.
type DialConferenceParticipantRequestMachineDetection string

const (
	DialConferenceParticipantRequestMachineDetectionEnable           DialConferenceParticipantRequestMachineDetection = "Enable"
	DialConferenceParticipantRequestMachineDetectionDetectMessageEnd DialConferenceParticipantRequestMachineDetection = "DetectMessageEnd"
)

// AllValues returns all DialConferenceParticipantRequestMachineDetection values.
func (DialConferenceParticipantRequestMachineDetection) AllValues() []DialConferenceParticipantRequestMachineDetection {
	return []DialConferenceParticipantRequestMachineDetection{
		DialConferenceParticipantRequestMachineDetectionEnable,
		DialConferenceParticipantRequestMachineDetectionDetectMessageEnd,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DialConferenceParticipantRequestMachineDetection) MarshalText() ([]byte, error) {
	switch s {
	case DialConferenceParticipantRequestMachineDetectionEnable:
		return []byte(s), nil
	case DialConferenceParticipantRequestMachineDetectionDetectMessageEnd:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DialConferenceParticipantRequestMachineDetection) UnmarshalText(data []byte) error {
	switch DialConferenceParticipantRequestMachineDetection(data) {
	case DialConferenceParticipantRequestMachineDetectionEnable:
		*s = DialConferenceParticipantRequestMachineDetectionEnable
		return nil
	case DialConferenceParticipantRequestMachineDetectionDetectMessageEnd:
		*s = DialConferenceParticipantRequestMachineDetectionDetectMessageEnd
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The number of channels in the final recording. Defaults to `mono`.
type DialConferenceParticipantRequestRecordingChannels string

const (
	DialConferenceParticipantRequestRecordingChannelsMono DialConferenceParticipantRequestRecordingChannels = "mono"
	DialConferenceParticipantRequestRecordingChannelsDual DialConferenceParticipantRequestRecordingChannels = "dual"
)

// AllValues returns all DialConferenceParticipantRequestRecordingChannels values.
func (DialConferenceParticipantRequestRecordingChannels) AllValues() []DialConferenceParticipantRequestRecordingChannels {
	return []DialConferenceParticipantRequestRecordingChannels{
		DialConferenceParticipantRequestRecordingChannelsMono,
		DialConferenceParticipantRequestRecordingChannelsDual,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DialConferenceParticipantRequestRecordingChannels) MarshalText() ([]byte, error) {
	switch s {
	case DialConferenceParticipantRequestRecordingChannelsMono:
		return []byte(s), nil
	case DialConferenceParticipantRequestRecordingChannelsDual:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DialConferenceParticipantRequestRecordingChannels) UnmarshalText(data []byte) error {
	switch DialConferenceParticipantRequestRecordingChannels(data) {
	case DialConferenceParticipantRequestRecordingChannelsMono:
		*s = DialConferenceParticipantRequestRecordingChannelsMono
		return nil
	case DialConferenceParticipantRequestRecordingChannelsDual:
		*s = DialConferenceParticipantRequestRecordingChannelsDual
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request type used for `RecordingStatusCallback`. Defaults to `POST`.
type DialConferenceParticipantRequestRecordingStatusCallbackMethod string

const (
	DialConferenceParticipantRequestRecordingStatusCallbackMethodGET  DialConferenceParticipantRequestRecordingStatusCallbackMethod = "GET"
	DialConferenceParticipantRequestRecordingStatusCallbackMethodPOST DialConferenceParticipantRequestRecordingStatusCallbackMethod = "POST"
)

// AllValues returns all DialConferenceParticipantRequestRecordingStatusCallbackMethod values.
func (DialConferenceParticipantRequestRecordingStatusCallbackMethod) AllValues() []DialConferenceParticipantRequestRecordingStatusCallbackMethod {
	return []DialConferenceParticipantRequestRecordingStatusCallbackMethod{
		DialConferenceParticipantRequestRecordingStatusCallbackMethodGET,
		DialConferenceParticipantRequestRecordingStatusCallbackMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DialConferenceParticipantRequestRecordingStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case DialConferenceParticipantRequestRecordingStatusCallbackMethodGET:
		return []byte(s), nil
	case DialConferenceParticipantRequestRecordingStatusCallbackMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DialConferenceParticipantRequestRecordingStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch DialConferenceParticipantRequestRecordingStatusCallbackMethod(data) {
	case DialConferenceParticipantRequestRecordingStatusCallbackMethodGET:
		*s = DialConferenceParticipantRequestRecordingStatusCallbackMethodGET
		return nil
	case DialConferenceParticipantRequestRecordingStatusCallbackMethodPOST:
		*s = DialConferenceParticipantRequestRecordingStatusCallbackMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The audio track to record for the call. The default is `both`.
type DialConferenceParticipantRequestRecordingTrack string

const (
	DialConferenceParticipantRequestRecordingTrackInbound  DialConferenceParticipantRequestRecordingTrack = "inbound"
	DialConferenceParticipantRequestRecordingTrackOutbound DialConferenceParticipantRequestRecordingTrack = "outbound"
	DialConferenceParticipantRequestRecordingTrackBoth     DialConferenceParticipantRequestRecordingTrack = "both"
)

// AllValues returns all DialConferenceParticipantRequestRecordingTrack values.
func (DialConferenceParticipantRequestRecordingTrack) AllValues() []DialConferenceParticipantRequestRecordingTrack {
	return []DialConferenceParticipantRequestRecordingTrack{
		DialConferenceParticipantRequestRecordingTrackInbound,
		DialConferenceParticipantRequestRecordingTrackOutbound,
		DialConferenceParticipantRequestRecordingTrackBoth,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DialConferenceParticipantRequestRecordingTrack) MarshalText() ([]byte, error) {
	switch s {
	case DialConferenceParticipantRequestRecordingTrackInbound:
		return []byte(s), nil
	case DialConferenceParticipantRequestRecordingTrackOutbound:
		return []byte(s), nil
	case DialConferenceParticipantRequestRecordingTrackBoth:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DialConferenceParticipantRequestRecordingTrack) UnmarshalText(data []byte) error {
	switch DialConferenceParticipantRequestRecordingTrack(data) {
	case DialConferenceParticipantRequestRecordingTrackInbound:
		*s = DialConferenceParticipantRequestRecordingTrackInbound
		return nil
	case DialConferenceParticipantRequestRecordingTrackOutbound:
		*s = DialConferenceParticipantRequestRecordingTrackOutbound
		return nil
	case DialConferenceParticipantRequestRecordingTrackBoth:
		*s = DialConferenceParticipantRequestRecordingTrackBoth
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request type used for `StatusCallback`.
type DialConferenceParticipantRequestStatusCallbackMethod string

const (
	DialConferenceParticipantRequestStatusCallbackMethodGET  DialConferenceParticipantRequestStatusCallbackMethod = "GET"
	DialConferenceParticipantRequestStatusCallbackMethodPOST DialConferenceParticipantRequestStatusCallbackMethod = "POST"
)

// AllValues returns all DialConferenceParticipantRequestStatusCallbackMethod values.
func (DialConferenceParticipantRequestStatusCallbackMethod) AllValues() []DialConferenceParticipantRequestStatusCallbackMethod {
	return []DialConferenceParticipantRequestStatusCallbackMethod{
		DialConferenceParticipantRequestStatusCallbackMethodGET,
		DialConferenceParticipantRequestStatusCallbackMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DialConferenceParticipantRequestStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case DialConferenceParticipantRequestStatusCallbackMethodGET:
		return []byte(s), nil
	case DialConferenceParticipantRequestStatusCallbackMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DialConferenceParticipantRequestStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch DialConferenceParticipantRequestStatusCallbackMethod(data) {
	case DialConferenceParticipantRequestStatusCallbackMethodGET:
		*s = DialConferenceParticipantRequestStatusCallbackMethodGET
		return nil
	case DialConferenceParticipantRequestStatusCallbackMethodPOST:
		*s = DialConferenceParticipantRequestStatusCallbackMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Whether to trim any leading and trailing silence from the recording. Defaults to `trim-silence`.
type DialConferenceParticipantRequestTrim string

const (
	DialConferenceParticipantRequestTrimTrimSilence DialConferenceParticipantRequestTrim = "trim-silence"
	DialConferenceParticipantRequestTrimDoNotTrim   DialConferenceParticipantRequestTrim = "do-not-trim"
)

// AllValues returns all DialConferenceParticipantRequestTrim values.
func (DialConferenceParticipantRequestTrim) AllValues() []DialConferenceParticipantRequestTrim {
	return []DialConferenceParticipantRequestTrim{
		DialConferenceParticipantRequestTrimTrimSilence,
		DialConferenceParticipantRequestTrimDoNotTrim,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DialConferenceParticipantRequestTrim) MarshalText() ([]byte, error) {
	switch s {
	case DialConferenceParticipantRequestTrimTrimSilence:
		return []byte(s), nil
	case DialConferenceParticipantRequestTrimDoNotTrim:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DialConferenceParticipantRequestTrim) UnmarshalText(data []byte) error {
	switch DialConferenceParticipantRequestTrim(data) {
	case DialConferenceParticipantRequestTrimTrimSilence:
		*s = DialConferenceParticipantRequestTrimTrimSilence
		return nil
	case DialConferenceParticipantRequestTrimDoNotTrim:
		*s = DialConferenceParticipantRequestTrimDoNotTrim
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DialParticipantResponse struct {
	Data OptNewParticipantResource `json:"data"`
}

// GetData returns the value of Data.
func (s *DialParticipantResponse) GetData() OptNewParticipantResource {
	return s.Data
}

// SetData sets the value of Data.
func (s *DialParticipantResponse) SetData(val OptNewParticipantResource) {
	s.Data = val
}

func (*DialParticipantResponse) dialTexmlConferenceParticipantRes() {}

// Ref: #/components/schemas/DialogflowConfig
type DialogflowConfig struct {
	// Enable sentiment analysis from Dialogflow.
	AnalyzeSentiment OptBool `json:"analyze_sentiment"`
	// Enable partial automated agent reply from Dialogflow.
	PartialAutomatedAgentReply OptBool `json:"partial_automated_agent_reply"`
}

// GetAnalyzeSentiment returns the value of AnalyzeSentiment.
func (s *DialogflowConfig) GetAnalyzeSentiment() OptBool {
	return s.AnalyzeSentiment
}

// GetPartialAutomatedAgentReply returns the value of PartialAutomatedAgentReply.
func (s *DialogflowConfig) GetPartialAutomatedAgentReply() OptBool {
	return s.PartialAutomatedAgentReply
}

// SetAnalyzeSentiment sets the value of AnalyzeSentiment.
func (s *DialogflowConfig) SetAnalyzeSentiment(val OptBool) {
	s.AnalyzeSentiment = val
}

// SetPartialAutomatedAgentReply sets the value of PartialAutomatedAgentReply.
func (s *DialogflowConfig) SetPartialAutomatedAgentReply(val OptBool) {
	s.PartialAutomatedAgentReply = val
}

type DisplayName string

type DisplayVerifiedCallsDisplayProfileResponse struct {
	Data OptVerifiedCallsDisplayProfile `json:"data"`
}

// GetData returns the value of Data.
func (s *DisplayVerifiedCallsDisplayProfileResponse) GetData() OptVerifiedCallsDisplayProfile {
	return s.Data
}

// SetData sets the value of Data.
func (s *DisplayVerifiedCallsDisplayProfileResponse) SetData(val OptVerifiedCallsDisplayProfile) {
	s.Data = val
}

func (*DisplayVerifiedCallsDisplayProfileResponse) createProfileRes()                    {}
func (*DisplayVerifiedCallsDisplayProfileResponse) deleteVerifiedCallDisplayProfileRes() {}
func (*DisplayVerifiedCallsDisplayProfileResponse) displayProfileRes()                   {}

// Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to
// Telnyx will be accepted in all formats.
// Ref: #/components/schemas/DtmfType
type DtmfType string

const (
	DtmfTypeRFC2833 DtmfType = "RFC 2833"
	DtmfTypeInband  DtmfType = "Inband"
	DtmfTypeSIPINFO DtmfType = "SIP INFO"
)

// AllValues returns all DtmfType values.
func (DtmfType) AllValues() []DtmfType {
	return []DtmfType{
		DtmfTypeRFC2833,
		DtmfTypeInband,
		DtmfTypeSIPINFO,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DtmfType) MarshalText() ([]byte, error) {
	switch s {
	case DtmfTypeRFC2833:
		return []byte(s), nil
	case DtmfTypeInband:
		return []byte(s), nil
	case DtmfTypeSIPINFO:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DtmfType) UnmarshalText(data []byte) error {
	switch DtmfType(data) {
	case DtmfTypeRFC2833:
		*s = DtmfTypeRFC2833
		return nil
	case DtmfTypeInband:
		*s = DtmfTypeInband
		return nil
	case DtmfTypeSIPINFO:
		*s = DtmfTypeSIPINFO
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/EnqueueRequest
type EnqueueRequest struct {
	// The name of the queue the call should be put in. If a queue with a given name doesn't exist yet it
	// will be created.
	QueueName string `json:"queue_name"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
	// The number of seconds after which the call will be removed from the queue.
	MaxWaitTimeSecs OptInt `json:"max_wait_time_secs"`
	// The maximum number of calls allowed in the queue at a given time. Can't be modified for an
	// existing queue.
	MaxSize OptInt `json:"max_size"`
}

// GetQueueName returns the value of QueueName.
func (s *EnqueueRequest) GetQueueName() string {
	return s.QueueName
}

// GetClientState returns the value of ClientState.
func (s *EnqueueRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *EnqueueRequest) GetCommandID() OptString {
	return s.CommandID
}

// GetMaxWaitTimeSecs returns the value of MaxWaitTimeSecs.
func (s *EnqueueRequest) GetMaxWaitTimeSecs() OptInt {
	return s.MaxWaitTimeSecs
}

// GetMaxSize returns the value of MaxSize.
func (s *EnqueueRequest) GetMaxSize() OptInt {
	return s.MaxSize
}

// SetQueueName sets the value of QueueName.
func (s *EnqueueRequest) SetQueueName(val string) {
	s.QueueName = val
}

// SetClientState sets the value of ClientState.
func (s *EnqueueRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *EnqueueRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// SetMaxWaitTimeSecs sets the value of MaxWaitTimeSecs.
func (s *EnqueueRequest) SetMaxWaitTimeSecs(val OptInt) {
	s.MaxWaitTimeSecs = val
}

// SetMaxSize sets the value of MaxSize.
func (s *EnqueueRequest) SetMaxSize(val OptInt) {
	s.MaxSize = val
}

// Ref: #/components/schemas/Error
type Error struct {
	Code   int            `json:"code"`
	Title  string         `json:"title"`
	Detail OptString      `json:"detail"`
	Source OptErrorSource `json:"source"`
	Meta   OptErrorMeta   `json:"meta"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() int {
	return s.Code
}

// GetTitle returns the value of Title.
func (s *Error) GetTitle() string {
	return s.Title
}

// GetDetail returns the value of Detail.
func (s *Error) GetDetail() OptString {
	return s.Detail
}

// GetSource returns the value of Source.
func (s *Error) GetSource() OptErrorSource {
	return s.Source
}

// GetMeta returns the value of Meta.
func (s *Error) GetMeta() OptErrorMeta {
	return s.Meta
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val int) {
	s.Code = val
}

// SetTitle sets the value of Title.
func (s *Error) SetTitle(val string) {
	s.Title = val
}

// SetDetail sets the value of Detail.
func (s *Error) SetDetail(val OptString) {
	s.Detail = val
}

// SetSource sets the value of Source.
func (s *Error) SetSource(val OptErrorSource) {
	s.Source = val
}

// SetMeta sets the value of Meta.
func (s *Error) SetMeta(val OptErrorMeta) {
	s.Meta = val
}

func (*Error) deleteRoomRecordingRes() {}
func (*Error) viewRoomRecordingRes()   {}

type ErrorMeta map[string]jx.Raw

func (s *ErrorMeta) init() ErrorMeta {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/ErrorRecord
type ErrorRecord struct {
	// An application-specific error code, expressed as a stringified 5-digit integer.
	Code OptString `json:"code"`
	// A short, human-readable summary of the problem, with NO punctuation, that SHOULD NOT CHANGE from
	// occurrence to occurrence of the problem, except for purposes of localization.
	Title OptString `json:"title"`
	// A human-readable explanation specific to this occurrence of the problem. Like title, this
	// field’s value can be localized.
	Detail OptString         `json:"detail"`
	Source OptSourceResponse `json:"source"`
	Meta   OptMetaResponse   `json:"meta"`
}

// GetCode returns the value of Code.
func (s *ErrorRecord) GetCode() OptString {
	return s.Code
}

// GetTitle returns the value of Title.
func (s *ErrorRecord) GetTitle() OptString {
	return s.Title
}

// GetDetail returns the value of Detail.
func (s *ErrorRecord) GetDetail() OptString {
	return s.Detail
}

// GetSource returns the value of Source.
func (s *ErrorRecord) GetSource() OptSourceResponse {
	return s.Source
}

// GetMeta returns the value of Meta.
func (s *ErrorRecord) GetMeta() OptMetaResponse {
	return s.Meta
}

// SetCode sets the value of Code.
func (s *ErrorRecord) SetCode(val OptString) {
	s.Code = val
}

// SetTitle sets the value of Title.
func (s *ErrorRecord) SetTitle(val OptString) {
	s.Title = val
}

// SetDetail sets the value of Detail.
func (s *ErrorRecord) SetDetail(val OptString) {
	s.Detail = val
}

// SetSource sets the value of Source.
func (s *ErrorRecord) SetSource(val OptSourceResponse) {
	s.Source = val
}

// SetMeta sets the value of Meta.
func (s *ErrorRecord) SetMeta(val OptMetaResponse) {
	s.Meta = val
}

// Ref: #/components/schemas/ErrorResponse
type ErrorResponse struct {
	Errors []ErrorRecord `json:"errors"`
}

// GetErrors returns the value of Errors.
func (s *ErrorResponse) GetErrors() []ErrorRecord {
	return s.Errors
}

// SetErrors sets the value of Errors.
func (s *ErrorResponse) SetErrors(val []ErrorRecord) {
	s.Errors = val
}

func (*ErrorResponse) createTexmlSecretRes()                 {}
func (*ErrorResponse) deleteTeXMLCallRecordingRes()          {}
func (*ErrorResponse) deleteTeXMLRecordingTranscriptionRes() {}
func (*ErrorResponse) deleteTexmlConferenceParticipantRes()  {}
func (*ErrorResponse) dialTexmlConferenceParticipantRes()    {}
func (*ErrorResponse) fetchTeXMLCallRecordingsRes()          {}
func (*ErrorResponse) fetchTeXMLConferenceRecordingsRes()    {}
func (*ErrorResponse) getTeXMLCallRecordingRes()             {}
func (*ErrorResponse) getTeXMLCallRecordingsRes()            {}
func (*ErrorResponse) getTeXMLRecordingTranscriptionRes()    {}
func (*ErrorResponse) getTeXMLRecordingTranscriptionsRes()   {}
func (*ErrorResponse) getTexmlCallRes()                      {}
func (*ErrorResponse) getTexmlCallsRes()                     {}
func (*ErrorResponse) getTexmlConferenceParticipantRes()     {}
func (*ErrorResponse) getTexmlConferenceParticipantsRes()    {}
func (*ErrorResponse) getTexmlConferenceRecordingsRes()      {}
func (*ErrorResponse) getTexmlConferenceRes()                {}
func (*ErrorResponse) getTexmlConferencesRes()               {}
func (*ErrorResponse) listQueueCallsRes()                    {}
func (*ErrorResponse) retrieveCallFromQueueRes()             {}
func (*ErrorResponse) startTeXMLCallRecordingRes()           {}
func (*ErrorResponse) updateTeXMLCallRecordingRes()          {}
func (*ErrorResponse) updateTexmlConferenceParticipantRes()  {}
func (*ErrorResponse) updateTexmlConferenceRes()             {}

type ErrorSource struct {
	// JSON pointer (RFC6901) to the offending entity.
	Pointer OptString `json:"pointer"`
	// Indicates which query parameter caused the error.
	Parameter OptString `json:"parameter"`
}

// GetPointer returns the value of Pointer.
func (s *ErrorSource) GetPointer() OptString {
	return s.Pointer
}

// GetParameter returns the value of Parameter.
func (s *ErrorSource) GetParameter() OptString {
	return s.Parameter
}

// SetPointer sets the value of Pointer.
func (s *ErrorSource) SetPointer(val OptString) {
	s.Pointer = val
}

// SetParameter sets the value of Parameter.
func (s *ErrorSource) SetParameter(val OptString) {
	s.Parameter = val
}

// Ref: #/components/schemas/Errors
type Errors struct {
	Errors []Error `json:"errors"`
}

// GetErrors returns the value of Errors.
func (s *Errors) GetErrors() []Error {
	return s.Errors
}

// SetErrors sets the value of Errors.
func (s *Errors) SetErrors(val []Error) {
	s.Errors = val
}

func (*Errors) createVerifiedNumberRes() {}
func (*Errors) deleteRoomRecordingsRes() {}
func (*Errors) listVerifiedNumbersRes()  {}

// FindTelephonyCredentialsBadRequest is response for FindTelephonyCredentials operation.
type FindTelephonyCredentialsBadRequest struct{}

func (*FindTelephonyCredentialsBadRequest) findTelephonyCredentialsRes() {}

// FindTelephonyCredentialsNotFound is response for FindTelephonyCredentials operation.
type FindTelephonyCredentialsNotFound struct{}

func (*FindTelephonyCredentialsNotFound) findTelephonyCredentialsRes() {}

// FindTelephonyCredentialsUnauthorized is response for FindTelephonyCredentials operation.
type FindTelephonyCredentialsUnauthorized struct{}

func (*FindTelephonyCredentialsUnauthorized) findTelephonyCredentialsRes() {}

type FindTexmlApplicationsBadRequest ErrorResponse

func (*FindTexmlApplicationsBadRequest) findTexmlApplicationsRes() {}

type FindTexmlApplicationsUnauthorized ErrorResponse

func (*FindTexmlApplicationsUnauthorized) findTexmlApplicationsRes() {}

type FirstCommandTimeout bool

type FirstCommandTimeoutSecs int

// Ref: #/components/schemas/GCSConfigurationData
type GCSConfigurationData struct {
	Credentials OptCredentials `json:"credentials"`
	Bucket      OptBucket      `json:"bucket"`
}

// GetCredentials returns the value of Credentials.
func (s *GCSConfigurationData) GetCredentials() OptCredentials {
	return s.Credentials
}

// GetBucket returns the value of Bucket.
func (s *GCSConfigurationData) GetBucket() OptBucket {
	return s.Bucket
}

// SetCredentials sets the value of Credentials.
func (s *GCSConfigurationData) SetCredentials(val OptCredentials) {
	s.Credentials = val
}

// SetBucket sets the value of Bucket.
func (s *GCSConfigurationData) SetBucket(val OptBucket) {
	s.Bucket = val
}

// Ref: #/components/schemas/GatherRequest
type GatherRequest struct {
	// The minimum number of digits to fetch. This parameter has a minimum value of 1.
	MinimumDigits OptInt32 `json:"minimum_digits"`
	// The maximum number of digits to fetch. This parameter has a maximum value of 128.
	MaximumDigits OptInt32 `json:"maximum_digits"`
	// The number of milliseconds to wait to complete the request.
	TimeoutMillis OptInt32 `json:"timeout_millis"`
	// The number of milliseconds to wait for input between digits.
	InterDigitTimeoutMillis OptInt32 `json:"inter_digit_timeout_millis"`
	// The number of milliseconds to wait for the first DTMF.
	InitialTimeoutMillis OptInt32 `json:"initial_timeout_millis"`
	// The digit used to terminate input if fewer than `maximum_digits` digits have been gathered.
	TerminatingDigit OptString `json:"terminating_digit"`
	// A list of all digits accepted as valid.
	ValidDigits OptString `json:"valid_digits"`
	// An id that will be sent back in the corresponding `call.gather.ended` webhook. Will be randomly
	// generated if not specified.
	GatherID OptString `json:"gather_id"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetMinimumDigits returns the value of MinimumDigits.
func (s *GatherRequest) GetMinimumDigits() OptInt32 {
	return s.MinimumDigits
}

// GetMaximumDigits returns the value of MaximumDigits.
func (s *GatherRequest) GetMaximumDigits() OptInt32 {
	return s.MaximumDigits
}

// GetTimeoutMillis returns the value of TimeoutMillis.
func (s *GatherRequest) GetTimeoutMillis() OptInt32 {
	return s.TimeoutMillis
}

// GetInterDigitTimeoutMillis returns the value of InterDigitTimeoutMillis.
func (s *GatherRequest) GetInterDigitTimeoutMillis() OptInt32 {
	return s.InterDigitTimeoutMillis
}

// GetInitialTimeoutMillis returns the value of InitialTimeoutMillis.
func (s *GatherRequest) GetInitialTimeoutMillis() OptInt32 {
	return s.InitialTimeoutMillis
}

// GetTerminatingDigit returns the value of TerminatingDigit.
func (s *GatherRequest) GetTerminatingDigit() OptString {
	return s.TerminatingDigit
}

// GetValidDigits returns the value of ValidDigits.
func (s *GatherRequest) GetValidDigits() OptString {
	return s.ValidDigits
}

// GetGatherID returns the value of GatherID.
func (s *GatherRequest) GetGatherID() OptString {
	return s.GatherID
}

// GetClientState returns the value of ClientState.
func (s *GatherRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *GatherRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetMinimumDigits sets the value of MinimumDigits.
func (s *GatherRequest) SetMinimumDigits(val OptInt32) {
	s.MinimumDigits = val
}

// SetMaximumDigits sets the value of MaximumDigits.
func (s *GatherRequest) SetMaximumDigits(val OptInt32) {
	s.MaximumDigits = val
}

// SetTimeoutMillis sets the value of TimeoutMillis.
func (s *GatherRequest) SetTimeoutMillis(val OptInt32) {
	s.TimeoutMillis = val
}

// SetInterDigitTimeoutMillis sets the value of InterDigitTimeoutMillis.
func (s *GatherRequest) SetInterDigitTimeoutMillis(val OptInt32) {
	s.InterDigitTimeoutMillis = val
}

// SetInitialTimeoutMillis sets the value of InitialTimeoutMillis.
func (s *GatherRequest) SetInitialTimeoutMillis(val OptInt32) {
	s.InitialTimeoutMillis = val
}

// SetTerminatingDigit sets the value of TerminatingDigit.
func (s *GatherRequest) SetTerminatingDigit(val OptString) {
	s.TerminatingDigit = val
}

// SetValidDigits sets the value of ValidDigits.
func (s *GatherRequest) SetValidDigits(val OptString) {
	s.ValidDigits = val
}

// SetGatherID sets the value of GatherID.
func (s *GatherRequest) SetGatherID(val OptString) {
	s.GatherID = val
}

// SetClientState sets the value of ClientState.
func (s *GatherRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *GatherRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// Ref: #/components/schemas/GatherUsingAudioRequest
type GatherUsingAudioRequest struct {
	// The URL of a file to be played back at the beginning of each prompt. The URL can point to either a
	// WAV or MP3 file. media_name and audio_url cannot be used together in one request.
	AudioURL OptString `json:"audio_url"`
	// The media_name of a file to be played back at the beginning of each prompt. The media_name must
	// point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The
	// file must either be a WAV or MP3 file.
	MediaName OptString `json:"media_name"`
	// The URL of a file to play when digits don't match the `valid_digits` parameter or the number of
	// digits is not between `min` and `max`. The URL can point to either a WAV or MP3 file.
	// invalid_media_name and invalid_audio_url cannot be used together in one request.
	InvalidAudioURL OptString `json:"invalid_audio_url"`
	// The media_name of a file to be played back when digits don't match the `valid_digits` parameter or
	// the number of digits is not between `min` and `max`. The media_name must point to a file
	// previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either
	// be a WAV or MP3 file.
	InvalidMediaName OptString `json:"invalid_media_name"`
	// The minimum number of digits to fetch. This parameter has a minimum value of 1.
	MinimumDigits OptInt32 `json:"minimum_digits"`
	// The maximum number of digits to fetch. This parameter has a maximum value of 128.
	MaximumDigits OptInt32 `json:"maximum_digits"`
	// The maximum number of times the file should be played if there is no input from the user on the
	// call.
	MaximumTries OptInt32 `json:"maximum_tries"`
	// The number of milliseconds to wait for a DTMF response after file playback ends before a replaying
	// the sound file.
	TimeoutMillis OptInt32 `json:"timeout_millis"`
	// The digit used to terminate input if fewer than `maximum_digits` digits have been gathered.
	TerminatingDigit OptString `json:"terminating_digit"`
	// A list of all digits accepted as valid.
	ValidDigits OptString `json:"valid_digits"`
	// The number of milliseconds to wait for input between digits.
	InterDigitTimeoutMillis OptInt32 `json:"inter_digit_timeout_millis"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetAudioURL returns the value of AudioURL.
func (s *GatherUsingAudioRequest) GetAudioURL() OptString {
	return s.AudioURL
}

// GetMediaName returns the value of MediaName.
func (s *GatherUsingAudioRequest) GetMediaName() OptString {
	return s.MediaName
}

// GetInvalidAudioURL returns the value of InvalidAudioURL.
func (s *GatherUsingAudioRequest) GetInvalidAudioURL() OptString {
	return s.InvalidAudioURL
}

// GetInvalidMediaName returns the value of InvalidMediaName.
func (s *GatherUsingAudioRequest) GetInvalidMediaName() OptString {
	return s.InvalidMediaName
}

// GetMinimumDigits returns the value of MinimumDigits.
func (s *GatherUsingAudioRequest) GetMinimumDigits() OptInt32 {
	return s.MinimumDigits
}

// GetMaximumDigits returns the value of MaximumDigits.
func (s *GatherUsingAudioRequest) GetMaximumDigits() OptInt32 {
	return s.MaximumDigits
}

// GetMaximumTries returns the value of MaximumTries.
func (s *GatherUsingAudioRequest) GetMaximumTries() OptInt32 {
	return s.MaximumTries
}

// GetTimeoutMillis returns the value of TimeoutMillis.
func (s *GatherUsingAudioRequest) GetTimeoutMillis() OptInt32 {
	return s.TimeoutMillis
}

// GetTerminatingDigit returns the value of TerminatingDigit.
func (s *GatherUsingAudioRequest) GetTerminatingDigit() OptString {
	return s.TerminatingDigit
}

// GetValidDigits returns the value of ValidDigits.
func (s *GatherUsingAudioRequest) GetValidDigits() OptString {
	return s.ValidDigits
}

// GetInterDigitTimeoutMillis returns the value of InterDigitTimeoutMillis.
func (s *GatherUsingAudioRequest) GetInterDigitTimeoutMillis() OptInt32 {
	return s.InterDigitTimeoutMillis
}

// GetClientState returns the value of ClientState.
func (s *GatherUsingAudioRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *GatherUsingAudioRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetAudioURL sets the value of AudioURL.
func (s *GatherUsingAudioRequest) SetAudioURL(val OptString) {
	s.AudioURL = val
}

// SetMediaName sets the value of MediaName.
func (s *GatherUsingAudioRequest) SetMediaName(val OptString) {
	s.MediaName = val
}

// SetInvalidAudioURL sets the value of InvalidAudioURL.
func (s *GatherUsingAudioRequest) SetInvalidAudioURL(val OptString) {
	s.InvalidAudioURL = val
}

// SetInvalidMediaName sets the value of InvalidMediaName.
func (s *GatherUsingAudioRequest) SetInvalidMediaName(val OptString) {
	s.InvalidMediaName = val
}

// SetMinimumDigits sets the value of MinimumDigits.
func (s *GatherUsingAudioRequest) SetMinimumDigits(val OptInt32) {
	s.MinimumDigits = val
}

// SetMaximumDigits sets the value of MaximumDigits.
func (s *GatherUsingAudioRequest) SetMaximumDigits(val OptInt32) {
	s.MaximumDigits = val
}

// SetMaximumTries sets the value of MaximumTries.
func (s *GatherUsingAudioRequest) SetMaximumTries(val OptInt32) {
	s.MaximumTries = val
}

// SetTimeoutMillis sets the value of TimeoutMillis.
func (s *GatherUsingAudioRequest) SetTimeoutMillis(val OptInt32) {
	s.TimeoutMillis = val
}

// SetTerminatingDigit sets the value of TerminatingDigit.
func (s *GatherUsingAudioRequest) SetTerminatingDigit(val OptString) {
	s.TerminatingDigit = val
}

// SetValidDigits sets the value of ValidDigits.
func (s *GatherUsingAudioRequest) SetValidDigits(val OptString) {
	s.ValidDigits = val
}

// SetInterDigitTimeoutMillis sets the value of InterDigitTimeoutMillis.
func (s *GatherUsingAudioRequest) SetInterDigitTimeoutMillis(val OptInt32) {
	s.InterDigitTimeoutMillis = val
}

// SetClientState sets the value of ClientState.
func (s *GatherUsingAudioRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *GatherUsingAudioRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// Ref: #/components/schemas/GatherUsingSpeakRequest
type GatherUsingSpeakRequest struct {
	// The text or SSML to be converted into speech. There is a 3,000 character limit.
	Payload string `json:"payload"`
	// The text or SSML to be converted into speech when digits don't match the `valid_digits` parameter
	// or the number of digits is not between `min` and `max`. There is a 3,000 character limit.
	InvalidPayload OptString `json:"invalid_payload"`
	// The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup
	// Language (SSML).
	PayloadType OptGatherUsingSpeakRequestPayloadType `json:"payload_type"`
	// This parameter impacts speech quality, language options and payload types. When using `basic`,
	// only the `en-US` language and payload type `text` are allowed.
	ServiceLevel OptGatherUsingSpeakRequestServiceLevel `json:"service_level"`
	// The gender of the voice used to speak back the text or the specific Amazon Polly voice to be used
	// in the form of `Polly.<voice>`, e.g. `Polly.Brian`. All standard Amazon Polly voices are supported.
	Voice GatherUsingSpeakRequestVoice `json:"voice"`
	// The language you want spoken. This parameter is ignored when a `Polly.*` voice is specified.
	Language OptGatherUsingSpeakRequestLanguage `json:"language"`
	// The minimum number of digits to fetch. This parameter has a minimum value of 1.
	MinimumDigits OptInt32 `json:"minimum_digits"`
	// The maximum number of digits to fetch. This parameter has a maximum value of 128.
	MaximumDigits OptInt32 `json:"maximum_digits"`
	// The maximum number of times that a file should be played back if there is no input from the user
	// on the call.
	MaximumTries OptInt32 `json:"maximum_tries"`
	// The number of milliseconds to wait for a DTMF response after speak ends before a replaying the
	// sound file.
	TimeoutMillis OptInt32 `json:"timeout_millis"`
	// The digit used to terminate input if fewer than `maximum_digits` digits have been gathered.
	TerminatingDigit OptString `json:"terminating_digit"`
	// A list of all digits accepted as valid.
	ValidDigits OptString `json:"valid_digits"`
	// The number of milliseconds to wait for input between digits.
	InterDigitTimeoutMillis OptInt32 `json:"inter_digit_timeout_millis"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetPayload returns the value of Payload.
func (s *GatherUsingSpeakRequest) GetPayload() string {
	return s.Payload
}

// GetInvalidPayload returns the value of InvalidPayload.
func (s *GatherUsingSpeakRequest) GetInvalidPayload() OptString {
	return s.InvalidPayload
}

// GetPayloadType returns the value of PayloadType.
func (s *GatherUsingSpeakRequest) GetPayloadType() OptGatherUsingSpeakRequestPayloadType {
	return s.PayloadType
}

// GetServiceLevel returns the value of ServiceLevel.
func (s *GatherUsingSpeakRequest) GetServiceLevel() OptGatherUsingSpeakRequestServiceLevel {
	return s.ServiceLevel
}

// GetVoice returns the value of Voice.
func (s *GatherUsingSpeakRequest) GetVoice() GatherUsingSpeakRequestVoice {
	return s.Voice
}

// GetLanguage returns the value of Language.
func (s *GatherUsingSpeakRequest) GetLanguage() OptGatherUsingSpeakRequestLanguage {
	return s.Language
}

// GetMinimumDigits returns the value of MinimumDigits.
func (s *GatherUsingSpeakRequest) GetMinimumDigits() OptInt32 {
	return s.MinimumDigits
}

// GetMaximumDigits returns the value of MaximumDigits.
func (s *GatherUsingSpeakRequest) GetMaximumDigits() OptInt32 {
	return s.MaximumDigits
}

// GetMaximumTries returns the value of MaximumTries.
func (s *GatherUsingSpeakRequest) GetMaximumTries() OptInt32 {
	return s.MaximumTries
}

// GetTimeoutMillis returns the value of TimeoutMillis.
func (s *GatherUsingSpeakRequest) GetTimeoutMillis() OptInt32 {
	return s.TimeoutMillis
}

// GetTerminatingDigit returns the value of TerminatingDigit.
func (s *GatherUsingSpeakRequest) GetTerminatingDigit() OptString {
	return s.TerminatingDigit
}

// GetValidDigits returns the value of ValidDigits.
func (s *GatherUsingSpeakRequest) GetValidDigits() OptString {
	return s.ValidDigits
}

// GetInterDigitTimeoutMillis returns the value of InterDigitTimeoutMillis.
func (s *GatherUsingSpeakRequest) GetInterDigitTimeoutMillis() OptInt32 {
	return s.InterDigitTimeoutMillis
}

// GetClientState returns the value of ClientState.
func (s *GatherUsingSpeakRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *GatherUsingSpeakRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetPayload sets the value of Payload.
func (s *GatherUsingSpeakRequest) SetPayload(val string) {
	s.Payload = val
}

// SetInvalidPayload sets the value of InvalidPayload.
func (s *GatherUsingSpeakRequest) SetInvalidPayload(val OptString) {
	s.InvalidPayload = val
}

// SetPayloadType sets the value of PayloadType.
func (s *GatherUsingSpeakRequest) SetPayloadType(val OptGatherUsingSpeakRequestPayloadType) {
	s.PayloadType = val
}

// SetServiceLevel sets the value of ServiceLevel.
func (s *GatherUsingSpeakRequest) SetServiceLevel(val OptGatherUsingSpeakRequestServiceLevel) {
	s.ServiceLevel = val
}

// SetVoice sets the value of Voice.
func (s *GatherUsingSpeakRequest) SetVoice(val GatherUsingSpeakRequestVoice) {
	s.Voice = val
}

// SetLanguage sets the value of Language.
func (s *GatherUsingSpeakRequest) SetLanguage(val OptGatherUsingSpeakRequestLanguage) {
	s.Language = val
}

// SetMinimumDigits sets the value of MinimumDigits.
func (s *GatherUsingSpeakRequest) SetMinimumDigits(val OptInt32) {
	s.MinimumDigits = val
}

// SetMaximumDigits sets the value of MaximumDigits.
func (s *GatherUsingSpeakRequest) SetMaximumDigits(val OptInt32) {
	s.MaximumDigits = val
}

// SetMaximumTries sets the value of MaximumTries.
func (s *GatherUsingSpeakRequest) SetMaximumTries(val OptInt32) {
	s.MaximumTries = val
}

// SetTimeoutMillis sets the value of TimeoutMillis.
func (s *GatherUsingSpeakRequest) SetTimeoutMillis(val OptInt32) {
	s.TimeoutMillis = val
}

// SetTerminatingDigit sets the value of TerminatingDigit.
func (s *GatherUsingSpeakRequest) SetTerminatingDigit(val OptString) {
	s.TerminatingDigit = val
}

// SetValidDigits sets the value of ValidDigits.
func (s *GatherUsingSpeakRequest) SetValidDigits(val OptString) {
	s.ValidDigits = val
}

// SetInterDigitTimeoutMillis sets the value of InterDigitTimeoutMillis.
func (s *GatherUsingSpeakRequest) SetInterDigitTimeoutMillis(val OptInt32) {
	s.InterDigitTimeoutMillis = val
}

// SetClientState sets the value of ClientState.
func (s *GatherUsingSpeakRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *GatherUsingSpeakRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// The language you want spoken. This parameter is ignored when a `Polly.*` voice is specified.
type GatherUsingSpeakRequestLanguage string

const (
	GatherUsingSpeakRequestLanguageArb     GatherUsingSpeakRequestLanguage = "arb"
	GatherUsingSpeakRequestLanguageCmnCN   GatherUsingSpeakRequestLanguage = "cmn-CN"
	GatherUsingSpeakRequestLanguageCyGB    GatherUsingSpeakRequestLanguage = "cy-GB"
	GatherUsingSpeakRequestLanguageDaDK    GatherUsingSpeakRequestLanguage = "da-DK"
	GatherUsingSpeakRequestLanguageDeDE    GatherUsingSpeakRequestLanguage = "de-DE"
	GatherUsingSpeakRequestLanguageEnAU    GatherUsingSpeakRequestLanguage = "en-AU"
	GatherUsingSpeakRequestLanguageEnGB    GatherUsingSpeakRequestLanguage = "en-GB"
	GatherUsingSpeakRequestLanguageEnGBWLS GatherUsingSpeakRequestLanguage = "en-GB-WLS"
	GatherUsingSpeakRequestLanguageEnIN    GatherUsingSpeakRequestLanguage = "en-IN"
	GatherUsingSpeakRequestLanguageEnUS    GatherUsingSpeakRequestLanguage = "en-US"
	GatherUsingSpeakRequestLanguageEsES    GatherUsingSpeakRequestLanguage = "es-ES"
	GatherUsingSpeakRequestLanguageEsMX    GatherUsingSpeakRequestLanguage = "es-MX"
	GatherUsingSpeakRequestLanguageEsUS    GatherUsingSpeakRequestLanguage = "es-US"
	GatherUsingSpeakRequestLanguageFrCA    GatherUsingSpeakRequestLanguage = "fr-CA"
	GatherUsingSpeakRequestLanguageFrFR    GatherUsingSpeakRequestLanguage = "fr-FR"
	GatherUsingSpeakRequestLanguageHiIN    GatherUsingSpeakRequestLanguage = "hi-IN"
	GatherUsingSpeakRequestLanguageIsIS    GatherUsingSpeakRequestLanguage = "is-IS"
	GatherUsingSpeakRequestLanguageItIT    GatherUsingSpeakRequestLanguage = "it-IT"
	GatherUsingSpeakRequestLanguageJaJP    GatherUsingSpeakRequestLanguage = "ja-JP"
	GatherUsingSpeakRequestLanguageKoKR    GatherUsingSpeakRequestLanguage = "ko-KR"
	GatherUsingSpeakRequestLanguageNbNO    GatherUsingSpeakRequestLanguage = "nb-NO"
	GatherUsingSpeakRequestLanguageNlNL    GatherUsingSpeakRequestLanguage = "nl-NL"
	GatherUsingSpeakRequestLanguagePlPL    GatherUsingSpeakRequestLanguage = "pl-PL"
	GatherUsingSpeakRequestLanguagePtBR    GatherUsingSpeakRequestLanguage = "pt-BR"
	GatherUsingSpeakRequestLanguagePtPT    GatherUsingSpeakRequestLanguage = "pt-PT"
	GatherUsingSpeakRequestLanguageRoRO    GatherUsingSpeakRequestLanguage = "ro-RO"
	GatherUsingSpeakRequestLanguageRuRU    GatherUsingSpeakRequestLanguage = "ru-RU"
	GatherUsingSpeakRequestLanguageSvSE    GatherUsingSpeakRequestLanguage = "sv-SE"
	GatherUsingSpeakRequestLanguageTrTR    GatherUsingSpeakRequestLanguage = "tr-TR"
)

// AllValues returns all GatherUsingSpeakRequestLanguage values.
func (GatherUsingSpeakRequestLanguage) AllValues() []GatherUsingSpeakRequestLanguage {
	return []GatherUsingSpeakRequestLanguage{
		GatherUsingSpeakRequestLanguageArb,
		GatherUsingSpeakRequestLanguageCmnCN,
		GatherUsingSpeakRequestLanguageCyGB,
		GatherUsingSpeakRequestLanguageDaDK,
		GatherUsingSpeakRequestLanguageDeDE,
		GatherUsingSpeakRequestLanguageEnAU,
		GatherUsingSpeakRequestLanguageEnGB,
		GatherUsingSpeakRequestLanguageEnGBWLS,
		GatherUsingSpeakRequestLanguageEnIN,
		GatherUsingSpeakRequestLanguageEnUS,
		GatherUsingSpeakRequestLanguageEsES,
		GatherUsingSpeakRequestLanguageEsMX,
		GatherUsingSpeakRequestLanguageEsUS,
		GatherUsingSpeakRequestLanguageFrCA,
		GatherUsingSpeakRequestLanguageFrFR,
		GatherUsingSpeakRequestLanguageHiIN,
		GatherUsingSpeakRequestLanguageIsIS,
		GatherUsingSpeakRequestLanguageItIT,
		GatherUsingSpeakRequestLanguageJaJP,
		GatherUsingSpeakRequestLanguageKoKR,
		GatherUsingSpeakRequestLanguageNbNO,
		GatherUsingSpeakRequestLanguageNlNL,
		GatherUsingSpeakRequestLanguagePlPL,
		GatherUsingSpeakRequestLanguagePtBR,
		GatherUsingSpeakRequestLanguagePtPT,
		GatherUsingSpeakRequestLanguageRoRO,
		GatherUsingSpeakRequestLanguageRuRU,
		GatherUsingSpeakRequestLanguageSvSE,
		GatherUsingSpeakRequestLanguageTrTR,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GatherUsingSpeakRequestLanguage) MarshalText() ([]byte, error) {
	switch s {
	case GatherUsingSpeakRequestLanguageArb:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageCmnCN:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageCyGB:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageDaDK:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageDeDE:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageEnAU:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageEnGB:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageEnGBWLS:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageEnIN:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageEnUS:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageEsES:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageEsMX:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageEsUS:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageFrCA:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageFrFR:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageHiIN:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageIsIS:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageItIT:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageJaJP:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageKoKR:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageNbNO:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageNlNL:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguagePlPL:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguagePtBR:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguagePtPT:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageRoRO:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageRuRU:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageSvSE:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageTrTR:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GatherUsingSpeakRequestLanguage) UnmarshalText(data []byte) error {
	switch GatherUsingSpeakRequestLanguage(data) {
	case GatherUsingSpeakRequestLanguageArb:
		*s = GatherUsingSpeakRequestLanguageArb
		return nil
	case GatherUsingSpeakRequestLanguageCmnCN:
		*s = GatherUsingSpeakRequestLanguageCmnCN
		return nil
	case GatherUsingSpeakRequestLanguageCyGB:
		*s = GatherUsingSpeakRequestLanguageCyGB
		return nil
	case GatherUsingSpeakRequestLanguageDaDK:
		*s = GatherUsingSpeakRequestLanguageDaDK
		return nil
	case GatherUsingSpeakRequestLanguageDeDE:
		*s = GatherUsingSpeakRequestLanguageDeDE
		return nil
	case GatherUsingSpeakRequestLanguageEnAU:
		*s = GatherUsingSpeakRequestLanguageEnAU
		return nil
	case GatherUsingSpeakRequestLanguageEnGB:
		*s = GatherUsingSpeakRequestLanguageEnGB
		return nil
	case GatherUsingSpeakRequestLanguageEnGBWLS:
		*s = GatherUsingSpeakRequestLanguageEnGBWLS
		return nil
	case GatherUsingSpeakRequestLanguageEnIN:
		*s = GatherUsingSpeakRequestLanguageEnIN
		return nil
	case GatherUsingSpeakRequestLanguageEnUS:
		*s = GatherUsingSpeakRequestLanguageEnUS
		return nil
	case GatherUsingSpeakRequestLanguageEsES:
		*s = GatherUsingSpeakRequestLanguageEsES
		return nil
	case GatherUsingSpeakRequestLanguageEsMX:
		*s = GatherUsingSpeakRequestLanguageEsMX
		return nil
	case GatherUsingSpeakRequestLanguageEsUS:
		*s = GatherUsingSpeakRequestLanguageEsUS
		return nil
	case GatherUsingSpeakRequestLanguageFrCA:
		*s = GatherUsingSpeakRequestLanguageFrCA
		return nil
	case GatherUsingSpeakRequestLanguageFrFR:
		*s = GatherUsingSpeakRequestLanguageFrFR
		return nil
	case GatherUsingSpeakRequestLanguageHiIN:
		*s = GatherUsingSpeakRequestLanguageHiIN
		return nil
	case GatherUsingSpeakRequestLanguageIsIS:
		*s = GatherUsingSpeakRequestLanguageIsIS
		return nil
	case GatherUsingSpeakRequestLanguageItIT:
		*s = GatherUsingSpeakRequestLanguageItIT
		return nil
	case GatherUsingSpeakRequestLanguageJaJP:
		*s = GatherUsingSpeakRequestLanguageJaJP
		return nil
	case GatherUsingSpeakRequestLanguageKoKR:
		*s = GatherUsingSpeakRequestLanguageKoKR
		return nil
	case GatherUsingSpeakRequestLanguageNbNO:
		*s = GatherUsingSpeakRequestLanguageNbNO
		return nil
	case GatherUsingSpeakRequestLanguageNlNL:
		*s = GatherUsingSpeakRequestLanguageNlNL
		return nil
	case GatherUsingSpeakRequestLanguagePlPL:
		*s = GatherUsingSpeakRequestLanguagePlPL
		return nil
	case GatherUsingSpeakRequestLanguagePtBR:
		*s = GatherUsingSpeakRequestLanguagePtBR
		return nil
	case GatherUsingSpeakRequestLanguagePtPT:
		*s = GatherUsingSpeakRequestLanguagePtPT
		return nil
	case GatherUsingSpeakRequestLanguageRoRO:
		*s = GatherUsingSpeakRequestLanguageRoRO
		return nil
	case GatherUsingSpeakRequestLanguageRuRU:
		*s = GatherUsingSpeakRequestLanguageRuRU
		return nil
	case GatherUsingSpeakRequestLanguageSvSE:
		*s = GatherUsingSpeakRequestLanguageSvSE
		return nil
	case GatherUsingSpeakRequestLanguageTrTR:
		*s = GatherUsingSpeakRequestLanguageTrTR
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup
// Language (SSML).
type GatherUsingSpeakRequestPayloadType string

const (
	GatherUsingSpeakRequestPayloadTypeText GatherUsingSpeakRequestPayloadType = "text"
	GatherUsingSpeakRequestPayloadTypeSsml GatherUsingSpeakRequestPayloadType = "ssml"
)

// AllValues returns all GatherUsingSpeakRequestPayloadType values.
func (GatherUsingSpeakRequestPayloadType) AllValues() []GatherUsingSpeakRequestPayloadType {
	return []GatherUsingSpeakRequestPayloadType{
		GatherUsingSpeakRequestPayloadTypeText,
		GatherUsingSpeakRequestPayloadTypeSsml,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GatherUsingSpeakRequestPayloadType) MarshalText() ([]byte, error) {
	switch s {
	case GatherUsingSpeakRequestPayloadTypeText:
		return []byte(s), nil
	case GatherUsingSpeakRequestPayloadTypeSsml:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GatherUsingSpeakRequestPayloadType) UnmarshalText(data []byte) error {
	switch GatherUsingSpeakRequestPayloadType(data) {
	case GatherUsingSpeakRequestPayloadTypeText:
		*s = GatherUsingSpeakRequestPayloadTypeText
		return nil
	case GatherUsingSpeakRequestPayloadTypeSsml:
		*s = GatherUsingSpeakRequestPayloadTypeSsml
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// This parameter impacts speech quality, language options and payload types. When using `basic`,
// only the `en-US` language and payload type `text` are allowed.
type GatherUsingSpeakRequestServiceLevel string

const (
	GatherUsingSpeakRequestServiceLevelBasic   GatherUsingSpeakRequestServiceLevel = "basic"
	GatherUsingSpeakRequestServiceLevelPremium GatherUsingSpeakRequestServiceLevel = "premium"
)

// AllValues returns all GatherUsingSpeakRequestServiceLevel values.
func (GatherUsingSpeakRequestServiceLevel) AllValues() []GatherUsingSpeakRequestServiceLevel {
	return []GatherUsingSpeakRequestServiceLevel{
		GatherUsingSpeakRequestServiceLevelBasic,
		GatherUsingSpeakRequestServiceLevelPremium,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GatherUsingSpeakRequestServiceLevel) MarshalText() ([]byte, error) {
	switch s {
	case GatherUsingSpeakRequestServiceLevelBasic:
		return []byte(s), nil
	case GatherUsingSpeakRequestServiceLevelPremium:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GatherUsingSpeakRequestServiceLevel) UnmarshalText(data []byte) error {
	switch GatherUsingSpeakRequestServiceLevel(data) {
	case GatherUsingSpeakRequestServiceLevelBasic:
		*s = GatherUsingSpeakRequestServiceLevelBasic
		return nil
	case GatherUsingSpeakRequestServiceLevelPremium:
		*s = GatherUsingSpeakRequestServiceLevelPremium
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The gender of the voice used to speak back the text or the specific Amazon Polly voice to be used
// in the form of `Polly.<voice>`, e.g. `Polly.Brian`. All standard Amazon Polly voices are supported.
type GatherUsingSpeakRequestVoice string

const (
	GatherUsingSpeakRequestVoiceMale   GatherUsingSpeakRequestVoice = "male"
	GatherUsingSpeakRequestVoiceFemale GatherUsingSpeakRequestVoice = "female"
)

// AllValues returns all GatherUsingSpeakRequestVoice values.
func (GatherUsingSpeakRequestVoice) AllValues() []GatherUsingSpeakRequestVoice {
	return []GatherUsingSpeakRequestVoice{
		GatherUsingSpeakRequestVoiceMale,
		GatherUsingSpeakRequestVoiceFemale,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GatherUsingSpeakRequestVoice) MarshalText() ([]byte, error) {
	switch s {
	case GatherUsingSpeakRequestVoiceMale:
		return []byte(s), nil
	case GatherUsingSpeakRequestVoiceFemale:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GatherUsingSpeakRequestVoice) UnmarshalText(data []byte) error {
	switch GatherUsingSpeakRequestVoice(data) {
	case GatherUsingSpeakRequestVoiceMale:
		*s = GatherUsingSpeakRequestVoiceMale
		return nil
	case GatherUsingSpeakRequestVoiceFemale:
		*s = GatherUsingSpeakRequestVoiceFemale
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// GenericErrorResponseStatusCode wraps Errors with StatusCode.
type GenericErrorResponseStatusCode struct {
	StatusCode int
	Response   Errors
}

// GetStatusCode returns the value of StatusCode.
func (s *GenericErrorResponseStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *GenericErrorResponseStatusCode) GetResponse() Errors {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *GenericErrorResponseStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *GenericErrorResponseStatusCode) SetResponse(val Errors) {
	s.Response = val
}

func (*GenericErrorResponseStatusCode) answerCallRes()                          {}
func (*GenericErrorResponseStatusCode) bridgeCallRes()                          {}
func (*GenericErrorResponseStatusCode) createCustomStorageCredentialsRes()      {}
func (*GenericErrorResponseStatusCode) createFlashcallVerificationRes()         {}
func (*GenericErrorResponseStatusCode) createProfileRes()                       {}
func (*GenericErrorResponseStatusCode) createProfileVerificationRequestRes()    {}
func (*GenericErrorResponseStatusCode) createVerificationCallRes()              {}
func (*GenericErrorResponseStatusCode) createVerificationSmsRes()               {}
func (*GenericErrorResponseStatusCode) createVerifiedNumberRes()                {}
func (*GenericErrorResponseStatusCode) createVerifyProfileRes()                 {}
func (*GenericErrorResponseStatusCode) deleteCustomStorageCredentialsRes()      {}
func (*GenericErrorResponseStatusCode) deleteProfileRes()                       {}
func (*GenericErrorResponseStatusCode) deleteRecordingRes()                     {}
func (*GenericErrorResponseStatusCode) deleteRecordingTranscriptionRes()        {}
func (*GenericErrorResponseStatusCode) deleteRecordingsRes()                    {}
func (*GenericErrorResponseStatusCode) deleteVerifiedCallDisplayProfileRes()    {}
func (*GenericErrorResponseStatusCode) deleteVerifiedNumberRes()                {}
func (*GenericErrorResponseStatusCode) dialCallRes()                            {}
func (*GenericErrorResponseStatusCode) displayProfileRes()                      {}
func (*GenericErrorResponseStatusCode) enqueueCallRes()                         {}
func (*GenericErrorResponseStatusCode) gatherCallRes()                          {}
func (*GenericErrorResponseStatusCode) gatherUsingAudioRes()                    {}
func (*GenericErrorResponseStatusCode) gatherUsingSpeakRes()                    {}
func (*GenericErrorResponseStatusCode) getCustomStorageCredentialsRes()         {}
func (*GenericErrorResponseStatusCode) getRecordingRes()                        {}
func (*GenericErrorResponseStatusCode) getRecordingTranscriptionRes()           {}
func (*GenericErrorResponseStatusCode) getRecordingTranscriptionsRes()          {}
func (*GenericErrorResponseStatusCode) getRecordingsRes()                       {}
func (*GenericErrorResponseStatusCode) getUserBalanceRes()                      {}
func (*GenericErrorResponseStatusCode) getVerifiedNumberRes()                   {}
func (*GenericErrorResponseStatusCode) getVerifyProfileRes()                    {}
func (*GenericErrorResponseStatusCode) hangupCallRes()                          {}
func (*GenericErrorResponseStatusCode) leaveQueueRes()                          {}
func (*GenericErrorResponseStatusCode) listConnectionActiveCallsRes()           {}
func (*GenericErrorResponseStatusCode) listProfilesRes()                        {}
func (*GenericErrorResponseStatusCode) listVerificationsRes()                   {}
func (*GenericErrorResponseStatusCode) listVerifiedCallDisplayProfilesRes()     {}
func (*GenericErrorResponseStatusCode) listVerifiedNumbersRes()                 {}
func (*GenericErrorResponseStatusCode) noiseSuppressionStartRes()               {}
func (*GenericErrorResponseStatusCode) noiseSuppressionStopRes()                {}
func (*GenericErrorResponseStatusCode) pauseCallRecordingRes()                  {}
func (*GenericErrorResponseStatusCode) referCallRes()                           {}
func (*GenericErrorResponseStatusCode) registerCallRes()                        {}
func (*GenericErrorResponseStatusCode) rejectCallRes()                          {}
func (*GenericErrorResponseStatusCode) resumeCallRecordingRes()                 {}
func (*GenericErrorResponseStatusCode) retrieveCallStatusRes()                  {}
func (*GenericErrorResponseStatusCode) retrieveVerificationRes()                {}
func (*GenericErrorResponseStatusCode) sendDTMFRes()                            {}
func (*GenericErrorResponseStatusCode) speakCallRes()                           {}
func (*GenericErrorResponseStatusCode) startCallForkRes()                       {}
func (*GenericErrorResponseStatusCode) startCallPlaybackRes()                   {}
func (*GenericErrorResponseStatusCode) startCallRecordRes()                     {}
func (*GenericErrorResponseStatusCode) startCallStreamingRes()                  {}
func (*GenericErrorResponseStatusCode) startCallTranscriptionRes()              {}
func (*GenericErrorResponseStatusCode) stopCallForkRes()                        {}
func (*GenericErrorResponseStatusCode) stopCallGatherRes()                      {}
func (*GenericErrorResponseStatusCode) stopCallPlaybackRes()                    {}
func (*GenericErrorResponseStatusCode) stopCallRecordingRes()                   {}
func (*GenericErrorResponseStatusCode) stopCallStreamingRes()                   {}
func (*GenericErrorResponseStatusCode) stopCallTranscriptionRes()               {}
func (*GenericErrorResponseStatusCode) transferCallRes()                        {}
func (*GenericErrorResponseStatusCode) updateClientStateRes()                   {}
func (*GenericErrorResponseStatusCode) updateCustomStorageCredentialsRes()      {}
func (*GenericErrorResponseStatusCode) updateProfileRes()                       {}
func (*GenericErrorResponseStatusCode) updateVerifyProfileRes()                 {}
func (*GenericErrorResponseStatusCode) verifyVerificationCodeByPhoneNumberRes() {}
func (*GenericErrorResponseStatusCode) verifyVerificationCodeRes()              {}

type GetAllTelephonyCredentialResponse struct {
	Data []TelephonyCredential `json:"data"`
	Meta OptPaginationMeta     `json:"meta"`
}

// GetData returns the value of Data.
func (s *GetAllTelephonyCredentialResponse) GetData() []TelephonyCredential {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *GetAllTelephonyCredentialResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *GetAllTelephonyCredentialResponse) SetData(val []TelephonyCredential) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *GetAllTelephonyCredentialResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*GetAllTelephonyCredentialResponse) findTelephonyCredentialsRes() {}

type GetAllTexmlApplicationsResponse struct {
	Data []TexmlApplication `json:"data"`
	Meta OptPaginationMeta  `json:"meta"`
}

// GetData returns the value of Data.
func (s *GetAllTexmlApplicationsResponse) GetData() []TexmlApplication {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *GetAllTexmlApplicationsResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *GetAllTexmlApplicationsResponse) SetData(val []TexmlApplication) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *GetAllTexmlApplicationsResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*GetAllTexmlApplicationsResponse) findTexmlApplicationsRes() {}

type GetCallResponse struct {
	Data OptCallResource `json:"data"`
}

// GetData returns the value of Data.
func (s *GetCallResponse) GetData() OptCallResource {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetCallResponse) SetData(val OptCallResource) {
	s.Data = val
}

func (*GetCallResponse) getTexmlCallRes() {}

type GetCallsResponse struct {
	Data OptCallResourceIndex `json:"data"`
}

// GetData returns the value of Data.
func (s *GetCallsResponse) GetData() OptCallResourceIndex {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetCallsResponse) SetData(val OptCallResourceIndex) {
	s.Data = val
}

func (*GetCallsResponse) getTexmlCallsRes() {}

type GetConferenceRecordingsResponse struct {
	Data OptConferenceRecordingResourceIndex `json:"data"`
}

// GetData returns the value of Data.
func (s *GetConferenceRecordingsResponse) GetData() OptConferenceRecordingResourceIndex {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetConferenceRecordingsResponse) SetData(val OptConferenceRecordingResourceIndex) {
	s.Data = val
}

func (*GetConferenceRecordingsResponse) getTexmlConferenceRecordingsRes() {}

type GetConferenceResponse struct {
	Data OptConferenceResource `json:"data"`
}

// GetData returns the value of Data.
func (s *GetConferenceResponse) GetData() OptConferenceResource {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetConferenceResponse) SetData(val OptConferenceResource) {
	s.Data = val
}

func (*GetConferenceResponse) getTexmlConferenceRes()    {}
func (*GetConferenceResponse) updateTexmlConferenceRes() {}

type GetConferencesResponse struct {
	Data OptConferenceResourceIndex `json:"data"`
}

// GetData returns the value of Data.
func (s *GetConferencesResponse) GetData() OptConferenceResourceIndex {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetConferencesResponse) SetData(val OptConferenceResourceIndex) {
	s.Data = val
}

func (*GetConferencesResponse) getTexmlConferencesRes() {}

type GetParticipantResponse struct {
	Data OptParticipantResource `json:"data"`
}

// GetData returns the value of Data.
func (s *GetParticipantResponse) GetData() OptParticipantResource {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetParticipantResponse) SetData(val OptParticipantResource) {
	s.Data = val
}

func (*GetParticipantResponse) getTexmlConferenceParticipantRes()    {}
func (*GetParticipantResponse) updateTexmlConferenceParticipantRes() {}

type GetParticipantsResponse struct {
	Data OptParticipantResourceIndex `json:"data"`
}

// GetData returns the value of Data.
func (s *GetParticipantsResponse) GetData() OptParticipantResourceIndex {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetParticipantsResponse) SetData(val OptParticipantResourceIndex) {
	s.Data = val
}

func (*GetParticipantsResponse) getTexmlConferenceParticipantsRes() {}

type GetRoomRecordingResponse struct {
	Data OptRoomRecording `json:"data"`
}

// GetData returns the value of Data.
func (s *GetRoomRecordingResponse) GetData() OptRoomRecording {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetRoomRecordingResponse) SetData(val OptRoomRecording) {
	s.Data = val
}

func (*GetRoomRecordingResponse) viewRoomRecordingRes() {}

// GetTelephonyCredentialBadRequest is response for GetTelephonyCredential operation.
type GetTelephonyCredentialBadRequest struct{}

func (*GetTelephonyCredentialBadRequest) getTelephonyCredentialRes() {}

// GetTelephonyCredentialNotFound is response for GetTelephonyCredential operation.
type GetTelephonyCredentialNotFound struct{}

func (*GetTelephonyCredentialNotFound) getTelephonyCredentialRes() {}

// GetTelephonyCredentialUnauthorized is response for GetTelephonyCredential operation.
type GetTelephonyCredentialUnauthorized struct{}

func (*GetTelephonyCredentialUnauthorized) getTelephonyCredentialRes() {}

type GetTexmlApplicationBadRequest ErrorResponse

func (*GetTexmlApplicationBadRequest) getTexmlApplicationRes() {}

type GetTexmlApplicationNotFound ErrorResponse

func (*GetTexmlApplicationNotFound) getTexmlApplicationRes() {}

type GetTexmlApplicationUnauthorized ErrorResponse

func (*GetTexmlApplicationUnauthorized) getTexmlApplicationRes() {}

type GetVerifiedNumberNotFound Errors

func (*GetVerifiedNumberNotFound) getVerifiedNumberRes() {}

type GetVerifiedNumberUnauthorized Errors

func (*GetVerifiedNumberUnauthorized) getVerifiedNumberRes() {}

// GetWebhookDeliveryNotFound is response for GetWebhookDelivery operation.
type GetWebhookDeliveryNotFound struct{}

func (*GetWebhookDeliveryNotFound) getWebhookDeliveryRes() {}

type GetWebhookDeliveryOK struct {
	Data OptWebhookDelivery `json:"data"`
}

// GetData returns the value of Data.
func (s *GetWebhookDeliveryOK) GetData() OptWebhookDelivery {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetWebhookDeliveryOK) SetData(val OptWebhookDelivery) {
	s.Data = val
}

func (*GetWebhookDeliveryOK) getWebhookDeliveryRes() {}

// GetWebhookDeliveryUnauthorized is response for GetWebhookDelivery operation.
type GetWebhookDeliveryUnauthorized struct{}

func (*GetWebhookDeliveryUnauthorized) getWebhookDeliveryRes() {}

// HTTP request and response information.
// Ref: #/components/schemas/http
type HTTP struct {
	// Request details.
	Request OptHTTPRequest `json:"request"`
	// Response details, optional.
	Response OptNilHTTPResponse `json:"response"`
}

// GetRequest returns the value of Request.
func (s *HTTP) GetRequest() OptHTTPRequest {
	return s.Request
}

// GetResponse returns the value of Response.
func (s *HTTP) GetResponse() OptNilHTTPResponse {
	return s.Response
}

// SetRequest sets the value of Request.
func (s *HTTP) SetRequest(val OptHTTPRequest) {
	s.Request = val
}

// SetResponse sets the value of Response.
func (s *HTTP) SetResponse(val OptNilHTTPResponse) {
	s.Response = val
}

type HTTPHeaders []string

// Request details.
type HTTPRequest struct {
	URL     OptString   `json:"url"`
	Headers HTTPHeaders `json:"headers"`
}

// GetURL returns the value of URL.
func (s *HTTPRequest) GetURL() OptString {
	return s.URL
}

// GetHeaders returns the value of Headers.
func (s *HTTPRequest) GetHeaders() HTTPHeaders {
	return s.Headers
}

// SetURL sets the value of URL.
func (s *HTTPRequest) SetURL(val OptString) {
	s.URL = val
}

// SetHeaders sets the value of Headers.
func (s *HTTPRequest) SetHeaders(val HTTPHeaders) {
	s.Headers = val
}

// Response details, optional.
type HTTPResponse struct {
	Status  OptInt      `json:"status"`
	Headers HTTPHeaders `json:"headers"`
	// Raw response body, limited to 10kB.
	Body OptString `json:"body"`
}

// GetStatus returns the value of Status.
func (s *HTTPResponse) GetStatus() OptInt {
	return s.Status
}

// GetHeaders returns the value of Headers.
func (s *HTTPResponse) GetHeaders() HTTPHeaders {
	return s.Headers
}

// GetBody returns the value of Body.
func (s *HTTPResponse) GetBody() OptString {
	return s.Body
}

// SetStatus sets the value of Status.
func (s *HTTPResponse) SetStatus(val OptInt) {
	s.Status = val
}

// SetHeaders sets the value of Headers.
func (s *HTTPResponse) SetHeaders(val HTTPHeaders) {
	s.Headers = val
}

// SetBody sets the value of Body.
func (s *HTTPResponse) SetBody(val OptString) {
	s.Body = val
}

// Ref: #/components/schemas/HTTPValidationError
type HTTPValidationError struct {
	Detail []ValidationError `json:"detail"`
}

// GetDetail returns the value of Detail.
func (s *HTTPValidationError) GetDetail() []ValidationError {
	return s.Detail
}

// SetDetail sets the value of Detail.
func (s *HTTPValidationError) SetDetail(val []ValidationError) {
	s.Detail = val
}

func (*HTTPValidationError) audioPublicAudioTranscriptionsPostRes() {}

// Ref: #/components/schemas/HangupRequest
type HangupRequest struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetClientState returns the value of ClientState.
func (s *HangupRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *HangupRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetClientState sets the value of ClientState.
func (s *HangupRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *HangupRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// Ref: #/components/schemas/InitiateCallRequest
type InitiateCallRequest struct {
	// The ID of the TeXML Application.
	ApplicationSid string `json:"ApplicationSid"`
	// The phone number of the called party. Phone numbers are formatted with a `+` and country code.
	To string `json:"To"`
	// The phone number of the party that initiated the call. Phone numbers are formatted with a `+` and
	// country code.
	From string `json:"From"`
	// The URL from which Telnyx will retrieve the TeXML call instructions.
	URL OptString `json:"Url"`
	// HTTP request type used for `Url`. The default value is inherited from TeXML Application setting.
	UrlMethod OptInitiateCallRequestUrlMethod `json:"UrlMethod"`
	// A failover URL for which Telnyx will retrieve the TeXML call instructions if the `Url` is not
	// responding.
	FallbackUrl OptString `json:"FallbackUrl"`
	// URL destination for Telnyx to send status callback events to for the call.
	StatusCallback OptString `json:"StatusCallback"`
	// HTTP request type used for `StatusCallback`.
	StatusCallbackMethod OptInitiateCallRequestStatusCallbackMethod `json:"StatusCallbackMethod"`
	// The call events for which Telnyx should send a webhook. Multiple events can be defined when
	// separated by a space.
	StatusCallbackEvent OptInitiateCallRequestStatusCallbackEvent `json:"StatusCallbackEvent"`
	// Enables Answering Machine Detection.
	MachineDetection OptInitiateCallRequestMachineDetection `json:"MachineDetection"`
	// Allows you to chose between Premium and Standard detections.
	DetectionMode OptInitiateCallRequestDetectionMode `json:"DetectionMode"`
	// Select whether to perform answering machine detection in the background. By default execution is
	// blocked until Answering Machine Detection is completed.
	AsyncAmd OptBool `json:"AsyncAmd"`
	// URL destination for Telnyx to send AMD callback events to for the call.
	AsyncAmdStatusCallback OptString `json:"AsyncAmdStatusCallback"`
	// HTTP request type used for `AsyncAmdStatusCallback`. The default value is inherited from TeXML
	// Application setting.
	AsyncAmdStatusCallbackMethod OptInitiateCallRequestAsyncAmdStatusCallbackMethod `json:"AsyncAmdStatusCallbackMethod"`
	// Maximum timeout threshold in milliseconds for overall detection.
	MachineDetectionTimeout OptInt `json:"MachineDetectionTimeout"`
	// Maximum threshold of a human greeting. If greeting longer than this value, considered machine.
	// Ignored when `premium` detection is used.
	MachineDetectionSpeechThreshold OptInt `json:"MachineDetectionSpeechThreshold"`
	// Silence duration threshold after a greeting message or voice for it be considered human. Ignored
	// when `premium` detection is used.
	MachineDetectionSpeechEndThreshold OptInt `json:"MachineDetectionSpeechEndThreshold"`
	// If initial silence duration is greater than this value, consider it a machine. Ignored when
	// `premium` detection is used.
	MachineDetectionSilenceTimeout OptInt `json:"MachineDetectionSilenceTimeout"`
	// Whether to cancel ongoing playback on `machine` detection. Defaults to `true`.
	CancelPlaybackOnMachineDetection OptBool `json:"CancelPlaybackOnMachineDetection"`
	// Whether to cancel ongoing playback on `greeting ended` detection. Defaults to `true`.
	CancelPlaybackOnDetectMessageEnd OptBool `json:"CancelPlaybackOnDetectMessageEnd"`
	// The list of comma-separated codecs to be offered on a call.
	PreferredCodecs OptString `json:"PreferredCodecs"`
	// Whether to record the entire participant's call leg. Defaults to `false`.
	Record OptBool `json:"Record"`
	// The number of channels in the final recording. Defaults to `mono`.
	RecordingChannels OptInitiateCallRequestRecordingChannels `json:"RecordingChannels"`
	// The URL the recording callbacks will be sent to.
	RecordingStatusCallback OptString `json:"RecordingStatusCallback"`
	// HTTP request type used for `RecordingStatusCallback`. Defaults to `POST`.
	RecordingStatusCallbackMethod OptInitiateCallRequestRecordingStatusCallbackMethod `json:"RecordingStatusCallbackMethod"`
	// The changes to the recording's state that should generate a call to `RecoridngStatusCallback`. Can
	// be: `in-progress`, `completed` and `absent`. Separate multiple values with a space. Defaults to
	// `completed`.
	RecordingStatusCallbackEvent OptString `json:"RecordingStatusCallbackEvent"`
	// The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected.
	//  The timer only starts when the speech is detected. Please note that the transcription is used to
	// detect silence and the related charge will be applied. The minimum value is 0. The default value
	// is 0 (infinite).
	RecordingTimeout OptInt `json:"RecordingTimeout"`
	// The audio track to record for the call. The default is `both`.
	RecordingTrack OptInitiateCallRequestRecordingTrack `json:"RecordingTrack"`
	// The password to use for SIP authentication.
	SipAuthPassword OptString `json:"SipAuthPassword"`
	// The username to use for SIP authentication.
	SipAuthUsername OptString `json:"SipAuthUsername"`
	// Whether to trim any leading and trailing silence from the recording. Defaults to `trim-silence`.
	Trim OptInitiateCallRequestTrim `json:"Trim"`
}

// GetApplicationSid returns the value of ApplicationSid.
func (s *InitiateCallRequest) GetApplicationSid() string {
	return s.ApplicationSid
}

// GetTo returns the value of To.
func (s *InitiateCallRequest) GetTo() string {
	return s.To
}

// GetFrom returns the value of From.
func (s *InitiateCallRequest) GetFrom() string {
	return s.From
}

// GetURL returns the value of URL.
func (s *InitiateCallRequest) GetURL() OptString {
	return s.URL
}

// GetUrlMethod returns the value of UrlMethod.
func (s *InitiateCallRequest) GetUrlMethod() OptInitiateCallRequestUrlMethod {
	return s.UrlMethod
}

// GetFallbackUrl returns the value of FallbackUrl.
func (s *InitiateCallRequest) GetFallbackUrl() OptString {
	return s.FallbackUrl
}

// GetStatusCallback returns the value of StatusCallback.
func (s *InitiateCallRequest) GetStatusCallback() OptString {
	return s.StatusCallback
}

// GetStatusCallbackMethod returns the value of StatusCallbackMethod.
func (s *InitiateCallRequest) GetStatusCallbackMethod() OptInitiateCallRequestStatusCallbackMethod {
	return s.StatusCallbackMethod
}

// GetStatusCallbackEvent returns the value of StatusCallbackEvent.
func (s *InitiateCallRequest) GetStatusCallbackEvent() OptInitiateCallRequestStatusCallbackEvent {
	return s.StatusCallbackEvent
}

// GetMachineDetection returns the value of MachineDetection.
func (s *InitiateCallRequest) GetMachineDetection() OptInitiateCallRequestMachineDetection {
	return s.MachineDetection
}

// GetDetectionMode returns the value of DetectionMode.
func (s *InitiateCallRequest) GetDetectionMode() OptInitiateCallRequestDetectionMode {
	return s.DetectionMode
}

// GetAsyncAmd returns the value of AsyncAmd.
func (s *InitiateCallRequest) GetAsyncAmd() OptBool {
	return s.AsyncAmd
}

// GetAsyncAmdStatusCallback returns the value of AsyncAmdStatusCallback.
func (s *InitiateCallRequest) GetAsyncAmdStatusCallback() OptString {
	return s.AsyncAmdStatusCallback
}

// GetAsyncAmdStatusCallbackMethod returns the value of AsyncAmdStatusCallbackMethod.
func (s *InitiateCallRequest) GetAsyncAmdStatusCallbackMethod() OptInitiateCallRequestAsyncAmdStatusCallbackMethod {
	return s.AsyncAmdStatusCallbackMethod
}

// GetMachineDetectionTimeout returns the value of MachineDetectionTimeout.
func (s *InitiateCallRequest) GetMachineDetectionTimeout() OptInt {
	return s.MachineDetectionTimeout
}

// GetMachineDetectionSpeechThreshold returns the value of MachineDetectionSpeechThreshold.
func (s *InitiateCallRequest) GetMachineDetectionSpeechThreshold() OptInt {
	return s.MachineDetectionSpeechThreshold
}

// GetMachineDetectionSpeechEndThreshold returns the value of MachineDetectionSpeechEndThreshold.
func (s *InitiateCallRequest) GetMachineDetectionSpeechEndThreshold() OptInt {
	return s.MachineDetectionSpeechEndThreshold
}

// GetMachineDetectionSilenceTimeout returns the value of MachineDetectionSilenceTimeout.
func (s *InitiateCallRequest) GetMachineDetectionSilenceTimeout() OptInt {
	return s.MachineDetectionSilenceTimeout
}

// GetCancelPlaybackOnMachineDetection returns the value of CancelPlaybackOnMachineDetection.
func (s *InitiateCallRequest) GetCancelPlaybackOnMachineDetection() OptBool {
	return s.CancelPlaybackOnMachineDetection
}

// GetCancelPlaybackOnDetectMessageEnd returns the value of CancelPlaybackOnDetectMessageEnd.
func (s *InitiateCallRequest) GetCancelPlaybackOnDetectMessageEnd() OptBool {
	return s.CancelPlaybackOnDetectMessageEnd
}

// GetPreferredCodecs returns the value of PreferredCodecs.
func (s *InitiateCallRequest) GetPreferredCodecs() OptString {
	return s.PreferredCodecs
}

// GetRecord returns the value of Record.
func (s *InitiateCallRequest) GetRecord() OptBool {
	return s.Record
}

// GetRecordingChannels returns the value of RecordingChannels.
func (s *InitiateCallRequest) GetRecordingChannels() OptInitiateCallRequestRecordingChannels {
	return s.RecordingChannels
}

// GetRecordingStatusCallback returns the value of RecordingStatusCallback.
func (s *InitiateCallRequest) GetRecordingStatusCallback() OptString {
	return s.RecordingStatusCallback
}

// GetRecordingStatusCallbackMethod returns the value of RecordingStatusCallbackMethod.
func (s *InitiateCallRequest) GetRecordingStatusCallbackMethod() OptInitiateCallRequestRecordingStatusCallbackMethod {
	return s.RecordingStatusCallbackMethod
}

// GetRecordingStatusCallbackEvent returns the value of RecordingStatusCallbackEvent.
func (s *InitiateCallRequest) GetRecordingStatusCallbackEvent() OptString {
	return s.RecordingStatusCallbackEvent
}

// GetRecordingTimeout returns the value of RecordingTimeout.
func (s *InitiateCallRequest) GetRecordingTimeout() OptInt {
	return s.RecordingTimeout
}

// GetRecordingTrack returns the value of RecordingTrack.
func (s *InitiateCallRequest) GetRecordingTrack() OptInitiateCallRequestRecordingTrack {
	return s.RecordingTrack
}

// GetSipAuthPassword returns the value of SipAuthPassword.
func (s *InitiateCallRequest) GetSipAuthPassword() OptString {
	return s.SipAuthPassword
}

// GetSipAuthUsername returns the value of SipAuthUsername.
func (s *InitiateCallRequest) GetSipAuthUsername() OptString {
	return s.SipAuthUsername
}

// GetTrim returns the value of Trim.
func (s *InitiateCallRequest) GetTrim() OptInitiateCallRequestTrim {
	return s.Trim
}

// SetApplicationSid sets the value of ApplicationSid.
func (s *InitiateCallRequest) SetApplicationSid(val string) {
	s.ApplicationSid = val
}

// SetTo sets the value of To.
func (s *InitiateCallRequest) SetTo(val string) {
	s.To = val
}

// SetFrom sets the value of From.
func (s *InitiateCallRequest) SetFrom(val string) {
	s.From = val
}

// SetURL sets the value of URL.
func (s *InitiateCallRequest) SetURL(val OptString) {
	s.URL = val
}

// SetUrlMethod sets the value of UrlMethod.
func (s *InitiateCallRequest) SetUrlMethod(val OptInitiateCallRequestUrlMethod) {
	s.UrlMethod = val
}

// SetFallbackUrl sets the value of FallbackUrl.
func (s *InitiateCallRequest) SetFallbackUrl(val OptString) {
	s.FallbackUrl = val
}

// SetStatusCallback sets the value of StatusCallback.
func (s *InitiateCallRequest) SetStatusCallback(val OptString) {
	s.StatusCallback = val
}

// SetStatusCallbackMethod sets the value of StatusCallbackMethod.
func (s *InitiateCallRequest) SetStatusCallbackMethod(val OptInitiateCallRequestStatusCallbackMethod) {
	s.StatusCallbackMethod = val
}

// SetStatusCallbackEvent sets the value of StatusCallbackEvent.
func (s *InitiateCallRequest) SetStatusCallbackEvent(val OptInitiateCallRequestStatusCallbackEvent) {
	s.StatusCallbackEvent = val
}

// SetMachineDetection sets the value of MachineDetection.
func (s *InitiateCallRequest) SetMachineDetection(val OptInitiateCallRequestMachineDetection) {
	s.MachineDetection = val
}

// SetDetectionMode sets the value of DetectionMode.
func (s *InitiateCallRequest) SetDetectionMode(val OptInitiateCallRequestDetectionMode) {
	s.DetectionMode = val
}

// SetAsyncAmd sets the value of AsyncAmd.
func (s *InitiateCallRequest) SetAsyncAmd(val OptBool) {
	s.AsyncAmd = val
}

// SetAsyncAmdStatusCallback sets the value of AsyncAmdStatusCallback.
func (s *InitiateCallRequest) SetAsyncAmdStatusCallback(val OptString) {
	s.AsyncAmdStatusCallback = val
}

// SetAsyncAmdStatusCallbackMethod sets the value of AsyncAmdStatusCallbackMethod.
func (s *InitiateCallRequest) SetAsyncAmdStatusCallbackMethod(val OptInitiateCallRequestAsyncAmdStatusCallbackMethod) {
	s.AsyncAmdStatusCallbackMethod = val
}

// SetMachineDetectionTimeout sets the value of MachineDetectionTimeout.
func (s *InitiateCallRequest) SetMachineDetectionTimeout(val OptInt) {
	s.MachineDetectionTimeout = val
}

// SetMachineDetectionSpeechThreshold sets the value of MachineDetectionSpeechThreshold.
func (s *InitiateCallRequest) SetMachineDetectionSpeechThreshold(val OptInt) {
	s.MachineDetectionSpeechThreshold = val
}

// SetMachineDetectionSpeechEndThreshold sets the value of MachineDetectionSpeechEndThreshold.
func (s *InitiateCallRequest) SetMachineDetectionSpeechEndThreshold(val OptInt) {
	s.MachineDetectionSpeechEndThreshold = val
}

// SetMachineDetectionSilenceTimeout sets the value of MachineDetectionSilenceTimeout.
func (s *InitiateCallRequest) SetMachineDetectionSilenceTimeout(val OptInt) {
	s.MachineDetectionSilenceTimeout = val
}

// SetCancelPlaybackOnMachineDetection sets the value of CancelPlaybackOnMachineDetection.
func (s *InitiateCallRequest) SetCancelPlaybackOnMachineDetection(val OptBool) {
	s.CancelPlaybackOnMachineDetection = val
}

// SetCancelPlaybackOnDetectMessageEnd sets the value of CancelPlaybackOnDetectMessageEnd.
func (s *InitiateCallRequest) SetCancelPlaybackOnDetectMessageEnd(val OptBool) {
	s.CancelPlaybackOnDetectMessageEnd = val
}

// SetPreferredCodecs sets the value of PreferredCodecs.
func (s *InitiateCallRequest) SetPreferredCodecs(val OptString) {
	s.PreferredCodecs = val
}

// SetRecord sets the value of Record.
func (s *InitiateCallRequest) SetRecord(val OptBool) {
	s.Record = val
}

// SetRecordingChannels sets the value of RecordingChannels.
func (s *InitiateCallRequest) SetRecordingChannels(val OptInitiateCallRequestRecordingChannels) {
	s.RecordingChannels = val
}

// SetRecordingStatusCallback sets the value of RecordingStatusCallback.
func (s *InitiateCallRequest) SetRecordingStatusCallback(val OptString) {
	s.RecordingStatusCallback = val
}

// SetRecordingStatusCallbackMethod sets the value of RecordingStatusCallbackMethod.
func (s *InitiateCallRequest) SetRecordingStatusCallbackMethod(val OptInitiateCallRequestRecordingStatusCallbackMethod) {
	s.RecordingStatusCallbackMethod = val
}

// SetRecordingStatusCallbackEvent sets the value of RecordingStatusCallbackEvent.
func (s *InitiateCallRequest) SetRecordingStatusCallbackEvent(val OptString) {
	s.RecordingStatusCallbackEvent = val
}

// SetRecordingTimeout sets the value of RecordingTimeout.
func (s *InitiateCallRequest) SetRecordingTimeout(val OptInt) {
	s.RecordingTimeout = val
}

// SetRecordingTrack sets the value of RecordingTrack.
func (s *InitiateCallRequest) SetRecordingTrack(val OptInitiateCallRequestRecordingTrack) {
	s.RecordingTrack = val
}

// SetSipAuthPassword sets the value of SipAuthPassword.
func (s *InitiateCallRequest) SetSipAuthPassword(val OptString) {
	s.SipAuthPassword = val
}

// SetSipAuthUsername sets the value of SipAuthUsername.
func (s *InitiateCallRequest) SetSipAuthUsername(val OptString) {
	s.SipAuthUsername = val
}

// SetTrim sets the value of Trim.
func (s *InitiateCallRequest) SetTrim(val OptInitiateCallRequestTrim) {
	s.Trim = val
}

// HTTP request type used for `AsyncAmdStatusCallback`. The default value is inherited from TeXML
// Application setting.
type InitiateCallRequestAsyncAmdStatusCallbackMethod string

const (
	InitiateCallRequestAsyncAmdStatusCallbackMethodGET  InitiateCallRequestAsyncAmdStatusCallbackMethod = "GET"
	InitiateCallRequestAsyncAmdStatusCallbackMethodPOST InitiateCallRequestAsyncAmdStatusCallbackMethod = "POST"
)

// AllValues returns all InitiateCallRequestAsyncAmdStatusCallbackMethod values.
func (InitiateCallRequestAsyncAmdStatusCallbackMethod) AllValues() []InitiateCallRequestAsyncAmdStatusCallbackMethod {
	return []InitiateCallRequestAsyncAmdStatusCallbackMethod{
		InitiateCallRequestAsyncAmdStatusCallbackMethodGET,
		InitiateCallRequestAsyncAmdStatusCallbackMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InitiateCallRequestAsyncAmdStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case InitiateCallRequestAsyncAmdStatusCallbackMethodGET:
		return []byte(s), nil
	case InitiateCallRequestAsyncAmdStatusCallbackMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InitiateCallRequestAsyncAmdStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch InitiateCallRequestAsyncAmdStatusCallbackMethod(data) {
	case InitiateCallRequestAsyncAmdStatusCallbackMethodGET:
		*s = InitiateCallRequestAsyncAmdStatusCallbackMethodGET
		return nil
	case InitiateCallRequestAsyncAmdStatusCallbackMethodPOST:
		*s = InitiateCallRequestAsyncAmdStatusCallbackMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Allows you to chose between Premium and Standard detections.
type InitiateCallRequestDetectionMode string

const (
	InitiateCallRequestDetectionModePremium InitiateCallRequestDetectionMode = "Premium"
	InitiateCallRequestDetectionModeRegular InitiateCallRequestDetectionMode = "Regular"
)

// AllValues returns all InitiateCallRequestDetectionMode values.
func (InitiateCallRequestDetectionMode) AllValues() []InitiateCallRequestDetectionMode {
	return []InitiateCallRequestDetectionMode{
		InitiateCallRequestDetectionModePremium,
		InitiateCallRequestDetectionModeRegular,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InitiateCallRequestDetectionMode) MarshalText() ([]byte, error) {
	switch s {
	case InitiateCallRequestDetectionModePremium:
		return []byte(s), nil
	case InitiateCallRequestDetectionModeRegular:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InitiateCallRequestDetectionMode) UnmarshalText(data []byte) error {
	switch InitiateCallRequestDetectionMode(data) {
	case InitiateCallRequestDetectionModePremium:
		*s = InitiateCallRequestDetectionModePremium
		return nil
	case InitiateCallRequestDetectionModeRegular:
		*s = InitiateCallRequestDetectionModeRegular
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Enables Answering Machine Detection.
type InitiateCallRequestMachineDetection string

const (
	InitiateCallRequestMachineDetectionEnable           InitiateCallRequestMachineDetection = "Enable"
	InitiateCallRequestMachineDetectionDisable          InitiateCallRequestMachineDetection = "Disable"
	InitiateCallRequestMachineDetectionDetectMessageEnd InitiateCallRequestMachineDetection = "DetectMessageEnd"
)

// AllValues returns all InitiateCallRequestMachineDetection values.
func (InitiateCallRequestMachineDetection) AllValues() []InitiateCallRequestMachineDetection {
	return []InitiateCallRequestMachineDetection{
		InitiateCallRequestMachineDetectionEnable,
		InitiateCallRequestMachineDetectionDisable,
		InitiateCallRequestMachineDetectionDetectMessageEnd,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InitiateCallRequestMachineDetection) MarshalText() ([]byte, error) {
	switch s {
	case InitiateCallRequestMachineDetectionEnable:
		return []byte(s), nil
	case InitiateCallRequestMachineDetectionDisable:
		return []byte(s), nil
	case InitiateCallRequestMachineDetectionDetectMessageEnd:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InitiateCallRequestMachineDetection) UnmarshalText(data []byte) error {
	switch InitiateCallRequestMachineDetection(data) {
	case InitiateCallRequestMachineDetectionEnable:
		*s = InitiateCallRequestMachineDetectionEnable
		return nil
	case InitiateCallRequestMachineDetectionDisable:
		*s = InitiateCallRequestMachineDetectionDisable
		return nil
	case InitiateCallRequestMachineDetectionDetectMessageEnd:
		*s = InitiateCallRequestMachineDetectionDetectMessageEnd
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The number of channels in the final recording. Defaults to `mono`.
type InitiateCallRequestRecordingChannels string

const (
	InitiateCallRequestRecordingChannelsMono InitiateCallRequestRecordingChannels = "mono"
	InitiateCallRequestRecordingChannelsDual InitiateCallRequestRecordingChannels = "dual"
)

// AllValues returns all InitiateCallRequestRecordingChannels values.
func (InitiateCallRequestRecordingChannels) AllValues() []InitiateCallRequestRecordingChannels {
	return []InitiateCallRequestRecordingChannels{
		InitiateCallRequestRecordingChannelsMono,
		InitiateCallRequestRecordingChannelsDual,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InitiateCallRequestRecordingChannels) MarshalText() ([]byte, error) {
	switch s {
	case InitiateCallRequestRecordingChannelsMono:
		return []byte(s), nil
	case InitiateCallRequestRecordingChannelsDual:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InitiateCallRequestRecordingChannels) UnmarshalText(data []byte) error {
	switch InitiateCallRequestRecordingChannels(data) {
	case InitiateCallRequestRecordingChannelsMono:
		*s = InitiateCallRequestRecordingChannelsMono
		return nil
	case InitiateCallRequestRecordingChannelsDual:
		*s = InitiateCallRequestRecordingChannelsDual
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request type used for `RecordingStatusCallback`. Defaults to `POST`.
type InitiateCallRequestRecordingStatusCallbackMethod string

const (
	InitiateCallRequestRecordingStatusCallbackMethodGET  InitiateCallRequestRecordingStatusCallbackMethod = "GET"
	InitiateCallRequestRecordingStatusCallbackMethodPOST InitiateCallRequestRecordingStatusCallbackMethod = "POST"
)

// AllValues returns all InitiateCallRequestRecordingStatusCallbackMethod values.
func (InitiateCallRequestRecordingStatusCallbackMethod) AllValues() []InitiateCallRequestRecordingStatusCallbackMethod {
	return []InitiateCallRequestRecordingStatusCallbackMethod{
		InitiateCallRequestRecordingStatusCallbackMethodGET,
		InitiateCallRequestRecordingStatusCallbackMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InitiateCallRequestRecordingStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case InitiateCallRequestRecordingStatusCallbackMethodGET:
		return []byte(s), nil
	case InitiateCallRequestRecordingStatusCallbackMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InitiateCallRequestRecordingStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch InitiateCallRequestRecordingStatusCallbackMethod(data) {
	case InitiateCallRequestRecordingStatusCallbackMethodGET:
		*s = InitiateCallRequestRecordingStatusCallbackMethodGET
		return nil
	case InitiateCallRequestRecordingStatusCallbackMethodPOST:
		*s = InitiateCallRequestRecordingStatusCallbackMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The audio track to record for the call. The default is `both`.
type InitiateCallRequestRecordingTrack string

const (
	InitiateCallRequestRecordingTrackInbound  InitiateCallRequestRecordingTrack = "inbound"
	InitiateCallRequestRecordingTrackOutbound InitiateCallRequestRecordingTrack = "outbound"
	InitiateCallRequestRecordingTrackBoth     InitiateCallRequestRecordingTrack = "both"
)

// AllValues returns all InitiateCallRequestRecordingTrack values.
func (InitiateCallRequestRecordingTrack) AllValues() []InitiateCallRequestRecordingTrack {
	return []InitiateCallRequestRecordingTrack{
		InitiateCallRequestRecordingTrackInbound,
		InitiateCallRequestRecordingTrackOutbound,
		InitiateCallRequestRecordingTrackBoth,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InitiateCallRequestRecordingTrack) MarshalText() ([]byte, error) {
	switch s {
	case InitiateCallRequestRecordingTrackInbound:
		return []byte(s), nil
	case InitiateCallRequestRecordingTrackOutbound:
		return []byte(s), nil
	case InitiateCallRequestRecordingTrackBoth:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InitiateCallRequestRecordingTrack) UnmarshalText(data []byte) error {
	switch InitiateCallRequestRecordingTrack(data) {
	case InitiateCallRequestRecordingTrackInbound:
		*s = InitiateCallRequestRecordingTrackInbound
		return nil
	case InitiateCallRequestRecordingTrackOutbound:
		*s = InitiateCallRequestRecordingTrackOutbound
		return nil
	case InitiateCallRequestRecordingTrackBoth:
		*s = InitiateCallRequestRecordingTrackBoth
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The call events for which Telnyx should send a webhook. Multiple events can be defined when
// separated by a space.
type InitiateCallRequestStatusCallbackEvent string

const (
	InitiateCallRequestStatusCallbackEventInitiated InitiateCallRequestStatusCallbackEvent = "initiated"
	InitiateCallRequestStatusCallbackEventRinging   InitiateCallRequestStatusCallbackEvent = "ringing"
	InitiateCallRequestStatusCallbackEventAnswered  InitiateCallRequestStatusCallbackEvent = "answered"
	InitiateCallRequestStatusCallbackEventCompleted InitiateCallRequestStatusCallbackEvent = "completed"
)

// AllValues returns all InitiateCallRequestStatusCallbackEvent values.
func (InitiateCallRequestStatusCallbackEvent) AllValues() []InitiateCallRequestStatusCallbackEvent {
	return []InitiateCallRequestStatusCallbackEvent{
		InitiateCallRequestStatusCallbackEventInitiated,
		InitiateCallRequestStatusCallbackEventRinging,
		InitiateCallRequestStatusCallbackEventAnswered,
		InitiateCallRequestStatusCallbackEventCompleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InitiateCallRequestStatusCallbackEvent) MarshalText() ([]byte, error) {
	switch s {
	case InitiateCallRequestStatusCallbackEventInitiated:
		return []byte(s), nil
	case InitiateCallRequestStatusCallbackEventRinging:
		return []byte(s), nil
	case InitiateCallRequestStatusCallbackEventAnswered:
		return []byte(s), nil
	case InitiateCallRequestStatusCallbackEventCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InitiateCallRequestStatusCallbackEvent) UnmarshalText(data []byte) error {
	switch InitiateCallRequestStatusCallbackEvent(data) {
	case InitiateCallRequestStatusCallbackEventInitiated:
		*s = InitiateCallRequestStatusCallbackEventInitiated
		return nil
	case InitiateCallRequestStatusCallbackEventRinging:
		*s = InitiateCallRequestStatusCallbackEventRinging
		return nil
	case InitiateCallRequestStatusCallbackEventAnswered:
		*s = InitiateCallRequestStatusCallbackEventAnswered
		return nil
	case InitiateCallRequestStatusCallbackEventCompleted:
		*s = InitiateCallRequestStatusCallbackEventCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request type used for `StatusCallback`.
type InitiateCallRequestStatusCallbackMethod string

const (
	InitiateCallRequestStatusCallbackMethodGET  InitiateCallRequestStatusCallbackMethod = "GET"
	InitiateCallRequestStatusCallbackMethodPOST InitiateCallRequestStatusCallbackMethod = "POST"
)

// AllValues returns all InitiateCallRequestStatusCallbackMethod values.
func (InitiateCallRequestStatusCallbackMethod) AllValues() []InitiateCallRequestStatusCallbackMethod {
	return []InitiateCallRequestStatusCallbackMethod{
		InitiateCallRequestStatusCallbackMethodGET,
		InitiateCallRequestStatusCallbackMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InitiateCallRequestStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case InitiateCallRequestStatusCallbackMethodGET:
		return []byte(s), nil
	case InitiateCallRequestStatusCallbackMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InitiateCallRequestStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch InitiateCallRequestStatusCallbackMethod(data) {
	case InitiateCallRequestStatusCallbackMethodGET:
		*s = InitiateCallRequestStatusCallbackMethodGET
		return nil
	case InitiateCallRequestStatusCallbackMethodPOST:
		*s = InitiateCallRequestStatusCallbackMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Whether to trim any leading and trailing silence from the recording. Defaults to `trim-silence`.
type InitiateCallRequestTrim string

const (
	InitiateCallRequestTrimTrimSilence InitiateCallRequestTrim = "trim-silence"
	InitiateCallRequestTrimDoNotTrim   InitiateCallRequestTrim = "do-not-trim"
)

// AllValues returns all InitiateCallRequestTrim values.
func (InitiateCallRequestTrim) AllValues() []InitiateCallRequestTrim {
	return []InitiateCallRequestTrim{
		InitiateCallRequestTrimTrimSilence,
		InitiateCallRequestTrimDoNotTrim,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InitiateCallRequestTrim) MarshalText() ([]byte, error) {
	switch s {
	case InitiateCallRequestTrimTrimSilence:
		return []byte(s), nil
	case InitiateCallRequestTrimDoNotTrim:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InitiateCallRequestTrim) UnmarshalText(data []byte) error {
	switch InitiateCallRequestTrim(data) {
	case InitiateCallRequestTrimTrimSilence:
		*s = InitiateCallRequestTrimTrimSilence
		return nil
	case InitiateCallRequestTrimDoNotTrim:
		*s = InitiateCallRequestTrimDoNotTrim
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request type used for `Url`. The default value is inherited from TeXML Application setting.
type InitiateCallRequestUrlMethod string

const (
	InitiateCallRequestUrlMethodGET  InitiateCallRequestUrlMethod = "GET"
	InitiateCallRequestUrlMethodPOST InitiateCallRequestUrlMethod = "POST"
)

// AllValues returns all InitiateCallRequestUrlMethod values.
func (InitiateCallRequestUrlMethod) AllValues() []InitiateCallRequestUrlMethod {
	return []InitiateCallRequestUrlMethod{
		InitiateCallRequestUrlMethodGET,
		InitiateCallRequestUrlMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InitiateCallRequestUrlMethod) MarshalText() ([]byte, error) {
	switch s {
	case InitiateCallRequestUrlMethodGET:
		return []byte(s), nil
	case InitiateCallRequestUrlMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InitiateCallRequestUrlMethod) UnmarshalText(data []byte) error {
	switch InitiateCallRequestUrlMethod(data) {
	case InitiateCallRequestUrlMethodGET:
		*s = InitiateCallRequestUrlMethodGET
		return nil
	case InitiateCallRequestUrlMethodPOST:
		*s = InitiateCallRequestUrlMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type InitiateCallResponse struct {
	Data OptInitiateCallResult `json:"data"`
}

// GetData returns the value of Data.
func (s *InitiateCallResponse) GetData() OptInitiateCallResult {
	return s.Data
}

// SetData sets the value of Data.
func (s *InitiateCallResponse) SetData(val OptInitiateCallResult) {
	s.Data = val
}

// Ref: #/components/schemas/InitiateCallResult
type InitiateCallResult struct {
	From   OptString `json:"from"`
	To     OptString `json:"to"`
	Status OptString `json:"status"`
}

// GetFrom returns the value of From.
func (s *InitiateCallResult) GetFrom() OptString {
	return s.From
}

// GetTo returns the value of To.
func (s *InitiateCallResult) GetTo() OptString {
	return s.To
}

// GetStatus returns the value of Status.
func (s *InitiateCallResult) GetStatus() OptString {
	return s.Status
}

// SetFrom sets the value of From.
func (s *InitiateCallResult) SetFrom(val OptString) {
	s.From = val
}

// SetTo sets the value of To.
func (s *InitiateCallResult) SetTo(val OptString) {
	s.To = val
}

// SetStatus sets the value of Status.
func (s *InitiateCallResult) SetStatus(val OptString) {
	s.Status = val
}

type IntId int64

// Ref: #/components/schemas/LeaveQueueRequest
type LeaveQueueRequest struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetClientState returns the value of ClientState.
func (s *LeaveQueueRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *LeaveQueueRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetClientState sets the value of ClientState.
func (s *LeaveQueueRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *LeaveQueueRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// ListCallControlApplicationsBadRequest is response for ListCallControlApplications operation.
type ListCallControlApplicationsBadRequest struct{}

func (*ListCallControlApplicationsBadRequest) listCallControlApplicationsRes() {}

// ListCallControlApplicationsNotFound is response for ListCallControlApplications operation.
type ListCallControlApplicationsNotFound struct{}

func (*ListCallControlApplicationsNotFound) listCallControlApplicationsRes() {}

type ListCallControlApplicationsResponse struct {
	Data []CallControlApplication `json:"data"`
	Meta OptPaginationMeta        `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListCallControlApplicationsResponse) GetData() []CallControlApplication {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListCallControlApplicationsResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListCallControlApplicationsResponse) SetData(val []CallControlApplication) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListCallControlApplicationsResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListCallControlApplicationsResponse) listCallControlApplicationsRes() {}

type ListQueueCallsResponse struct {
	Data []QueueCall       `json:"data"`
	Meta OptPaginationMeta `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListQueueCallsResponse) GetData() []QueueCall {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListQueueCallsResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListQueueCallsResponse) SetData(val []QueueCall) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListQueueCallsResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListQueueCallsResponse) listQueueCallsRes() {}

type ListRecordingTranscriptionsResponse struct {
	Data []RecordingTranscription `json:"data"`
	Meta OptCursorPaginationMeta  `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListRecordingTranscriptionsResponse) GetData() []RecordingTranscription {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListRecordingTranscriptionsResponse) GetMeta() OptCursorPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListRecordingTranscriptionsResponse) SetData(val []RecordingTranscription) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListRecordingTranscriptionsResponse) SetMeta(val OptCursorPaginationMeta) {
	s.Meta = val
}

func (*ListRecordingTranscriptionsResponse) getRecordingTranscriptionsRes() {}

type ListRoomRecordingsResponse struct {
	Data []RoomRecording   `json:"data"`
	Meta OptPaginationMeta `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListRoomRecordingsResponse) GetData() []RoomRecording {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListRoomRecordingsResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListRoomRecordingsResponse) SetData(val []RoomRecording) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListRoomRecordingsResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

// ListTagsBadRequest is response for ListTags operation.
type ListTagsBadRequest struct{}

func (*ListTagsBadRequest) listTagsRes() {}

// ListTagsNotFound is response for ListTags operation.
type ListTagsNotFound struct{}

func (*ListTagsNotFound) listTagsRes() {}

type ListTagsResponse struct {
	Data []ListTagsResponseDataItem `json:"data"`
	Meta OptPaginationMeta          `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListTagsResponse) GetData() []ListTagsResponseDataItem {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListTagsResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListTagsResponse) SetData(val []ListTagsResponseDataItem) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListTagsResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListTagsResponse) listTagsRes() {}

type ListTagsResponseDataItem struct {
	Tag    OptString `json:"tag"`
	Amount OptInt    `json:"amount"`
}

// GetTag returns the value of Tag.
func (s *ListTagsResponseDataItem) GetTag() OptString {
	return s.Tag
}

// GetAmount returns the value of Amount.
func (s *ListTagsResponseDataItem) GetAmount() OptInt {
	return s.Amount
}

// SetTag sets the value of Tag.
func (s *ListTagsResponseDataItem) SetTag(val OptString) {
	s.Tag = val
}

// SetAmount sets the value of Amount.
func (s *ListTagsResponseDataItem) SetAmount(val OptInt) {
	s.Amount = val
}

// ListTagsUnauthorized is response for ListTags operation.
type ListTagsUnauthorized struct{}

func (*ListTagsUnauthorized) listTagsRes() {}

// Ref: #/components/schemas/ListVerificationsResponse
type ListVerificationsResponse struct {
	Data []Verification `json:"data"`
	Meta Meta           `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListVerificationsResponse) GetData() []Verification {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListVerificationsResponse) GetMeta() Meta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListVerificationsResponse) SetData(val []Verification) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListVerificationsResponse) SetMeta(val Meta) {
	s.Meta = val
}

func (*ListVerificationsResponse) listVerificationsRes() {}

type ListVerifiedCallsDisplayProfilesResponse struct {
	Data []VerifiedCallsDisplayProfile `json:"data"`
	Meta OptPaginationMeta             `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListVerifiedCallsDisplayProfilesResponse) GetData() []VerifiedCallsDisplayProfile {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListVerifiedCallsDisplayProfilesResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListVerifiedCallsDisplayProfilesResponse) SetData(val []VerifiedCallsDisplayProfile) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListVerifiedCallsDisplayProfilesResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListVerifiedCallsDisplayProfilesResponse) listVerifiedCallDisplayProfilesRes() {}

// A paginated list of Verified Numbers.
// Ref: #/components/schemas/ListVerifiedNumbersResponse
type ListVerifiedNumbersResponse struct {
	Data []VerifiedNumberResponse `json:"data"`
	Meta Meta                     `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListVerifiedNumbersResponse) GetData() []VerifiedNumberResponse {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListVerifiedNumbersResponse) GetMeta() Meta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListVerifiedNumbersResponse) SetData(val []VerifiedNumberResponse) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListVerifiedNumbersResponse) SetMeta(val Meta) {
	s.Meta = val
}

func (*ListVerifiedNumbersResponse) listVerifiedNumbersRes() {}

// A list of Verify profile message templates.
// Ref: #/components/schemas/ListVerifyProfileMessageTemplateResponse
type ListVerifyProfileMessageTemplateResponse struct {
	Data []VerifyProfileMessageTemplateResponse `json:"data"`
}

// GetData returns the value of Data.
func (s *ListVerifyProfileMessageTemplateResponse) GetData() []VerifyProfileMessageTemplateResponse {
	return s.Data
}

// SetData sets the value of Data.
func (s *ListVerifyProfileMessageTemplateResponse) SetData(val []VerifyProfileMessageTemplateResponse) {
	s.Data = val
}

// A paginated list of Verify profiles.
// Ref: #/components/schemas/ListVerifyProfilesResponse
type ListVerifyProfilesResponse struct {
	Data []VerifyProfileResponse `json:"data"`
	Meta Meta                    `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListVerifyProfilesResponse) GetData() []VerifyProfileResponse {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListVerifyProfilesResponse) GetMeta() Meta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListVerifyProfilesResponse) SetData(val []VerifyProfileResponse) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListVerifyProfilesResponse) SetMeta(val Meta) {
	s.Meta = val
}

func (*ListVerifyProfilesResponse) listProfilesRes() {}

type LogoURL string

// Ref: #/components/schemas/Loopcount
// Loopcount represents sum type.
type Loopcount struct {
	Type   LoopcountType // switch on this field
	String string
	Int    int
}

// LoopcountType is oneOf type of Loopcount.
type LoopcountType string

// Possible values for LoopcountType.
const (
	StringLoopcount LoopcountType = "string"
	IntLoopcount    LoopcountType = "int"
)

// IsString reports whether Loopcount is string.
func (s Loopcount) IsString() bool { return s.Type == StringLoopcount }

// IsInt reports whether Loopcount is int.
func (s Loopcount) IsInt() bool { return s.Type == IntLoopcount }

// SetString sets Loopcount to string.
func (s *Loopcount) SetString(v string) {
	s.Type = StringLoopcount
	s.String = v
}

// GetString returns string and true boolean if Loopcount is string.
func (s Loopcount) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringLoopcount returns new Loopcount from string.
func NewStringLoopcount(v string) Loopcount {
	var s Loopcount
	s.SetString(v)
	return s
}

// SetInt sets Loopcount to int.
func (s *Loopcount) SetInt(v int) {
	s.Type = IntLoopcount
	s.Int = v
}

// GetInt returns int and true boolean if Loopcount is int.
func (s Loopcount) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntLoopcount returns new Loopcount from int.
func NewIntLoopcount(v int) Loopcount {
	var s Loopcount
	s.SetInt(v)
	return s
}

// Ref: #/components/schemas/Meta
type Meta struct {
	TotalPages   OptInt `json:"total_pages"`
	TotalResults OptInt `json:"total_results"`
	PageNumber   OptInt `json:"page_number"`
	PageSize     OptInt `json:"page_size"`
}

// GetTotalPages returns the value of TotalPages.
func (s *Meta) GetTotalPages() OptInt {
	return s.TotalPages
}

// GetTotalResults returns the value of TotalResults.
func (s *Meta) GetTotalResults() OptInt {
	return s.TotalResults
}

// GetPageNumber returns the value of PageNumber.
func (s *Meta) GetPageNumber() OptInt {
	return s.PageNumber
}

// GetPageSize returns the value of PageSize.
func (s *Meta) GetPageSize() OptInt {
	return s.PageSize
}

// SetTotalPages sets the value of TotalPages.
func (s *Meta) SetTotalPages(val OptInt) {
	s.TotalPages = val
}

// SetTotalResults sets the value of TotalResults.
func (s *Meta) SetTotalResults(val OptInt) {
	s.TotalResults = val
}

// SetPageNumber sets the value of PageNumber.
func (s *Meta) SetPageNumber(val OptInt) {
	s.PageNumber = val
}

// SetPageSize sets the value of PageSize.
func (s *Meta) SetPageSize(val OptInt) {
	s.PageSize = val
}

// Ref: #/components/schemas/MetaResponse
type MetaResponse struct {
	// This should likely be a URL to the relevant documentation.
	URL OptString `json:"url"`
}

// GetURL returns the value of URL.
func (s *MetaResponse) GetURL() OptString {
	return s.URL
}

// SetURL sets the value of URL.
func (s *MetaResponse) SetURL(val OptString) {
	s.URL = val
}

type Name string

// Ref: #/components/schemas/NewParticipantResource
type NewParticipantResource struct {
	// The id of the account the resource belongs to.
	AccountSid OptString `json:"account_sid"`
	// The identifier of this participant's call.
	CallSid OptString `json:"call_sid"`
	// Whether the participant is coaching another call.
	Coaching OptBool `json:"coaching"`
	// The identifier of the coached participant's call.
	CoachingCallSid OptString `json:"coaching_call_sid"`
	// Whether the conference ends when the participant leaves.
	EndConferenceOnExit OptBool `json:"end_conference_on_exit"`
	// Whether the participant is on hold.
	Hold OptBool `json:"hold"`
	// Whether the participant is muted.
	Muted OptBool `json:"muted"`
	// The status of the participant's call in the conference.
	Status OptNewParticipantResourceStatus `json:"status"`
	// The relative URI for this participant.
	URI OptString `json:"uri"`
}

// GetAccountSid returns the value of AccountSid.
func (s *NewParticipantResource) GetAccountSid() OptString {
	return s.AccountSid
}

// GetCallSid returns the value of CallSid.
func (s *NewParticipantResource) GetCallSid() OptString {
	return s.CallSid
}

// GetCoaching returns the value of Coaching.
func (s *NewParticipantResource) GetCoaching() OptBool {
	return s.Coaching
}

// GetCoachingCallSid returns the value of CoachingCallSid.
func (s *NewParticipantResource) GetCoachingCallSid() OptString {
	return s.CoachingCallSid
}

// GetEndConferenceOnExit returns the value of EndConferenceOnExit.
func (s *NewParticipantResource) GetEndConferenceOnExit() OptBool {
	return s.EndConferenceOnExit
}

// GetHold returns the value of Hold.
func (s *NewParticipantResource) GetHold() OptBool {
	return s.Hold
}

// GetMuted returns the value of Muted.
func (s *NewParticipantResource) GetMuted() OptBool {
	return s.Muted
}

// GetStatus returns the value of Status.
func (s *NewParticipantResource) GetStatus() OptNewParticipantResourceStatus {
	return s.Status
}

// GetURI returns the value of URI.
func (s *NewParticipantResource) GetURI() OptString {
	return s.URI
}

// SetAccountSid sets the value of AccountSid.
func (s *NewParticipantResource) SetAccountSid(val OptString) {
	s.AccountSid = val
}

// SetCallSid sets the value of CallSid.
func (s *NewParticipantResource) SetCallSid(val OptString) {
	s.CallSid = val
}

// SetCoaching sets the value of Coaching.
func (s *NewParticipantResource) SetCoaching(val OptBool) {
	s.Coaching = val
}

// SetCoachingCallSid sets the value of CoachingCallSid.
func (s *NewParticipantResource) SetCoachingCallSid(val OptString) {
	s.CoachingCallSid = val
}

// SetEndConferenceOnExit sets the value of EndConferenceOnExit.
func (s *NewParticipantResource) SetEndConferenceOnExit(val OptBool) {
	s.EndConferenceOnExit = val
}

// SetHold sets the value of Hold.
func (s *NewParticipantResource) SetHold(val OptBool) {
	s.Hold = val
}

// SetMuted sets the value of Muted.
func (s *NewParticipantResource) SetMuted(val OptBool) {
	s.Muted = val
}

// SetStatus sets the value of Status.
func (s *NewParticipantResource) SetStatus(val OptNewParticipantResourceStatus) {
	s.Status = val
}

// SetURI sets the value of URI.
func (s *NewParticipantResource) SetURI(val OptString) {
	s.URI = val
}

// The status of the participant's call in the conference.
type NewParticipantResourceStatus string

const (
	NewParticipantResourceStatusConnecting NewParticipantResourceStatus = "connecting"
	NewParticipantResourceStatusConnected  NewParticipantResourceStatus = "connected"
	NewParticipantResourceStatusCompleted  NewParticipantResourceStatus = "completed"
)

// AllValues returns all NewParticipantResourceStatus values.
func (NewParticipantResourceStatus) AllValues() []NewParticipantResourceStatus {
	return []NewParticipantResourceStatus{
		NewParticipantResourceStatusConnecting,
		NewParticipantResourceStatusConnected,
		NewParticipantResourceStatusCompleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NewParticipantResourceStatus) MarshalText() ([]byte, error) {
	switch s {
	case NewParticipantResourceStatusConnecting:
		return []byte(s), nil
	case NewParticipantResourceStatusConnected:
		return []byte(s), nil
	case NewParticipantResourceStatusCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NewParticipantResourceStatus) UnmarshalText(data []byte) error {
	switch NewParticipantResourceStatus(data) {
	case NewParticipantResourceStatusConnecting:
		*s = NewParticipantResourceStatusConnecting
		return nil
	case NewParticipantResourceStatusConnected:
		*s = NewParticipantResourceStatusConnected
		return nil
	case NewParticipantResourceStatusCompleted:
		*s = NewParticipantResourceStatusCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The direction of the audio stream to be noise suppressed.
// Ref: #/components/schemas/NoiseSuppressionDirection
type NoiseSuppressionDirection string

const (
	NoiseSuppressionDirectionInbound  NoiseSuppressionDirection = "inbound"
	NoiseSuppressionDirectionOutbound NoiseSuppressionDirection = "outbound"
	NoiseSuppressionDirectionBoth     NoiseSuppressionDirection = "both"
)

// AllValues returns all NoiseSuppressionDirection values.
func (NoiseSuppressionDirection) AllValues() []NoiseSuppressionDirection {
	return []NoiseSuppressionDirection{
		NoiseSuppressionDirectionInbound,
		NoiseSuppressionDirectionOutbound,
		NoiseSuppressionDirectionBoth,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NoiseSuppressionDirection) MarshalText() ([]byte, error) {
	switch s {
	case NoiseSuppressionDirectionInbound:
		return []byte(s), nil
	case NoiseSuppressionDirectionOutbound:
		return []byte(s), nil
	case NoiseSuppressionDirectionBoth:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NoiseSuppressionDirection) UnmarshalText(data []byte) error {
	switch NoiseSuppressionDirection(data) {
	case NoiseSuppressionDirectionInbound:
		*s = NoiseSuppressionDirectionInbound
		return nil
	case NoiseSuppressionDirectionOutbound:
		*s = NoiseSuppressionDirectionOutbound
		return nil
	case NoiseSuppressionDirectionBoth:
		*s = NoiseSuppressionDirectionBoth
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/NoiseSuppressionStart
type NoiseSuppressionStart struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString                    `json:"command_id"`
	Direction OptNoiseSuppressionDirection `json:"direction"`
}

// GetClientState returns the value of ClientState.
func (s *NoiseSuppressionStart) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *NoiseSuppressionStart) GetCommandID() OptString {
	return s.CommandID
}

// GetDirection returns the value of Direction.
func (s *NoiseSuppressionStart) GetDirection() OptNoiseSuppressionDirection {
	return s.Direction
}

// SetClientState sets the value of ClientState.
func (s *NoiseSuppressionStart) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *NoiseSuppressionStart) SetCommandID(val OptString) {
	s.CommandID = val
}

// SetDirection sets the value of Direction.
func (s *NoiseSuppressionStart) SetDirection(val OptNoiseSuppressionDirection) {
	s.Direction = val
}

// Ref: #/components/schemas/NoiseSuppressionStop
type NoiseSuppressionStop struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetClientState returns the value of ClientState.
func (s *NoiseSuppressionStop) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *NoiseSuppressionStop) GetCommandID() OptString {
	return s.CommandID
}

// SetClientState sets the value of ClientState.
func (s *NoiseSuppressionStop) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *NoiseSuppressionStop) SetCommandID(val OptString) {
	s.CommandID = val
}

// NewOptAccountSid returns new OptAccountSid with value set to v.
func NewOptAccountSid(v AccountSid) OptAccountSid {
	return OptAccountSid{
		Value: v,
		Set:   true,
	}
}

// OptAccountSid is optional AccountSid.
type OptAccountSid struct {
	Value AccountSid
	Set   bool
}

// IsSet returns true if OptAccountSid was set.
func (o OptAccountSid) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountSid) Reset() {
	var v AccountSid
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountSid) SetTo(v AccountSid) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountSid) Get() (v AccountSid, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountSid) Or(d AccountSid) AccountSid {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAnchorsiteOverride returns new OptAnchorsiteOverride with value set to v.
func NewOptAnchorsiteOverride(v AnchorsiteOverride) OptAnchorsiteOverride {
	return OptAnchorsiteOverride{
		Value: v,
		Set:   true,
	}
}

// OptAnchorsiteOverride is optional AnchorsiteOverride.
type OptAnchorsiteOverride struct {
	Value AnchorsiteOverride
	Set   bool
}

// IsSet returns true if OptAnchorsiteOverride was set.
func (o OptAnchorsiteOverride) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnchorsiteOverride) Reset() {
	var v AnchorsiteOverride
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnchorsiteOverride) SetTo(v AnchorsiteOverride) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnchorsiteOverride) Get() (v AnchorsiteOverride, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnchorsiteOverride) Or(d AnchorsiteOverride) AnchorsiteOverride {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAnswerRequestPreferredCodecs returns new OptAnswerRequestPreferredCodecs with value set to v.
func NewOptAnswerRequestPreferredCodecs(v AnswerRequestPreferredCodecs) OptAnswerRequestPreferredCodecs {
	return OptAnswerRequestPreferredCodecs{
		Value: v,
		Set:   true,
	}
}

// OptAnswerRequestPreferredCodecs is optional AnswerRequestPreferredCodecs.
type OptAnswerRequestPreferredCodecs struct {
	Value AnswerRequestPreferredCodecs
	Set   bool
}

// IsSet returns true if OptAnswerRequestPreferredCodecs was set.
func (o OptAnswerRequestPreferredCodecs) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnswerRequestPreferredCodecs) Reset() {
	var v AnswerRequestPreferredCodecs
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnswerRequestPreferredCodecs) SetTo(v AnswerRequestPreferredCodecs) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnswerRequestPreferredCodecs) Get() (v AnswerRequestPreferredCodecs, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnswerRequestPreferredCodecs) Or(d AnswerRequestPreferredCodecs) AnswerRequestPreferredCodecs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAnswerRequestStreamTrack returns new OptAnswerRequestStreamTrack with value set to v.
func NewOptAnswerRequestStreamTrack(v AnswerRequestStreamTrack) OptAnswerRequestStreamTrack {
	return OptAnswerRequestStreamTrack{
		Value: v,
		Set:   true,
	}
}

// OptAnswerRequestStreamTrack is optional AnswerRequestStreamTrack.
type OptAnswerRequestStreamTrack struct {
	Value AnswerRequestStreamTrack
	Set   bool
}

// IsSet returns true if OptAnswerRequestStreamTrack was set.
func (o OptAnswerRequestStreamTrack) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnswerRequestStreamTrack) Reset() {
	var v AnswerRequestStreamTrack
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnswerRequestStreamTrack) SetTo(v AnswerRequestStreamTrack) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnswerRequestStreamTrack) Get() (v AnswerRequestStreamTrack, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnswerRequestStreamTrack) Or(d AnswerRequestStreamTrack) AnswerRequestStreamTrack {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAnswerRequestWebhookURLMethod returns new OptAnswerRequestWebhookURLMethod with value set to v.
func NewOptAnswerRequestWebhookURLMethod(v AnswerRequestWebhookURLMethod) OptAnswerRequestWebhookURLMethod {
	return OptAnswerRequestWebhookURLMethod{
		Value: v,
		Set:   true,
	}
}

// OptAnswerRequestWebhookURLMethod is optional AnswerRequestWebhookURLMethod.
type OptAnswerRequestWebhookURLMethod struct {
	Value AnswerRequestWebhookURLMethod
	Set   bool
}

// IsSet returns true if OptAnswerRequestWebhookURLMethod was set.
func (o OptAnswerRequestWebhookURLMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnswerRequestWebhookURLMethod) Reset() {
	var v AnswerRequestWebhookURLMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnswerRequestWebhookURLMethod) SetTo(v AnswerRequestWebhookURLMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnswerRequestWebhookURLMethod) Get() (v AnswerRequestWebhookURLMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnswerRequestWebhookURLMethod) Or(d AnswerRequestWebhookURLMethod) AnswerRequestWebhookURLMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptApplicationName returns new OptApplicationName with value set to v.
func NewOptApplicationName(v ApplicationName) OptApplicationName {
	return OptApplicationName{
		Value: v,
		Set:   true,
	}
}

// OptApplicationName is optional ApplicationName.
type OptApplicationName struct {
	Value ApplicationName
	Set   bool
}

// IsSet returns true if OptApplicationName was set.
func (o OptApplicationName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptApplicationName) Reset() {
	var v ApplicationName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptApplicationName) SetTo(v ApplicationName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptApplicationName) Get() (v ApplicationName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptApplicationName) Or(d ApplicationName) ApplicationName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAttemptStatus returns new OptAttemptStatus with value set to v.
func NewOptAttemptStatus(v AttemptStatus) OptAttemptStatus {
	return OptAttemptStatus{
		Value: v,
		Set:   true,
	}
}

// OptAttemptStatus is optional AttemptStatus.
type OptAttemptStatus struct {
	Value AttemptStatus
	Set   bool
}

// IsSet returns true if OptAttemptStatus was set.
func (o OptAttemptStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAttemptStatus) Reset() {
	var v AttemptStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAttemptStatus) SetTo(v AttemptStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAttemptStatus) Get() (v AttemptStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAttemptStatus) Or(d AttemptStatus) AttemptStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAudioTranscriptionRequestMultipartResponseFormat returns new OptAudioTranscriptionRequestMultipartResponseFormat with value set to v.
func NewOptAudioTranscriptionRequestMultipartResponseFormat(v AudioTranscriptionRequestMultipartResponseFormat) OptAudioTranscriptionRequestMultipartResponseFormat {
	return OptAudioTranscriptionRequestMultipartResponseFormat{
		Value: v,
		Set:   true,
	}
}

// OptAudioTranscriptionRequestMultipartResponseFormat is optional AudioTranscriptionRequestMultipartResponseFormat.
type OptAudioTranscriptionRequestMultipartResponseFormat struct {
	Value AudioTranscriptionRequestMultipartResponseFormat
	Set   bool
}

// IsSet returns true if OptAudioTranscriptionRequestMultipartResponseFormat was set.
func (o OptAudioTranscriptionRequestMultipartResponseFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAudioTranscriptionRequestMultipartResponseFormat) Reset() {
	var v AudioTranscriptionRequestMultipartResponseFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAudioTranscriptionRequestMultipartResponseFormat) SetTo(v AudioTranscriptionRequestMultipartResponseFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAudioTranscriptionRequestMultipartResponseFormat) Get() (v AudioTranscriptionRequestMultipartResponseFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAudioTranscriptionRequestMultipartResponseFormat) Or(d AudioTranscriptionRequestMultipartResponseFormat) AudioTranscriptionRequestMultipartResponseFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAudioTranscriptionRequestMultipartTimestampGranularities returns new OptAudioTranscriptionRequestMultipartTimestampGranularities with value set to v.
func NewOptAudioTranscriptionRequestMultipartTimestampGranularities(v AudioTranscriptionRequestMultipartTimestampGranularities) OptAudioTranscriptionRequestMultipartTimestampGranularities {
	return OptAudioTranscriptionRequestMultipartTimestampGranularities{
		Value: v,
		Set:   true,
	}
}

// OptAudioTranscriptionRequestMultipartTimestampGranularities is optional AudioTranscriptionRequestMultipartTimestampGranularities.
type OptAudioTranscriptionRequestMultipartTimestampGranularities struct {
	Value AudioTranscriptionRequestMultipartTimestampGranularities
	Set   bool
}

// IsSet returns true if OptAudioTranscriptionRequestMultipartTimestampGranularities was set.
func (o OptAudioTranscriptionRequestMultipartTimestampGranularities) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAudioTranscriptionRequestMultipartTimestampGranularities) Reset() {
	var v AudioTranscriptionRequestMultipartTimestampGranularities
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAudioTranscriptionRequestMultipartTimestampGranularities) SetTo(v AudioTranscriptionRequestMultipartTimestampGranularities) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAudioTranscriptionRequestMultipartTimestampGranularities) Get() (v AudioTranscriptionRequestMultipartTimestampGranularities, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAudioTranscriptionRequestMultipartTimestampGranularities) Or(d AudioTranscriptionRequestMultipartTimestampGranularities) AudioTranscriptionRequestMultipartTimestampGranularities {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAwsAccessKeyId returns new OptAwsAccessKeyId with value set to v.
func NewOptAwsAccessKeyId(v AwsAccessKeyId) OptAwsAccessKeyId {
	return OptAwsAccessKeyId{
		Value: v,
		Set:   true,
	}
}

// OptAwsAccessKeyId is optional AwsAccessKeyId.
type OptAwsAccessKeyId struct {
	Value AwsAccessKeyId
	Set   bool
}

// IsSet returns true if OptAwsAccessKeyId was set.
func (o OptAwsAccessKeyId) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAwsAccessKeyId) Reset() {
	var v AwsAccessKeyId
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAwsAccessKeyId) SetTo(v AwsAccessKeyId) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAwsAccessKeyId) Get() (v AwsAccessKeyId, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAwsAccessKeyId) Or(d AwsAccessKeyId) AwsAccessKeyId {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAwsSecretAccessKey returns new OptAwsSecretAccessKey with value set to v.
func NewOptAwsSecretAccessKey(v AwsSecretAccessKey) OptAwsSecretAccessKey {
	return OptAwsSecretAccessKey{
		Value: v,
		Set:   true,
	}
}

// OptAwsSecretAccessKey is optional AwsSecretAccessKey.
type OptAwsSecretAccessKey struct {
	Value AwsSecretAccessKey
	Set   bool
}

// IsSet returns true if OptAwsSecretAccessKey was set.
func (o OptAwsSecretAccessKey) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAwsSecretAccessKey) Reset() {
	var v AwsSecretAccessKey
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAwsSecretAccessKey) SetTo(v AwsSecretAccessKey) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAwsSecretAccessKey) Get() (v AwsSecretAccessKey, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAwsSecretAccessKey) Or(d AwsSecretAccessKey) AwsSecretAccessKey {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAzureAccountKey returns new OptAzureAccountKey with value set to v.
func NewOptAzureAccountKey(v AzureAccountKey) OptAzureAccountKey {
	return OptAzureAccountKey{
		Value: v,
		Set:   true,
	}
}

// OptAzureAccountKey is optional AzureAccountKey.
type OptAzureAccountKey struct {
	Value AzureAccountKey
	Set   bool
}

// IsSet returns true if OptAzureAccountKey was set.
func (o OptAzureAccountKey) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAzureAccountKey) Reset() {
	var v AzureAccountKey
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAzureAccountKey) SetTo(v AzureAccountKey) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAzureAccountKey) Get() (v AzureAccountKey, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAzureAccountKey) Or(d AzureAccountKey) AzureAccountKey {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAzureAccountName returns new OptAzureAccountName with value set to v.
func NewOptAzureAccountName(v AzureAccountName) OptAzureAccountName {
	return OptAzureAccountName{
		Value: v,
		Set:   true,
	}
}

// OptAzureAccountName is optional AzureAccountName.
type OptAzureAccountName struct {
	Value AzureAccountName
	Set   bool
}

// IsSet returns true if OptAzureAccountName was set.
func (o OptAzureAccountName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAzureAccountName) Reset() {
	var v AzureAccountName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAzureAccountName) SetTo(v AzureAccountName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAzureAccountName) Get() (v AzureAccountName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAzureAccountName) Or(d AzureAccountName) AzureAccountName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBucket returns new OptBucket with value set to v.
func NewOptBucket(v Bucket) OptBucket {
	return OptBucket{
		Value: v,
		Set:   true,
	}
}

// OptBucket is optional Bucket.
type OptBucket struct {
	Value Bucket
	Set   bool
}

// IsSet returns true if OptBucket was set.
func (o OptBucket) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBucket) Reset() {
	var v Bucket
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBucket) SetTo(v Bucket) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBucket) Get() (v Bucket, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBucket) Or(d Bucket) Bucket {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBulkCredentialResponseData returns new OptBulkCredentialResponseData with value set to v.
func NewOptBulkCredentialResponseData(v BulkCredentialResponseData) OptBulkCredentialResponseData {
	return OptBulkCredentialResponseData{
		Value: v,
		Set:   true,
	}
}

// OptBulkCredentialResponseData is optional BulkCredentialResponseData.
type OptBulkCredentialResponseData struct {
	Value BulkCredentialResponseData
	Set   bool
}

// IsSet returns true if OptBulkCredentialResponseData was set.
func (o OptBulkCredentialResponseData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBulkCredentialResponseData) Reset() {
	var v BulkCredentialResponseData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBulkCredentialResponseData) SetTo(v BulkCredentialResponseData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBulkCredentialResponseData) Get() (v BulkCredentialResponseData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBulkCredentialResponseData) Or(d BulkCredentialResponseData) BulkCredentialResponseData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBulkDeleteRoomRecordingsResponseData returns new OptBulkDeleteRoomRecordingsResponseData with value set to v.
func NewOptBulkDeleteRoomRecordingsResponseData(v BulkDeleteRoomRecordingsResponseData) OptBulkDeleteRoomRecordingsResponseData {
	return OptBulkDeleteRoomRecordingsResponseData{
		Value: v,
		Set:   true,
	}
}

// OptBulkDeleteRoomRecordingsResponseData is optional BulkDeleteRoomRecordingsResponseData.
type OptBulkDeleteRoomRecordingsResponseData struct {
	Value BulkDeleteRoomRecordingsResponseData
	Set   bool
}

// IsSet returns true if OptBulkDeleteRoomRecordingsResponseData was set.
func (o OptBulkDeleteRoomRecordingsResponseData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBulkDeleteRoomRecordingsResponseData) Reset() {
	var v BulkDeleteRoomRecordingsResponseData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBulkDeleteRoomRecordingsResponseData) SetTo(v BulkDeleteRoomRecordingsResponseData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBulkDeleteRoomRecordingsResponseData) Get() (v BulkDeleteRoomRecordingsResponseData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBulkDeleteRoomRecordingsResponseData) Or(d BulkDeleteRoomRecordingsResponseData) BulkDeleteRoomRecordingsResponseData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCall returns new OptCall with value set to v.
func NewOptCall(v Call) OptCall {
	return OptCall{
		Value: v,
		Set:   true,
	}
}

// OptCall is optional Call.
type OptCall struct {
	Value Call
	Set   bool
}

// IsSet returns true if OptCall was set.
func (o OptCall) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCall) Reset() {
	var v Call
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCall) SetTo(v Call) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCall) Get() (v Call, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCall) Or(d Call) Call {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallControlApplication returns new OptCallControlApplication with value set to v.
func NewOptCallControlApplication(v CallControlApplication) OptCallControlApplication {
	return OptCallControlApplication{
		Value: v,
		Set:   true,
	}
}

// OptCallControlApplication is optional CallControlApplication.
type OptCallControlApplication struct {
	Value CallControlApplication
	Set   bool
}

// IsSet returns true if OptCallControlApplication was set.
func (o OptCallControlApplication) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallControlApplication) Reset() {
	var v CallControlApplication
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallControlApplication) SetTo(v CallControlApplication) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallControlApplication) Get() (v CallControlApplication, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallControlApplication) Or(d CallControlApplication) CallControlApplication {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallControlApplicationDtmfType returns new OptCallControlApplicationDtmfType with value set to v.
func NewOptCallControlApplicationDtmfType(v CallControlApplicationDtmfType) OptCallControlApplicationDtmfType {
	return OptCallControlApplicationDtmfType{
		Value: v,
		Set:   true,
	}
}

// OptCallControlApplicationDtmfType is optional CallControlApplicationDtmfType.
type OptCallControlApplicationDtmfType struct {
	Value CallControlApplicationDtmfType
	Set   bool
}

// IsSet returns true if OptCallControlApplicationDtmfType was set.
func (o OptCallControlApplicationDtmfType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallControlApplicationDtmfType) Reset() {
	var v CallControlApplicationDtmfType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallControlApplicationDtmfType) SetTo(v CallControlApplicationDtmfType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallControlApplicationDtmfType) Get() (v CallControlApplicationDtmfType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallControlApplicationDtmfType) Or(d CallControlApplicationDtmfType) CallControlApplicationDtmfType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallControlApplicationInbound returns new OptCallControlApplicationInbound with value set to v.
func NewOptCallControlApplicationInbound(v CallControlApplicationInbound) OptCallControlApplicationInbound {
	return OptCallControlApplicationInbound{
		Value: v,
		Set:   true,
	}
}

// OptCallControlApplicationInbound is optional CallControlApplicationInbound.
type OptCallControlApplicationInbound struct {
	Value CallControlApplicationInbound
	Set   bool
}

// IsSet returns true if OptCallControlApplicationInbound was set.
func (o OptCallControlApplicationInbound) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallControlApplicationInbound) Reset() {
	var v CallControlApplicationInbound
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallControlApplicationInbound) SetTo(v CallControlApplicationInbound) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallControlApplicationInbound) Get() (v CallControlApplicationInbound, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallControlApplicationInbound) Or(d CallControlApplicationInbound) CallControlApplicationInbound {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallControlApplicationInboundSipSubdomainReceiveSettings returns new OptCallControlApplicationInboundSipSubdomainReceiveSettings with value set to v.
func NewOptCallControlApplicationInboundSipSubdomainReceiveSettings(v CallControlApplicationInboundSipSubdomainReceiveSettings) OptCallControlApplicationInboundSipSubdomainReceiveSettings {
	return OptCallControlApplicationInboundSipSubdomainReceiveSettings{
		Value: v,
		Set:   true,
	}
}

// OptCallControlApplicationInboundSipSubdomainReceiveSettings is optional CallControlApplicationInboundSipSubdomainReceiveSettings.
type OptCallControlApplicationInboundSipSubdomainReceiveSettings struct {
	Value CallControlApplicationInboundSipSubdomainReceiveSettings
	Set   bool
}

// IsSet returns true if OptCallControlApplicationInboundSipSubdomainReceiveSettings was set.
func (o OptCallControlApplicationInboundSipSubdomainReceiveSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallControlApplicationInboundSipSubdomainReceiveSettings) Reset() {
	var v CallControlApplicationInboundSipSubdomainReceiveSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallControlApplicationInboundSipSubdomainReceiveSettings) SetTo(v CallControlApplicationInboundSipSubdomainReceiveSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallControlApplicationInboundSipSubdomainReceiveSettings) Get() (v CallControlApplicationInboundSipSubdomainReceiveSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallControlApplicationInboundSipSubdomainReceiveSettings) Or(d CallControlApplicationInboundSipSubdomainReceiveSettings) CallControlApplicationInboundSipSubdomainReceiveSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallControlApplicationOutbound returns new OptCallControlApplicationOutbound with value set to v.
func NewOptCallControlApplicationOutbound(v CallControlApplicationOutbound) OptCallControlApplicationOutbound {
	return OptCallControlApplicationOutbound{
		Value: v,
		Set:   true,
	}
}

// OptCallControlApplicationOutbound is optional CallControlApplicationOutbound.
type OptCallControlApplicationOutbound struct {
	Value CallControlApplicationOutbound
	Set   bool
}

// IsSet returns true if OptCallControlApplicationOutbound was set.
func (o OptCallControlApplicationOutbound) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallControlApplicationOutbound) Reset() {
	var v CallControlApplicationOutbound
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallControlApplicationOutbound) SetTo(v CallControlApplicationOutbound) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallControlApplicationOutbound) Get() (v CallControlApplicationOutbound, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallControlApplicationOutbound) Or(d CallControlApplicationOutbound) CallControlApplicationOutbound {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallControlApplicationRecordType returns new OptCallControlApplicationRecordType with value set to v.
func NewOptCallControlApplicationRecordType(v CallControlApplicationRecordType) OptCallControlApplicationRecordType {
	return OptCallControlApplicationRecordType{
		Value: v,
		Set:   true,
	}
}

// OptCallControlApplicationRecordType is optional CallControlApplicationRecordType.
type OptCallControlApplicationRecordType struct {
	Value CallControlApplicationRecordType
	Set   bool
}

// IsSet returns true if OptCallControlApplicationRecordType was set.
func (o OptCallControlApplicationRecordType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallControlApplicationRecordType) Reset() {
	var v CallControlApplicationRecordType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallControlApplicationRecordType) SetTo(v CallControlApplicationRecordType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallControlApplicationRecordType) Get() (v CallControlApplicationRecordType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallControlApplicationRecordType) Or(d CallControlApplicationRecordType) CallControlApplicationRecordType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallControlApplicationWebhookAPIVersion returns new OptCallControlApplicationWebhookAPIVersion with value set to v.
func NewOptCallControlApplicationWebhookAPIVersion(v CallControlApplicationWebhookAPIVersion) OptCallControlApplicationWebhookAPIVersion {
	return OptCallControlApplicationWebhookAPIVersion{
		Value: v,
		Set:   true,
	}
}

// OptCallControlApplicationWebhookAPIVersion is optional CallControlApplicationWebhookAPIVersion.
type OptCallControlApplicationWebhookAPIVersion struct {
	Value CallControlApplicationWebhookAPIVersion
	Set   bool
}

// IsSet returns true if OptCallControlApplicationWebhookAPIVersion was set.
func (o OptCallControlApplicationWebhookAPIVersion) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallControlApplicationWebhookAPIVersion) Reset() {
	var v CallControlApplicationWebhookAPIVersion
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallControlApplicationWebhookAPIVersion) SetTo(v CallControlApplicationWebhookAPIVersion) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallControlApplicationWebhookAPIVersion) Get() (v CallControlApplicationWebhookAPIVersion, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallControlApplicationWebhookAPIVersion) Or(d CallControlApplicationWebhookAPIVersion) CallControlApplicationWebhookAPIVersion {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallControlCommandResult returns new OptCallControlCommandResult with value set to v.
func NewOptCallControlCommandResult(v CallControlCommandResult) OptCallControlCommandResult {
	return OptCallControlCommandResult{
		Value: v,
		Set:   true,
	}
}

// OptCallControlCommandResult is optional CallControlCommandResult.
type OptCallControlCommandResult struct {
	Value CallControlCommandResult
	Set   bool
}

// IsSet returns true if OptCallControlCommandResult was set.
func (o OptCallControlCommandResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallControlCommandResult) Reset() {
	var v CallControlCommandResult
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallControlCommandResult) SetTo(v CallControlCommandResult) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallControlCommandResult) Get() (v CallControlCommandResult, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallControlCommandResult) Or(d CallControlCommandResult) CallControlCommandResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallControlId returns new OptCallControlId with value set to v.
func NewOptCallControlId(v CallControlId) OptCallControlId {
	return OptCallControlId{
		Value: v,
		Set:   true,
	}
}

// OptCallControlId is optional CallControlId.
type OptCallControlId struct {
	Value CallControlId
	Set   bool
}

// IsSet returns true if OptCallControlId was set.
func (o OptCallControlId) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallControlId) Reset() {
	var v CallControlId
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallControlId) SetTo(v CallControlId) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallControlId) Get() (v CallControlId, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallControlId) Or(d CallControlId) CallControlId {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallReasonsItemGoogleVerificationStatus returns new OptCallReasonsItemGoogleVerificationStatus with value set to v.
func NewOptCallReasonsItemGoogleVerificationStatus(v CallReasonsItemGoogleVerificationStatus) OptCallReasonsItemGoogleVerificationStatus {
	return OptCallReasonsItemGoogleVerificationStatus{
		Value: v,
		Set:   true,
	}
}

// OptCallReasonsItemGoogleVerificationStatus is optional CallReasonsItemGoogleVerificationStatus.
type OptCallReasonsItemGoogleVerificationStatus struct {
	Value CallReasonsItemGoogleVerificationStatus
	Set   bool
}

// IsSet returns true if OptCallReasonsItemGoogleVerificationStatus was set.
func (o OptCallReasonsItemGoogleVerificationStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallReasonsItemGoogleVerificationStatus) Reset() {
	var v CallReasonsItemGoogleVerificationStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallReasonsItemGoogleVerificationStatus) SetTo(v CallReasonsItemGoogleVerificationStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallReasonsItemGoogleVerificationStatus) Get() (v CallReasonsItemGoogleVerificationStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallReasonsItemGoogleVerificationStatus) Or(d CallReasonsItemGoogleVerificationStatus) CallReasonsItemGoogleVerificationStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestAnsweringMachineDetection returns new OptCallRequestAnsweringMachineDetection with value set to v.
func NewOptCallRequestAnsweringMachineDetection(v CallRequestAnsweringMachineDetection) OptCallRequestAnsweringMachineDetection {
	return OptCallRequestAnsweringMachineDetection{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestAnsweringMachineDetection is optional CallRequestAnsweringMachineDetection.
type OptCallRequestAnsweringMachineDetection struct {
	Value CallRequestAnsweringMachineDetection
	Set   bool
}

// IsSet returns true if OptCallRequestAnsweringMachineDetection was set.
func (o OptCallRequestAnsweringMachineDetection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestAnsweringMachineDetection) Reset() {
	var v CallRequestAnsweringMachineDetection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestAnsweringMachineDetection) SetTo(v CallRequestAnsweringMachineDetection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestAnsweringMachineDetection) Get() (v CallRequestAnsweringMachineDetection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestAnsweringMachineDetection) Or(d CallRequestAnsweringMachineDetection) CallRequestAnsweringMachineDetection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestAnsweringMachineDetectionConfig returns new OptCallRequestAnsweringMachineDetectionConfig with value set to v.
func NewOptCallRequestAnsweringMachineDetectionConfig(v CallRequestAnsweringMachineDetectionConfig) OptCallRequestAnsweringMachineDetectionConfig {
	return OptCallRequestAnsweringMachineDetectionConfig{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestAnsweringMachineDetectionConfig is optional CallRequestAnsweringMachineDetectionConfig.
type OptCallRequestAnsweringMachineDetectionConfig struct {
	Value CallRequestAnsweringMachineDetectionConfig
	Set   bool
}

// IsSet returns true if OptCallRequestAnsweringMachineDetectionConfig was set.
func (o OptCallRequestAnsweringMachineDetectionConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestAnsweringMachineDetectionConfig) Reset() {
	var v CallRequestAnsweringMachineDetectionConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestAnsweringMachineDetectionConfig) SetTo(v CallRequestAnsweringMachineDetectionConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestAnsweringMachineDetectionConfig) Get() (v CallRequestAnsweringMachineDetectionConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestAnsweringMachineDetectionConfig) Or(d CallRequestAnsweringMachineDetectionConfig) CallRequestAnsweringMachineDetectionConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestConferenceConfig returns new OptCallRequestConferenceConfig with value set to v.
func NewOptCallRequestConferenceConfig(v CallRequestConferenceConfig) OptCallRequestConferenceConfig {
	return OptCallRequestConferenceConfig{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestConferenceConfig is optional CallRequestConferenceConfig.
type OptCallRequestConferenceConfig struct {
	Value CallRequestConferenceConfig
	Set   bool
}

// IsSet returns true if OptCallRequestConferenceConfig was set.
func (o OptCallRequestConferenceConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestConferenceConfig) Reset() {
	var v CallRequestConferenceConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestConferenceConfig) SetTo(v CallRequestConferenceConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestConferenceConfig) Get() (v CallRequestConferenceConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestConferenceConfig) Or(d CallRequestConferenceConfig) CallRequestConferenceConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestConferenceConfigBeepEnabled returns new OptCallRequestConferenceConfigBeepEnabled with value set to v.
func NewOptCallRequestConferenceConfigBeepEnabled(v CallRequestConferenceConfigBeepEnabled) OptCallRequestConferenceConfigBeepEnabled {
	return OptCallRequestConferenceConfigBeepEnabled{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestConferenceConfigBeepEnabled is optional CallRequestConferenceConfigBeepEnabled.
type OptCallRequestConferenceConfigBeepEnabled struct {
	Value CallRequestConferenceConfigBeepEnabled
	Set   bool
}

// IsSet returns true if OptCallRequestConferenceConfigBeepEnabled was set.
func (o OptCallRequestConferenceConfigBeepEnabled) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestConferenceConfigBeepEnabled) Reset() {
	var v CallRequestConferenceConfigBeepEnabled
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestConferenceConfigBeepEnabled) SetTo(v CallRequestConferenceConfigBeepEnabled) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestConferenceConfigBeepEnabled) Get() (v CallRequestConferenceConfigBeepEnabled, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestConferenceConfigBeepEnabled) Or(d CallRequestConferenceConfigBeepEnabled) CallRequestConferenceConfigBeepEnabled {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestConferenceConfigSupervisorRole returns new OptCallRequestConferenceConfigSupervisorRole with value set to v.
func NewOptCallRequestConferenceConfigSupervisorRole(v CallRequestConferenceConfigSupervisorRole) OptCallRequestConferenceConfigSupervisorRole {
	return OptCallRequestConferenceConfigSupervisorRole{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestConferenceConfigSupervisorRole is optional CallRequestConferenceConfigSupervisorRole.
type OptCallRequestConferenceConfigSupervisorRole struct {
	Value CallRequestConferenceConfigSupervisorRole
	Set   bool
}

// IsSet returns true if OptCallRequestConferenceConfigSupervisorRole was set.
func (o OptCallRequestConferenceConfigSupervisorRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestConferenceConfigSupervisorRole) Reset() {
	var v CallRequestConferenceConfigSupervisorRole
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestConferenceConfigSupervisorRole) SetTo(v CallRequestConferenceConfigSupervisorRole) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestConferenceConfigSupervisorRole) Get() (v CallRequestConferenceConfigSupervisorRole, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestConferenceConfigSupervisorRole) Or(d CallRequestConferenceConfigSupervisorRole) CallRequestConferenceConfigSupervisorRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestMediaEncryption returns new OptCallRequestMediaEncryption with value set to v.
func NewOptCallRequestMediaEncryption(v CallRequestMediaEncryption) OptCallRequestMediaEncryption {
	return OptCallRequestMediaEncryption{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestMediaEncryption is optional CallRequestMediaEncryption.
type OptCallRequestMediaEncryption struct {
	Value CallRequestMediaEncryption
	Set   bool
}

// IsSet returns true if OptCallRequestMediaEncryption was set.
func (o OptCallRequestMediaEncryption) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestMediaEncryption) Reset() {
	var v CallRequestMediaEncryption
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestMediaEncryption) SetTo(v CallRequestMediaEncryption) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestMediaEncryption) Get() (v CallRequestMediaEncryption, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestMediaEncryption) Or(d CallRequestMediaEncryption) CallRequestMediaEncryption {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestRecord returns new OptCallRequestRecord with value set to v.
func NewOptCallRequestRecord(v CallRequestRecord) OptCallRequestRecord {
	return OptCallRequestRecord{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestRecord is optional CallRequestRecord.
type OptCallRequestRecord struct {
	Value CallRequestRecord
	Set   bool
}

// IsSet returns true if OptCallRequestRecord was set.
func (o OptCallRequestRecord) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestRecord) Reset() {
	var v CallRequestRecord
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestRecord) SetTo(v CallRequestRecord) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestRecord) Get() (v CallRequestRecord, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestRecord) Or(d CallRequestRecord) CallRequestRecord {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestRecordChannels returns new OptCallRequestRecordChannels with value set to v.
func NewOptCallRequestRecordChannels(v CallRequestRecordChannels) OptCallRequestRecordChannels {
	return OptCallRequestRecordChannels{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestRecordChannels is optional CallRequestRecordChannels.
type OptCallRequestRecordChannels struct {
	Value CallRequestRecordChannels
	Set   bool
}

// IsSet returns true if OptCallRequestRecordChannels was set.
func (o OptCallRequestRecordChannels) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestRecordChannels) Reset() {
	var v CallRequestRecordChannels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestRecordChannels) SetTo(v CallRequestRecordChannels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestRecordChannels) Get() (v CallRequestRecordChannels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestRecordChannels) Or(d CallRequestRecordChannels) CallRequestRecordChannels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestRecordFormat returns new OptCallRequestRecordFormat with value set to v.
func NewOptCallRequestRecordFormat(v CallRequestRecordFormat) OptCallRequestRecordFormat {
	return OptCallRequestRecordFormat{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestRecordFormat is optional CallRequestRecordFormat.
type OptCallRequestRecordFormat struct {
	Value CallRequestRecordFormat
	Set   bool
}

// IsSet returns true if OptCallRequestRecordFormat was set.
func (o OptCallRequestRecordFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestRecordFormat) Reset() {
	var v CallRequestRecordFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestRecordFormat) SetTo(v CallRequestRecordFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestRecordFormat) Get() (v CallRequestRecordFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestRecordFormat) Or(d CallRequestRecordFormat) CallRequestRecordFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestRecordTrim returns new OptCallRequestRecordTrim with value set to v.
func NewOptCallRequestRecordTrim(v CallRequestRecordTrim) OptCallRequestRecordTrim {
	return OptCallRequestRecordTrim{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestRecordTrim is optional CallRequestRecordTrim.
type OptCallRequestRecordTrim struct {
	Value CallRequestRecordTrim
	Set   bool
}

// IsSet returns true if OptCallRequestRecordTrim was set.
func (o OptCallRequestRecordTrim) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestRecordTrim) Reset() {
	var v CallRequestRecordTrim
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestRecordTrim) SetTo(v CallRequestRecordTrim) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestRecordTrim) Get() (v CallRequestRecordTrim, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestRecordTrim) Or(d CallRequestRecordTrim) CallRequestRecordTrim {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestSipTransportProtocol returns new OptCallRequestSipTransportProtocol with value set to v.
func NewOptCallRequestSipTransportProtocol(v CallRequestSipTransportProtocol) OptCallRequestSipTransportProtocol {
	return OptCallRequestSipTransportProtocol{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestSipTransportProtocol is optional CallRequestSipTransportProtocol.
type OptCallRequestSipTransportProtocol struct {
	Value CallRequestSipTransportProtocol
	Set   bool
}

// IsSet returns true if OptCallRequestSipTransportProtocol was set.
func (o OptCallRequestSipTransportProtocol) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestSipTransportProtocol) Reset() {
	var v CallRequestSipTransportProtocol
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestSipTransportProtocol) SetTo(v CallRequestSipTransportProtocol) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestSipTransportProtocol) Get() (v CallRequestSipTransportProtocol, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestSipTransportProtocol) Or(d CallRequestSipTransportProtocol) CallRequestSipTransportProtocol {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestStreamTrack returns new OptCallRequestStreamTrack with value set to v.
func NewOptCallRequestStreamTrack(v CallRequestStreamTrack) OptCallRequestStreamTrack {
	return OptCallRequestStreamTrack{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestStreamTrack is optional CallRequestStreamTrack.
type OptCallRequestStreamTrack struct {
	Value CallRequestStreamTrack
	Set   bool
}

// IsSet returns true if OptCallRequestStreamTrack was set.
func (o OptCallRequestStreamTrack) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestStreamTrack) Reset() {
	var v CallRequestStreamTrack
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestStreamTrack) SetTo(v CallRequestStreamTrack) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestStreamTrack) Get() (v CallRequestStreamTrack, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestStreamTrack) Or(d CallRequestStreamTrack) CallRequestStreamTrack {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestWebhookURLMethod returns new OptCallRequestWebhookURLMethod with value set to v.
func NewOptCallRequestWebhookURLMethod(v CallRequestWebhookURLMethod) OptCallRequestWebhookURLMethod {
	return OptCallRequestWebhookURLMethod{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestWebhookURLMethod is optional CallRequestWebhookURLMethod.
type OptCallRequestWebhookURLMethod struct {
	Value CallRequestWebhookURLMethod
	Set   bool
}

// IsSet returns true if OptCallRequestWebhookURLMethod was set.
func (o OptCallRequestWebhookURLMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestWebhookURLMethod) Reset() {
	var v CallRequestWebhookURLMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestWebhookURLMethod) SetTo(v CallRequestWebhookURLMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestWebhookURLMethod) Get() (v CallRequestWebhookURLMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestWebhookURLMethod) Or(d CallRequestWebhookURLMethod) CallRequestWebhookURLMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallResource returns new OptCallResource with value set to v.
func NewOptCallResource(v CallResource) OptCallResource {
	return OptCallResource{
		Value: v,
		Set:   true,
	}
}

// OptCallResource is optional CallResource.
type OptCallResource struct {
	Value CallResource
	Set   bool
}

// IsSet returns true if OptCallResource was set.
func (o OptCallResource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallResource) Reset() {
	var v CallResource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallResource) SetTo(v CallResource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallResource) Get() (v CallResource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallResource) Or(d CallResource) CallResource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallResourceAnsweredBy returns new OptCallResourceAnsweredBy with value set to v.
func NewOptCallResourceAnsweredBy(v CallResourceAnsweredBy) OptCallResourceAnsweredBy {
	return OptCallResourceAnsweredBy{
		Value: v,
		Set:   true,
	}
}

// OptCallResourceAnsweredBy is optional CallResourceAnsweredBy.
type OptCallResourceAnsweredBy struct {
	Value CallResourceAnsweredBy
	Set   bool
}

// IsSet returns true if OptCallResourceAnsweredBy was set.
func (o OptCallResourceAnsweredBy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallResourceAnsweredBy) Reset() {
	var v CallResourceAnsweredBy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallResourceAnsweredBy) SetTo(v CallResourceAnsweredBy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallResourceAnsweredBy) Get() (v CallResourceAnsweredBy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallResourceAnsweredBy) Or(d CallResourceAnsweredBy) CallResourceAnsweredBy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallResourceDirection returns new OptCallResourceDirection with value set to v.
func NewOptCallResourceDirection(v CallResourceDirection) OptCallResourceDirection {
	return OptCallResourceDirection{
		Value: v,
		Set:   true,
	}
}

// OptCallResourceDirection is optional CallResourceDirection.
type OptCallResourceDirection struct {
	Value CallResourceDirection
	Set   bool
}

// IsSet returns true if OptCallResourceDirection was set.
func (o OptCallResourceDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallResourceDirection) Reset() {
	var v CallResourceDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallResourceDirection) SetTo(v CallResourceDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallResourceDirection) Get() (v CallResourceDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallResourceDirection) Or(d CallResourceDirection) CallResourceDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallResourceIndex returns new OptCallResourceIndex with value set to v.
func NewOptCallResourceIndex(v CallResourceIndex) OptCallResourceIndex {
	return OptCallResourceIndex{
		Value: v,
		Set:   true,
	}
}

// OptCallResourceIndex is optional CallResourceIndex.
type OptCallResourceIndex struct {
	Value CallResourceIndex
	Set   bool
}

// IsSet returns true if OptCallResourceIndex was set.
func (o OptCallResourceIndex) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallResourceIndex) Reset() {
	var v CallResourceIndex
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallResourceIndex) SetTo(v CallResourceIndex) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallResourceIndex) Get() (v CallResourceIndex, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallResourceIndex) Or(d CallResourceIndex) CallResourceIndex {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallResourceStatus returns new OptCallResourceStatus with value set to v.
func NewOptCallResourceStatus(v CallResourceStatus) OptCallResourceStatus {
	return OptCallResourceStatus{
		Value: v,
		Set:   true,
	}
}

// OptCallResourceStatus is optional CallResourceStatus.
type OptCallResourceStatus struct {
	Value CallResourceStatus
	Set   bool
}

// IsSet returns true if OptCallResourceStatus was set.
func (o OptCallResourceStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallResourceStatus) Reset() {
	var v CallResourceStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallResourceStatus) SetTo(v CallResourceStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallResourceStatus) Get() (v CallResourceStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallResourceStatus) Or(d CallResourceStatus) CallResourceStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConferenceRecordingResourceIndex returns new OptConferenceRecordingResourceIndex with value set to v.
func NewOptConferenceRecordingResourceIndex(v ConferenceRecordingResourceIndex) OptConferenceRecordingResourceIndex {
	return OptConferenceRecordingResourceIndex{
		Value: v,
		Set:   true,
	}
}

// OptConferenceRecordingResourceIndex is optional ConferenceRecordingResourceIndex.
type OptConferenceRecordingResourceIndex struct {
	Value ConferenceRecordingResourceIndex
	Set   bool
}

// IsSet returns true if OptConferenceRecordingResourceIndex was set.
func (o OptConferenceRecordingResourceIndex) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConferenceRecordingResourceIndex) Reset() {
	var v ConferenceRecordingResourceIndex
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConferenceRecordingResourceIndex) SetTo(v ConferenceRecordingResourceIndex) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConferenceRecordingResourceIndex) Get() (v ConferenceRecordingResourceIndex, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConferenceRecordingResourceIndex) Or(d ConferenceRecordingResourceIndex) ConferenceRecordingResourceIndex {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConferenceRecordingResourceSource returns new OptConferenceRecordingResourceSource with value set to v.
func NewOptConferenceRecordingResourceSource(v ConferenceRecordingResourceSource) OptConferenceRecordingResourceSource {
	return OptConferenceRecordingResourceSource{
		Value: v,
		Set:   true,
	}
}

// OptConferenceRecordingResourceSource is optional ConferenceRecordingResourceSource.
type OptConferenceRecordingResourceSource struct {
	Value ConferenceRecordingResourceSource
	Set   bool
}

// IsSet returns true if OptConferenceRecordingResourceSource was set.
func (o OptConferenceRecordingResourceSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConferenceRecordingResourceSource) Reset() {
	var v ConferenceRecordingResourceSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConferenceRecordingResourceSource) SetTo(v ConferenceRecordingResourceSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConferenceRecordingResourceSource) Get() (v ConferenceRecordingResourceSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConferenceRecordingResourceSource) Or(d ConferenceRecordingResourceSource) ConferenceRecordingResourceSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConferenceRecordingResourceStatus returns new OptConferenceRecordingResourceStatus with value set to v.
func NewOptConferenceRecordingResourceStatus(v ConferenceRecordingResourceStatus) OptConferenceRecordingResourceStatus {
	return OptConferenceRecordingResourceStatus{
		Value: v,
		Set:   true,
	}
}

// OptConferenceRecordingResourceStatus is optional ConferenceRecordingResourceStatus.
type OptConferenceRecordingResourceStatus struct {
	Value ConferenceRecordingResourceStatus
	Set   bool
}

// IsSet returns true if OptConferenceRecordingResourceStatus was set.
func (o OptConferenceRecordingResourceStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConferenceRecordingResourceStatus) Reset() {
	var v ConferenceRecordingResourceStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConferenceRecordingResourceStatus) SetTo(v ConferenceRecordingResourceStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConferenceRecordingResourceStatus) Get() (v ConferenceRecordingResourceStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConferenceRecordingResourceStatus) Or(d ConferenceRecordingResourceStatus) ConferenceRecordingResourceStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConferenceRecordingResourceSubresourceUris returns new OptConferenceRecordingResourceSubresourceUris with value set to v.
func NewOptConferenceRecordingResourceSubresourceUris(v ConferenceRecordingResourceSubresourceUris) OptConferenceRecordingResourceSubresourceUris {
	return OptConferenceRecordingResourceSubresourceUris{
		Value: v,
		Set:   true,
	}
}

// OptConferenceRecordingResourceSubresourceUris is optional ConferenceRecordingResourceSubresourceUris.
type OptConferenceRecordingResourceSubresourceUris struct {
	Value ConferenceRecordingResourceSubresourceUris
	Set   bool
}

// IsSet returns true if OptConferenceRecordingResourceSubresourceUris was set.
func (o OptConferenceRecordingResourceSubresourceUris) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConferenceRecordingResourceSubresourceUris) Reset() {
	var v ConferenceRecordingResourceSubresourceUris
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConferenceRecordingResourceSubresourceUris) SetTo(v ConferenceRecordingResourceSubresourceUris) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConferenceRecordingResourceSubresourceUris) Get() (v ConferenceRecordingResourceSubresourceUris, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConferenceRecordingResourceSubresourceUris) Or(d ConferenceRecordingResourceSubresourceUris) ConferenceRecordingResourceSubresourceUris {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConferenceResource returns new OptConferenceResource with value set to v.
func NewOptConferenceResource(v ConferenceResource) OptConferenceResource {
	return OptConferenceResource{
		Value: v,
		Set:   true,
	}
}

// OptConferenceResource is optional ConferenceResource.
type OptConferenceResource struct {
	Value ConferenceResource
	Set   bool
}

// IsSet returns true if OptConferenceResource was set.
func (o OptConferenceResource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConferenceResource) Reset() {
	var v ConferenceResource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConferenceResource) SetTo(v ConferenceResource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConferenceResource) Get() (v ConferenceResource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConferenceResource) Or(d ConferenceResource) ConferenceResource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConferenceResourceIndex returns new OptConferenceResourceIndex with value set to v.
func NewOptConferenceResourceIndex(v ConferenceResourceIndex) OptConferenceResourceIndex {
	return OptConferenceResourceIndex{
		Value: v,
		Set:   true,
	}
}

// OptConferenceResourceIndex is optional ConferenceResourceIndex.
type OptConferenceResourceIndex struct {
	Value ConferenceResourceIndex
	Set   bool
}

// IsSet returns true if OptConferenceResourceIndex was set.
func (o OptConferenceResourceIndex) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConferenceResourceIndex) Reset() {
	var v ConferenceResourceIndex
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConferenceResourceIndex) SetTo(v ConferenceResourceIndex) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConferenceResourceIndex) Get() (v ConferenceResourceIndex, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConferenceResourceIndex) Or(d ConferenceResourceIndex) ConferenceResourceIndex {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConferenceResourceReasonConferenceEnded returns new OptConferenceResourceReasonConferenceEnded with value set to v.
func NewOptConferenceResourceReasonConferenceEnded(v ConferenceResourceReasonConferenceEnded) OptConferenceResourceReasonConferenceEnded {
	return OptConferenceResourceReasonConferenceEnded{
		Value: v,
		Set:   true,
	}
}

// OptConferenceResourceReasonConferenceEnded is optional ConferenceResourceReasonConferenceEnded.
type OptConferenceResourceReasonConferenceEnded struct {
	Value ConferenceResourceReasonConferenceEnded
	Set   bool
}

// IsSet returns true if OptConferenceResourceReasonConferenceEnded was set.
func (o OptConferenceResourceReasonConferenceEnded) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConferenceResourceReasonConferenceEnded) Reset() {
	var v ConferenceResourceReasonConferenceEnded
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConferenceResourceReasonConferenceEnded) SetTo(v ConferenceResourceReasonConferenceEnded) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConferenceResourceReasonConferenceEnded) Get() (v ConferenceResourceReasonConferenceEnded, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConferenceResourceReasonConferenceEnded) Or(d ConferenceResourceReasonConferenceEnded) ConferenceResourceReasonConferenceEnded {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConferenceResourceStatus returns new OptConferenceResourceStatus with value set to v.
func NewOptConferenceResourceStatus(v ConferenceResourceStatus) OptConferenceResourceStatus {
	return OptConferenceResourceStatus{
		Value: v,
		Set:   true,
	}
}

// OptConferenceResourceStatus is optional ConferenceResourceStatus.
type OptConferenceResourceStatus struct {
	Value ConferenceResourceStatus
	Set   bool
}

// IsSet returns true if OptConferenceResourceStatus was set.
func (o OptConferenceResourceStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConferenceResourceStatus) Reset() {
	var v ConferenceResourceStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConferenceResourceStatus) SetTo(v ConferenceResourceStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConferenceResourceStatus) Get() (v ConferenceResourceStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConferenceResourceStatus) Or(d ConferenceResourceStatus) ConferenceResourceStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConferenceResourceSubresourceUris returns new OptConferenceResourceSubresourceUris with value set to v.
func NewOptConferenceResourceSubresourceUris(v ConferenceResourceSubresourceUris) OptConferenceResourceSubresourceUris {
	return OptConferenceResourceSubresourceUris{
		Value: v,
		Set:   true,
	}
}

// OptConferenceResourceSubresourceUris is optional ConferenceResourceSubresourceUris.
type OptConferenceResourceSubresourceUris struct {
	Value ConferenceResourceSubresourceUris
	Set   bool
}

// IsSet returns true if OptConferenceResourceSubresourceUris was set.
func (o OptConferenceResourceSubresourceUris) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConferenceResourceSubresourceUris) Reset() {
	var v ConferenceResourceSubresourceUris
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConferenceResourceSubresourceUris) SetTo(v ConferenceResourceSubresourceUris) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConferenceResourceSubresourceUris) Get() (v ConferenceResourceSubresourceUris, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConferenceResourceSubresourceUris) Or(d ConferenceResourceSubresourceUris) ConferenceResourceSubresourceUris {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConferenceStatus returns new OptConferenceStatus with value set to v.
func NewOptConferenceStatus(v ConferenceStatus) OptConferenceStatus {
	return OptConferenceStatus{
		Value: v,
		Set:   true,
	}
}

// OptConferenceStatus is optional ConferenceStatus.
type OptConferenceStatus struct {
	Value ConferenceStatus
	Set   bool
}

// IsSet returns true if OptConferenceStatus was set.
func (o OptConferenceStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConferenceStatus) Reset() {
	var v ConferenceStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConferenceStatus) SetTo(v ConferenceStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConferenceStatus) Get() (v ConferenceStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConferenceStatus) Or(d ConferenceStatus) ConferenceStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConnectionActive returns new OptConnectionActive with value set to v.
func NewOptConnectionActive(v ConnectionActive) OptConnectionActive {
	return OptConnectionActive{
		Value: v,
		Set:   true,
	}
}

// OptConnectionActive is optional ConnectionActive.
type OptConnectionActive struct {
	Value ConnectionActive
	Set   bool
}

// IsSet returns true if OptConnectionActive was set.
func (o OptConnectionActive) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConnectionActive) Reset() {
	var v ConnectionActive
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConnectionActive) SetTo(v ConnectionActive) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConnectionActive) Get() (v ConnectionActive, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConnectionActive) Or(d ConnectionActive) ConnectionActive {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateCallControlApplicationRequestAnchorsiteOverride returns new OptCreateCallControlApplicationRequestAnchorsiteOverride with value set to v.
func NewOptCreateCallControlApplicationRequestAnchorsiteOverride(v CreateCallControlApplicationRequestAnchorsiteOverride) OptCreateCallControlApplicationRequestAnchorsiteOverride {
	return OptCreateCallControlApplicationRequestAnchorsiteOverride{
		Value: v,
		Set:   true,
	}
}

// OptCreateCallControlApplicationRequestAnchorsiteOverride is optional CreateCallControlApplicationRequestAnchorsiteOverride.
type OptCreateCallControlApplicationRequestAnchorsiteOverride struct {
	Value CreateCallControlApplicationRequestAnchorsiteOverride
	Set   bool
}

// IsSet returns true if OptCreateCallControlApplicationRequestAnchorsiteOverride was set.
func (o OptCreateCallControlApplicationRequestAnchorsiteOverride) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateCallControlApplicationRequestAnchorsiteOverride) Reset() {
	var v CreateCallControlApplicationRequestAnchorsiteOverride
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateCallControlApplicationRequestAnchorsiteOverride) SetTo(v CreateCallControlApplicationRequestAnchorsiteOverride) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateCallControlApplicationRequestAnchorsiteOverride) Get() (v CreateCallControlApplicationRequestAnchorsiteOverride, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateCallControlApplicationRequestAnchorsiteOverride) Or(d CreateCallControlApplicationRequestAnchorsiteOverride) CreateCallControlApplicationRequestAnchorsiteOverride {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateCallControlApplicationRequestDtmfType returns new OptCreateCallControlApplicationRequestDtmfType with value set to v.
func NewOptCreateCallControlApplicationRequestDtmfType(v CreateCallControlApplicationRequestDtmfType) OptCreateCallControlApplicationRequestDtmfType {
	return OptCreateCallControlApplicationRequestDtmfType{
		Value: v,
		Set:   true,
	}
}

// OptCreateCallControlApplicationRequestDtmfType is optional CreateCallControlApplicationRequestDtmfType.
type OptCreateCallControlApplicationRequestDtmfType struct {
	Value CreateCallControlApplicationRequestDtmfType
	Set   bool
}

// IsSet returns true if OptCreateCallControlApplicationRequestDtmfType was set.
func (o OptCreateCallControlApplicationRequestDtmfType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateCallControlApplicationRequestDtmfType) Reset() {
	var v CreateCallControlApplicationRequestDtmfType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateCallControlApplicationRequestDtmfType) SetTo(v CreateCallControlApplicationRequestDtmfType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateCallControlApplicationRequestDtmfType) Get() (v CreateCallControlApplicationRequestDtmfType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateCallControlApplicationRequestDtmfType) Or(d CreateCallControlApplicationRequestDtmfType) CreateCallControlApplicationRequestDtmfType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateCallControlApplicationRequestWebhookAPIVersion returns new OptCreateCallControlApplicationRequestWebhookAPIVersion with value set to v.
func NewOptCreateCallControlApplicationRequestWebhookAPIVersion(v CreateCallControlApplicationRequestWebhookAPIVersion) OptCreateCallControlApplicationRequestWebhookAPIVersion {
	return OptCreateCallControlApplicationRequestWebhookAPIVersion{
		Value: v,
		Set:   true,
	}
}

// OptCreateCallControlApplicationRequestWebhookAPIVersion is optional CreateCallControlApplicationRequestWebhookAPIVersion.
type OptCreateCallControlApplicationRequestWebhookAPIVersion struct {
	Value CreateCallControlApplicationRequestWebhookAPIVersion
	Set   bool
}

// IsSet returns true if OptCreateCallControlApplicationRequestWebhookAPIVersion was set.
func (o OptCreateCallControlApplicationRequestWebhookAPIVersion) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateCallControlApplicationRequestWebhookAPIVersion) Reset() {
	var v CreateCallControlApplicationRequestWebhookAPIVersion
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateCallControlApplicationRequestWebhookAPIVersion) SetTo(v CreateCallControlApplicationRequestWebhookAPIVersion) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateCallControlApplicationRequestWebhookAPIVersion) Get() (v CreateCallControlApplicationRequestWebhookAPIVersion, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateCallControlApplicationRequestWebhookAPIVersion) Or(d CreateCallControlApplicationRequestWebhookAPIVersion) CreateCallControlApplicationRequestWebhookAPIVersion {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateTeXMLSecretResult returns new OptCreateTeXMLSecretResult with value set to v.
func NewOptCreateTeXMLSecretResult(v CreateTeXMLSecretResult) OptCreateTeXMLSecretResult {
	return OptCreateTeXMLSecretResult{
		Value: v,
		Set:   true,
	}
}

// OptCreateTeXMLSecretResult is optional CreateTeXMLSecretResult.
type OptCreateTeXMLSecretResult struct {
	Value CreateTeXMLSecretResult
	Set   bool
}

// IsSet returns true if OptCreateTeXMLSecretResult was set.
func (o OptCreateTeXMLSecretResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateTeXMLSecretResult) Reset() {
	var v CreateTeXMLSecretResult
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateTeXMLSecretResult) SetTo(v CreateTeXMLSecretResult) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateTeXMLSecretResult) Get() (v CreateTeXMLSecretResult, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateTeXMLSecretResult) Or(d CreateTeXMLSecretResult) CreateTeXMLSecretResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateTeXMLSecretResultValue returns new OptCreateTeXMLSecretResultValue with value set to v.
func NewOptCreateTeXMLSecretResultValue(v CreateTeXMLSecretResultValue) OptCreateTeXMLSecretResultValue {
	return OptCreateTeXMLSecretResultValue{
		Value: v,
		Set:   true,
	}
}

// OptCreateTeXMLSecretResultValue is optional CreateTeXMLSecretResultValue.
type OptCreateTeXMLSecretResultValue struct {
	Value CreateTeXMLSecretResultValue
	Set   bool
}

// IsSet returns true if OptCreateTeXMLSecretResultValue was set.
func (o OptCreateTeXMLSecretResultValue) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateTeXMLSecretResultValue) Reset() {
	var v CreateTeXMLSecretResultValue
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateTeXMLSecretResultValue) SetTo(v CreateTeXMLSecretResultValue) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateTeXMLSecretResultValue) Get() (v CreateTeXMLSecretResultValue, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateTeXMLSecretResultValue) Or(d CreateTeXMLSecretResultValue) CreateTeXMLSecretResultValue {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateTexmlApplicationRequestInbound returns new OptCreateTexmlApplicationRequestInbound with value set to v.
func NewOptCreateTexmlApplicationRequestInbound(v CreateTexmlApplicationRequestInbound) OptCreateTexmlApplicationRequestInbound {
	return OptCreateTexmlApplicationRequestInbound{
		Value: v,
		Set:   true,
	}
}

// OptCreateTexmlApplicationRequestInbound is optional CreateTexmlApplicationRequestInbound.
type OptCreateTexmlApplicationRequestInbound struct {
	Value CreateTexmlApplicationRequestInbound
	Set   bool
}

// IsSet returns true if OptCreateTexmlApplicationRequestInbound was set.
func (o OptCreateTexmlApplicationRequestInbound) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateTexmlApplicationRequestInbound) Reset() {
	var v CreateTexmlApplicationRequestInbound
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateTexmlApplicationRequestInbound) SetTo(v CreateTexmlApplicationRequestInbound) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateTexmlApplicationRequestInbound) Get() (v CreateTexmlApplicationRequestInbound, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateTexmlApplicationRequestInbound) Or(d CreateTexmlApplicationRequestInbound) CreateTexmlApplicationRequestInbound {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings returns new OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings with value set to v.
func NewOptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings(v CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings {
	return OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings{
		Value: v,
		Set:   true,
	}
}

// OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings is optional CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings.
type OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings struct {
	Value CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings
	Set   bool
}

// IsSet returns true if OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings was set.
func (o OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) Reset() {
	var v CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) SetTo(v CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) Get() (v CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) Or(d CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateTexmlApplicationRequestOutbound returns new OptCreateTexmlApplicationRequestOutbound with value set to v.
func NewOptCreateTexmlApplicationRequestOutbound(v CreateTexmlApplicationRequestOutbound) OptCreateTexmlApplicationRequestOutbound {
	return OptCreateTexmlApplicationRequestOutbound{
		Value: v,
		Set:   true,
	}
}

// OptCreateTexmlApplicationRequestOutbound is optional CreateTexmlApplicationRequestOutbound.
type OptCreateTexmlApplicationRequestOutbound struct {
	Value CreateTexmlApplicationRequestOutbound
	Set   bool
}

// IsSet returns true if OptCreateTexmlApplicationRequestOutbound was set.
func (o OptCreateTexmlApplicationRequestOutbound) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateTexmlApplicationRequestOutbound) Reset() {
	var v CreateTexmlApplicationRequestOutbound
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateTexmlApplicationRequestOutbound) SetTo(v CreateTexmlApplicationRequestOutbound) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateTexmlApplicationRequestOutbound) Get() (v CreateTexmlApplicationRequestOutbound, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateTexmlApplicationRequestOutbound) Or(d CreateTexmlApplicationRequestOutbound) CreateTexmlApplicationRequestOutbound {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateTexmlApplicationRequestStatusCallbackMethod returns new OptCreateTexmlApplicationRequestStatusCallbackMethod with value set to v.
func NewOptCreateTexmlApplicationRequestStatusCallbackMethod(v CreateTexmlApplicationRequestStatusCallbackMethod) OptCreateTexmlApplicationRequestStatusCallbackMethod {
	return OptCreateTexmlApplicationRequestStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptCreateTexmlApplicationRequestStatusCallbackMethod is optional CreateTexmlApplicationRequestStatusCallbackMethod.
type OptCreateTexmlApplicationRequestStatusCallbackMethod struct {
	Value CreateTexmlApplicationRequestStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptCreateTexmlApplicationRequestStatusCallbackMethod was set.
func (o OptCreateTexmlApplicationRequestStatusCallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateTexmlApplicationRequestStatusCallbackMethod) Reset() {
	var v CreateTexmlApplicationRequestStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateTexmlApplicationRequestStatusCallbackMethod) SetTo(v CreateTexmlApplicationRequestStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateTexmlApplicationRequestStatusCallbackMethod) Get() (v CreateTexmlApplicationRequestStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateTexmlApplicationRequestStatusCallbackMethod) Or(d CreateTexmlApplicationRequestStatusCallbackMethod) CreateTexmlApplicationRequestStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateTexmlApplicationRequestVoiceMethod returns new OptCreateTexmlApplicationRequestVoiceMethod with value set to v.
func NewOptCreateTexmlApplicationRequestVoiceMethod(v CreateTexmlApplicationRequestVoiceMethod) OptCreateTexmlApplicationRequestVoiceMethod {
	return OptCreateTexmlApplicationRequestVoiceMethod{
		Value: v,
		Set:   true,
	}
}

// OptCreateTexmlApplicationRequestVoiceMethod is optional CreateTexmlApplicationRequestVoiceMethod.
type OptCreateTexmlApplicationRequestVoiceMethod struct {
	Value CreateTexmlApplicationRequestVoiceMethod
	Set   bool
}

// IsSet returns true if OptCreateTexmlApplicationRequestVoiceMethod was set.
func (o OptCreateTexmlApplicationRequestVoiceMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateTexmlApplicationRequestVoiceMethod) Reset() {
	var v CreateTexmlApplicationRequestVoiceMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateTexmlApplicationRequestVoiceMethod) SetTo(v CreateTexmlApplicationRequestVoiceMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateTexmlApplicationRequestVoiceMethod) Get() (v CreateTexmlApplicationRequestVoiceMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateTexmlApplicationRequestVoiceMethod) Or(d CreateTexmlApplicationRequestVoiceMethod) CreateTexmlApplicationRequestVoiceMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateVerifyProfileCallRequest returns new OptCreateVerifyProfileCallRequest with value set to v.
func NewOptCreateVerifyProfileCallRequest(v CreateVerifyProfileCallRequest) OptCreateVerifyProfileCallRequest {
	return OptCreateVerifyProfileCallRequest{
		Value: v,
		Set:   true,
	}
}

// OptCreateVerifyProfileCallRequest is optional CreateVerifyProfileCallRequest.
type OptCreateVerifyProfileCallRequest struct {
	Value CreateVerifyProfileCallRequest
	Set   bool
}

// IsSet returns true if OptCreateVerifyProfileCallRequest was set.
func (o OptCreateVerifyProfileCallRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateVerifyProfileCallRequest) Reset() {
	var v CreateVerifyProfileCallRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateVerifyProfileCallRequest) SetTo(v CreateVerifyProfileCallRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateVerifyProfileCallRequest) Get() (v CreateVerifyProfileCallRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateVerifyProfileCallRequest) Or(d CreateVerifyProfileCallRequest) CreateVerifyProfileCallRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateVerifyProfileFlashcallRequest returns new OptCreateVerifyProfileFlashcallRequest with value set to v.
func NewOptCreateVerifyProfileFlashcallRequest(v CreateVerifyProfileFlashcallRequest) OptCreateVerifyProfileFlashcallRequest {
	return OptCreateVerifyProfileFlashcallRequest{
		Value: v,
		Set:   true,
	}
}

// OptCreateVerifyProfileFlashcallRequest is optional CreateVerifyProfileFlashcallRequest.
type OptCreateVerifyProfileFlashcallRequest struct {
	Value CreateVerifyProfileFlashcallRequest
	Set   bool
}

// IsSet returns true if OptCreateVerifyProfileFlashcallRequest was set.
func (o OptCreateVerifyProfileFlashcallRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateVerifyProfileFlashcallRequest) Reset() {
	var v CreateVerifyProfileFlashcallRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateVerifyProfileFlashcallRequest) SetTo(v CreateVerifyProfileFlashcallRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateVerifyProfileFlashcallRequest) Get() (v CreateVerifyProfileFlashcallRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateVerifyProfileFlashcallRequest) Or(d CreateVerifyProfileFlashcallRequest) CreateVerifyProfileFlashcallRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateVerifyProfileSMSRequest returns new OptCreateVerifyProfileSMSRequest with value set to v.
func NewOptCreateVerifyProfileSMSRequest(v CreateVerifyProfileSMSRequest) OptCreateVerifyProfileSMSRequest {
	return OptCreateVerifyProfileSMSRequest{
		Value: v,
		Set:   true,
	}
}

// OptCreateVerifyProfileSMSRequest is optional CreateVerifyProfileSMSRequest.
type OptCreateVerifyProfileSMSRequest struct {
	Value CreateVerifyProfileSMSRequest
	Set   bool
}

// IsSet returns true if OptCreateVerifyProfileSMSRequest was set.
func (o OptCreateVerifyProfileSMSRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateVerifyProfileSMSRequest) Reset() {
	var v CreateVerifyProfileSMSRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateVerifyProfileSMSRequest) SetTo(v CreateVerifyProfileSMSRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateVerifyProfileSMSRequest) Get() (v CreateVerifyProfileSMSRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateVerifyProfileSMSRequest) Or(d CreateVerifyProfileSMSRequest) CreateVerifyProfileSMSRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatedAt returns new OptCreatedAt with value set to v.
func NewOptCreatedAt(v CreatedAt) OptCreatedAt {
	return OptCreatedAt{
		Value: v,
		Set:   true,
	}
}

// OptCreatedAt is optional CreatedAt.
type OptCreatedAt struct {
	Value CreatedAt
	Set   bool
}

// IsSet returns true if OptCreatedAt was set.
func (o OptCreatedAt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatedAt) Reset() {
	var v CreatedAt
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatedAt) SetTo(v CreatedAt) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatedAt) Get() (v CreatedAt, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatedAt) Or(d CreatedAt) CreatedAt {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCredentials returns new OptCredentials with value set to v.
func NewOptCredentials(v Credentials) OptCredentials {
	return OptCredentials{
		Value: v,
		Set:   true,
	}
}

// OptCredentials is optional Credentials.
type OptCredentials struct {
	Value Credentials
	Set   bool
}

// IsSet returns true if OptCredentials was set.
func (o OptCredentials) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCredentials) Reset() {
	var v Credentials
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCredentials) SetTo(v Credentials) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCredentials) Get() (v Credentials, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCredentials) Or(d Credentials) Credentials {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCursor returns new OptCursor with value set to v.
func NewOptCursor(v Cursor) OptCursor {
	return OptCursor{
		Value: v,
		Set:   true,
	}
}

// OptCursor is optional Cursor.
type OptCursor struct {
	Value Cursor
	Set   bool
}

// IsSet returns true if OptCursor was set.
func (o OptCursor) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCursor) Reset() {
	var v Cursor
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCursor) SetTo(v Cursor) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCursor) Get() (v Cursor, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCursor) Or(d Cursor) Cursor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCursorPaginationMeta returns new OptCursorPaginationMeta with value set to v.
func NewOptCursorPaginationMeta(v CursorPaginationMeta) OptCursorPaginationMeta {
	return OptCursorPaginationMeta{
		Value: v,
		Set:   true,
	}
}

// OptCursorPaginationMeta is optional CursorPaginationMeta.
type OptCursorPaginationMeta struct {
	Value CursorPaginationMeta
	Set   bool
}

// IsSet returns true if OptCursorPaginationMeta was set.
func (o OptCursorPaginationMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCursorPaginationMeta) Reset() {
	var v CursorPaginationMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCursorPaginationMeta) SetTo(v CursorPaginationMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCursorPaginationMeta) Get() (v CursorPaginationMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCursorPaginationMeta) Or(d CursorPaginationMeta) CursorPaginationMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDate returns new OptDate with value set to v.
func NewOptDate(v time.Time) OptDate {
	return OptDate{
		Value: v,
		Set:   true,
	}
}

// OptDate is optional time.Time.
type OptDate struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDate was set.
func (o OptDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDate) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDate) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDate) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDate) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTimeRFC2822 returns new OptDateTimeRFC2822 with value set to v.
func NewOptDateTimeRFC2822(v DateTimeRFC2822) OptDateTimeRFC2822 {
	return OptDateTimeRFC2822{
		Value: v,
		Set:   true,
	}
}

// OptDateTimeRFC2822 is optional DateTimeRFC2822.
type OptDateTimeRFC2822 struct {
	Value DateTimeRFC2822
	Set   bool
}

// IsSet returns true if OptDateTimeRFC2822 was set.
func (o OptDateTimeRFC2822) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTimeRFC2822) Reset() {
	var v DateTimeRFC2822
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTimeRFC2822) SetTo(v DateTimeRFC2822) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTimeRFC2822) Get() (v DateTimeRFC2822, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTimeRFC2822) Or(d DateTimeRFC2822) DateTimeRFC2822 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialConferenceParticipantRequestAmdStatusCallbackMethod returns new OptDialConferenceParticipantRequestAmdStatusCallbackMethod with value set to v.
func NewOptDialConferenceParticipantRequestAmdStatusCallbackMethod(v DialConferenceParticipantRequestAmdStatusCallbackMethod) OptDialConferenceParticipantRequestAmdStatusCallbackMethod {
	return OptDialConferenceParticipantRequestAmdStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptDialConferenceParticipantRequestAmdStatusCallbackMethod is optional DialConferenceParticipantRequestAmdStatusCallbackMethod.
type OptDialConferenceParticipantRequestAmdStatusCallbackMethod struct {
	Value DialConferenceParticipantRequestAmdStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptDialConferenceParticipantRequestAmdStatusCallbackMethod was set.
func (o OptDialConferenceParticipantRequestAmdStatusCallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialConferenceParticipantRequestAmdStatusCallbackMethod) Reset() {
	var v DialConferenceParticipantRequestAmdStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialConferenceParticipantRequestAmdStatusCallbackMethod) SetTo(v DialConferenceParticipantRequestAmdStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialConferenceParticipantRequestAmdStatusCallbackMethod) Get() (v DialConferenceParticipantRequestAmdStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialConferenceParticipantRequestAmdStatusCallbackMethod) Or(d DialConferenceParticipantRequestAmdStatusCallbackMethod) DialConferenceParticipantRequestAmdStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialConferenceParticipantRequestBeep returns new OptDialConferenceParticipantRequestBeep with value set to v.
func NewOptDialConferenceParticipantRequestBeep(v DialConferenceParticipantRequestBeep) OptDialConferenceParticipantRequestBeep {
	return OptDialConferenceParticipantRequestBeep{
		Value: v,
		Set:   true,
	}
}

// OptDialConferenceParticipantRequestBeep is optional DialConferenceParticipantRequestBeep.
type OptDialConferenceParticipantRequestBeep struct {
	Value DialConferenceParticipantRequestBeep
	Set   bool
}

// IsSet returns true if OptDialConferenceParticipantRequestBeep was set.
func (o OptDialConferenceParticipantRequestBeep) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialConferenceParticipantRequestBeep) Reset() {
	var v DialConferenceParticipantRequestBeep
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialConferenceParticipantRequestBeep) SetTo(v DialConferenceParticipantRequestBeep) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialConferenceParticipantRequestBeep) Get() (v DialConferenceParticipantRequestBeep, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialConferenceParticipantRequestBeep) Or(d DialConferenceParticipantRequestBeep) DialConferenceParticipantRequestBeep {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialConferenceParticipantRequestConferenceRecord returns new OptDialConferenceParticipantRequestConferenceRecord with value set to v.
func NewOptDialConferenceParticipantRequestConferenceRecord(v DialConferenceParticipantRequestConferenceRecord) OptDialConferenceParticipantRequestConferenceRecord {
	return OptDialConferenceParticipantRequestConferenceRecord{
		Value: v,
		Set:   true,
	}
}

// OptDialConferenceParticipantRequestConferenceRecord is optional DialConferenceParticipantRequestConferenceRecord.
type OptDialConferenceParticipantRequestConferenceRecord struct {
	Value DialConferenceParticipantRequestConferenceRecord
	Set   bool
}

// IsSet returns true if OptDialConferenceParticipantRequestConferenceRecord was set.
func (o OptDialConferenceParticipantRequestConferenceRecord) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialConferenceParticipantRequestConferenceRecord) Reset() {
	var v DialConferenceParticipantRequestConferenceRecord
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialConferenceParticipantRequestConferenceRecord) SetTo(v DialConferenceParticipantRequestConferenceRecord) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialConferenceParticipantRequestConferenceRecord) Get() (v DialConferenceParticipantRequestConferenceRecord, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialConferenceParticipantRequestConferenceRecord) Or(d DialConferenceParticipantRequestConferenceRecord) DialConferenceParticipantRequestConferenceRecord {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod returns new OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod with value set to v.
func NewOptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod(v DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod) OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod {
	return OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod is optional DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod.
type OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod struct {
	Value DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod was set.
func (o OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod) Reset() {
	var v DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod) SetTo(v DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod) Get() (v DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod) Or(d DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod) DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialConferenceParticipantRequestConferenceStatusCallbackMethod returns new OptDialConferenceParticipantRequestConferenceStatusCallbackMethod with value set to v.
func NewOptDialConferenceParticipantRequestConferenceStatusCallbackMethod(v DialConferenceParticipantRequestConferenceStatusCallbackMethod) OptDialConferenceParticipantRequestConferenceStatusCallbackMethod {
	return OptDialConferenceParticipantRequestConferenceStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptDialConferenceParticipantRequestConferenceStatusCallbackMethod is optional DialConferenceParticipantRequestConferenceStatusCallbackMethod.
type OptDialConferenceParticipantRequestConferenceStatusCallbackMethod struct {
	Value DialConferenceParticipantRequestConferenceStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptDialConferenceParticipantRequestConferenceStatusCallbackMethod was set.
func (o OptDialConferenceParticipantRequestConferenceStatusCallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialConferenceParticipantRequestConferenceStatusCallbackMethod) Reset() {
	var v DialConferenceParticipantRequestConferenceStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialConferenceParticipantRequestConferenceStatusCallbackMethod) SetTo(v DialConferenceParticipantRequestConferenceStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialConferenceParticipantRequestConferenceStatusCallbackMethod) Get() (v DialConferenceParticipantRequestConferenceStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialConferenceParticipantRequestConferenceStatusCallbackMethod) Or(d DialConferenceParticipantRequestConferenceStatusCallbackMethod) DialConferenceParticipantRequestConferenceStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialConferenceParticipantRequestConferenceTrim returns new OptDialConferenceParticipantRequestConferenceTrim with value set to v.
func NewOptDialConferenceParticipantRequestConferenceTrim(v DialConferenceParticipantRequestConferenceTrim) OptDialConferenceParticipantRequestConferenceTrim {
	return OptDialConferenceParticipantRequestConferenceTrim{
		Value: v,
		Set:   true,
	}
}

// OptDialConferenceParticipantRequestConferenceTrim is optional DialConferenceParticipantRequestConferenceTrim.
type OptDialConferenceParticipantRequestConferenceTrim struct {
	Value DialConferenceParticipantRequestConferenceTrim
	Set   bool
}

// IsSet returns true if OptDialConferenceParticipantRequestConferenceTrim was set.
func (o OptDialConferenceParticipantRequestConferenceTrim) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialConferenceParticipantRequestConferenceTrim) Reset() {
	var v DialConferenceParticipantRequestConferenceTrim
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialConferenceParticipantRequestConferenceTrim) SetTo(v DialConferenceParticipantRequestConferenceTrim) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialConferenceParticipantRequestConferenceTrim) Get() (v DialConferenceParticipantRequestConferenceTrim, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialConferenceParticipantRequestConferenceTrim) Or(d DialConferenceParticipantRequestConferenceTrim) DialConferenceParticipantRequestConferenceTrim {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialConferenceParticipantRequestMachineDetection returns new OptDialConferenceParticipantRequestMachineDetection with value set to v.
func NewOptDialConferenceParticipantRequestMachineDetection(v DialConferenceParticipantRequestMachineDetection) OptDialConferenceParticipantRequestMachineDetection {
	return OptDialConferenceParticipantRequestMachineDetection{
		Value: v,
		Set:   true,
	}
}

// OptDialConferenceParticipantRequestMachineDetection is optional DialConferenceParticipantRequestMachineDetection.
type OptDialConferenceParticipantRequestMachineDetection struct {
	Value DialConferenceParticipantRequestMachineDetection
	Set   bool
}

// IsSet returns true if OptDialConferenceParticipantRequestMachineDetection was set.
func (o OptDialConferenceParticipantRequestMachineDetection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialConferenceParticipantRequestMachineDetection) Reset() {
	var v DialConferenceParticipantRequestMachineDetection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialConferenceParticipantRequestMachineDetection) SetTo(v DialConferenceParticipantRequestMachineDetection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialConferenceParticipantRequestMachineDetection) Get() (v DialConferenceParticipantRequestMachineDetection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialConferenceParticipantRequestMachineDetection) Or(d DialConferenceParticipantRequestMachineDetection) DialConferenceParticipantRequestMachineDetection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialConferenceParticipantRequestRecordingChannels returns new OptDialConferenceParticipantRequestRecordingChannels with value set to v.
func NewOptDialConferenceParticipantRequestRecordingChannels(v DialConferenceParticipantRequestRecordingChannels) OptDialConferenceParticipantRequestRecordingChannels {
	return OptDialConferenceParticipantRequestRecordingChannels{
		Value: v,
		Set:   true,
	}
}

// OptDialConferenceParticipantRequestRecordingChannels is optional DialConferenceParticipantRequestRecordingChannels.
type OptDialConferenceParticipantRequestRecordingChannels struct {
	Value DialConferenceParticipantRequestRecordingChannels
	Set   bool
}

// IsSet returns true if OptDialConferenceParticipantRequestRecordingChannels was set.
func (o OptDialConferenceParticipantRequestRecordingChannels) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialConferenceParticipantRequestRecordingChannels) Reset() {
	var v DialConferenceParticipantRequestRecordingChannels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialConferenceParticipantRequestRecordingChannels) SetTo(v DialConferenceParticipantRequestRecordingChannels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialConferenceParticipantRequestRecordingChannels) Get() (v DialConferenceParticipantRequestRecordingChannels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialConferenceParticipantRequestRecordingChannels) Or(d DialConferenceParticipantRequestRecordingChannels) DialConferenceParticipantRequestRecordingChannels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialConferenceParticipantRequestRecordingStatusCallbackMethod returns new OptDialConferenceParticipantRequestRecordingStatusCallbackMethod with value set to v.
func NewOptDialConferenceParticipantRequestRecordingStatusCallbackMethod(v DialConferenceParticipantRequestRecordingStatusCallbackMethod) OptDialConferenceParticipantRequestRecordingStatusCallbackMethod {
	return OptDialConferenceParticipantRequestRecordingStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptDialConferenceParticipantRequestRecordingStatusCallbackMethod is optional DialConferenceParticipantRequestRecordingStatusCallbackMethod.
type OptDialConferenceParticipantRequestRecordingStatusCallbackMethod struct {
	Value DialConferenceParticipantRequestRecordingStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptDialConferenceParticipantRequestRecordingStatusCallbackMethod was set.
func (o OptDialConferenceParticipantRequestRecordingStatusCallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialConferenceParticipantRequestRecordingStatusCallbackMethod) Reset() {
	var v DialConferenceParticipantRequestRecordingStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialConferenceParticipantRequestRecordingStatusCallbackMethod) SetTo(v DialConferenceParticipantRequestRecordingStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialConferenceParticipantRequestRecordingStatusCallbackMethod) Get() (v DialConferenceParticipantRequestRecordingStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialConferenceParticipantRequestRecordingStatusCallbackMethod) Or(d DialConferenceParticipantRequestRecordingStatusCallbackMethod) DialConferenceParticipantRequestRecordingStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialConferenceParticipantRequestRecordingTrack returns new OptDialConferenceParticipantRequestRecordingTrack with value set to v.
func NewOptDialConferenceParticipantRequestRecordingTrack(v DialConferenceParticipantRequestRecordingTrack) OptDialConferenceParticipantRequestRecordingTrack {
	return OptDialConferenceParticipantRequestRecordingTrack{
		Value: v,
		Set:   true,
	}
}

// OptDialConferenceParticipantRequestRecordingTrack is optional DialConferenceParticipantRequestRecordingTrack.
type OptDialConferenceParticipantRequestRecordingTrack struct {
	Value DialConferenceParticipantRequestRecordingTrack
	Set   bool
}

// IsSet returns true if OptDialConferenceParticipantRequestRecordingTrack was set.
func (o OptDialConferenceParticipantRequestRecordingTrack) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialConferenceParticipantRequestRecordingTrack) Reset() {
	var v DialConferenceParticipantRequestRecordingTrack
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialConferenceParticipantRequestRecordingTrack) SetTo(v DialConferenceParticipantRequestRecordingTrack) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialConferenceParticipantRequestRecordingTrack) Get() (v DialConferenceParticipantRequestRecordingTrack, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialConferenceParticipantRequestRecordingTrack) Or(d DialConferenceParticipantRequestRecordingTrack) DialConferenceParticipantRequestRecordingTrack {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialConferenceParticipantRequestStatusCallbackMethod returns new OptDialConferenceParticipantRequestStatusCallbackMethod with value set to v.
func NewOptDialConferenceParticipantRequestStatusCallbackMethod(v DialConferenceParticipantRequestStatusCallbackMethod) OptDialConferenceParticipantRequestStatusCallbackMethod {
	return OptDialConferenceParticipantRequestStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptDialConferenceParticipantRequestStatusCallbackMethod is optional DialConferenceParticipantRequestStatusCallbackMethod.
type OptDialConferenceParticipantRequestStatusCallbackMethod struct {
	Value DialConferenceParticipantRequestStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptDialConferenceParticipantRequestStatusCallbackMethod was set.
func (o OptDialConferenceParticipantRequestStatusCallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialConferenceParticipantRequestStatusCallbackMethod) Reset() {
	var v DialConferenceParticipantRequestStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialConferenceParticipantRequestStatusCallbackMethod) SetTo(v DialConferenceParticipantRequestStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialConferenceParticipantRequestStatusCallbackMethod) Get() (v DialConferenceParticipantRequestStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialConferenceParticipantRequestStatusCallbackMethod) Or(d DialConferenceParticipantRequestStatusCallbackMethod) DialConferenceParticipantRequestStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialConferenceParticipantRequestTrim returns new OptDialConferenceParticipantRequestTrim with value set to v.
func NewOptDialConferenceParticipantRequestTrim(v DialConferenceParticipantRequestTrim) OptDialConferenceParticipantRequestTrim {
	return OptDialConferenceParticipantRequestTrim{
		Value: v,
		Set:   true,
	}
}

// OptDialConferenceParticipantRequestTrim is optional DialConferenceParticipantRequestTrim.
type OptDialConferenceParticipantRequestTrim struct {
	Value DialConferenceParticipantRequestTrim
	Set   bool
}

// IsSet returns true if OptDialConferenceParticipantRequestTrim was set.
func (o OptDialConferenceParticipantRequestTrim) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialConferenceParticipantRequestTrim) Reset() {
	var v DialConferenceParticipantRequestTrim
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialConferenceParticipantRequestTrim) SetTo(v DialConferenceParticipantRequestTrim) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialConferenceParticipantRequestTrim) Get() (v DialConferenceParticipantRequestTrim, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialConferenceParticipantRequestTrim) Or(d DialConferenceParticipantRequestTrim) DialConferenceParticipantRequestTrim {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialogflowConfig returns new OptDialogflowConfig with value set to v.
func NewOptDialogflowConfig(v DialogflowConfig) OptDialogflowConfig {
	return OptDialogflowConfig{
		Value: v,
		Set:   true,
	}
}

// OptDialogflowConfig is optional DialogflowConfig.
type OptDialogflowConfig struct {
	Value DialogflowConfig
	Set   bool
}

// IsSet returns true if OptDialogflowConfig was set.
func (o OptDialogflowConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialogflowConfig) Reset() {
	var v DialogflowConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialogflowConfig) SetTo(v DialogflowConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialogflowConfig) Get() (v DialogflowConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialogflowConfig) Or(d DialogflowConfig) DialogflowConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDisplayName returns new OptDisplayName with value set to v.
func NewOptDisplayName(v DisplayName) OptDisplayName {
	return OptDisplayName{
		Value: v,
		Set:   true,
	}
}

// OptDisplayName is optional DisplayName.
type OptDisplayName struct {
	Value DisplayName
	Set   bool
}

// IsSet returns true if OptDisplayName was set.
func (o OptDisplayName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDisplayName) Reset() {
	var v DisplayName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDisplayName) SetTo(v DisplayName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDisplayName) Get() (v DisplayName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDisplayName) Or(d DisplayName) DisplayName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDtmfType returns new OptDtmfType with value set to v.
func NewOptDtmfType(v DtmfType) OptDtmfType {
	return OptDtmfType{
		Value: v,
		Set:   true,
	}
}

// OptDtmfType is optional DtmfType.
type OptDtmfType struct {
	Value DtmfType
	Set   bool
}

// IsSet returns true if OptDtmfType was set.
func (o OptDtmfType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDtmfType) Reset() {
	var v DtmfType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDtmfType) SetTo(v DtmfType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDtmfType) Get() (v DtmfType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDtmfType) Or(d DtmfType) DtmfType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptErrorMeta returns new OptErrorMeta with value set to v.
func NewOptErrorMeta(v ErrorMeta) OptErrorMeta {
	return OptErrorMeta{
		Value: v,
		Set:   true,
	}
}

// OptErrorMeta is optional ErrorMeta.
type OptErrorMeta struct {
	Value ErrorMeta
	Set   bool
}

// IsSet returns true if OptErrorMeta was set.
func (o OptErrorMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrorMeta) Reset() {
	var v ErrorMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrorMeta) SetTo(v ErrorMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrorMeta) Get() (v ErrorMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrorMeta) Or(d ErrorMeta) ErrorMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptErrorSource returns new OptErrorSource with value set to v.
func NewOptErrorSource(v ErrorSource) OptErrorSource {
	return OptErrorSource{
		Value: v,
		Set:   true,
	}
}

// OptErrorSource is optional ErrorSource.
type OptErrorSource struct {
	Value ErrorSource
	Set   bool
}

// IsSet returns true if OptErrorSource was set.
func (o OptErrorSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrorSource) Reset() {
	var v ErrorSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrorSource) SetTo(v ErrorSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrorSource) Get() (v ErrorSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrorSource) Or(d ErrorSource) ErrorSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFirstCommandTimeout returns new OptFirstCommandTimeout with value set to v.
func NewOptFirstCommandTimeout(v FirstCommandTimeout) OptFirstCommandTimeout {
	return OptFirstCommandTimeout{
		Value: v,
		Set:   true,
	}
}

// OptFirstCommandTimeout is optional FirstCommandTimeout.
type OptFirstCommandTimeout struct {
	Value FirstCommandTimeout
	Set   bool
}

// IsSet returns true if OptFirstCommandTimeout was set.
func (o OptFirstCommandTimeout) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFirstCommandTimeout) Reset() {
	var v FirstCommandTimeout
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFirstCommandTimeout) SetTo(v FirstCommandTimeout) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFirstCommandTimeout) Get() (v FirstCommandTimeout, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFirstCommandTimeout) Or(d FirstCommandTimeout) FirstCommandTimeout {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFirstCommandTimeoutSecs returns new OptFirstCommandTimeoutSecs with value set to v.
func NewOptFirstCommandTimeoutSecs(v FirstCommandTimeoutSecs) OptFirstCommandTimeoutSecs {
	return OptFirstCommandTimeoutSecs{
		Value: v,
		Set:   true,
	}
}

// OptFirstCommandTimeoutSecs is optional FirstCommandTimeoutSecs.
type OptFirstCommandTimeoutSecs struct {
	Value FirstCommandTimeoutSecs
	Set   bool
}

// IsSet returns true if OptFirstCommandTimeoutSecs was set.
func (o OptFirstCommandTimeoutSecs) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFirstCommandTimeoutSecs) Reset() {
	var v FirstCommandTimeoutSecs
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFirstCommandTimeoutSecs) SetTo(v FirstCommandTimeoutSecs) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFirstCommandTimeoutSecs) Get() (v FirstCommandTimeoutSecs, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFirstCommandTimeoutSecs) Or(d FirstCommandTimeoutSecs) FirstCommandTimeoutSecs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat32 returns new OptFloat32 with value set to v.
func NewOptFloat32(v float32) OptFloat32 {
	return OptFloat32{
		Value: v,
		Set:   true,
	}
}

// OptFloat32 is optional float32.
type OptFloat32 struct {
	Value float32
	Set   bool
}

// IsSet returns true if OptFloat32 was set.
func (o OptFloat32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat32) Reset() {
	var v float32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat32) SetTo(v float32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat32) Get() (v float32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat32) Or(d float32) float32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGatherUsingSpeakRequestLanguage returns new OptGatherUsingSpeakRequestLanguage with value set to v.
func NewOptGatherUsingSpeakRequestLanguage(v GatherUsingSpeakRequestLanguage) OptGatherUsingSpeakRequestLanguage {
	return OptGatherUsingSpeakRequestLanguage{
		Value: v,
		Set:   true,
	}
}

// OptGatherUsingSpeakRequestLanguage is optional GatherUsingSpeakRequestLanguage.
type OptGatherUsingSpeakRequestLanguage struct {
	Value GatherUsingSpeakRequestLanguage
	Set   bool
}

// IsSet returns true if OptGatherUsingSpeakRequestLanguage was set.
func (o OptGatherUsingSpeakRequestLanguage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGatherUsingSpeakRequestLanguage) Reset() {
	var v GatherUsingSpeakRequestLanguage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGatherUsingSpeakRequestLanguage) SetTo(v GatherUsingSpeakRequestLanguage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGatherUsingSpeakRequestLanguage) Get() (v GatherUsingSpeakRequestLanguage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGatherUsingSpeakRequestLanguage) Or(d GatherUsingSpeakRequestLanguage) GatherUsingSpeakRequestLanguage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGatherUsingSpeakRequestPayloadType returns new OptGatherUsingSpeakRequestPayloadType with value set to v.
func NewOptGatherUsingSpeakRequestPayloadType(v GatherUsingSpeakRequestPayloadType) OptGatherUsingSpeakRequestPayloadType {
	return OptGatherUsingSpeakRequestPayloadType{
		Value: v,
		Set:   true,
	}
}

// OptGatherUsingSpeakRequestPayloadType is optional GatherUsingSpeakRequestPayloadType.
type OptGatherUsingSpeakRequestPayloadType struct {
	Value GatherUsingSpeakRequestPayloadType
	Set   bool
}

// IsSet returns true if OptGatherUsingSpeakRequestPayloadType was set.
func (o OptGatherUsingSpeakRequestPayloadType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGatherUsingSpeakRequestPayloadType) Reset() {
	var v GatherUsingSpeakRequestPayloadType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGatherUsingSpeakRequestPayloadType) SetTo(v GatherUsingSpeakRequestPayloadType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGatherUsingSpeakRequestPayloadType) Get() (v GatherUsingSpeakRequestPayloadType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGatherUsingSpeakRequestPayloadType) Or(d GatherUsingSpeakRequestPayloadType) GatherUsingSpeakRequestPayloadType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGatherUsingSpeakRequestServiceLevel returns new OptGatherUsingSpeakRequestServiceLevel with value set to v.
func NewOptGatherUsingSpeakRequestServiceLevel(v GatherUsingSpeakRequestServiceLevel) OptGatherUsingSpeakRequestServiceLevel {
	return OptGatherUsingSpeakRequestServiceLevel{
		Value: v,
		Set:   true,
	}
}

// OptGatherUsingSpeakRequestServiceLevel is optional GatherUsingSpeakRequestServiceLevel.
type OptGatherUsingSpeakRequestServiceLevel struct {
	Value GatherUsingSpeakRequestServiceLevel
	Set   bool
}

// IsSet returns true if OptGatherUsingSpeakRequestServiceLevel was set.
func (o OptGatherUsingSpeakRequestServiceLevel) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGatherUsingSpeakRequestServiceLevel) Reset() {
	var v GatherUsingSpeakRequestServiceLevel
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGatherUsingSpeakRequestServiceLevel) SetTo(v GatherUsingSpeakRequestServiceLevel) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGatherUsingSpeakRequestServiceLevel) Get() (v GatherUsingSpeakRequestServiceLevel, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGatherUsingSpeakRequestServiceLevel) Or(d GatherUsingSpeakRequestServiceLevel) GatherUsingSpeakRequestServiceLevel {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHTTP returns new OptHTTP with value set to v.
func NewOptHTTP(v HTTP) OptHTTP {
	return OptHTTP{
		Value: v,
		Set:   true,
	}
}

// OptHTTP is optional HTTP.
type OptHTTP struct {
	Value HTTP
	Set   bool
}

// IsSet returns true if OptHTTP was set.
func (o OptHTTP) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHTTP) Reset() {
	var v HTTP
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHTTP) SetTo(v HTTP) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHTTP) Get() (v HTTP, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHTTP) Or(d HTTP) HTTP {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHTTPRequest returns new OptHTTPRequest with value set to v.
func NewOptHTTPRequest(v HTTPRequest) OptHTTPRequest {
	return OptHTTPRequest{
		Value: v,
		Set:   true,
	}
}

// OptHTTPRequest is optional HTTPRequest.
type OptHTTPRequest struct {
	Value HTTPRequest
	Set   bool
}

// IsSet returns true if OptHTTPRequest was set.
func (o OptHTTPRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHTTPRequest) Reset() {
	var v HTTPRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHTTPRequest) SetTo(v HTTPRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHTTPRequest) Get() (v HTTPRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHTTPRequest) Or(d HTTPRequest) HTTPRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInitiateCallRequestAsyncAmdStatusCallbackMethod returns new OptInitiateCallRequestAsyncAmdStatusCallbackMethod with value set to v.
func NewOptInitiateCallRequestAsyncAmdStatusCallbackMethod(v InitiateCallRequestAsyncAmdStatusCallbackMethod) OptInitiateCallRequestAsyncAmdStatusCallbackMethod {
	return OptInitiateCallRequestAsyncAmdStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptInitiateCallRequestAsyncAmdStatusCallbackMethod is optional InitiateCallRequestAsyncAmdStatusCallbackMethod.
type OptInitiateCallRequestAsyncAmdStatusCallbackMethod struct {
	Value InitiateCallRequestAsyncAmdStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptInitiateCallRequestAsyncAmdStatusCallbackMethod was set.
func (o OptInitiateCallRequestAsyncAmdStatusCallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInitiateCallRequestAsyncAmdStatusCallbackMethod) Reset() {
	var v InitiateCallRequestAsyncAmdStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInitiateCallRequestAsyncAmdStatusCallbackMethod) SetTo(v InitiateCallRequestAsyncAmdStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInitiateCallRequestAsyncAmdStatusCallbackMethod) Get() (v InitiateCallRequestAsyncAmdStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInitiateCallRequestAsyncAmdStatusCallbackMethod) Or(d InitiateCallRequestAsyncAmdStatusCallbackMethod) InitiateCallRequestAsyncAmdStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInitiateCallRequestDetectionMode returns new OptInitiateCallRequestDetectionMode with value set to v.
func NewOptInitiateCallRequestDetectionMode(v InitiateCallRequestDetectionMode) OptInitiateCallRequestDetectionMode {
	return OptInitiateCallRequestDetectionMode{
		Value: v,
		Set:   true,
	}
}

// OptInitiateCallRequestDetectionMode is optional InitiateCallRequestDetectionMode.
type OptInitiateCallRequestDetectionMode struct {
	Value InitiateCallRequestDetectionMode
	Set   bool
}

// IsSet returns true if OptInitiateCallRequestDetectionMode was set.
func (o OptInitiateCallRequestDetectionMode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInitiateCallRequestDetectionMode) Reset() {
	var v InitiateCallRequestDetectionMode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInitiateCallRequestDetectionMode) SetTo(v InitiateCallRequestDetectionMode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInitiateCallRequestDetectionMode) Get() (v InitiateCallRequestDetectionMode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInitiateCallRequestDetectionMode) Or(d InitiateCallRequestDetectionMode) InitiateCallRequestDetectionMode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInitiateCallRequestMachineDetection returns new OptInitiateCallRequestMachineDetection with value set to v.
func NewOptInitiateCallRequestMachineDetection(v InitiateCallRequestMachineDetection) OptInitiateCallRequestMachineDetection {
	return OptInitiateCallRequestMachineDetection{
		Value: v,
		Set:   true,
	}
}

// OptInitiateCallRequestMachineDetection is optional InitiateCallRequestMachineDetection.
type OptInitiateCallRequestMachineDetection struct {
	Value InitiateCallRequestMachineDetection
	Set   bool
}

// IsSet returns true if OptInitiateCallRequestMachineDetection was set.
func (o OptInitiateCallRequestMachineDetection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInitiateCallRequestMachineDetection) Reset() {
	var v InitiateCallRequestMachineDetection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInitiateCallRequestMachineDetection) SetTo(v InitiateCallRequestMachineDetection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInitiateCallRequestMachineDetection) Get() (v InitiateCallRequestMachineDetection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInitiateCallRequestMachineDetection) Or(d InitiateCallRequestMachineDetection) InitiateCallRequestMachineDetection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInitiateCallRequestRecordingChannels returns new OptInitiateCallRequestRecordingChannels with value set to v.
func NewOptInitiateCallRequestRecordingChannels(v InitiateCallRequestRecordingChannels) OptInitiateCallRequestRecordingChannels {
	return OptInitiateCallRequestRecordingChannels{
		Value: v,
		Set:   true,
	}
}

// OptInitiateCallRequestRecordingChannels is optional InitiateCallRequestRecordingChannels.
type OptInitiateCallRequestRecordingChannels struct {
	Value InitiateCallRequestRecordingChannels
	Set   bool
}

// IsSet returns true if OptInitiateCallRequestRecordingChannels was set.
func (o OptInitiateCallRequestRecordingChannels) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInitiateCallRequestRecordingChannels) Reset() {
	var v InitiateCallRequestRecordingChannels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInitiateCallRequestRecordingChannels) SetTo(v InitiateCallRequestRecordingChannels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInitiateCallRequestRecordingChannels) Get() (v InitiateCallRequestRecordingChannels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInitiateCallRequestRecordingChannels) Or(d InitiateCallRequestRecordingChannels) InitiateCallRequestRecordingChannels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInitiateCallRequestRecordingStatusCallbackMethod returns new OptInitiateCallRequestRecordingStatusCallbackMethod with value set to v.
func NewOptInitiateCallRequestRecordingStatusCallbackMethod(v InitiateCallRequestRecordingStatusCallbackMethod) OptInitiateCallRequestRecordingStatusCallbackMethod {
	return OptInitiateCallRequestRecordingStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptInitiateCallRequestRecordingStatusCallbackMethod is optional InitiateCallRequestRecordingStatusCallbackMethod.
type OptInitiateCallRequestRecordingStatusCallbackMethod struct {
	Value InitiateCallRequestRecordingStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptInitiateCallRequestRecordingStatusCallbackMethod was set.
func (o OptInitiateCallRequestRecordingStatusCallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInitiateCallRequestRecordingStatusCallbackMethod) Reset() {
	var v InitiateCallRequestRecordingStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInitiateCallRequestRecordingStatusCallbackMethod) SetTo(v InitiateCallRequestRecordingStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInitiateCallRequestRecordingStatusCallbackMethod) Get() (v InitiateCallRequestRecordingStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInitiateCallRequestRecordingStatusCallbackMethod) Or(d InitiateCallRequestRecordingStatusCallbackMethod) InitiateCallRequestRecordingStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInitiateCallRequestRecordingTrack returns new OptInitiateCallRequestRecordingTrack with value set to v.
func NewOptInitiateCallRequestRecordingTrack(v InitiateCallRequestRecordingTrack) OptInitiateCallRequestRecordingTrack {
	return OptInitiateCallRequestRecordingTrack{
		Value: v,
		Set:   true,
	}
}

// OptInitiateCallRequestRecordingTrack is optional InitiateCallRequestRecordingTrack.
type OptInitiateCallRequestRecordingTrack struct {
	Value InitiateCallRequestRecordingTrack
	Set   bool
}

// IsSet returns true if OptInitiateCallRequestRecordingTrack was set.
func (o OptInitiateCallRequestRecordingTrack) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInitiateCallRequestRecordingTrack) Reset() {
	var v InitiateCallRequestRecordingTrack
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInitiateCallRequestRecordingTrack) SetTo(v InitiateCallRequestRecordingTrack) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInitiateCallRequestRecordingTrack) Get() (v InitiateCallRequestRecordingTrack, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInitiateCallRequestRecordingTrack) Or(d InitiateCallRequestRecordingTrack) InitiateCallRequestRecordingTrack {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInitiateCallRequestStatusCallbackEvent returns new OptInitiateCallRequestStatusCallbackEvent with value set to v.
func NewOptInitiateCallRequestStatusCallbackEvent(v InitiateCallRequestStatusCallbackEvent) OptInitiateCallRequestStatusCallbackEvent {
	return OptInitiateCallRequestStatusCallbackEvent{
		Value: v,
		Set:   true,
	}
}

// OptInitiateCallRequestStatusCallbackEvent is optional InitiateCallRequestStatusCallbackEvent.
type OptInitiateCallRequestStatusCallbackEvent struct {
	Value InitiateCallRequestStatusCallbackEvent
	Set   bool
}

// IsSet returns true if OptInitiateCallRequestStatusCallbackEvent was set.
func (o OptInitiateCallRequestStatusCallbackEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInitiateCallRequestStatusCallbackEvent) Reset() {
	var v InitiateCallRequestStatusCallbackEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInitiateCallRequestStatusCallbackEvent) SetTo(v InitiateCallRequestStatusCallbackEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInitiateCallRequestStatusCallbackEvent) Get() (v InitiateCallRequestStatusCallbackEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInitiateCallRequestStatusCallbackEvent) Or(d InitiateCallRequestStatusCallbackEvent) InitiateCallRequestStatusCallbackEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInitiateCallRequestStatusCallbackMethod returns new OptInitiateCallRequestStatusCallbackMethod with value set to v.
func NewOptInitiateCallRequestStatusCallbackMethod(v InitiateCallRequestStatusCallbackMethod) OptInitiateCallRequestStatusCallbackMethod {
	return OptInitiateCallRequestStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptInitiateCallRequestStatusCallbackMethod is optional InitiateCallRequestStatusCallbackMethod.
type OptInitiateCallRequestStatusCallbackMethod struct {
	Value InitiateCallRequestStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptInitiateCallRequestStatusCallbackMethod was set.
func (o OptInitiateCallRequestStatusCallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInitiateCallRequestStatusCallbackMethod) Reset() {
	var v InitiateCallRequestStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInitiateCallRequestStatusCallbackMethod) SetTo(v InitiateCallRequestStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInitiateCallRequestStatusCallbackMethod) Get() (v InitiateCallRequestStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInitiateCallRequestStatusCallbackMethod) Or(d InitiateCallRequestStatusCallbackMethod) InitiateCallRequestStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInitiateCallRequestTrim returns new OptInitiateCallRequestTrim with value set to v.
func NewOptInitiateCallRequestTrim(v InitiateCallRequestTrim) OptInitiateCallRequestTrim {
	return OptInitiateCallRequestTrim{
		Value: v,
		Set:   true,
	}
}

// OptInitiateCallRequestTrim is optional InitiateCallRequestTrim.
type OptInitiateCallRequestTrim struct {
	Value InitiateCallRequestTrim
	Set   bool
}

// IsSet returns true if OptInitiateCallRequestTrim was set.
func (o OptInitiateCallRequestTrim) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInitiateCallRequestTrim) Reset() {
	var v InitiateCallRequestTrim
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInitiateCallRequestTrim) SetTo(v InitiateCallRequestTrim) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInitiateCallRequestTrim) Get() (v InitiateCallRequestTrim, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInitiateCallRequestTrim) Or(d InitiateCallRequestTrim) InitiateCallRequestTrim {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInitiateCallRequestUrlMethod returns new OptInitiateCallRequestUrlMethod with value set to v.
func NewOptInitiateCallRequestUrlMethod(v InitiateCallRequestUrlMethod) OptInitiateCallRequestUrlMethod {
	return OptInitiateCallRequestUrlMethod{
		Value: v,
		Set:   true,
	}
}

// OptInitiateCallRequestUrlMethod is optional InitiateCallRequestUrlMethod.
type OptInitiateCallRequestUrlMethod struct {
	Value InitiateCallRequestUrlMethod
	Set   bool
}

// IsSet returns true if OptInitiateCallRequestUrlMethod was set.
func (o OptInitiateCallRequestUrlMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInitiateCallRequestUrlMethod) Reset() {
	var v InitiateCallRequestUrlMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInitiateCallRequestUrlMethod) SetTo(v InitiateCallRequestUrlMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInitiateCallRequestUrlMethod) Get() (v InitiateCallRequestUrlMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInitiateCallRequestUrlMethod) Or(d InitiateCallRequestUrlMethod) InitiateCallRequestUrlMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInitiateCallResult returns new OptInitiateCallResult with value set to v.
func NewOptInitiateCallResult(v InitiateCallResult) OptInitiateCallResult {
	return OptInitiateCallResult{
		Value: v,
		Set:   true,
	}
}

// OptInitiateCallResult is optional InitiateCallResult.
type OptInitiateCallResult struct {
	Value InitiateCallResult
	Set   bool
}

// IsSet returns true if OptInitiateCallResult was set.
func (o OptInitiateCallResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInitiateCallResult) Reset() {
	var v InitiateCallResult
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInitiateCallResult) SetTo(v InitiateCallResult) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInitiateCallResult) Get() (v InitiateCallResult, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInitiateCallResult) Or(d InitiateCallResult) InitiateCallResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIntId returns new OptIntId with value set to v.
func NewOptIntId(v IntId) OptIntId {
	return OptIntId{
		Value: v,
		Set:   true,
	}
}

// OptIntId is optional IntId.
type OptIntId struct {
	Value IntId
	Set   bool
}

// IsSet returns true if OptIntId was set.
func (o OptIntId) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIntId) Reset() {
	var v IntId
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIntId) SetTo(v IntId) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIntId) Get() (v IntId, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIntId) Or(d IntId) IntId {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLogoURL returns new OptLogoURL with value set to v.
func NewOptLogoURL(v LogoURL) OptLogoURL {
	return OptLogoURL{
		Value: v,
		Set:   true,
	}
}

// OptLogoURL is optional LogoURL.
type OptLogoURL struct {
	Value LogoURL
	Set   bool
}

// IsSet returns true if OptLogoURL was set.
func (o OptLogoURL) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLogoURL) Reset() {
	var v LogoURL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLogoURL) SetTo(v LogoURL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLogoURL) Get() (v LogoURL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLogoURL) Or(d LogoURL) LogoURL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLoopcount returns new OptLoopcount with value set to v.
func NewOptLoopcount(v Loopcount) OptLoopcount {
	return OptLoopcount{
		Value: v,
		Set:   true,
	}
}

// OptLoopcount is optional Loopcount.
type OptLoopcount struct {
	Value Loopcount
	Set   bool
}

// IsSet returns true if OptLoopcount was set.
func (o OptLoopcount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLoopcount) Reset() {
	var v Loopcount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLoopcount) SetTo(v Loopcount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLoopcount) Get() (v Loopcount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLoopcount) Or(d Loopcount) Loopcount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMetaResponse returns new OptMetaResponse with value set to v.
func NewOptMetaResponse(v MetaResponse) OptMetaResponse {
	return OptMetaResponse{
		Value: v,
		Set:   true,
	}
}

// OptMetaResponse is optional MetaResponse.
type OptMetaResponse struct {
	Value MetaResponse
	Set   bool
}

// IsSet returns true if OptMetaResponse was set.
func (o OptMetaResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMetaResponse) Reset() {
	var v MetaResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMetaResponse) SetTo(v MetaResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMetaResponse) Get() (v MetaResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMetaResponse) Or(d MetaResponse) MetaResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNewParticipantResource returns new OptNewParticipantResource with value set to v.
func NewOptNewParticipantResource(v NewParticipantResource) OptNewParticipantResource {
	return OptNewParticipantResource{
		Value: v,
		Set:   true,
	}
}

// OptNewParticipantResource is optional NewParticipantResource.
type OptNewParticipantResource struct {
	Value NewParticipantResource
	Set   bool
}

// IsSet returns true if OptNewParticipantResource was set.
func (o OptNewParticipantResource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNewParticipantResource) Reset() {
	var v NewParticipantResource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNewParticipantResource) SetTo(v NewParticipantResource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNewParticipantResource) Get() (v NewParticipantResource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNewParticipantResource) Or(d NewParticipantResource) NewParticipantResource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNewParticipantResourceStatus returns new OptNewParticipantResourceStatus with value set to v.
func NewOptNewParticipantResourceStatus(v NewParticipantResourceStatus) OptNewParticipantResourceStatus {
	return OptNewParticipantResourceStatus{
		Value: v,
		Set:   true,
	}
}

// OptNewParticipantResourceStatus is optional NewParticipantResourceStatus.
type OptNewParticipantResourceStatus struct {
	Value NewParticipantResourceStatus
	Set   bool
}

// IsSet returns true if OptNewParticipantResourceStatus was set.
func (o OptNewParticipantResourceStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNewParticipantResourceStatus) Reset() {
	var v NewParticipantResourceStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNewParticipantResourceStatus) SetTo(v NewParticipantResourceStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNewParticipantResourceStatus) Get() (v NewParticipantResourceStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNewParticipantResourceStatus) Or(d NewParticipantResourceStatus) NewParticipantResourceStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilConferenceSid returns new OptNilConferenceSid with value set to v.
func NewOptNilConferenceSid(v ConferenceSid) OptNilConferenceSid {
	return OptNilConferenceSid{
		Value: v,
		Set:   true,
	}
}

// OptNilConferenceSid is optional nullable ConferenceSid.
type OptNilConferenceSid struct {
	Value ConferenceSid
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilConferenceSid was set.
func (o OptNilConferenceSid) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilConferenceSid) Reset() {
	var v ConferenceSid
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilConferenceSid) SetTo(v ConferenceSid) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilConferenceSid) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilConferenceSid) SetToNull() {
	o.Set = true
	o.Null = true
	var v ConferenceSid
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilConferenceSid) Get() (v ConferenceSid, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilConferenceSid) Or(d ConferenceSid) ConferenceSid {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilHTTPResponse returns new OptNilHTTPResponse with value set to v.
func NewOptNilHTTPResponse(v HTTPResponse) OptNilHTTPResponse {
	return OptNilHTTPResponse{
		Value: v,
		Set:   true,
	}
}

// OptNilHTTPResponse is optional nullable HTTPResponse.
type OptNilHTTPResponse struct {
	Value HTTPResponse
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilHTTPResponse was set.
func (o OptNilHTTPResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilHTTPResponse) Reset() {
	var v HTTPResponse
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilHTTPResponse) SetTo(v HTTPResponse) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilHTTPResponse) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilHTTPResponse) SetToNull() {
	o.Set = true
	o.Null = true
	var v HTTPResponse
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilHTTPResponse) Get() (v HTTPResponse, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilHTTPResponse) Or(d HTTPResponse) HTTPResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt returns new OptNilInt with value set to v.
func NewOptNilInt(v int) OptNilInt {
	return OptNilInt{
		Value: v,
		Set:   true,
	}
}

// OptNilInt is optional nullable int.
type OptNilInt struct {
	Value int
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt was set.
func (o OptNilInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt) SetTo(v int) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInt) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInt) SetToNull() {
	o.Set = true
	o.Null = true
	var v int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTexmlErrorCode returns new OptNilTexmlErrorCode with value set to v.
func NewOptNilTexmlErrorCode(v TexmlErrorCode) OptNilTexmlErrorCode {
	return OptNilTexmlErrorCode{
		Value: v,
		Set:   true,
	}
}

// OptNilTexmlErrorCode is optional nullable TexmlErrorCode.
type OptNilTexmlErrorCode struct {
	Value TexmlErrorCode
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTexmlErrorCode was set.
func (o OptNilTexmlErrorCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTexmlErrorCode) Reset() {
	var v TexmlErrorCode
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTexmlErrorCode) SetTo(v TexmlErrorCode) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTexmlErrorCode) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilTexmlErrorCode) SetToNull() {
	o.Set = true
	o.Null = true
	var v TexmlErrorCode
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTexmlErrorCode) Get() (v TexmlErrorCode, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTexmlErrorCode) Or(d TexmlErrorCode) TexmlErrorCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTexmlPriceUnit returns new OptNilTexmlPriceUnit with value set to v.
func NewOptNilTexmlPriceUnit(v TexmlPriceUnit) OptNilTexmlPriceUnit {
	return OptNilTexmlPriceUnit{
		Value: v,
		Set:   true,
	}
}

// OptNilTexmlPriceUnit is optional nullable TexmlPriceUnit.
type OptNilTexmlPriceUnit struct {
	Value TexmlPriceUnit
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTexmlPriceUnit was set.
func (o OptNilTexmlPriceUnit) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTexmlPriceUnit) Reset() {
	var v TexmlPriceUnit
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTexmlPriceUnit) SetTo(v TexmlPriceUnit) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTexmlPriceUnit) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilTexmlPriceUnit) SetToNull() {
	o.Set = true
	o.Null = true
	var v TexmlPriceUnit
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTexmlPriceUnit) Get() (v TexmlPriceUnit, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTexmlPriceUnit) Or(d TexmlPriceUnit) TexmlPriceUnit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTexmlRecordingDuration returns new OptNilTexmlRecordingDuration with value set to v.
func NewOptNilTexmlRecordingDuration(v TexmlRecordingDuration) OptNilTexmlRecordingDuration {
	return OptNilTexmlRecordingDuration{
		Value: v,
		Set:   true,
	}
}

// OptNilTexmlRecordingDuration is optional nullable TexmlRecordingDuration.
type OptNilTexmlRecordingDuration struct {
	Value TexmlRecordingDuration
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTexmlRecordingDuration was set.
func (o OptNilTexmlRecordingDuration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTexmlRecordingDuration) Reset() {
	var v TexmlRecordingDuration
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTexmlRecordingDuration) SetTo(v TexmlRecordingDuration) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTexmlRecordingDuration) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilTexmlRecordingDuration) SetToNull() {
	o.Set = true
	o.Null = true
	var v TexmlRecordingDuration
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTexmlRecordingDuration) Get() (v TexmlRecordingDuration, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTexmlRecordingDuration) Or(d TexmlRecordingDuration) TexmlRecordingDuration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTexmlRecordingPrice returns new OptNilTexmlRecordingPrice with value set to v.
func NewOptNilTexmlRecordingPrice(v TexmlRecordingPrice) OptNilTexmlRecordingPrice {
	return OptNilTexmlRecordingPrice{
		Value: v,
		Set:   true,
	}
}

// OptNilTexmlRecordingPrice is optional nullable TexmlRecordingPrice.
type OptNilTexmlRecordingPrice struct {
	Value TexmlRecordingPrice
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTexmlRecordingPrice was set.
func (o OptNilTexmlRecordingPrice) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTexmlRecordingPrice) Reset() {
	var v TexmlRecordingPrice
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTexmlRecordingPrice) SetTo(v TexmlRecordingPrice) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTexmlRecordingPrice) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilTexmlRecordingPrice) SetToNull() {
	o.Set = true
	o.Null = true
	var v TexmlRecordingPrice
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTexmlRecordingPrice) Get() (v TexmlRecordingPrice, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTexmlRecordingPrice) Or(d TexmlRecordingPrice) TexmlRecordingPrice {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilURI returns new OptNilURI with value set to v.
func NewOptNilURI(v url.URL) OptNilURI {
	return OptNilURI{
		Value: v,
		Set:   true,
	}
}

// OptNilURI is optional nullable url.URL.
type OptNilURI struct {
	Value url.URL
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilURI was set.
func (o OptNilURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilURI) SetTo(v url.URL) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilURI) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilURI) SetToNull() {
	o.Set = true
	o.Null = true
	var v url.URL
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilURI) Get() (v url.URL, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNoiseSuppressionDirection returns new OptNoiseSuppressionDirection with value set to v.
func NewOptNoiseSuppressionDirection(v NoiseSuppressionDirection) OptNoiseSuppressionDirection {
	return OptNoiseSuppressionDirection{
		Value: v,
		Set:   true,
	}
}

// OptNoiseSuppressionDirection is optional NoiseSuppressionDirection.
type OptNoiseSuppressionDirection struct {
	Value NoiseSuppressionDirection
	Set   bool
}

// IsSet returns true if OptNoiseSuppressionDirection was set.
func (o OptNoiseSuppressionDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNoiseSuppressionDirection) Reset() {
	var v NoiseSuppressionDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNoiseSuppressionDirection) SetTo(v NoiseSuppressionDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNoiseSuppressionDirection) Get() (v NoiseSuppressionDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNoiseSuppressionDirection) Or(d NoiseSuppressionDirection) NoiseSuppressionDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOutboundVoiceProfileId returns new OptOutboundVoiceProfileId with value set to v.
func NewOptOutboundVoiceProfileId(v OutboundVoiceProfileId) OptOutboundVoiceProfileId {
	return OptOutboundVoiceProfileId{
		Value: v,
		Set:   true,
	}
}

// OptOutboundVoiceProfileId is optional OutboundVoiceProfileId.
type OptOutboundVoiceProfileId struct {
	Value OutboundVoiceProfileId
	Set   bool
}

// IsSet returns true if OptOutboundVoiceProfileId was set.
func (o OptOutboundVoiceProfileId) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOutboundVoiceProfileId) Reset() {
	var v OutboundVoiceProfileId
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOutboundVoiceProfileId) SetTo(v OutboundVoiceProfileId) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOutboundVoiceProfileId) Get() (v OutboundVoiceProfileId, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOutboundVoiceProfileId) Or(d OutboundVoiceProfileId) OutboundVoiceProfileId {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaginationMeta returns new OptPaginationMeta with value set to v.
func NewOptPaginationMeta(v PaginationMeta) OptPaginationMeta {
	return OptPaginationMeta{
		Value: v,
		Set:   true,
	}
}

// OptPaginationMeta is optional PaginationMeta.
type OptPaginationMeta struct {
	Value PaginationMeta
	Set   bool
}

// IsSet returns true if OptPaginationMeta was set.
func (o OptPaginationMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaginationMeta) Reset() {
	var v PaginationMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaginationMeta) SetTo(v PaginationMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaginationMeta) Get() (v PaginationMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaginationMeta) Or(d PaginationMeta) PaginationMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptParticipantResource returns new OptParticipantResource with value set to v.
func NewOptParticipantResource(v ParticipantResource) OptParticipantResource {
	return OptParticipantResource{
		Value: v,
		Set:   true,
	}
}

// OptParticipantResource is optional ParticipantResource.
type OptParticipantResource struct {
	Value ParticipantResource
	Set   bool
}

// IsSet returns true if OptParticipantResource was set.
func (o OptParticipantResource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptParticipantResource) Reset() {
	var v ParticipantResource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptParticipantResource) SetTo(v ParticipantResource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptParticipantResource) Get() (v ParticipantResource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptParticipantResource) Or(d ParticipantResource) ParticipantResource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptParticipantResourceIndex returns new OptParticipantResourceIndex with value set to v.
func NewOptParticipantResourceIndex(v ParticipantResourceIndex) OptParticipantResourceIndex {
	return OptParticipantResourceIndex{
		Value: v,
		Set:   true,
	}
}

// OptParticipantResourceIndex is optional ParticipantResourceIndex.
type OptParticipantResourceIndex struct {
	Value ParticipantResourceIndex
	Set   bool
}

// IsSet returns true if OptParticipantResourceIndex was set.
func (o OptParticipantResourceIndex) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptParticipantResourceIndex) Reset() {
	var v ParticipantResourceIndex
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptParticipantResourceIndex) SetTo(v ParticipantResourceIndex) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptParticipantResourceIndex) Get() (v ParticipantResourceIndex, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptParticipantResourceIndex) Or(d ParticipantResourceIndex) ParticipantResourceIndex {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptParticipantResourceStatus returns new OptParticipantResourceStatus with value set to v.
func NewOptParticipantResourceStatus(v ParticipantResourceStatus) OptParticipantResourceStatus {
	return OptParticipantResourceStatus{
		Value: v,
		Set:   true,
	}
}

// OptParticipantResourceStatus is optional ParticipantResourceStatus.
type OptParticipantResourceStatus struct {
	Value ParticipantResourceStatus
	Set   bool
}

// IsSet returns true if OptParticipantResourceStatus was set.
func (o OptParticipantResourceStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptParticipantResourceStatus) Reset() {
	var v ParticipantResourceStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptParticipantResourceStatus) SetTo(v ParticipantResourceStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptParticipantResourceStatus) Get() (v ParticipantResourceStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptParticipantResourceStatus) Or(d ParticipantResourceStatus) ParticipantResourceStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneNumbersItemGoogleVerificationStatus returns new OptPhoneNumbersItemGoogleVerificationStatus with value set to v.
func NewOptPhoneNumbersItemGoogleVerificationStatus(v PhoneNumbersItemGoogleVerificationStatus) OptPhoneNumbersItemGoogleVerificationStatus {
	return OptPhoneNumbersItemGoogleVerificationStatus{
		Value: v,
		Set:   true,
	}
}

// OptPhoneNumbersItemGoogleVerificationStatus is optional PhoneNumbersItemGoogleVerificationStatus.
type OptPhoneNumbersItemGoogleVerificationStatus struct {
	Value PhoneNumbersItemGoogleVerificationStatus
	Set   bool
}

// IsSet returns true if OptPhoneNumbersItemGoogleVerificationStatus was set.
func (o OptPhoneNumbersItemGoogleVerificationStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneNumbersItemGoogleVerificationStatus) Reset() {
	var v PhoneNumbersItemGoogleVerificationStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneNumbersItemGoogleVerificationStatus) SetTo(v PhoneNumbersItemGoogleVerificationStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneNumbersItemGoogleVerificationStatus) Get() (v PhoneNumbersItemGoogleVerificationStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneNumbersItemGoogleVerificationStatus) Or(d PhoneNumbersItemGoogleVerificationStatus) PhoneNumbersItemGoogleVerificationStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlayAudioUrlRequestAudioType returns new OptPlayAudioUrlRequestAudioType with value set to v.
func NewOptPlayAudioUrlRequestAudioType(v PlayAudioUrlRequestAudioType) OptPlayAudioUrlRequestAudioType {
	return OptPlayAudioUrlRequestAudioType{
		Value: v,
		Set:   true,
	}
}

// OptPlayAudioUrlRequestAudioType is optional PlayAudioUrlRequestAudioType.
type OptPlayAudioUrlRequestAudioType struct {
	Value PlayAudioUrlRequestAudioType
	Set   bool
}

// IsSet returns true if OptPlayAudioUrlRequestAudioType was set.
func (o OptPlayAudioUrlRequestAudioType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlayAudioUrlRequestAudioType) Reset() {
	var v PlayAudioUrlRequestAudioType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlayAudioUrlRequestAudioType) SetTo(v PlayAudioUrlRequestAudioType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlayAudioUrlRequestAudioType) Get() (v PlayAudioUrlRequestAudioType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlayAudioUrlRequestAudioType) Or(d PlayAudioUrlRequestAudioType) PlayAudioUrlRequestAudioType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlayBeep returns new OptPlayBeep with value set to v.
func NewOptPlayBeep(v PlayBeep) OptPlayBeep {
	return OptPlayBeep{
		Value: v,
		Set:   true,
	}
}

// OptPlayBeep is optional PlayBeep.
type OptPlayBeep struct {
	Value PlayBeep
	Set   bool
}

// IsSet returns true if OptPlayBeep was set.
func (o OptPlayBeep) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlayBeep) Reset() {
	var v PlayBeep
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlayBeep) SetTo(v PlayBeep) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlayBeep) Get() (v PlayBeep, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlayBeep) Or(d PlayBeep) PlayBeep {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptQueueCall returns new OptQueueCall with value set to v.
func NewOptQueueCall(v QueueCall) OptQueueCall {
	return OptQueueCall{
		Value: v,
		Set:   true,
	}
}

// OptQueueCall is optional QueueCall.
type OptQueueCall struct {
	Value QueueCall
	Set   bool
}

// IsSet returns true if OptQueueCall was set.
func (o OptQueueCall) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptQueueCall) Reset() {
	var v QueueCall
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptQueueCall) SetTo(v QueueCall) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptQueueCall) Get() (v QueueCall, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptQueueCall) Or(d QueueCall) QueueCall {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordingResponseData returns new OptRecordingResponseData with value set to v.
func NewOptRecordingResponseData(v RecordingResponseData) OptRecordingResponseData {
	return OptRecordingResponseData{
		Value: v,
		Set:   true,
	}
}

// OptRecordingResponseData is optional RecordingResponseData.
type OptRecordingResponseData struct {
	Value RecordingResponseData
	Set   bool
}

// IsSet returns true if OptRecordingResponseData was set.
func (o OptRecordingResponseData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordingResponseData) Reset() {
	var v RecordingResponseData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordingResponseData) SetTo(v RecordingResponseData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordingResponseData) Get() (v RecordingResponseData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordingResponseData) Or(d RecordingResponseData) RecordingResponseData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordingResponseDataChannels returns new OptRecordingResponseDataChannels with value set to v.
func NewOptRecordingResponseDataChannels(v RecordingResponseDataChannels) OptRecordingResponseDataChannels {
	return OptRecordingResponseDataChannels{
		Value: v,
		Set:   true,
	}
}

// OptRecordingResponseDataChannels is optional RecordingResponseDataChannels.
type OptRecordingResponseDataChannels struct {
	Value RecordingResponseDataChannels
	Set   bool
}

// IsSet returns true if OptRecordingResponseDataChannels was set.
func (o OptRecordingResponseDataChannels) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordingResponseDataChannels) Reset() {
	var v RecordingResponseDataChannels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordingResponseDataChannels) SetTo(v RecordingResponseDataChannels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordingResponseDataChannels) Get() (v RecordingResponseDataChannels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordingResponseDataChannels) Or(d RecordingResponseDataChannels) RecordingResponseDataChannels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordingResponseDataDownloadUrls returns new OptRecordingResponseDataDownloadUrls with value set to v.
func NewOptRecordingResponseDataDownloadUrls(v RecordingResponseDataDownloadUrls) OptRecordingResponseDataDownloadUrls {
	return OptRecordingResponseDataDownloadUrls{
		Value: v,
		Set:   true,
	}
}

// OptRecordingResponseDataDownloadUrls is optional RecordingResponseDataDownloadUrls.
type OptRecordingResponseDataDownloadUrls struct {
	Value RecordingResponseDataDownloadUrls
	Set   bool
}

// IsSet returns true if OptRecordingResponseDataDownloadUrls was set.
func (o OptRecordingResponseDataDownloadUrls) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordingResponseDataDownloadUrls) Reset() {
	var v RecordingResponseDataDownloadUrls
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordingResponseDataDownloadUrls) SetTo(v RecordingResponseDataDownloadUrls) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordingResponseDataDownloadUrls) Get() (v RecordingResponseDataDownloadUrls, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordingResponseDataDownloadUrls) Or(d RecordingResponseDataDownloadUrls) RecordingResponseDataDownloadUrls {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordingResponseDataRecordType returns new OptRecordingResponseDataRecordType with value set to v.
func NewOptRecordingResponseDataRecordType(v RecordingResponseDataRecordType) OptRecordingResponseDataRecordType {
	return OptRecordingResponseDataRecordType{
		Value: v,
		Set:   true,
	}
}

// OptRecordingResponseDataRecordType is optional RecordingResponseDataRecordType.
type OptRecordingResponseDataRecordType struct {
	Value RecordingResponseDataRecordType
	Set   bool
}

// IsSet returns true if OptRecordingResponseDataRecordType was set.
func (o OptRecordingResponseDataRecordType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordingResponseDataRecordType) Reset() {
	var v RecordingResponseDataRecordType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordingResponseDataRecordType) SetTo(v RecordingResponseDataRecordType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordingResponseDataRecordType) Get() (v RecordingResponseDataRecordType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordingResponseDataRecordType) Or(d RecordingResponseDataRecordType) RecordingResponseDataRecordType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordingResponseDataSource returns new OptRecordingResponseDataSource with value set to v.
func NewOptRecordingResponseDataSource(v RecordingResponseDataSource) OptRecordingResponseDataSource {
	return OptRecordingResponseDataSource{
		Value: v,
		Set:   true,
	}
}

// OptRecordingResponseDataSource is optional RecordingResponseDataSource.
type OptRecordingResponseDataSource struct {
	Value RecordingResponseDataSource
	Set   bool
}

// IsSet returns true if OptRecordingResponseDataSource was set.
func (o OptRecordingResponseDataSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordingResponseDataSource) Reset() {
	var v RecordingResponseDataSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordingResponseDataSource) SetTo(v RecordingResponseDataSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordingResponseDataSource) Get() (v RecordingResponseDataSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordingResponseDataSource) Or(d RecordingResponseDataSource) RecordingResponseDataSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordingResponseDataStatus returns new OptRecordingResponseDataStatus with value set to v.
func NewOptRecordingResponseDataStatus(v RecordingResponseDataStatus) OptRecordingResponseDataStatus {
	return OptRecordingResponseDataStatus{
		Value: v,
		Set:   true,
	}
}

// OptRecordingResponseDataStatus is optional RecordingResponseDataStatus.
type OptRecordingResponseDataStatus struct {
	Value RecordingResponseDataStatus
	Set   bool
}

// IsSet returns true if OptRecordingResponseDataStatus was set.
func (o OptRecordingResponseDataStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordingResponseDataStatus) Reset() {
	var v RecordingResponseDataStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordingResponseDataStatus) SetTo(v RecordingResponseDataStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordingResponseDataStatus) Get() (v RecordingResponseDataStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordingResponseDataStatus) Or(d RecordingResponseDataStatus) RecordingResponseDataStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordingSource returns new OptRecordingSource with value set to v.
func NewOptRecordingSource(v RecordingSource) OptRecordingSource {
	return OptRecordingSource{
		Value: v,
		Set:   true,
	}
}

// OptRecordingSource is optional RecordingSource.
type OptRecordingSource struct {
	Value RecordingSource
	Set   bool
}

// IsSet returns true if OptRecordingSource was set.
func (o OptRecordingSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordingSource) Reset() {
	var v RecordingSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordingSource) SetTo(v RecordingSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordingSource) Get() (v RecordingSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordingSource) Or(d RecordingSource) RecordingSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordingStatusCallbackEvent returns new OptRecordingStatusCallbackEvent with value set to v.
func NewOptRecordingStatusCallbackEvent(v RecordingStatusCallbackEvent) OptRecordingStatusCallbackEvent {
	return OptRecordingStatusCallbackEvent{
		Value: v,
		Set:   true,
	}
}

// OptRecordingStatusCallbackEvent is optional RecordingStatusCallbackEvent.
type OptRecordingStatusCallbackEvent struct {
	Value RecordingStatusCallbackEvent
	Set   bool
}

// IsSet returns true if OptRecordingStatusCallbackEvent was set.
func (o OptRecordingStatusCallbackEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordingStatusCallbackEvent) Reset() {
	var v RecordingStatusCallbackEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordingStatusCallbackEvent) SetTo(v RecordingStatusCallbackEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordingStatusCallbackEvent) Get() (v RecordingStatusCallbackEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordingStatusCallbackEvent) Or(d RecordingStatusCallbackEvent) RecordingStatusCallbackEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordingTrack returns new OptRecordingTrack with value set to v.
func NewOptRecordingTrack(v RecordingTrack) OptRecordingTrack {
	return OptRecordingTrack{
		Value: v,
		Set:   true,
	}
}

// OptRecordingTrack is optional RecordingTrack.
type OptRecordingTrack struct {
	Value RecordingTrack
	Set   bool
}

// IsSet returns true if OptRecordingTrack was set.
func (o OptRecordingTrack) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordingTrack) Reset() {
	var v RecordingTrack
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordingTrack) SetTo(v RecordingTrack) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordingTrack) Get() (v RecordingTrack, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordingTrack) Or(d RecordingTrack) RecordingTrack {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordingTranscription returns new OptRecordingTranscription with value set to v.
func NewOptRecordingTranscription(v RecordingTranscription) OptRecordingTranscription {
	return OptRecordingTranscription{
		Value: v,
		Set:   true,
	}
}

// OptRecordingTranscription is optional RecordingTranscription.
type OptRecordingTranscription struct {
	Value RecordingTranscription
	Set   bool
}

// IsSet returns true if OptRecordingTranscription was set.
func (o OptRecordingTranscription) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordingTranscription) Reset() {
	var v RecordingTranscription
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordingTranscription) SetTo(v RecordingTranscription) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordingTranscription) Get() (v RecordingTranscription, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordingTranscription) Or(d RecordingTranscription) RecordingTranscription {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordingTranscriptionRecordType returns new OptRecordingTranscriptionRecordType with value set to v.
func NewOptRecordingTranscriptionRecordType(v RecordingTranscriptionRecordType) OptRecordingTranscriptionRecordType {
	return OptRecordingTranscriptionRecordType{
		Value: v,
		Set:   true,
	}
}

// OptRecordingTranscriptionRecordType is optional RecordingTranscriptionRecordType.
type OptRecordingTranscriptionRecordType struct {
	Value RecordingTranscriptionRecordType
	Set   bool
}

// IsSet returns true if OptRecordingTranscriptionRecordType was set.
func (o OptRecordingTranscriptionRecordType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordingTranscriptionRecordType) Reset() {
	var v RecordingTranscriptionRecordType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordingTranscriptionRecordType) SetTo(v RecordingTranscriptionRecordType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordingTranscriptionRecordType) Get() (v RecordingTranscriptionRecordType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordingTranscriptionRecordType) Or(d RecordingTranscriptionRecordType) RecordingTranscriptionRecordType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordingTranscriptionStatus returns new OptRecordingTranscriptionStatus with value set to v.
func NewOptRecordingTranscriptionStatus(v RecordingTranscriptionStatus) OptRecordingTranscriptionStatus {
	return OptRecordingTranscriptionStatus{
		Value: v,
		Set:   true,
	}
}

// OptRecordingTranscriptionStatus is optional RecordingTranscriptionStatus.
type OptRecordingTranscriptionStatus struct {
	Value RecordingTranscriptionStatus
	Set   bool
}

// IsSet returns true if OptRecordingTranscriptionStatus was set.
func (o OptRecordingTranscriptionStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordingTranscriptionStatus) Reset() {
	var v RecordingTranscriptionStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordingTranscriptionStatus) SetTo(v RecordingTranscriptionStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordingTranscriptionStatus) Get() (v RecordingTranscriptionStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordingTranscriptionStatus) Or(d RecordingTranscriptionStatus) RecordingTranscriptionStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRegion returns new OptRegion with value set to v.
func NewOptRegion(v Region) OptRegion {
	return OptRegion{
		Value: v,
		Set:   true,
	}
}

// OptRegion is optional Region.
type OptRegion struct {
	Value Region
	Set   bool
}

// IsSet returns true if OptRegion was set.
func (o OptRegion) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRegion) Reset() {
	var v Region
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRegion) SetTo(v Region) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRegion) Get() (v Region, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRegion) Or(d Region) Region {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRegisterCallResponseData returns new OptRegisterCallResponseData with value set to v.
func NewOptRegisterCallResponseData(v RegisterCallResponseData) OptRegisterCallResponseData {
	return OptRegisterCallResponseData{
		Value: v,
		Set:   true,
	}
}

// OptRegisterCallResponseData is optional RegisterCallResponseData.
type OptRegisterCallResponseData struct {
	Value RegisterCallResponseData
	Set   bool
}

// IsSet returns true if OptRegisterCallResponseData was set.
func (o OptRegisterCallResponseData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRegisterCallResponseData) Reset() {
	var v RegisterCallResponseData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRegisterCallResponseData) SetTo(v RegisterCallResponseData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRegisterCallResponseData) Get() (v RegisterCallResponseData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRegisterCallResponseData) Or(d RegisterCallResponseData) RegisterCallResponseData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRoomRecording returns new OptRoomRecording with value set to v.
func NewOptRoomRecording(v RoomRecording) OptRoomRecording {
	return OptRoomRecording{
		Value: v,
		Set:   true,
	}
}

// OptRoomRecording is optional RoomRecording.
type OptRoomRecording struct {
	Value RoomRecording
	Set   bool
}

// IsSet returns true if OptRoomRecording was set.
func (o OptRoomRecording) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRoomRecording) Reset() {
	var v RoomRecording
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRoomRecording) SetTo(v RoomRecording) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRoomRecording) Get() (v RoomRecording, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRoomRecording) Or(d RoomRecording) RoomRecording {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRoomRecordingStatus returns new OptRoomRecordingStatus with value set to v.
func NewOptRoomRecordingStatus(v RoomRecordingStatus) OptRoomRecordingStatus {
	return OptRoomRecordingStatus{
		Value: v,
		Set:   true,
	}
}

// OptRoomRecordingStatus is optional RoomRecordingStatus.
type OptRoomRecordingStatus struct {
	Value RoomRecordingStatus
	Set   bool
}

// IsSet returns true if OptRoomRecordingStatus was set.
func (o OptRoomRecordingStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRoomRecordingStatus) Reset() {
	var v RoomRecordingStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRoomRecordingStatus) SetTo(v RoomRecordingStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRoomRecordingStatus) Get() (v RoomRecordingStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRoomRecordingStatus) Or(d RoomRecordingStatus) RoomRecordingStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRoomRecordingType returns new OptRoomRecordingType with value set to v.
func NewOptRoomRecordingType(v RoomRecordingType) OptRoomRecordingType {
	return OptRoomRecordingType{
		Value: v,
		Set:   true,
	}
}

// OptRoomRecordingType is optional RoomRecordingType.
type OptRoomRecordingType struct {
	Value RoomRecordingType
	Set   bool
}

// IsSet returns true if OptRoomRecordingType was set.
func (o OptRoomRecordingType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRoomRecordingType) Reset() {
	var v RoomRecordingType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRoomRecordingType) SetTo(v RoomRecordingType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRoomRecordingType) Get() (v RoomRecordingType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRoomRecordingType) Or(d RoomRecordingType) RoomRecordingType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSortApplication returns new OptSortApplication with value set to v.
func NewOptSortApplication(v SortApplication) OptSortApplication {
	return OptSortApplication{
		Value: v,
		Set:   true,
	}
}

// OptSortApplication is optional SortApplication.
type OptSortApplication struct {
	Value SortApplication
	Set   bool
}

// IsSet returns true if OptSortApplication was set.
func (o OptSortApplication) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSortApplication) Reset() {
	var v SortApplication
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSortApplication) SetTo(v SortApplication) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSortApplication) Get() (v SortApplication, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSortApplication) Or(d SortApplication) SortApplication {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSortConnection returns new OptSortConnection with value set to v.
func NewOptSortConnection(v SortConnection) OptSortConnection {
	return OptSortConnection{
		Value: v,
		Set:   true,
	}
}

// OptSortConnection is optional SortConnection.
type OptSortConnection struct {
	Value SortConnection
	Set   bool
}

// IsSet returns true if OptSortConnection was set.
func (o OptSortConnection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSortConnection) Reset() {
	var v SortConnection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSortConnection) SetTo(v SortConnection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSortConnection) Get() (v SortConnection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSortConnection) Or(d SortConnection) SortConnection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSoundModifications returns new OptSoundModifications with value set to v.
func NewOptSoundModifications(v SoundModifications) OptSoundModifications {
	return OptSoundModifications{
		Value: v,
		Set:   true,
	}
}

// OptSoundModifications is optional SoundModifications.
type OptSoundModifications struct {
	Value SoundModifications
	Set   bool
}

// IsSet returns true if OptSoundModifications was set.
func (o OptSoundModifications) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSoundModifications) Reset() {
	var v SoundModifications
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSoundModifications) SetTo(v SoundModifications) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSoundModifications) Get() (v SoundModifications, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSoundModifications) Or(d SoundModifications) SoundModifications {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSourceResponse returns new OptSourceResponse with value set to v.
func NewOptSourceResponse(v SourceResponse) OptSourceResponse {
	return OptSourceResponse{
		Value: v,
		Set:   true,
	}
}

// OptSourceResponse is optional SourceResponse.
type OptSourceResponse struct {
	Value SourceResponse
	Set   bool
}

// IsSet returns true if OptSourceResponse was set.
func (o OptSourceResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSourceResponse) Reset() {
	var v SourceResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSourceResponse) SetTo(v SourceResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSourceResponse) Get() (v SourceResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSourceResponse) Or(d SourceResponse) SourceResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSpeakRequestLanguage returns new OptSpeakRequestLanguage with value set to v.
func NewOptSpeakRequestLanguage(v SpeakRequestLanguage) OptSpeakRequestLanguage {
	return OptSpeakRequestLanguage{
		Value: v,
		Set:   true,
	}
}

// OptSpeakRequestLanguage is optional SpeakRequestLanguage.
type OptSpeakRequestLanguage struct {
	Value SpeakRequestLanguage
	Set   bool
}

// IsSet returns true if OptSpeakRequestLanguage was set.
func (o OptSpeakRequestLanguage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSpeakRequestLanguage) Reset() {
	var v SpeakRequestLanguage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSpeakRequestLanguage) SetTo(v SpeakRequestLanguage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSpeakRequestLanguage) Get() (v SpeakRequestLanguage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSpeakRequestLanguage) Or(d SpeakRequestLanguage) SpeakRequestLanguage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSpeakRequestPayloadType returns new OptSpeakRequestPayloadType with value set to v.
func NewOptSpeakRequestPayloadType(v SpeakRequestPayloadType) OptSpeakRequestPayloadType {
	return OptSpeakRequestPayloadType{
		Value: v,
		Set:   true,
	}
}

// OptSpeakRequestPayloadType is optional SpeakRequestPayloadType.
type OptSpeakRequestPayloadType struct {
	Value SpeakRequestPayloadType
	Set   bool
}

// IsSet returns true if OptSpeakRequestPayloadType was set.
func (o OptSpeakRequestPayloadType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSpeakRequestPayloadType) Reset() {
	var v SpeakRequestPayloadType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSpeakRequestPayloadType) SetTo(v SpeakRequestPayloadType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSpeakRequestPayloadType) Get() (v SpeakRequestPayloadType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSpeakRequestPayloadType) Or(d SpeakRequestPayloadType) SpeakRequestPayloadType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSpeakRequestServiceLevel returns new OptSpeakRequestServiceLevel with value set to v.
func NewOptSpeakRequestServiceLevel(v SpeakRequestServiceLevel) OptSpeakRequestServiceLevel {
	return OptSpeakRequestServiceLevel{
		Value: v,
		Set:   true,
	}
}

// OptSpeakRequestServiceLevel is optional SpeakRequestServiceLevel.
type OptSpeakRequestServiceLevel struct {
	Value SpeakRequestServiceLevel
	Set   bool
}

// IsSet returns true if OptSpeakRequestServiceLevel was set.
func (o OptSpeakRequestServiceLevel) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSpeakRequestServiceLevel) Reset() {
	var v SpeakRequestServiceLevel
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSpeakRequestServiceLevel) SetTo(v SpeakRequestServiceLevel) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSpeakRequestServiceLevel) Get() (v SpeakRequestServiceLevel, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSpeakRequestServiceLevel) Or(d SpeakRequestServiceLevel) SpeakRequestServiceLevel {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStartForkingRequestStreamType returns new OptStartForkingRequestStreamType with value set to v.
func NewOptStartForkingRequestStreamType(v StartForkingRequestStreamType) OptStartForkingRequestStreamType {
	return OptStartForkingRequestStreamType{
		Value: v,
		Set:   true,
	}
}

// OptStartForkingRequestStreamType is optional StartForkingRequestStreamType.
type OptStartForkingRequestStreamType struct {
	Value StartForkingRequestStreamType
	Set   bool
}

// IsSet returns true if OptStartForkingRequestStreamType was set.
func (o OptStartForkingRequestStreamType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStartForkingRequestStreamType) Reset() {
	var v StartForkingRequestStreamType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStartForkingRequestStreamType) SetTo(v StartForkingRequestStreamType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStartForkingRequestStreamType) Get() (v StartForkingRequestStreamType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStartForkingRequestStreamType) Or(d StartForkingRequestStreamType) StartForkingRequestStreamType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStartRecordingRequestRecordingTrack returns new OptStartRecordingRequestRecordingTrack with value set to v.
func NewOptStartRecordingRequestRecordingTrack(v StartRecordingRequestRecordingTrack) OptStartRecordingRequestRecordingTrack {
	return OptStartRecordingRequestRecordingTrack{
		Value: v,
		Set:   true,
	}
}

// OptStartRecordingRequestRecordingTrack is optional StartRecordingRequestRecordingTrack.
type OptStartRecordingRequestRecordingTrack struct {
	Value StartRecordingRequestRecordingTrack
	Set   bool
}

// IsSet returns true if OptStartRecordingRequestRecordingTrack was set.
func (o OptStartRecordingRequestRecordingTrack) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStartRecordingRequestRecordingTrack) Reset() {
	var v StartRecordingRequestRecordingTrack
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStartRecordingRequestRecordingTrack) SetTo(v StartRecordingRequestRecordingTrack) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStartRecordingRequestRecordingTrack) Get() (v StartRecordingRequestRecordingTrack, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStartRecordingRequestRecordingTrack) Or(d StartRecordingRequestRecordingTrack) StartRecordingRequestRecordingTrack {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStartRecordingRequestTrim returns new OptStartRecordingRequestTrim with value set to v.
func NewOptStartRecordingRequestTrim(v StartRecordingRequestTrim) OptStartRecordingRequestTrim {
	return OptStartRecordingRequestTrim{
		Value: v,
		Set:   true,
	}
}

// OptStartRecordingRequestTrim is optional StartRecordingRequestTrim.
type OptStartRecordingRequestTrim struct {
	Value StartRecordingRequestTrim
	Set   bool
}

// IsSet returns true if OptStartRecordingRequestTrim was set.
func (o OptStartRecordingRequestTrim) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStartRecordingRequestTrim) Reset() {
	var v StartRecordingRequestTrim
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStartRecordingRequestTrim) SetTo(v StartRecordingRequestTrim) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStartRecordingRequestTrim) Get() (v StartRecordingRequestTrim, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStartRecordingRequestTrim) Or(d StartRecordingRequestTrim) StartRecordingRequestTrim {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStartStreamingRequestStreamTrack returns new OptStartStreamingRequestStreamTrack with value set to v.
func NewOptStartStreamingRequestStreamTrack(v StartStreamingRequestStreamTrack) OptStartStreamingRequestStreamTrack {
	return OptStartStreamingRequestStreamTrack{
		Value: v,
		Set:   true,
	}
}

// OptStartStreamingRequestStreamTrack is optional StartStreamingRequestStreamTrack.
type OptStartStreamingRequestStreamTrack struct {
	Value StartStreamingRequestStreamTrack
	Set   bool
}

// IsSet returns true if OptStartStreamingRequestStreamTrack was set.
func (o OptStartStreamingRequestStreamTrack) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStartStreamingRequestStreamTrack) Reset() {
	var v StartStreamingRequestStreamTrack
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStartStreamingRequestStreamTrack) SetTo(v StartStreamingRequestStreamTrack) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStartStreamingRequestStreamTrack) Get() (v StartStreamingRequestStreamTrack, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStartStreamingRequestStreamTrack) Or(d StartStreamingRequestStreamTrack) StartStreamingRequestStreamTrack {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStatus returns new OptStatus with value set to v.
func NewOptStatus(v Status) OptStatus {
	return OptStatus{
		Value: v,
		Set:   true,
	}
}

// OptStatus is optional Status.
type OptStatus struct {
	Value Status
	Set   bool
}

// IsSet returns true if OptStatus was set.
func (o OptStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStatus) Reset() {
	var v Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStatus) SetTo(v Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStatus) Get() (v Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStatus) Or(d Status) Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStopForkingRequestStreamType returns new OptStopForkingRequestStreamType with value set to v.
func NewOptStopForkingRequestStreamType(v StopForkingRequestStreamType) OptStopForkingRequestStreamType {
	return OptStopForkingRequestStreamType{
		Value: v,
		Set:   true,
	}
}

// OptStopForkingRequestStreamType is optional StopForkingRequestStreamType.
type OptStopForkingRequestStreamType struct {
	Value StopForkingRequestStreamType
	Set   bool
}

// IsSet returns true if OptStopForkingRequestStreamType was set.
func (o OptStopForkingRequestStreamType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStopForkingRequestStreamType) Reset() {
	var v StopForkingRequestStreamType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStopForkingRequestStreamType) SetTo(v StopForkingRequestStreamType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStopForkingRequestStreamType) Get() (v StopForkingRequestStreamType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStopForkingRequestStreamType) Or(d StopForkingRequestStreamType) StopForkingRequestStreamType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStringInt64 returns new OptStringInt64 with value set to v.
func NewOptStringInt64(v int64) OptStringInt64 {
	return OptStringInt64{
		Value: v,
		Set:   true,
	}
}

// OptStringInt64 is optional int64.
type OptStringInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptStringInt64 was set.
func (o OptStringInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStringInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStringInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStringInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStringInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTelephonyCredential returns new OptTelephonyCredential with value set to v.
func NewOptTelephonyCredential(v TelephonyCredential) OptTelephonyCredential {
	return OptTelephonyCredential{
		Value: v,
		Set:   true,
	}
}

// OptTelephonyCredential is optional TelephonyCredential.
type OptTelephonyCredential struct {
	Value TelephonyCredential
	Set   bool
}

// IsSet returns true if OptTelephonyCredential was set.
func (o OptTelephonyCredential) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTelephonyCredential) Reset() {
	var v TelephonyCredential
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTelephonyCredential) SetTo(v TelephonyCredential) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTelephonyCredential) Get() (v TelephonyCredential, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTelephonyCredential) Or(d TelephonyCredential) TelephonyCredential {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlApplication returns new OptTexmlApplication with value set to v.
func NewOptTexmlApplication(v TexmlApplication) OptTexmlApplication {
	return OptTexmlApplication{
		Value: v,
		Set:   true,
	}
}

// OptTexmlApplication is optional TexmlApplication.
type OptTexmlApplication struct {
	Value TexmlApplication
	Set   bool
}

// IsSet returns true if OptTexmlApplication was set.
func (o OptTexmlApplication) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlApplication) Reset() {
	var v TexmlApplication
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlApplication) SetTo(v TexmlApplication) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlApplication) Get() (v TexmlApplication, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlApplication) Or(d TexmlApplication) TexmlApplication {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlApplicationInbound returns new OptTexmlApplicationInbound with value set to v.
func NewOptTexmlApplicationInbound(v TexmlApplicationInbound) OptTexmlApplicationInbound {
	return OptTexmlApplicationInbound{
		Value: v,
		Set:   true,
	}
}

// OptTexmlApplicationInbound is optional TexmlApplicationInbound.
type OptTexmlApplicationInbound struct {
	Value TexmlApplicationInbound
	Set   bool
}

// IsSet returns true if OptTexmlApplicationInbound was set.
func (o OptTexmlApplicationInbound) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlApplicationInbound) Reset() {
	var v TexmlApplicationInbound
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlApplicationInbound) SetTo(v TexmlApplicationInbound) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlApplicationInbound) Get() (v TexmlApplicationInbound, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlApplicationInbound) Or(d TexmlApplicationInbound) TexmlApplicationInbound {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlApplicationInboundSipSubdomainReceiveSettings returns new OptTexmlApplicationInboundSipSubdomainReceiveSettings with value set to v.
func NewOptTexmlApplicationInboundSipSubdomainReceiveSettings(v TexmlApplicationInboundSipSubdomainReceiveSettings) OptTexmlApplicationInboundSipSubdomainReceiveSettings {
	return OptTexmlApplicationInboundSipSubdomainReceiveSettings{
		Value: v,
		Set:   true,
	}
}

// OptTexmlApplicationInboundSipSubdomainReceiveSettings is optional TexmlApplicationInboundSipSubdomainReceiveSettings.
type OptTexmlApplicationInboundSipSubdomainReceiveSettings struct {
	Value TexmlApplicationInboundSipSubdomainReceiveSettings
	Set   bool
}

// IsSet returns true if OptTexmlApplicationInboundSipSubdomainReceiveSettings was set.
func (o OptTexmlApplicationInboundSipSubdomainReceiveSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlApplicationInboundSipSubdomainReceiveSettings) Reset() {
	var v TexmlApplicationInboundSipSubdomainReceiveSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlApplicationInboundSipSubdomainReceiveSettings) SetTo(v TexmlApplicationInboundSipSubdomainReceiveSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlApplicationInboundSipSubdomainReceiveSettings) Get() (v TexmlApplicationInboundSipSubdomainReceiveSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlApplicationInboundSipSubdomainReceiveSettings) Or(d TexmlApplicationInboundSipSubdomainReceiveSettings) TexmlApplicationInboundSipSubdomainReceiveSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlApplicationOutbound returns new OptTexmlApplicationOutbound with value set to v.
func NewOptTexmlApplicationOutbound(v TexmlApplicationOutbound) OptTexmlApplicationOutbound {
	return OptTexmlApplicationOutbound{
		Value: v,
		Set:   true,
	}
}

// OptTexmlApplicationOutbound is optional TexmlApplicationOutbound.
type OptTexmlApplicationOutbound struct {
	Value TexmlApplicationOutbound
	Set   bool
}

// IsSet returns true if OptTexmlApplicationOutbound was set.
func (o OptTexmlApplicationOutbound) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlApplicationOutbound) Reset() {
	var v TexmlApplicationOutbound
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlApplicationOutbound) SetTo(v TexmlApplicationOutbound) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlApplicationOutbound) Get() (v TexmlApplicationOutbound, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlApplicationOutbound) Or(d TexmlApplicationOutbound) TexmlApplicationOutbound {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlApplicationStatusCallbackMethod returns new OptTexmlApplicationStatusCallbackMethod with value set to v.
func NewOptTexmlApplicationStatusCallbackMethod(v TexmlApplicationStatusCallbackMethod) OptTexmlApplicationStatusCallbackMethod {
	return OptTexmlApplicationStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptTexmlApplicationStatusCallbackMethod is optional TexmlApplicationStatusCallbackMethod.
type OptTexmlApplicationStatusCallbackMethod struct {
	Value TexmlApplicationStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptTexmlApplicationStatusCallbackMethod was set.
func (o OptTexmlApplicationStatusCallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlApplicationStatusCallbackMethod) Reset() {
	var v TexmlApplicationStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlApplicationStatusCallbackMethod) SetTo(v TexmlApplicationStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlApplicationStatusCallbackMethod) Get() (v TexmlApplicationStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlApplicationStatusCallbackMethod) Or(d TexmlApplicationStatusCallbackMethod) TexmlApplicationStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlApplicationVoiceMethod returns new OptTexmlApplicationVoiceMethod with value set to v.
func NewOptTexmlApplicationVoiceMethod(v TexmlApplicationVoiceMethod) OptTexmlApplicationVoiceMethod {
	return OptTexmlApplicationVoiceMethod{
		Value: v,
		Set:   true,
	}
}

// OptTexmlApplicationVoiceMethod is optional TexmlApplicationVoiceMethod.
type OptTexmlApplicationVoiceMethod struct {
	Value TexmlApplicationVoiceMethod
	Set   bool
}

// IsSet returns true if OptTexmlApplicationVoiceMethod was set.
func (o OptTexmlApplicationVoiceMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlApplicationVoiceMethod) Reset() {
	var v TexmlApplicationVoiceMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlApplicationVoiceMethod) SetTo(v TexmlApplicationVoiceMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlApplicationVoiceMethod) Get() (v TexmlApplicationVoiceMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlApplicationVoiceMethod) Or(d TexmlApplicationVoiceMethod) TexmlApplicationVoiceMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlCreateCallRecordingRequestBody returns new OptTexmlCreateCallRecordingRequestBody with value set to v.
func NewOptTexmlCreateCallRecordingRequestBody(v TexmlCreateCallRecordingRequestBody) OptTexmlCreateCallRecordingRequestBody {
	return OptTexmlCreateCallRecordingRequestBody{
		Value: v,
		Set:   true,
	}
}

// OptTexmlCreateCallRecordingRequestBody is optional TexmlCreateCallRecordingRequestBody.
type OptTexmlCreateCallRecordingRequestBody struct {
	Value TexmlCreateCallRecordingRequestBody
	Set   bool
}

// IsSet returns true if OptTexmlCreateCallRecordingRequestBody was set.
func (o OptTexmlCreateCallRecordingRequestBody) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlCreateCallRecordingRequestBody) Reset() {
	var v TexmlCreateCallRecordingRequestBody
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlCreateCallRecordingRequestBody) SetTo(v TexmlCreateCallRecordingRequestBody) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlCreateCallRecordingRequestBody) Get() (v TexmlCreateCallRecordingRequestBody, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlCreateCallRecordingRequestBody) Or(d TexmlCreateCallRecordingRequestBody) TexmlCreateCallRecordingRequestBody {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlRecordingChannels returns new OptTexmlRecordingChannels with value set to v.
func NewOptTexmlRecordingChannels(v TexmlRecordingChannels) OptTexmlRecordingChannels {
	return OptTexmlRecordingChannels{
		Value: v,
		Set:   true,
	}
}

// OptTexmlRecordingChannels is optional TexmlRecordingChannels.
type OptTexmlRecordingChannels struct {
	Value TexmlRecordingChannels
	Set   bool
}

// IsSet returns true if OptTexmlRecordingChannels was set.
func (o OptTexmlRecordingChannels) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlRecordingChannels) Reset() {
	var v TexmlRecordingChannels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlRecordingChannels) SetTo(v TexmlRecordingChannels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlRecordingChannels) Get() (v TexmlRecordingChannels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlRecordingChannels) Or(d TexmlRecordingChannels) TexmlRecordingChannels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlRecordingMediaUrl returns new OptTexmlRecordingMediaUrl with value set to v.
func NewOptTexmlRecordingMediaUrl(v TexmlRecordingMediaUrl) OptTexmlRecordingMediaUrl {
	return OptTexmlRecordingMediaUrl{
		Value: v,
		Set:   true,
	}
}

// OptTexmlRecordingMediaUrl is optional TexmlRecordingMediaUrl.
type OptTexmlRecordingMediaUrl struct {
	Value TexmlRecordingMediaUrl
	Set   bool
}

// IsSet returns true if OptTexmlRecordingMediaUrl was set.
func (o OptTexmlRecordingMediaUrl) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlRecordingMediaUrl) Reset() {
	var v TexmlRecordingMediaUrl
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlRecordingMediaUrl) SetTo(v TexmlRecordingMediaUrl) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlRecordingMediaUrl) Get() (v TexmlRecordingMediaUrl, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlRecordingMediaUrl) Or(d TexmlRecordingMediaUrl) TexmlRecordingMediaUrl {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlRecordingStatus returns new OptTexmlRecordingStatus with value set to v.
func NewOptTexmlRecordingStatus(v TexmlRecordingStatus) OptTexmlRecordingStatus {
	return OptTexmlRecordingStatus{
		Value: v,
		Set:   true,
	}
}

// OptTexmlRecordingStatus is optional TexmlRecordingStatus.
type OptTexmlRecordingStatus struct {
	Value TexmlRecordingStatus
	Set   bool
}

// IsSet returns true if OptTexmlRecordingStatus was set.
func (o OptTexmlRecordingStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlRecordingStatus) Reset() {
	var v TexmlRecordingStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlRecordingStatus) SetTo(v TexmlRecordingStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlRecordingStatus) Get() (v TexmlRecordingStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlRecordingStatus) Or(d TexmlRecordingStatus) TexmlRecordingStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlRecordingSubresourcesUris returns new OptTexmlRecordingSubresourcesUris with value set to v.
func NewOptTexmlRecordingSubresourcesUris(v TexmlRecordingSubresourcesUris) OptTexmlRecordingSubresourcesUris {
	return OptTexmlRecordingSubresourcesUris{
		Value: v,
		Set:   true,
	}
}

// OptTexmlRecordingSubresourcesUris is optional TexmlRecordingSubresourcesUris.
type OptTexmlRecordingSubresourcesUris struct {
	Value TexmlRecordingSubresourcesUris
	Set   bool
}

// IsSet returns true if OptTexmlRecordingSubresourcesUris was set.
func (o OptTexmlRecordingSubresourcesUris) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlRecordingSubresourcesUris) Reset() {
	var v TexmlRecordingSubresourcesUris
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlRecordingSubresourcesUris) SetTo(v TexmlRecordingSubresourcesUris) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlRecordingSubresourcesUris) Get() (v TexmlRecordingSubresourcesUris, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlRecordingSubresourcesUris) Or(d TexmlRecordingSubresourcesUris) TexmlRecordingSubresourcesUris {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlRecordingTranscriptionStatus returns new OptTexmlRecordingTranscriptionStatus with value set to v.
func NewOptTexmlRecordingTranscriptionStatus(v TexmlRecordingTranscriptionStatus) OptTexmlRecordingTranscriptionStatus {
	return OptTexmlRecordingTranscriptionStatus{
		Value: v,
		Set:   true,
	}
}

// OptTexmlRecordingTranscriptionStatus is optional TexmlRecordingTranscriptionStatus.
type OptTexmlRecordingTranscriptionStatus struct {
	Value TexmlRecordingTranscriptionStatus
	Set   bool
}

// IsSet returns true if OptTexmlRecordingTranscriptionStatus was set.
func (o OptTexmlRecordingTranscriptionStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlRecordingTranscriptionStatus) Reset() {
	var v TexmlRecordingTranscriptionStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlRecordingTranscriptionStatus) SetTo(v TexmlRecordingTranscriptionStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlRecordingTranscriptionStatus) Get() (v TexmlRecordingTranscriptionStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlRecordingTranscriptionStatus) Or(d TexmlRecordingTranscriptionStatus) TexmlRecordingTranscriptionStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlSid returns new OptTexmlSid with value set to v.
func NewOptTexmlSid(v TexmlSid) OptTexmlSid {
	return OptTexmlSid{
		Value: v,
		Set:   true,
	}
}

// OptTexmlSid is optional TexmlSid.
type OptTexmlSid struct {
	Value TexmlSid
	Set   bool
}

// IsSet returns true if OptTexmlSid was set.
func (o OptTexmlSid) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlSid) Reset() {
	var v TexmlSid
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlSid) SetTo(v TexmlSid) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlSid) Get() (v TexmlSid, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlSid) Or(d TexmlSid) TexmlSid {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlStatusCallback returns new OptTexmlStatusCallback with value set to v.
func NewOptTexmlStatusCallback(v TexmlStatusCallback) OptTexmlStatusCallback {
	return OptTexmlStatusCallback{
		Value: v,
		Set:   true,
	}
}

// OptTexmlStatusCallback is optional TexmlStatusCallback.
type OptTexmlStatusCallback struct {
	Value TexmlStatusCallback
	Set   bool
}

// IsSet returns true if OptTexmlStatusCallback was set.
func (o OptTexmlStatusCallback) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlStatusCallback) Reset() {
	var v TexmlStatusCallback
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlStatusCallback) SetTo(v TexmlStatusCallback) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlStatusCallback) Get() (v TexmlStatusCallback, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlStatusCallback) Or(d TexmlStatusCallback) TexmlStatusCallback {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlStatusCallbackMethod returns new OptTexmlStatusCallbackMethod with value set to v.
func NewOptTexmlStatusCallbackMethod(v TexmlStatusCallbackMethod) OptTexmlStatusCallbackMethod {
	return OptTexmlStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptTexmlStatusCallbackMethod is optional TexmlStatusCallbackMethod.
type OptTexmlStatusCallbackMethod struct {
	Value TexmlStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptTexmlStatusCallbackMethod was set.
func (o OptTexmlStatusCallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlStatusCallbackMethod) Reset() {
	var v TexmlStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlStatusCallbackMethod) SetTo(v TexmlStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlStatusCallbackMethod) Get() (v TexmlStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlStatusCallbackMethod) Or(d TexmlStatusCallbackMethod) TexmlStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlUpdateCallRecordingRequestBody returns new OptTexmlUpdateCallRecordingRequestBody with value set to v.
func NewOptTexmlUpdateCallRecordingRequestBody(v TexmlUpdateCallRecordingRequestBody) OptTexmlUpdateCallRecordingRequestBody {
	return OptTexmlUpdateCallRecordingRequestBody{
		Value: v,
		Set:   true,
	}
}

// OptTexmlUpdateCallRecordingRequestBody is optional TexmlUpdateCallRecordingRequestBody.
type OptTexmlUpdateCallRecordingRequestBody struct {
	Value TexmlUpdateCallRecordingRequestBody
	Set   bool
}

// IsSet returns true if OptTexmlUpdateCallRecordingRequestBody was set.
func (o OptTexmlUpdateCallRecordingRequestBody) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlUpdateCallRecordingRequestBody) Reset() {
	var v TexmlUpdateCallRecordingRequestBody
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlUpdateCallRecordingRequestBody) SetTo(v TexmlUpdateCallRecordingRequestBody) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlUpdateCallRecordingRequestBody) Get() (v TexmlUpdateCallRecordingRequestBody, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlUpdateCallRecordingRequestBody) Or(d TexmlUpdateCallRecordingRequestBody) TexmlUpdateCallRecordingRequestBody {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlUpdateCallRecordingRequestBodyStatus returns new OptTexmlUpdateCallRecordingRequestBodyStatus with value set to v.
func NewOptTexmlUpdateCallRecordingRequestBodyStatus(v TexmlUpdateCallRecordingRequestBodyStatus) OptTexmlUpdateCallRecordingRequestBodyStatus {
	return OptTexmlUpdateCallRecordingRequestBodyStatus{
		Value: v,
		Set:   true,
	}
}

// OptTexmlUpdateCallRecordingRequestBodyStatus is optional TexmlUpdateCallRecordingRequestBodyStatus.
type OptTexmlUpdateCallRecordingRequestBodyStatus struct {
	Value TexmlUpdateCallRecordingRequestBodyStatus
	Set   bool
}

// IsSet returns true if OptTexmlUpdateCallRecordingRequestBodyStatus was set.
func (o OptTexmlUpdateCallRecordingRequestBodyStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlUpdateCallRecordingRequestBodyStatus) Reset() {
	var v TexmlUpdateCallRecordingRequestBodyStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlUpdateCallRecordingRequestBodyStatus) SetTo(v TexmlUpdateCallRecordingRequestBodyStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlUpdateCallRecordingRequestBodyStatus) Get() (v TexmlUpdateCallRecordingRequestBodyStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlUpdateCallRecordingRequestBodyStatus) Or(d TexmlUpdateCallRecordingRequestBodyStatus) TexmlUpdateCallRecordingRequestBodyStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTranscriptionStartRequestLanguage returns new OptTranscriptionStartRequestLanguage with value set to v.
func NewOptTranscriptionStartRequestLanguage(v TranscriptionStartRequestLanguage) OptTranscriptionStartRequestLanguage {
	return OptTranscriptionStartRequestLanguage{
		Value: v,
		Set:   true,
	}
}

// OptTranscriptionStartRequestLanguage is optional TranscriptionStartRequestLanguage.
type OptTranscriptionStartRequestLanguage struct {
	Value TranscriptionStartRequestLanguage
	Set   bool
}

// IsSet returns true if OptTranscriptionStartRequestLanguage was set.
func (o OptTranscriptionStartRequestLanguage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTranscriptionStartRequestLanguage) Reset() {
	var v TranscriptionStartRequestLanguage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTranscriptionStartRequestLanguage) SetTo(v TranscriptionStartRequestLanguage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTranscriptionStartRequestLanguage) Get() (v TranscriptionStartRequestLanguage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTranscriptionStartRequestLanguage) Or(d TranscriptionStartRequestLanguage) TranscriptionStartRequestLanguage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTranscriptionStartRequestTranscriptionEngine returns new OptTranscriptionStartRequestTranscriptionEngine with value set to v.
func NewOptTranscriptionStartRequestTranscriptionEngine(v TranscriptionStartRequestTranscriptionEngine) OptTranscriptionStartRequestTranscriptionEngine {
	return OptTranscriptionStartRequestTranscriptionEngine{
		Value: v,
		Set:   true,
	}
}

// OptTranscriptionStartRequestTranscriptionEngine is optional TranscriptionStartRequestTranscriptionEngine.
type OptTranscriptionStartRequestTranscriptionEngine struct {
	Value TranscriptionStartRequestTranscriptionEngine
	Set   bool
}

// IsSet returns true if OptTranscriptionStartRequestTranscriptionEngine was set.
func (o OptTranscriptionStartRequestTranscriptionEngine) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTranscriptionStartRequestTranscriptionEngine) Reset() {
	var v TranscriptionStartRequestTranscriptionEngine
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTranscriptionStartRequestTranscriptionEngine) SetTo(v TranscriptionStartRequestTranscriptionEngine) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTranscriptionStartRequestTranscriptionEngine) Get() (v TranscriptionStartRequestTranscriptionEngine, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTranscriptionStartRequestTranscriptionEngine) Or(d TranscriptionStartRequestTranscriptionEngine) TranscriptionStartRequestTranscriptionEngine {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTransferCallRequestAnsweringMachineDetection returns new OptTransferCallRequestAnsweringMachineDetection with value set to v.
func NewOptTransferCallRequestAnsweringMachineDetection(v TransferCallRequestAnsweringMachineDetection) OptTransferCallRequestAnsweringMachineDetection {
	return OptTransferCallRequestAnsweringMachineDetection{
		Value: v,
		Set:   true,
	}
}

// OptTransferCallRequestAnsweringMachineDetection is optional TransferCallRequestAnsweringMachineDetection.
type OptTransferCallRequestAnsweringMachineDetection struct {
	Value TransferCallRequestAnsweringMachineDetection
	Set   bool
}

// IsSet returns true if OptTransferCallRequestAnsweringMachineDetection was set.
func (o OptTransferCallRequestAnsweringMachineDetection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTransferCallRequestAnsweringMachineDetection) Reset() {
	var v TransferCallRequestAnsweringMachineDetection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTransferCallRequestAnsweringMachineDetection) SetTo(v TransferCallRequestAnsweringMachineDetection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTransferCallRequestAnsweringMachineDetection) Get() (v TransferCallRequestAnsweringMachineDetection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTransferCallRequestAnsweringMachineDetection) Or(d TransferCallRequestAnsweringMachineDetection) TransferCallRequestAnsweringMachineDetection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTransferCallRequestAnsweringMachineDetectionConfig returns new OptTransferCallRequestAnsweringMachineDetectionConfig with value set to v.
func NewOptTransferCallRequestAnsweringMachineDetectionConfig(v TransferCallRequestAnsweringMachineDetectionConfig) OptTransferCallRequestAnsweringMachineDetectionConfig {
	return OptTransferCallRequestAnsweringMachineDetectionConfig{
		Value: v,
		Set:   true,
	}
}

// OptTransferCallRequestAnsweringMachineDetectionConfig is optional TransferCallRequestAnsweringMachineDetectionConfig.
type OptTransferCallRequestAnsweringMachineDetectionConfig struct {
	Value TransferCallRequestAnsweringMachineDetectionConfig
	Set   bool
}

// IsSet returns true if OptTransferCallRequestAnsweringMachineDetectionConfig was set.
func (o OptTransferCallRequestAnsweringMachineDetectionConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTransferCallRequestAnsweringMachineDetectionConfig) Reset() {
	var v TransferCallRequestAnsweringMachineDetectionConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTransferCallRequestAnsweringMachineDetectionConfig) SetTo(v TransferCallRequestAnsweringMachineDetectionConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTransferCallRequestAnsweringMachineDetectionConfig) Get() (v TransferCallRequestAnsweringMachineDetectionConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTransferCallRequestAnsweringMachineDetectionConfig) Or(d TransferCallRequestAnsweringMachineDetectionConfig) TransferCallRequestAnsweringMachineDetectionConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTransferCallRequestMediaEncryption returns new OptTransferCallRequestMediaEncryption with value set to v.
func NewOptTransferCallRequestMediaEncryption(v TransferCallRequestMediaEncryption) OptTransferCallRequestMediaEncryption {
	return OptTransferCallRequestMediaEncryption{
		Value: v,
		Set:   true,
	}
}

// OptTransferCallRequestMediaEncryption is optional TransferCallRequestMediaEncryption.
type OptTransferCallRequestMediaEncryption struct {
	Value TransferCallRequestMediaEncryption
	Set   bool
}

// IsSet returns true if OptTransferCallRequestMediaEncryption was set.
func (o OptTransferCallRequestMediaEncryption) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTransferCallRequestMediaEncryption) Reset() {
	var v TransferCallRequestMediaEncryption
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTransferCallRequestMediaEncryption) SetTo(v TransferCallRequestMediaEncryption) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTransferCallRequestMediaEncryption) Get() (v TransferCallRequestMediaEncryption, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTransferCallRequestMediaEncryption) Or(d TransferCallRequestMediaEncryption) TransferCallRequestMediaEncryption {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTransferCallRequestSipTransportProtocol returns new OptTransferCallRequestSipTransportProtocol with value set to v.
func NewOptTransferCallRequestSipTransportProtocol(v TransferCallRequestSipTransportProtocol) OptTransferCallRequestSipTransportProtocol {
	return OptTransferCallRequestSipTransportProtocol{
		Value: v,
		Set:   true,
	}
}

// OptTransferCallRequestSipTransportProtocol is optional TransferCallRequestSipTransportProtocol.
type OptTransferCallRequestSipTransportProtocol struct {
	Value TransferCallRequestSipTransportProtocol
	Set   bool
}

// IsSet returns true if OptTransferCallRequestSipTransportProtocol was set.
func (o OptTransferCallRequestSipTransportProtocol) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTransferCallRequestSipTransportProtocol) Reset() {
	var v TransferCallRequestSipTransportProtocol
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTransferCallRequestSipTransportProtocol) SetTo(v TransferCallRequestSipTransportProtocol) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTransferCallRequestSipTransportProtocol) Get() (v TransferCallRequestSipTransportProtocol, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTransferCallRequestSipTransportProtocol) Or(d TransferCallRequestSipTransportProtocol) TransferCallRequestSipTransportProtocol {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTransferCallRequestWebhookURLMethod returns new OptTransferCallRequestWebhookURLMethod with value set to v.
func NewOptTransferCallRequestWebhookURLMethod(v TransferCallRequestWebhookURLMethod) OptTransferCallRequestWebhookURLMethod {
	return OptTransferCallRequestWebhookURLMethod{
		Value: v,
		Set:   true,
	}
}

// OptTransferCallRequestWebhookURLMethod is optional TransferCallRequestWebhookURLMethod.
type OptTransferCallRequestWebhookURLMethod struct {
	Value TransferCallRequestWebhookURLMethod
	Set   bool
}

// IsSet returns true if OptTransferCallRequestWebhookURLMethod was set.
func (o OptTransferCallRequestWebhookURLMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTransferCallRequestWebhookURLMethod) Reset() {
	var v TransferCallRequestWebhookURLMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTransferCallRequestWebhookURLMethod) SetTo(v TransferCallRequestWebhookURLMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTransferCallRequestWebhookURLMethod) Get() (v TransferCallRequestWebhookURLMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTransferCallRequestWebhookURLMethod) Or(d TransferCallRequestWebhookURLMethod) TransferCallRequestWebhookURLMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTwimlRecordingChannels returns new OptTwimlRecordingChannels with value set to v.
func NewOptTwimlRecordingChannels(v TwimlRecordingChannels) OptTwimlRecordingChannels {
	return OptTwimlRecordingChannels{
		Value: v,
		Set:   true,
	}
}

// OptTwimlRecordingChannels is optional TwimlRecordingChannels.
type OptTwimlRecordingChannels struct {
	Value TwimlRecordingChannels
	Set   bool
}

// IsSet returns true if OptTwimlRecordingChannels was set.
func (o OptTwimlRecordingChannels) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTwimlRecordingChannels) Reset() {
	var v TwimlRecordingChannels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTwimlRecordingChannels) SetTo(v TwimlRecordingChannels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTwimlRecordingChannels) Get() (v TwimlRecordingChannels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTwimlRecordingChannels) Or(d TwimlRecordingChannels) TwimlRecordingChannels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateCallControlApplicationRequestDtmfType returns new OptUpdateCallControlApplicationRequestDtmfType with value set to v.
func NewOptUpdateCallControlApplicationRequestDtmfType(v UpdateCallControlApplicationRequestDtmfType) OptUpdateCallControlApplicationRequestDtmfType {
	return OptUpdateCallControlApplicationRequestDtmfType{
		Value: v,
		Set:   true,
	}
}

// OptUpdateCallControlApplicationRequestDtmfType is optional UpdateCallControlApplicationRequestDtmfType.
type OptUpdateCallControlApplicationRequestDtmfType struct {
	Value UpdateCallControlApplicationRequestDtmfType
	Set   bool
}

// IsSet returns true if OptUpdateCallControlApplicationRequestDtmfType was set.
func (o OptUpdateCallControlApplicationRequestDtmfType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateCallControlApplicationRequestDtmfType) Reset() {
	var v UpdateCallControlApplicationRequestDtmfType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateCallControlApplicationRequestDtmfType) SetTo(v UpdateCallControlApplicationRequestDtmfType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateCallControlApplicationRequestDtmfType) Get() (v UpdateCallControlApplicationRequestDtmfType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateCallControlApplicationRequestDtmfType) Or(d UpdateCallControlApplicationRequestDtmfType) UpdateCallControlApplicationRequestDtmfType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateCallControlApplicationRequestWebhookAPIVersion returns new OptUpdateCallControlApplicationRequestWebhookAPIVersion with value set to v.
func NewOptUpdateCallControlApplicationRequestWebhookAPIVersion(v UpdateCallControlApplicationRequestWebhookAPIVersion) OptUpdateCallControlApplicationRequestWebhookAPIVersion {
	return OptUpdateCallControlApplicationRequestWebhookAPIVersion{
		Value: v,
		Set:   true,
	}
}

// OptUpdateCallControlApplicationRequestWebhookAPIVersion is optional UpdateCallControlApplicationRequestWebhookAPIVersion.
type OptUpdateCallControlApplicationRequestWebhookAPIVersion struct {
	Value UpdateCallControlApplicationRequestWebhookAPIVersion
	Set   bool
}

// IsSet returns true if OptUpdateCallControlApplicationRequestWebhookAPIVersion was set.
func (o OptUpdateCallControlApplicationRequestWebhookAPIVersion) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateCallControlApplicationRequestWebhookAPIVersion) Reset() {
	var v UpdateCallControlApplicationRequestWebhookAPIVersion
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateCallControlApplicationRequestWebhookAPIVersion) SetTo(v UpdateCallControlApplicationRequestWebhookAPIVersion) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateCallControlApplicationRequestWebhookAPIVersion) Get() (v UpdateCallControlApplicationRequestWebhookAPIVersion, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateCallControlApplicationRequestWebhookAPIVersion) Or(d UpdateCallControlApplicationRequestWebhookAPIVersion) UpdateCallControlApplicationRequestWebhookAPIVersion {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateCallRequestFallbackMethod returns new OptUpdateCallRequestFallbackMethod with value set to v.
func NewOptUpdateCallRequestFallbackMethod(v UpdateCallRequestFallbackMethod) OptUpdateCallRequestFallbackMethod {
	return OptUpdateCallRequestFallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptUpdateCallRequestFallbackMethod is optional UpdateCallRequestFallbackMethod.
type OptUpdateCallRequestFallbackMethod struct {
	Value UpdateCallRequestFallbackMethod
	Set   bool
}

// IsSet returns true if OptUpdateCallRequestFallbackMethod was set.
func (o OptUpdateCallRequestFallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateCallRequestFallbackMethod) Reset() {
	var v UpdateCallRequestFallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateCallRequestFallbackMethod) SetTo(v UpdateCallRequestFallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateCallRequestFallbackMethod) Get() (v UpdateCallRequestFallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateCallRequestFallbackMethod) Or(d UpdateCallRequestFallbackMethod) UpdateCallRequestFallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateCallRequestMethod returns new OptUpdateCallRequestMethod with value set to v.
func NewOptUpdateCallRequestMethod(v UpdateCallRequestMethod) OptUpdateCallRequestMethod {
	return OptUpdateCallRequestMethod{
		Value: v,
		Set:   true,
	}
}

// OptUpdateCallRequestMethod is optional UpdateCallRequestMethod.
type OptUpdateCallRequestMethod struct {
	Value UpdateCallRequestMethod
	Set   bool
}

// IsSet returns true if OptUpdateCallRequestMethod was set.
func (o OptUpdateCallRequestMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateCallRequestMethod) Reset() {
	var v UpdateCallRequestMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateCallRequestMethod) SetTo(v UpdateCallRequestMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateCallRequestMethod) Get() (v UpdateCallRequestMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateCallRequestMethod) Or(d UpdateCallRequestMethod) UpdateCallRequestMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateCallRequestStatusCallbackMethod returns new OptUpdateCallRequestStatusCallbackMethod with value set to v.
func NewOptUpdateCallRequestStatusCallbackMethod(v UpdateCallRequestStatusCallbackMethod) OptUpdateCallRequestStatusCallbackMethod {
	return OptUpdateCallRequestStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptUpdateCallRequestStatusCallbackMethod is optional UpdateCallRequestStatusCallbackMethod.
type OptUpdateCallRequestStatusCallbackMethod struct {
	Value UpdateCallRequestStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptUpdateCallRequestStatusCallbackMethod was set.
func (o OptUpdateCallRequestStatusCallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateCallRequestStatusCallbackMethod) Reset() {
	var v UpdateCallRequestStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateCallRequestStatusCallbackMethod) SetTo(v UpdateCallRequestStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateCallRequestStatusCallbackMethod) Get() (v UpdateCallRequestStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateCallRequestStatusCallbackMethod) Or(d UpdateCallRequestStatusCallbackMethod) UpdateCallRequestStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateCommandResult returns new OptUpdateCommandResult with value set to v.
func NewOptUpdateCommandResult(v UpdateCommandResult) OptUpdateCommandResult {
	return OptUpdateCommandResult{
		Value: v,
		Set:   true,
	}
}

// OptUpdateCommandResult is optional UpdateCommandResult.
type OptUpdateCommandResult struct {
	Value UpdateCommandResult
	Set   bool
}

// IsSet returns true if OptUpdateCommandResult was set.
func (o OptUpdateCommandResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateCommandResult) Reset() {
	var v UpdateCommandResult
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateCommandResult) SetTo(v UpdateCommandResult) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateCommandResult) Get() (v UpdateCommandResult, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateCommandResult) Or(d UpdateCommandResult) UpdateCommandResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateConferenceParticipantRequestAnnounceMethod returns new OptUpdateConferenceParticipantRequestAnnounceMethod with value set to v.
func NewOptUpdateConferenceParticipantRequestAnnounceMethod(v UpdateConferenceParticipantRequestAnnounceMethod) OptUpdateConferenceParticipantRequestAnnounceMethod {
	return OptUpdateConferenceParticipantRequestAnnounceMethod{
		Value: v,
		Set:   true,
	}
}

// OptUpdateConferenceParticipantRequestAnnounceMethod is optional UpdateConferenceParticipantRequestAnnounceMethod.
type OptUpdateConferenceParticipantRequestAnnounceMethod struct {
	Value UpdateConferenceParticipantRequestAnnounceMethod
	Set   bool
}

// IsSet returns true if OptUpdateConferenceParticipantRequestAnnounceMethod was set.
func (o OptUpdateConferenceParticipantRequestAnnounceMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateConferenceParticipantRequestAnnounceMethod) Reset() {
	var v UpdateConferenceParticipantRequestAnnounceMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateConferenceParticipantRequestAnnounceMethod) SetTo(v UpdateConferenceParticipantRequestAnnounceMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateConferenceParticipantRequestAnnounceMethod) Get() (v UpdateConferenceParticipantRequestAnnounceMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateConferenceParticipantRequestAnnounceMethod) Or(d UpdateConferenceParticipantRequestAnnounceMethod) UpdateConferenceParticipantRequestAnnounceMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateConferenceParticipantRequestHoldMethod returns new OptUpdateConferenceParticipantRequestHoldMethod with value set to v.
func NewOptUpdateConferenceParticipantRequestHoldMethod(v UpdateConferenceParticipantRequestHoldMethod) OptUpdateConferenceParticipantRequestHoldMethod {
	return OptUpdateConferenceParticipantRequestHoldMethod{
		Value: v,
		Set:   true,
	}
}

// OptUpdateConferenceParticipantRequestHoldMethod is optional UpdateConferenceParticipantRequestHoldMethod.
type OptUpdateConferenceParticipantRequestHoldMethod struct {
	Value UpdateConferenceParticipantRequestHoldMethod
	Set   bool
}

// IsSet returns true if OptUpdateConferenceParticipantRequestHoldMethod was set.
func (o OptUpdateConferenceParticipantRequestHoldMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateConferenceParticipantRequestHoldMethod) Reset() {
	var v UpdateConferenceParticipantRequestHoldMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateConferenceParticipantRequestHoldMethod) SetTo(v UpdateConferenceParticipantRequestHoldMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateConferenceParticipantRequestHoldMethod) Get() (v UpdateConferenceParticipantRequestHoldMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateConferenceParticipantRequestHoldMethod) Or(d UpdateConferenceParticipantRequestHoldMethod) UpdateConferenceParticipantRequestHoldMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateConferenceRequestAnnounceMethod returns new OptUpdateConferenceRequestAnnounceMethod with value set to v.
func NewOptUpdateConferenceRequestAnnounceMethod(v UpdateConferenceRequestAnnounceMethod) OptUpdateConferenceRequestAnnounceMethod {
	return OptUpdateConferenceRequestAnnounceMethod{
		Value: v,
		Set:   true,
	}
}

// OptUpdateConferenceRequestAnnounceMethod is optional UpdateConferenceRequestAnnounceMethod.
type OptUpdateConferenceRequestAnnounceMethod struct {
	Value UpdateConferenceRequestAnnounceMethod
	Set   bool
}

// IsSet returns true if OptUpdateConferenceRequestAnnounceMethod was set.
func (o OptUpdateConferenceRequestAnnounceMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateConferenceRequestAnnounceMethod) Reset() {
	var v UpdateConferenceRequestAnnounceMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateConferenceRequestAnnounceMethod) SetTo(v UpdateConferenceRequestAnnounceMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateConferenceRequestAnnounceMethod) Get() (v UpdateConferenceRequestAnnounceMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateConferenceRequestAnnounceMethod) Or(d UpdateConferenceRequestAnnounceMethod) UpdateConferenceRequestAnnounceMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateTexmlApplicationRequestInbound returns new OptUpdateTexmlApplicationRequestInbound with value set to v.
func NewOptUpdateTexmlApplicationRequestInbound(v UpdateTexmlApplicationRequestInbound) OptUpdateTexmlApplicationRequestInbound {
	return OptUpdateTexmlApplicationRequestInbound{
		Value: v,
		Set:   true,
	}
}

// OptUpdateTexmlApplicationRequestInbound is optional UpdateTexmlApplicationRequestInbound.
type OptUpdateTexmlApplicationRequestInbound struct {
	Value UpdateTexmlApplicationRequestInbound
	Set   bool
}

// IsSet returns true if OptUpdateTexmlApplicationRequestInbound was set.
func (o OptUpdateTexmlApplicationRequestInbound) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateTexmlApplicationRequestInbound) Reset() {
	var v UpdateTexmlApplicationRequestInbound
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateTexmlApplicationRequestInbound) SetTo(v UpdateTexmlApplicationRequestInbound) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateTexmlApplicationRequestInbound) Get() (v UpdateTexmlApplicationRequestInbound, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateTexmlApplicationRequestInbound) Or(d UpdateTexmlApplicationRequestInbound) UpdateTexmlApplicationRequestInbound {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings returns new OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings with value set to v.
func NewOptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings(v UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings {
	return OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings{
		Value: v,
		Set:   true,
	}
}

// OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings is optional UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings.
type OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings struct {
	Value UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings
	Set   bool
}

// IsSet returns true if OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings was set.
func (o OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) Reset() {
	var v UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) SetTo(v UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) Get() (v UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) Or(d UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateTexmlApplicationRequestOutbound returns new OptUpdateTexmlApplicationRequestOutbound with value set to v.
func NewOptUpdateTexmlApplicationRequestOutbound(v UpdateTexmlApplicationRequestOutbound) OptUpdateTexmlApplicationRequestOutbound {
	return OptUpdateTexmlApplicationRequestOutbound{
		Value: v,
		Set:   true,
	}
}

// OptUpdateTexmlApplicationRequestOutbound is optional UpdateTexmlApplicationRequestOutbound.
type OptUpdateTexmlApplicationRequestOutbound struct {
	Value UpdateTexmlApplicationRequestOutbound
	Set   bool
}

// IsSet returns true if OptUpdateTexmlApplicationRequestOutbound was set.
func (o OptUpdateTexmlApplicationRequestOutbound) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateTexmlApplicationRequestOutbound) Reset() {
	var v UpdateTexmlApplicationRequestOutbound
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateTexmlApplicationRequestOutbound) SetTo(v UpdateTexmlApplicationRequestOutbound) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateTexmlApplicationRequestOutbound) Get() (v UpdateTexmlApplicationRequestOutbound, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateTexmlApplicationRequestOutbound) Or(d UpdateTexmlApplicationRequestOutbound) UpdateTexmlApplicationRequestOutbound {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateTexmlApplicationRequestStatusCallbackMethod returns new OptUpdateTexmlApplicationRequestStatusCallbackMethod with value set to v.
func NewOptUpdateTexmlApplicationRequestStatusCallbackMethod(v UpdateTexmlApplicationRequestStatusCallbackMethod) OptUpdateTexmlApplicationRequestStatusCallbackMethod {
	return OptUpdateTexmlApplicationRequestStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptUpdateTexmlApplicationRequestStatusCallbackMethod is optional UpdateTexmlApplicationRequestStatusCallbackMethod.
type OptUpdateTexmlApplicationRequestStatusCallbackMethod struct {
	Value UpdateTexmlApplicationRequestStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptUpdateTexmlApplicationRequestStatusCallbackMethod was set.
func (o OptUpdateTexmlApplicationRequestStatusCallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateTexmlApplicationRequestStatusCallbackMethod) Reset() {
	var v UpdateTexmlApplicationRequestStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateTexmlApplicationRequestStatusCallbackMethod) SetTo(v UpdateTexmlApplicationRequestStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateTexmlApplicationRequestStatusCallbackMethod) Get() (v UpdateTexmlApplicationRequestStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateTexmlApplicationRequestStatusCallbackMethod) Or(d UpdateTexmlApplicationRequestStatusCallbackMethod) UpdateTexmlApplicationRequestStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateTexmlApplicationRequestVoiceMethod returns new OptUpdateTexmlApplicationRequestVoiceMethod with value set to v.
func NewOptUpdateTexmlApplicationRequestVoiceMethod(v UpdateTexmlApplicationRequestVoiceMethod) OptUpdateTexmlApplicationRequestVoiceMethod {
	return OptUpdateTexmlApplicationRequestVoiceMethod{
		Value: v,
		Set:   true,
	}
}

// OptUpdateTexmlApplicationRequestVoiceMethod is optional UpdateTexmlApplicationRequestVoiceMethod.
type OptUpdateTexmlApplicationRequestVoiceMethod struct {
	Value UpdateTexmlApplicationRequestVoiceMethod
	Set   bool
}

// IsSet returns true if OptUpdateTexmlApplicationRequestVoiceMethod was set.
func (o OptUpdateTexmlApplicationRequestVoiceMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateTexmlApplicationRequestVoiceMethod) Reset() {
	var v UpdateTexmlApplicationRequestVoiceMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateTexmlApplicationRequestVoiceMethod) SetTo(v UpdateTexmlApplicationRequestVoiceMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateTexmlApplicationRequestVoiceMethod) Get() (v UpdateTexmlApplicationRequestVoiceMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateTexmlApplicationRequestVoiceMethod) Or(d UpdateTexmlApplicationRequestVoiceMethod) UpdateTexmlApplicationRequestVoiceMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateVerifyProfileCallRequest returns new OptUpdateVerifyProfileCallRequest with value set to v.
func NewOptUpdateVerifyProfileCallRequest(v UpdateVerifyProfileCallRequest) OptUpdateVerifyProfileCallRequest {
	return OptUpdateVerifyProfileCallRequest{
		Value: v,
		Set:   true,
	}
}

// OptUpdateVerifyProfileCallRequest is optional UpdateVerifyProfileCallRequest.
type OptUpdateVerifyProfileCallRequest struct {
	Value UpdateVerifyProfileCallRequest
	Set   bool
}

// IsSet returns true if OptUpdateVerifyProfileCallRequest was set.
func (o OptUpdateVerifyProfileCallRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateVerifyProfileCallRequest) Reset() {
	var v UpdateVerifyProfileCallRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateVerifyProfileCallRequest) SetTo(v UpdateVerifyProfileCallRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateVerifyProfileCallRequest) Get() (v UpdateVerifyProfileCallRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateVerifyProfileCallRequest) Or(d UpdateVerifyProfileCallRequest) UpdateVerifyProfileCallRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateVerifyProfileFlashcallRequest returns new OptUpdateVerifyProfileFlashcallRequest with value set to v.
func NewOptUpdateVerifyProfileFlashcallRequest(v UpdateVerifyProfileFlashcallRequest) OptUpdateVerifyProfileFlashcallRequest {
	return OptUpdateVerifyProfileFlashcallRequest{
		Value: v,
		Set:   true,
	}
}

// OptUpdateVerifyProfileFlashcallRequest is optional UpdateVerifyProfileFlashcallRequest.
type OptUpdateVerifyProfileFlashcallRequest struct {
	Value UpdateVerifyProfileFlashcallRequest
	Set   bool
}

// IsSet returns true if OptUpdateVerifyProfileFlashcallRequest was set.
func (o OptUpdateVerifyProfileFlashcallRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateVerifyProfileFlashcallRequest) Reset() {
	var v UpdateVerifyProfileFlashcallRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateVerifyProfileFlashcallRequest) SetTo(v UpdateVerifyProfileFlashcallRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateVerifyProfileFlashcallRequest) Get() (v UpdateVerifyProfileFlashcallRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateVerifyProfileFlashcallRequest) Or(d UpdateVerifyProfileFlashcallRequest) UpdateVerifyProfileFlashcallRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateVerifyProfileSMSRequest returns new OptUpdateVerifyProfileSMSRequest with value set to v.
func NewOptUpdateVerifyProfileSMSRequest(v UpdateVerifyProfileSMSRequest) OptUpdateVerifyProfileSMSRequest {
	return OptUpdateVerifyProfileSMSRequest{
		Value: v,
		Set:   true,
	}
}

// OptUpdateVerifyProfileSMSRequest is optional UpdateVerifyProfileSMSRequest.
type OptUpdateVerifyProfileSMSRequest struct {
	Value UpdateVerifyProfileSMSRequest
	Set   bool
}

// IsSet returns true if OptUpdateVerifyProfileSMSRequest was set.
func (o OptUpdateVerifyProfileSMSRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateVerifyProfileSMSRequest) Reset() {
	var v UpdateVerifyProfileSMSRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateVerifyProfileSMSRequest) SetTo(v UpdateVerifyProfileSMSRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateVerifyProfileSMSRequest) Get() (v UpdateVerifyProfileSMSRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateVerifyProfileSMSRequest) Or(d UpdateVerifyProfileSMSRequest) UpdateVerifyProfileSMSRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdatedAt returns new OptUpdatedAt with value set to v.
func NewOptUpdatedAt(v UpdatedAt) OptUpdatedAt {
	return OptUpdatedAt{
		Value: v,
		Set:   true,
	}
}

// OptUpdatedAt is optional UpdatedAt.
type OptUpdatedAt struct {
	Value UpdatedAt
	Set   bool
}

// IsSet returns true if OptUpdatedAt was set.
func (o OptUpdatedAt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdatedAt) Reset() {
	var v UpdatedAt
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdatedAt) SetTo(v UpdatedAt) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdatedAt) Get() (v UpdatedAt, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdatedAt) Or(d UpdatedAt) UpdatedAt {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserBalance returns new OptUserBalance with value set to v.
func NewOptUserBalance(v UserBalance) OptUserBalance {
	return OptUserBalance{
		Value: v,
		Set:   true,
	}
}

// OptUserBalance is optional UserBalance.
type OptUserBalance struct {
	Value UserBalance
	Set   bool
}

// IsSet returns true if OptUserBalance was set.
func (o OptUserBalance) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserBalance) Reset() {
	var v UserBalance
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserBalance) SetTo(v UserBalance) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserBalance) Get() (v UserBalance, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserBalance) Or(d UserBalance) UserBalance {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserBalanceRecordType returns new OptUserBalanceRecordType with value set to v.
func NewOptUserBalanceRecordType(v UserBalanceRecordType) OptUserBalanceRecordType {
	return OptUserBalanceRecordType{
		Value: v,
		Set:   true,
	}
}

// OptUserBalanceRecordType is optional UserBalanceRecordType.
type OptUserBalanceRecordType struct {
	Value UserBalanceRecordType
	Set   bool
}

// IsSet returns true if OptUserBalanceRecordType was set.
func (o OptUserBalanceRecordType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserBalanceRecordType) Reset() {
	var v UserBalanceRecordType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserBalanceRecordType) SetTo(v UserBalanceRecordType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserBalanceRecordType) Get() (v UserBalanceRecordType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserBalanceRecordType) Or(d UserBalanceRecordType) UserBalanceRecordType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerificationProfileRecordType returns new OptVerificationProfileRecordType with value set to v.
func NewOptVerificationProfileRecordType(v VerificationProfileRecordType) OptVerificationProfileRecordType {
	return OptVerificationProfileRecordType{
		Value: v,
		Set:   true,
	}
}

// OptVerificationProfileRecordType is optional VerificationProfileRecordType.
type OptVerificationProfileRecordType struct {
	Value VerificationProfileRecordType
	Set   bool
}

// IsSet returns true if OptVerificationProfileRecordType was set.
func (o OptVerificationProfileRecordType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerificationProfileRecordType) Reset() {
	var v VerificationProfileRecordType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerificationProfileRecordType) SetTo(v VerificationProfileRecordType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerificationProfileRecordType) Get() (v VerificationProfileRecordType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerificationProfileRecordType) Or(d VerificationProfileRecordType) VerificationProfileRecordType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerificationRecordType returns new OptVerificationRecordType with value set to v.
func NewOptVerificationRecordType(v VerificationRecordType) OptVerificationRecordType {
	return OptVerificationRecordType{
		Value: v,
		Set:   true,
	}
}

// OptVerificationRecordType is optional VerificationRecordType.
type OptVerificationRecordType struct {
	Value VerificationRecordType
	Set   bool
}

// IsSet returns true if OptVerificationRecordType was set.
func (o OptVerificationRecordType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerificationRecordType) Reset() {
	var v VerificationRecordType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerificationRecordType) SetTo(v VerificationRecordType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerificationRecordType) Get() (v VerificationRecordType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerificationRecordType) Or(d VerificationRecordType) VerificationRecordType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerificationStatus returns new OptVerificationStatus with value set to v.
func NewOptVerificationStatus(v VerificationStatus) OptVerificationStatus {
	return OptVerificationStatus{
		Value: v,
		Set:   true,
	}
}

// OptVerificationStatus is optional VerificationStatus.
type OptVerificationStatus struct {
	Value VerificationStatus
	Set   bool
}

// IsSet returns true if OptVerificationStatus was set.
func (o OptVerificationStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerificationStatus) Reset() {
	var v VerificationStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerificationStatus) SetTo(v VerificationStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerificationStatus) Get() (v VerificationStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerificationStatus) Or(d VerificationStatus) VerificationStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerificationType returns new OptVerificationType with value set to v.
func NewOptVerificationType(v VerificationType) OptVerificationType {
	return OptVerificationType{
		Value: v,
		Set:   true,
	}
}

// OptVerificationType is optional VerificationType.
type OptVerificationType struct {
	Value VerificationType
	Set   bool
}

// IsSet returns true if OptVerificationType was set.
func (o OptVerificationType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerificationType) Reset() {
	var v VerificationType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerificationType) SetTo(v VerificationType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerificationType) Get() (v VerificationType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerificationType) Or(d VerificationType) VerificationType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerifiedCallsDisplayProfile returns new OptVerifiedCallsDisplayProfile with value set to v.
func NewOptVerifiedCallsDisplayProfile(v VerifiedCallsDisplayProfile) OptVerifiedCallsDisplayProfile {
	return OptVerifiedCallsDisplayProfile{
		Value: v,
		Set:   true,
	}
}

// OptVerifiedCallsDisplayProfile is optional VerifiedCallsDisplayProfile.
type OptVerifiedCallsDisplayProfile struct {
	Value VerifiedCallsDisplayProfile
	Set   bool
}

// IsSet returns true if OptVerifiedCallsDisplayProfile was set.
func (o OptVerifiedCallsDisplayProfile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerifiedCallsDisplayProfile) Reset() {
	var v VerifiedCallsDisplayProfile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerifiedCallsDisplayProfile) SetTo(v VerifiedCallsDisplayProfile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerifiedCallsDisplayProfile) Get() (v VerifiedCallsDisplayProfile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerifiedCallsDisplayProfile) Or(d VerifiedCallsDisplayProfile) VerifiedCallsDisplayProfile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerifiedCallsDisplayProfileBusinessIdentity returns new OptVerifiedCallsDisplayProfileBusinessIdentity with value set to v.
func NewOptVerifiedCallsDisplayProfileBusinessIdentity(v VerifiedCallsDisplayProfileBusinessIdentity) OptVerifiedCallsDisplayProfileBusinessIdentity {
	return OptVerifiedCallsDisplayProfileBusinessIdentity{
		Value: v,
		Set:   true,
	}
}

// OptVerifiedCallsDisplayProfileBusinessIdentity is optional VerifiedCallsDisplayProfileBusinessIdentity.
type OptVerifiedCallsDisplayProfileBusinessIdentity struct {
	Value VerifiedCallsDisplayProfileBusinessIdentity
	Set   bool
}

// IsSet returns true if OptVerifiedCallsDisplayProfileBusinessIdentity was set.
func (o OptVerifiedCallsDisplayProfileBusinessIdentity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerifiedCallsDisplayProfileBusinessIdentity) Reset() {
	var v VerifiedCallsDisplayProfileBusinessIdentity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerifiedCallsDisplayProfileBusinessIdentity) SetTo(v VerifiedCallsDisplayProfileBusinessIdentity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerifiedCallsDisplayProfileBusinessIdentity) Get() (v VerifiedCallsDisplayProfileBusinessIdentity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerifiedCallsDisplayProfileBusinessIdentity) Or(d VerifiedCallsDisplayProfileBusinessIdentity) VerifiedCallsDisplayProfileBusinessIdentity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus returns new OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus with value set to v.
func NewOptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus(v VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus) OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus {
	return OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus{
		Value: v,
		Set:   true,
	}
}

// OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus is optional VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus.
type OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus struct {
	Value VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus
	Set   bool
}

// IsSet returns true if OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus was set.
func (o OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus) Reset() {
	var v VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus) SetTo(v VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus) Get() (v VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus) Or(d VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus) VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus returns new OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus with value set to v.
func NewOptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus(v VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus) OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus {
	return OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus{
		Value: v,
		Set:   true,
	}
}

// OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus is optional VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus.
type OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus struct {
	Value VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus
	Set   bool
}

// IsSet returns true if OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus was set.
func (o OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus) Reset() {
	var v VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus) SetTo(v VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus) Get() (v VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus) Or(d VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus) VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerifiedCallsDisplayProfileStatus returns new OptVerifiedCallsDisplayProfileStatus with value set to v.
func NewOptVerifiedCallsDisplayProfileStatus(v VerifiedCallsDisplayProfileStatus) OptVerifiedCallsDisplayProfileStatus {
	return OptVerifiedCallsDisplayProfileStatus{
		Value: v,
		Set:   true,
	}
}

// OptVerifiedCallsDisplayProfileStatus is optional VerifiedCallsDisplayProfileStatus.
type OptVerifiedCallsDisplayProfileStatus struct {
	Value VerifiedCallsDisplayProfileStatus
	Set   bool
}

// IsSet returns true if OptVerifiedCallsDisplayProfileStatus was set.
func (o OptVerifiedCallsDisplayProfileStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerifiedCallsDisplayProfileStatus) Reset() {
	var v VerifiedCallsDisplayProfileStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerifiedCallsDisplayProfileStatus) SetTo(v VerifiedCallsDisplayProfileStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerifiedCallsDisplayProfileStatus) Get() (v VerifiedCallsDisplayProfileStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerifiedCallsDisplayProfileStatus) Or(d VerifiedCallsDisplayProfileStatus) VerifiedCallsDisplayProfileStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerifiedNumberRecordType returns new OptVerifiedNumberRecordType with value set to v.
func NewOptVerifiedNumberRecordType(v VerifiedNumberRecordType) OptVerifiedNumberRecordType {
	return OptVerifiedNumberRecordType{
		Value: v,
		Set:   true,
	}
}

// OptVerifiedNumberRecordType is optional VerifiedNumberRecordType.
type OptVerifiedNumberRecordType struct {
	Value VerifiedNumberRecordType
	Set   bool
}

// IsSet returns true if OptVerifiedNumberRecordType was set.
func (o OptVerifiedNumberRecordType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerifiedNumberRecordType) Reset() {
	var v VerifiedNumberRecordType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerifiedNumberRecordType) SetTo(v VerifiedNumberRecordType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerifiedNumberRecordType) Get() (v VerifiedNumberRecordType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerifiedNumberRecordType) Or(d VerifiedNumberRecordType) VerifiedNumberRecordType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerifiedNumberResponse returns new OptVerifiedNumberResponse with value set to v.
func NewOptVerifiedNumberResponse(v VerifiedNumberResponse) OptVerifiedNumberResponse {
	return OptVerifiedNumberResponse{
		Value: v,
		Set:   true,
	}
}

// OptVerifiedNumberResponse is optional VerifiedNumberResponse.
type OptVerifiedNumberResponse struct {
	Value VerifiedNumberResponse
	Set   bool
}

// IsSet returns true if OptVerifiedNumberResponse was set.
func (o OptVerifiedNumberResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerifiedNumberResponse) Reset() {
	var v VerifiedNumberResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerifiedNumberResponse) SetTo(v VerifiedNumberResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerifiedNumberResponse) Get() (v VerifiedNumberResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerifiedNumberResponse) Or(d VerifiedNumberResponse) VerifiedNumberResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerifyProfileCallResponse returns new OptVerifyProfileCallResponse with value set to v.
func NewOptVerifyProfileCallResponse(v VerifyProfileCallResponse) OptVerifyProfileCallResponse {
	return OptVerifyProfileCallResponse{
		Value: v,
		Set:   true,
	}
}

// OptVerifyProfileCallResponse is optional VerifyProfileCallResponse.
type OptVerifyProfileCallResponse struct {
	Value VerifyProfileCallResponse
	Set   bool
}

// IsSet returns true if OptVerifyProfileCallResponse was set.
func (o OptVerifyProfileCallResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerifyProfileCallResponse) Reset() {
	var v VerifyProfileCallResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerifyProfileCallResponse) SetTo(v VerifyProfileCallResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerifyProfileCallResponse) Get() (v VerifyProfileCallResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerifyProfileCallResponse) Or(d VerifyProfileCallResponse) VerifyProfileCallResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerifyProfileFlashcallResponse returns new OptVerifyProfileFlashcallResponse with value set to v.
func NewOptVerifyProfileFlashcallResponse(v VerifyProfileFlashcallResponse) OptVerifyProfileFlashcallResponse {
	return OptVerifyProfileFlashcallResponse{
		Value: v,
		Set:   true,
	}
}

// OptVerifyProfileFlashcallResponse is optional VerifyProfileFlashcallResponse.
type OptVerifyProfileFlashcallResponse struct {
	Value VerifyProfileFlashcallResponse
	Set   bool
}

// IsSet returns true if OptVerifyProfileFlashcallResponse was set.
func (o OptVerifyProfileFlashcallResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerifyProfileFlashcallResponse) Reset() {
	var v VerifyProfileFlashcallResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerifyProfileFlashcallResponse) SetTo(v VerifyProfileFlashcallResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerifyProfileFlashcallResponse) Get() (v VerifyProfileFlashcallResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerifyProfileFlashcallResponse) Or(d VerifyProfileFlashcallResponse) VerifyProfileFlashcallResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerifyProfileResponse returns new OptVerifyProfileResponse with value set to v.
func NewOptVerifyProfileResponse(v VerifyProfileResponse) OptVerifyProfileResponse {
	return OptVerifyProfileResponse{
		Value: v,
		Set:   true,
	}
}

// OptVerifyProfileResponse is optional VerifyProfileResponse.
type OptVerifyProfileResponse struct {
	Value VerifyProfileResponse
	Set   bool
}

// IsSet returns true if OptVerifyProfileResponse was set.
func (o OptVerifyProfileResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerifyProfileResponse) Reset() {
	var v VerifyProfileResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerifyProfileResponse) SetTo(v VerifyProfileResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerifyProfileResponse) Get() (v VerifyProfileResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerifyProfileResponse) Or(d VerifyProfileResponse) VerifyProfileResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerifyProfileSMSResponse returns new OptVerifyProfileSMSResponse with value set to v.
func NewOptVerifyProfileSMSResponse(v VerifyProfileSMSResponse) OptVerifyProfileSMSResponse {
	return OptVerifyProfileSMSResponse{
		Value: v,
		Set:   true,
	}
}

// OptVerifyProfileSMSResponse is optional VerifyProfileSMSResponse.
type OptVerifyProfileSMSResponse struct {
	Value VerifyProfileSMSResponse
	Set   bool
}

// IsSet returns true if OptVerifyProfileSMSResponse was set.
func (o OptVerifyProfileSMSResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerifyProfileSMSResponse) Reset() {
	var v VerifyProfileSMSResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerifyProfileSMSResponse) SetTo(v VerifyProfileSMSResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerifyProfileSMSResponse) Get() (v VerifyProfileSMSResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerifyProfileSMSResponse) Or(d VerifyProfileSMSResponse) VerifyProfileSMSResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookDelivery returns new OptWebhookDelivery with value set to v.
func NewOptWebhookDelivery(v WebhookDelivery) OptWebhookDelivery {
	return OptWebhookDelivery{
		Value: v,
		Set:   true,
	}
}

// OptWebhookDelivery is optional WebhookDelivery.
type OptWebhookDelivery struct {
	Value WebhookDelivery
	Set   bool
}

// IsSet returns true if OptWebhookDelivery was set.
func (o OptWebhookDelivery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookDelivery) Reset() {
	var v WebhookDelivery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookDelivery) SetTo(v WebhookDelivery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookDelivery) Get() (v WebhookDelivery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookDelivery) Or(d WebhookDelivery) WebhookDelivery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookDeliveryStatus returns new OptWebhookDeliveryStatus with value set to v.
func NewOptWebhookDeliveryStatus(v WebhookDeliveryStatus) OptWebhookDeliveryStatus {
	return OptWebhookDeliveryStatus{
		Value: v,
		Set:   true,
	}
}

// OptWebhookDeliveryStatus is optional WebhookDeliveryStatus.
type OptWebhookDeliveryStatus struct {
	Value WebhookDeliveryStatus
	Set   bool
}

// IsSet returns true if OptWebhookDeliveryStatus was set.
func (o OptWebhookDeliveryStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookDeliveryStatus) Reset() {
	var v WebhookDeliveryStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookDeliveryStatus) SetTo(v WebhookDeliveryStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookDeliveryStatus) Get() (v WebhookDeliveryStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookDeliveryStatus) Or(d WebhookDeliveryStatus) WebhookDeliveryStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookDeliveryWebhook returns new OptWebhookDeliveryWebhook with value set to v.
func NewOptWebhookDeliveryWebhook(v WebhookDeliveryWebhook) OptWebhookDeliveryWebhook {
	return OptWebhookDeliveryWebhook{
		Value: v,
		Set:   true,
	}
}

// OptWebhookDeliveryWebhook is optional WebhookDeliveryWebhook.
type OptWebhookDeliveryWebhook struct {
	Value WebhookDeliveryWebhook
	Set   bool
}

// IsSet returns true if OptWebhookDeliveryWebhook was set.
func (o OptWebhookDeliveryWebhook) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookDeliveryWebhook) Reset() {
	var v WebhookDeliveryWebhook
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookDeliveryWebhook) SetTo(v WebhookDeliveryWebhook) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookDeliveryWebhook) Get() (v WebhookDeliveryWebhook, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookDeliveryWebhook) Or(d WebhookDeliveryWebhook) WebhookDeliveryWebhook {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookDeliveryWebhookPayload returns new OptWebhookDeliveryWebhookPayload with value set to v.
func NewOptWebhookDeliveryWebhookPayload(v WebhookDeliveryWebhookPayload) OptWebhookDeliveryWebhookPayload {
	return OptWebhookDeliveryWebhookPayload{
		Value: v,
		Set:   true,
	}
}

// OptWebhookDeliveryWebhookPayload is optional WebhookDeliveryWebhookPayload.
type OptWebhookDeliveryWebhookPayload struct {
	Value WebhookDeliveryWebhookPayload
	Set   bool
}

// IsSet returns true if OptWebhookDeliveryWebhookPayload was set.
func (o OptWebhookDeliveryWebhookPayload) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookDeliveryWebhookPayload) Reset() {
	var v WebhookDeliveryWebhookPayload
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookDeliveryWebhookPayload) SetTo(v WebhookDeliveryWebhookPayload) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookDeliveryWebhookPayload) Get() (v WebhookDeliveryWebhookPayload, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookDeliveryWebhookPayload) Or(d WebhookDeliveryWebhookPayload) WebhookDeliveryWebhookPayload {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookDeliveryWebhookRecordType returns new OptWebhookDeliveryWebhookRecordType with value set to v.
func NewOptWebhookDeliveryWebhookRecordType(v WebhookDeliveryWebhookRecordType) OptWebhookDeliveryWebhookRecordType {
	return OptWebhookDeliveryWebhookRecordType{
		Value: v,
		Set:   true,
	}
}

// OptWebhookDeliveryWebhookRecordType is optional WebhookDeliveryWebhookRecordType.
type OptWebhookDeliveryWebhookRecordType struct {
	Value WebhookDeliveryWebhookRecordType
	Set   bool
}

// IsSet returns true if OptWebhookDeliveryWebhookRecordType was set.
func (o OptWebhookDeliveryWebhookRecordType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookDeliveryWebhookRecordType) Reset() {
	var v WebhookDeliveryWebhookRecordType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookDeliveryWebhookRecordType) SetTo(v WebhookDeliveryWebhookRecordType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookDeliveryWebhookRecordType) Get() (v WebhookDeliveryWebhookRecordType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookDeliveryWebhookRecordType) Or(d WebhookDeliveryWebhookRecordType) WebhookDeliveryWebhookRecordType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type OutboundVoiceProfileId int64

// Ref: #/components/schemas/PaginationMeta
type PaginationMeta struct {
	TotalPages   OptInt `json:"total_pages"`
	TotalResults OptInt `json:"total_results"`
	PageNumber   OptInt `json:"page_number"`
	PageSize     OptInt `json:"page_size"`
}

// GetTotalPages returns the value of TotalPages.
func (s *PaginationMeta) GetTotalPages() OptInt {
	return s.TotalPages
}

// GetTotalResults returns the value of TotalResults.
func (s *PaginationMeta) GetTotalResults() OptInt {
	return s.TotalResults
}

// GetPageNumber returns the value of PageNumber.
func (s *PaginationMeta) GetPageNumber() OptInt {
	return s.PageNumber
}

// GetPageSize returns the value of PageSize.
func (s *PaginationMeta) GetPageSize() OptInt {
	return s.PageSize
}

// SetTotalPages sets the value of TotalPages.
func (s *PaginationMeta) SetTotalPages(val OptInt) {
	s.TotalPages = val
}

// SetTotalResults sets the value of TotalResults.
func (s *PaginationMeta) SetTotalResults(val OptInt) {
	s.TotalResults = val
}

// SetPageNumber sets the value of PageNumber.
func (s *PaginationMeta) SetPageNumber(val OptInt) {
	s.PageNumber = val
}

// SetPageSize sets the value of PageSize.
func (s *PaginationMeta) SetPageSize(val OptInt) {
	s.PageSize = val
}

// Ref: #/components/schemas/ParticipantResource
type ParticipantResource struct {
	// The id of the account the resource belongs to.
	AccountSid OptString `json:"account_sid"`
	// The version of the API that was used to make the request.
	APIVersion OptString `json:"api_version"`
	// The identifier of this participant's call.
	CallSid OptString `json:"call_sid"`
	// The identifier of this participant's call.
	CallSidLegacy OptString `json:"call_sid_legacy"`
	// Whether the participant is coaching another call.
	Coaching OptBool `json:"coaching"`
	// The identifier of the coached participant's call.
	CoachingCallSid OptString `json:"coaching_call_sid"`
	// The identifier of the coached participant's call.
	CoachingCallSidLegacy OptString `json:"coaching_call_sid_legacy"`
	// The timestamp of when the resource was created.
	DateCreated OptString `json:"date_created"`
	// The timestamp of when the resource was last updated.
	DateUpdated OptString `json:"date_updated"`
	// Whether the conference ends when the participant leaves.
	EndConferenceOnExit OptBool `json:"end_conference_on_exit"`
	// Whether the participant is on hold.
	Hold OptBool `json:"hold"`
	// Whether the participant is muted.
	Muted OptBool `json:"muted"`
	// The status of the participant's call in the conference.
	Status OptParticipantResourceStatus `json:"status"`
	// The relative URI for this participant.
	URI OptString `json:"uri"`
}

// GetAccountSid returns the value of AccountSid.
func (s *ParticipantResource) GetAccountSid() OptString {
	return s.AccountSid
}

// GetAPIVersion returns the value of APIVersion.
func (s *ParticipantResource) GetAPIVersion() OptString {
	return s.APIVersion
}

// GetCallSid returns the value of CallSid.
func (s *ParticipantResource) GetCallSid() OptString {
	return s.CallSid
}

// GetCallSidLegacy returns the value of CallSidLegacy.
func (s *ParticipantResource) GetCallSidLegacy() OptString {
	return s.CallSidLegacy
}

// GetCoaching returns the value of Coaching.
func (s *ParticipantResource) GetCoaching() OptBool {
	return s.Coaching
}

// GetCoachingCallSid returns the value of CoachingCallSid.
func (s *ParticipantResource) GetCoachingCallSid() OptString {
	return s.CoachingCallSid
}

// GetCoachingCallSidLegacy returns the value of CoachingCallSidLegacy.
func (s *ParticipantResource) GetCoachingCallSidLegacy() OptString {
	return s.CoachingCallSidLegacy
}

// GetDateCreated returns the value of DateCreated.
func (s *ParticipantResource) GetDateCreated() OptString {
	return s.DateCreated
}

// GetDateUpdated returns the value of DateUpdated.
func (s *ParticipantResource) GetDateUpdated() OptString {
	return s.DateUpdated
}

// GetEndConferenceOnExit returns the value of EndConferenceOnExit.
func (s *ParticipantResource) GetEndConferenceOnExit() OptBool {
	return s.EndConferenceOnExit
}

// GetHold returns the value of Hold.
func (s *ParticipantResource) GetHold() OptBool {
	return s.Hold
}

// GetMuted returns the value of Muted.
func (s *ParticipantResource) GetMuted() OptBool {
	return s.Muted
}

// GetStatus returns the value of Status.
func (s *ParticipantResource) GetStatus() OptParticipantResourceStatus {
	return s.Status
}

// GetURI returns the value of URI.
func (s *ParticipantResource) GetURI() OptString {
	return s.URI
}

// SetAccountSid sets the value of AccountSid.
func (s *ParticipantResource) SetAccountSid(val OptString) {
	s.AccountSid = val
}

// SetAPIVersion sets the value of APIVersion.
func (s *ParticipantResource) SetAPIVersion(val OptString) {
	s.APIVersion = val
}

// SetCallSid sets the value of CallSid.
func (s *ParticipantResource) SetCallSid(val OptString) {
	s.CallSid = val
}

// SetCallSidLegacy sets the value of CallSidLegacy.
func (s *ParticipantResource) SetCallSidLegacy(val OptString) {
	s.CallSidLegacy = val
}

// SetCoaching sets the value of Coaching.
func (s *ParticipantResource) SetCoaching(val OptBool) {
	s.Coaching = val
}

// SetCoachingCallSid sets the value of CoachingCallSid.
func (s *ParticipantResource) SetCoachingCallSid(val OptString) {
	s.CoachingCallSid = val
}

// SetCoachingCallSidLegacy sets the value of CoachingCallSidLegacy.
func (s *ParticipantResource) SetCoachingCallSidLegacy(val OptString) {
	s.CoachingCallSidLegacy = val
}

// SetDateCreated sets the value of DateCreated.
func (s *ParticipantResource) SetDateCreated(val OptString) {
	s.DateCreated = val
}

// SetDateUpdated sets the value of DateUpdated.
func (s *ParticipantResource) SetDateUpdated(val OptString) {
	s.DateUpdated = val
}

// SetEndConferenceOnExit sets the value of EndConferenceOnExit.
func (s *ParticipantResource) SetEndConferenceOnExit(val OptBool) {
	s.EndConferenceOnExit = val
}

// SetHold sets the value of Hold.
func (s *ParticipantResource) SetHold(val OptBool) {
	s.Hold = val
}

// SetMuted sets the value of Muted.
func (s *ParticipantResource) SetMuted(val OptBool) {
	s.Muted = val
}

// SetStatus sets the value of Status.
func (s *ParticipantResource) SetStatus(val OptParticipantResourceStatus) {
	s.Status = val
}

// SetURI sets the value of URI.
func (s *ParticipantResource) SetURI(val OptString) {
	s.URI = val
}

// Ref: #/components/schemas/ParticipantResourceIndex
type ParticipantResourceIndex struct {
	Participants []ParticipantResource `json:"participants"`
	// The number of the last element on the page, zero-indexed.
	End OptInt `json:"end"`
	// /v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences/6dc6cc1a-1ba1-4351-86b8-4c22c95cd98f/Participants.json?page=0&pagesize=20.
	FirstPageURI OptString `json:"first_page_uri"`
	// /v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences/6dc6cc1a-1ba1-4351-86b8-4c22c95cd98f/Participants.json?Page=1&PageSize=1&PageToken=MTY4AjgyNDkwNzIxMQ.
	NextPageURI OptString `json:"next_page_uri"`
	// Current page number, zero-indexed.
	Page OptInt `json:"page"`
	// The number of items on the page.
	PageSize OptInt `json:"page_size"`
	// The number of the first element on the page, zero-indexed.
	Start OptInt `json:"start"`
	// The URI of the current page.
	URI OptString `json:"uri"`
}

// GetParticipants returns the value of Participants.
func (s *ParticipantResourceIndex) GetParticipants() []ParticipantResource {
	return s.Participants
}

// GetEnd returns the value of End.
func (s *ParticipantResourceIndex) GetEnd() OptInt {
	return s.End
}

// GetFirstPageURI returns the value of FirstPageURI.
func (s *ParticipantResourceIndex) GetFirstPageURI() OptString {
	return s.FirstPageURI
}

// GetNextPageURI returns the value of NextPageURI.
func (s *ParticipantResourceIndex) GetNextPageURI() OptString {
	return s.NextPageURI
}

// GetPage returns the value of Page.
func (s *ParticipantResourceIndex) GetPage() OptInt {
	return s.Page
}

// GetPageSize returns the value of PageSize.
func (s *ParticipantResourceIndex) GetPageSize() OptInt {
	return s.PageSize
}

// GetStart returns the value of Start.
func (s *ParticipantResourceIndex) GetStart() OptInt {
	return s.Start
}

// GetURI returns the value of URI.
func (s *ParticipantResourceIndex) GetURI() OptString {
	return s.URI
}

// SetParticipants sets the value of Participants.
func (s *ParticipantResourceIndex) SetParticipants(val []ParticipantResource) {
	s.Participants = val
}

// SetEnd sets the value of End.
func (s *ParticipantResourceIndex) SetEnd(val OptInt) {
	s.End = val
}

// SetFirstPageURI sets the value of FirstPageURI.
func (s *ParticipantResourceIndex) SetFirstPageURI(val OptString) {
	s.FirstPageURI = val
}

// SetNextPageURI sets the value of NextPageURI.
func (s *ParticipantResourceIndex) SetNextPageURI(val OptString) {
	s.NextPageURI = val
}

// SetPage sets the value of Page.
func (s *ParticipantResourceIndex) SetPage(val OptInt) {
	s.Page = val
}

// SetPageSize sets the value of PageSize.
func (s *ParticipantResourceIndex) SetPageSize(val OptInt) {
	s.PageSize = val
}

// SetStart sets the value of Start.
func (s *ParticipantResourceIndex) SetStart(val OptInt) {
	s.Start = val
}

// SetURI sets the value of URI.
func (s *ParticipantResourceIndex) SetURI(val OptString) {
	s.URI = val
}

// The status of the participant's call in the conference.
type ParticipantResourceStatus string

const (
	ParticipantResourceStatusConnecting ParticipantResourceStatus = "connecting"
	ParticipantResourceStatusConnected  ParticipantResourceStatus = "connected"
	ParticipantResourceStatusCompleted  ParticipantResourceStatus = "completed"
)

// AllValues returns all ParticipantResourceStatus values.
func (ParticipantResourceStatus) AllValues() []ParticipantResourceStatus {
	return []ParticipantResourceStatus{
		ParticipantResourceStatusConnecting,
		ParticipantResourceStatusConnected,
		ParticipantResourceStatusCompleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ParticipantResourceStatus) MarshalText() ([]byte, error) {
	switch s {
	case ParticipantResourceStatusConnecting:
		return []byte(s), nil
	case ParticipantResourceStatusConnected:
		return []byte(s), nil
	case ParticipantResourceStatusCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ParticipantResourceStatus) UnmarshalText(data []byte) error {
	switch ParticipantResourceStatus(data) {
	case ParticipantResourceStatusConnecting:
		*s = ParticipantResourceStatusConnecting
		return nil
	case ParticipantResourceStatusConnected:
		*s = ParticipantResourceStatusConnected
		return nil
	case ParticipantResourceStatusCompleted:
		*s = ParticipantResourceStatusCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PauseRecordingRequest
type PauseRecordingRequest struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetClientState returns the value of ClientState.
func (s *PauseRecordingRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *PauseRecordingRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetClientState sets the value of ClientState.
func (s *PauseRecordingRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *PauseRecordingRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

type PerformCredentialActionAction string

const (
	PerformCredentialActionActionActivate   PerformCredentialActionAction = "activate"
	PerformCredentialActionActionDeactivate PerformCredentialActionAction = "deactivate"
)

// AllValues returns all PerformCredentialActionAction values.
func (PerformCredentialActionAction) AllValues() []PerformCredentialActionAction {
	return []PerformCredentialActionAction{
		PerformCredentialActionActionActivate,
		PerformCredentialActionActionDeactivate,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PerformCredentialActionAction) MarshalText() ([]byte, error) {
	switch s {
	case PerformCredentialActionActionActivate:
		return []byte(s), nil
	case PerformCredentialActionActionDeactivate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PerformCredentialActionAction) UnmarshalText(data []byte) error {
	switch PerformCredentialActionAction(data) {
	case PerformCredentialActionActionActivate:
		*s = PerformCredentialActionActionActivate
		return nil
	case PerformCredentialActionActionDeactivate:
		*s = PerformCredentialActionActionDeactivate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// PerformCredentialActionBadRequest is response for PerformCredentialAction operation.
type PerformCredentialActionBadRequest struct{}

func (*PerformCredentialActionBadRequest) performCredentialActionRes() {}

// PerformCredentialActionNotFound is response for PerformCredentialAction operation.
type PerformCredentialActionNotFound struct{}

func (*PerformCredentialActionNotFound) performCredentialActionRes() {}

// PerformCredentialActionUnauthorized is response for PerformCredentialAction operation.
type PerformCredentialActionUnauthorized struct{}

func (*PerformCredentialActionUnauthorized) performCredentialActionRes() {}

type PhoneNumbers []PhoneNumbersItem

// A Phone Number that can make phone calls displaying the configured brand information.
type PhoneNumbersItem struct {
	RecordType OptString `json:"record_type"`
	ID         OptUUID   `json:"id"`
	// The phone number in e164 format.
	PhoneNumber OptString `json:"phone_number"`
	// The approval status of this individual phone number in Google.
	GoogleVerificationStatus OptPhoneNumbersItemGoogleVerificationStatus `json:"google_verification_status"`
	// Additional information about the decision, if available.
	GoogleApprovalInfo OptString `json:"google_approval_info"`
	DisplayProfileID   OptUUID   `json:"display_profile_id"`
	// Marks the Phone Number to be removed from the Display Profile.
	Delete OptBool `json:"delete"`
}

// GetRecordType returns the value of RecordType.
func (s *PhoneNumbersItem) GetRecordType() OptString {
	return s.RecordType
}

// GetID returns the value of ID.
func (s *PhoneNumbersItem) GetID() OptUUID {
	return s.ID
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *PhoneNumbersItem) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetGoogleVerificationStatus returns the value of GoogleVerificationStatus.
func (s *PhoneNumbersItem) GetGoogleVerificationStatus() OptPhoneNumbersItemGoogleVerificationStatus {
	return s.GoogleVerificationStatus
}

// GetGoogleApprovalInfo returns the value of GoogleApprovalInfo.
func (s *PhoneNumbersItem) GetGoogleApprovalInfo() OptString {
	return s.GoogleApprovalInfo
}

// GetDisplayProfileID returns the value of DisplayProfileID.
func (s *PhoneNumbersItem) GetDisplayProfileID() OptUUID {
	return s.DisplayProfileID
}

// GetDelete returns the value of Delete.
func (s *PhoneNumbersItem) GetDelete() OptBool {
	return s.Delete
}

// SetRecordType sets the value of RecordType.
func (s *PhoneNumbersItem) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetID sets the value of ID.
func (s *PhoneNumbersItem) SetID(val OptUUID) {
	s.ID = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *PhoneNumbersItem) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetGoogleVerificationStatus sets the value of GoogleVerificationStatus.
func (s *PhoneNumbersItem) SetGoogleVerificationStatus(val OptPhoneNumbersItemGoogleVerificationStatus) {
	s.GoogleVerificationStatus = val
}

// SetGoogleApprovalInfo sets the value of GoogleApprovalInfo.
func (s *PhoneNumbersItem) SetGoogleApprovalInfo(val OptString) {
	s.GoogleApprovalInfo = val
}

// SetDisplayProfileID sets the value of DisplayProfileID.
func (s *PhoneNumbersItem) SetDisplayProfileID(val OptUUID) {
	s.DisplayProfileID = val
}

// SetDelete sets the value of Delete.
func (s *PhoneNumbersItem) SetDelete(val OptBool) {
	s.Delete = val
}

// The approval status of this individual phone number in Google.
type PhoneNumbersItemGoogleVerificationStatus string

const (
	PhoneNumbersItemGoogleVerificationStatusSTATEUNSPECIFIED PhoneNumbersItemGoogleVerificationStatus = "STATE_UNSPECIFIED"
	PhoneNumbersItemGoogleVerificationStatusPENDINGAPPROVAL  PhoneNumbersItemGoogleVerificationStatus = "PENDING_APPROVAL"
	PhoneNumbersItemGoogleVerificationStatusAPPROVED         PhoneNumbersItemGoogleVerificationStatus = "APPROVED"
	PhoneNumbersItemGoogleVerificationStatusDENIED           PhoneNumbersItemGoogleVerificationStatus = "DENIED"
	PhoneNumbersItemGoogleVerificationStatusPENDINGREMOVAL   PhoneNumbersItemGoogleVerificationStatus = "PENDING_REMOVAL"
)

// AllValues returns all PhoneNumbersItemGoogleVerificationStatus values.
func (PhoneNumbersItemGoogleVerificationStatus) AllValues() []PhoneNumbersItemGoogleVerificationStatus {
	return []PhoneNumbersItemGoogleVerificationStatus{
		PhoneNumbersItemGoogleVerificationStatusSTATEUNSPECIFIED,
		PhoneNumbersItemGoogleVerificationStatusPENDINGAPPROVAL,
		PhoneNumbersItemGoogleVerificationStatusAPPROVED,
		PhoneNumbersItemGoogleVerificationStatusDENIED,
		PhoneNumbersItemGoogleVerificationStatusPENDINGREMOVAL,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PhoneNumbersItemGoogleVerificationStatus) MarshalText() ([]byte, error) {
	switch s {
	case PhoneNumbersItemGoogleVerificationStatusSTATEUNSPECIFIED:
		return []byte(s), nil
	case PhoneNumbersItemGoogleVerificationStatusPENDINGAPPROVAL:
		return []byte(s), nil
	case PhoneNumbersItemGoogleVerificationStatusAPPROVED:
		return []byte(s), nil
	case PhoneNumbersItemGoogleVerificationStatusDENIED:
		return []byte(s), nil
	case PhoneNumbersItemGoogleVerificationStatusPENDINGREMOVAL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PhoneNumbersItemGoogleVerificationStatus) UnmarshalText(data []byte) error {
	switch PhoneNumbersItemGoogleVerificationStatus(data) {
	case PhoneNumbersItemGoogleVerificationStatusSTATEUNSPECIFIED:
		*s = PhoneNumbersItemGoogleVerificationStatusSTATEUNSPECIFIED
		return nil
	case PhoneNumbersItemGoogleVerificationStatusPENDINGAPPROVAL:
		*s = PhoneNumbersItemGoogleVerificationStatusPENDINGAPPROVAL
		return nil
	case PhoneNumbersItemGoogleVerificationStatusAPPROVED:
		*s = PhoneNumbersItemGoogleVerificationStatusAPPROVED
		return nil
	case PhoneNumbersItemGoogleVerificationStatusDENIED:
		*s = PhoneNumbersItemGoogleVerificationStatusDENIED
		return nil
	case PhoneNumbersItemGoogleVerificationStatusPENDINGREMOVAL:
		*s = PhoneNumbersItemGoogleVerificationStatusPENDINGREMOVAL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PlayAudioUrlRequest
type PlayAudioUrlRequest struct {
	// The URL of a file to be played back on the call. The URL can point to either a WAV or MP3 file.
	// media_name and audio_url cannot be used together in one request.
	AudioURL OptString `json:"audio_url"`
	// The media_name of a file to be played back on the call. The media_name must point to a file
	// previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either
	// be a WAV or MP3 file.
	MediaName OptString `json:"media_name"`
	// The number of times the audio file should be played. If supplied, the value must be an integer
	// between 1 and 100, or the special string `infinity` for an endless loop.
	Loop OptLoopcount `json:"loop"`
	// When enabled, audio will be mixed on top of any other audio that is actively being played back.
	// Note that `overlay: true` will only work if there is another audio file already being played on
	// the call.
	Overlay OptBool `json:"overlay"`
	// When specified, it stops the current audio being played. Specify `current` to stop the current
	// audio being played, and to play the next file in the queue. Specify `all` to stop the current
	// audio file being played and to also clear all audio files from the queue.
	Stop OptString `json:"stop"`
	// Specifies the leg or legs on which audio will be played. If supplied, the value must be either
	// `self`, `opposite` or `both`.
	TargetLegs OptString `json:"target_legs"`
	// Caches the audio file. Useful when playing the same audio file multiple times during the call.
	CacheAudio OptBool `json:"cache_audio"`
	// Specifies the type of audio provided in `audio_url` or `playback_content`.
	AudioType OptPlayAudioUrlRequestAudioType `json:"audio_type"`
	// Allows a user to provide base64 encoded mp3 or wav. Note: when using this parameter, `media_url`
	// and `media_name` in the `playback_started` and `playback_ended` webhooks will be empty.
	PlaybackContent OptString `json:"playback_content"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetAudioURL returns the value of AudioURL.
func (s *PlayAudioUrlRequest) GetAudioURL() OptString {
	return s.AudioURL
}

// GetMediaName returns the value of MediaName.
func (s *PlayAudioUrlRequest) GetMediaName() OptString {
	return s.MediaName
}

// GetLoop returns the value of Loop.
func (s *PlayAudioUrlRequest) GetLoop() OptLoopcount {
	return s.Loop
}

// GetOverlay returns the value of Overlay.
func (s *PlayAudioUrlRequest) GetOverlay() OptBool {
	return s.Overlay
}

// GetStop returns the value of Stop.
func (s *PlayAudioUrlRequest) GetStop() OptString {
	return s.Stop
}

// GetTargetLegs returns the value of TargetLegs.
func (s *PlayAudioUrlRequest) GetTargetLegs() OptString {
	return s.TargetLegs
}

// GetCacheAudio returns the value of CacheAudio.
func (s *PlayAudioUrlRequest) GetCacheAudio() OptBool {
	return s.CacheAudio
}

// GetAudioType returns the value of AudioType.
func (s *PlayAudioUrlRequest) GetAudioType() OptPlayAudioUrlRequestAudioType {
	return s.AudioType
}

// GetPlaybackContent returns the value of PlaybackContent.
func (s *PlayAudioUrlRequest) GetPlaybackContent() OptString {
	return s.PlaybackContent
}

// GetClientState returns the value of ClientState.
func (s *PlayAudioUrlRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *PlayAudioUrlRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetAudioURL sets the value of AudioURL.
func (s *PlayAudioUrlRequest) SetAudioURL(val OptString) {
	s.AudioURL = val
}

// SetMediaName sets the value of MediaName.
func (s *PlayAudioUrlRequest) SetMediaName(val OptString) {
	s.MediaName = val
}

// SetLoop sets the value of Loop.
func (s *PlayAudioUrlRequest) SetLoop(val OptLoopcount) {
	s.Loop = val
}

// SetOverlay sets the value of Overlay.
func (s *PlayAudioUrlRequest) SetOverlay(val OptBool) {
	s.Overlay = val
}

// SetStop sets the value of Stop.
func (s *PlayAudioUrlRequest) SetStop(val OptString) {
	s.Stop = val
}

// SetTargetLegs sets the value of TargetLegs.
func (s *PlayAudioUrlRequest) SetTargetLegs(val OptString) {
	s.TargetLegs = val
}

// SetCacheAudio sets the value of CacheAudio.
func (s *PlayAudioUrlRequest) SetCacheAudio(val OptBool) {
	s.CacheAudio = val
}

// SetAudioType sets the value of AudioType.
func (s *PlayAudioUrlRequest) SetAudioType(val OptPlayAudioUrlRequestAudioType) {
	s.AudioType = val
}

// SetPlaybackContent sets the value of PlaybackContent.
func (s *PlayAudioUrlRequest) SetPlaybackContent(val OptString) {
	s.PlaybackContent = val
}

// SetClientState sets the value of ClientState.
func (s *PlayAudioUrlRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *PlayAudioUrlRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// Specifies the type of audio provided in `audio_url` or `playback_content`.
type PlayAudioUrlRequestAudioType string

const (
	PlayAudioUrlRequestAudioTypeMp3 PlayAudioUrlRequestAudioType = "mp3"
	PlayAudioUrlRequestAudioTypeWav PlayAudioUrlRequestAudioType = "wav"
)

// AllValues returns all PlayAudioUrlRequestAudioType values.
func (PlayAudioUrlRequestAudioType) AllValues() []PlayAudioUrlRequestAudioType {
	return []PlayAudioUrlRequestAudioType{
		PlayAudioUrlRequestAudioTypeMp3,
		PlayAudioUrlRequestAudioTypeWav,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlayAudioUrlRequestAudioType) MarshalText() ([]byte, error) {
	switch s {
	case PlayAudioUrlRequestAudioTypeMp3:
		return []byte(s), nil
	case PlayAudioUrlRequestAudioTypeWav:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlayAudioUrlRequestAudioType) UnmarshalText(data []byte) error {
	switch PlayAudioUrlRequestAudioType(data) {
	case PlayAudioUrlRequestAudioTypeMp3:
		*s = PlayAudioUrlRequestAudioTypeMp3
		return nil
	case PlayAudioUrlRequestAudioTypeWav:
		*s = PlayAudioUrlRequestAudioTypeWav
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PlayBeep bool

// Ref: #/components/schemas/PlaybackStopRequest
type PlaybackStopRequest struct {
	// When enabled, it stops the audio being played in the overlay queue.
	Overlay OptBool `json:"overlay"`
	// Use `current` to stop the current audio being played. Use `all` to stop the current audio file
	// being played and clear all audio files from the queue.
	Stop OptString `json:"stop"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetOverlay returns the value of Overlay.
func (s *PlaybackStopRequest) GetOverlay() OptBool {
	return s.Overlay
}

// GetStop returns the value of Stop.
func (s *PlaybackStopRequest) GetStop() OptString {
	return s.Stop
}

// GetClientState returns the value of ClientState.
func (s *PlaybackStopRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *PlaybackStopRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetOverlay sets the value of Overlay.
func (s *PlaybackStopRequest) SetOverlay(val OptBool) {
	s.Overlay = val
}

// SetStop sets the value of Stop.
func (s *PlaybackStopRequest) SetStop(val OptString) {
	s.Stop = val
}

// SetClientState sets the value of ClientState.
func (s *PlaybackStopRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *PlaybackStopRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// Ref: #/components/schemas/QueueCall
type QueueCall struct {
	RecordType QueueCallRecordType `json:"record_type"`
	// ID that is unique to the call session and can be used to correlate webhook events. Call session is
	// a group of related call legs that logically belong to the same phone call, e.g. an inbound and
	// outbound leg of a transferred call.
	CallSessionID string `json:"call_session_id"`
	// ID that is unique to the call and can be used to correlate webhook events.
	CallLegID string `json:"call_leg_id"`
	// Unique identifier and token for controlling the call.
	CallControlID string `json:"call_control_id"`
	// Call Control App ID (formerly Telnyx connection ID) used in the call.
	ConnectionID string `json:"connection_id"`
	// Number or SIP URI placing the call.
	From string `json:"from"`
	// Destination number or SIP URI of the call.
	To string `json:"to"`
	// ISO 8601 formatted date of when the call was put in the queue.
	EnqueuedAt string `json:"enqueued_at"`
	// The time the call has been waiting in the queue, given in seconds.
	WaitTimeSecs int `json:"wait_time_secs"`
	// Current position of the call in the queue.
	QueuePosition int `json:"queue_position"`
	// Unique identifier of the queue the call is in.
	QueueID string `json:"queue_id"`
}

// GetRecordType returns the value of RecordType.
func (s *QueueCall) GetRecordType() QueueCallRecordType {
	return s.RecordType
}

// GetCallSessionID returns the value of CallSessionID.
func (s *QueueCall) GetCallSessionID() string {
	return s.CallSessionID
}

// GetCallLegID returns the value of CallLegID.
func (s *QueueCall) GetCallLegID() string {
	return s.CallLegID
}

// GetCallControlID returns the value of CallControlID.
func (s *QueueCall) GetCallControlID() string {
	return s.CallControlID
}

// GetConnectionID returns the value of ConnectionID.
func (s *QueueCall) GetConnectionID() string {
	return s.ConnectionID
}

// GetFrom returns the value of From.
func (s *QueueCall) GetFrom() string {
	return s.From
}

// GetTo returns the value of To.
func (s *QueueCall) GetTo() string {
	return s.To
}

// GetEnqueuedAt returns the value of EnqueuedAt.
func (s *QueueCall) GetEnqueuedAt() string {
	return s.EnqueuedAt
}

// GetWaitTimeSecs returns the value of WaitTimeSecs.
func (s *QueueCall) GetWaitTimeSecs() int {
	return s.WaitTimeSecs
}

// GetQueuePosition returns the value of QueuePosition.
func (s *QueueCall) GetQueuePosition() int {
	return s.QueuePosition
}

// GetQueueID returns the value of QueueID.
func (s *QueueCall) GetQueueID() string {
	return s.QueueID
}

// SetRecordType sets the value of RecordType.
func (s *QueueCall) SetRecordType(val QueueCallRecordType) {
	s.RecordType = val
}

// SetCallSessionID sets the value of CallSessionID.
func (s *QueueCall) SetCallSessionID(val string) {
	s.CallSessionID = val
}

// SetCallLegID sets the value of CallLegID.
func (s *QueueCall) SetCallLegID(val string) {
	s.CallLegID = val
}

// SetCallControlID sets the value of CallControlID.
func (s *QueueCall) SetCallControlID(val string) {
	s.CallControlID = val
}

// SetConnectionID sets the value of ConnectionID.
func (s *QueueCall) SetConnectionID(val string) {
	s.ConnectionID = val
}

// SetFrom sets the value of From.
func (s *QueueCall) SetFrom(val string) {
	s.From = val
}

// SetTo sets the value of To.
func (s *QueueCall) SetTo(val string) {
	s.To = val
}

// SetEnqueuedAt sets the value of EnqueuedAt.
func (s *QueueCall) SetEnqueuedAt(val string) {
	s.EnqueuedAt = val
}

// SetWaitTimeSecs sets the value of WaitTimeSecs.
func (s *QueueCall) SetWaitTimeSecs(val int) {
	s.WaitTimeSecs = val
}

// SetQueuePosition sets the value of QueuePosition.
func (s *QueueCall) SetQueuePosition(val int) {
	s.QueuePosition = val
}

// SetQueueID sets the value of QueueID.
func (s *QueueCall) SetQueueID(val string) {
	s.QueueID = val
}

type QueueCallRecordType string

const (
	QueueCallRecordTypeQueueCall QueueCallRecordType = "queue_call"
)

// AllValues returns all QueueCallRecordType values.
func (QueueCallRecordType) AllValues() []QueueCallRecordType {
	return []QueueCallRecordType{
		QueueCallRecordTypeQueueCall,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s QueueCallRecordType) MarshalText() ([]byte, error) {
	switch s {
	case QueueCallRecordTypeQueueCall:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *QueueCallRecordType) UnmarshalText(data []byte) error {
	switch QueueCallRecordType(data) {
	case QueueCallRecordTypeQueueCall:
		*s = QueueCallRecordTypeQueueCall
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type QueueCallResponse struct {
	Data OptQueueCall `json:"data"`
}

// GetData returns the value of Data.
func (s *QueueCallResponse) GetData() OptQueueCall {
	return s.Data
}

// SetData sets the value of Data.
func (s *QueueCallResponse) SetData(val OptQueueCall) {
	s.Data = val
}

func (*QueueCallResponse) retrieveCallFromQueueRes() {}

// An object following one of the schemas published in https://developers.telnyx.
// com/docs/api/v2/detail-records.
// Ref: #/components/schemas/RecordType
type RecordType struct {
	// Telnyx Product type.
	RecordType OptString `json:"record_type"`
	// Telnyx Product Dimensions.
	ProductDimensions []string `json:"product_dimensions"`
	// Telnyx Product Metrics.
	ProductMetrics []string `json:"product_metrics"`
}

// GetRecordType returns the value of RecordType.
func (s *RecordType) GetRecordType() OptString {
	return s.RecordType
}

// GetProductDimensions returns the value of ProductDimensions.
func (s *RecordType) GetProductDimensions() []string {
	return s.ProductDimensions
}

// GetProductMetrics returns the value of ProductMetrics.
func (s *RecordType) GetProductMetrics() []string {
	return s.ProductMetrics
}

// SetRecordType sets the value of RecordType.
func (s *RecordType) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetProductDimensions sets the value of ProductDimensions.
func (s *RecordType) SetProductDimensions(val []string) {
	s.ProductDimensions = val
}

// SetProductMetrics sets the value of ProductMetrics.
func (s *RecordType) SetProductMetrics(val []string) {
	s.ProductMetrics = val
}

// Ref: #/components/schemas/RecordingResponse
type RecordingResponse struct {
	Data OptRecordingResponseData `json:"data"`
}

// GetData returns the value of Data.
func (s *RecordingResponse) GetData() OptRecordingResponseData {
	return s.Data
}

// SetData sets the value of Data.
func (s *RecordingResponse) SetData(val OptRecordingResponseData) {
	s.Data = val
}

func (*RecordingResponse) deleteRecordingRes() {}
func (*RecordingResponse) getRecordingRes()    {}

// Ref: #/components/schemas/RecordingResponseData
type RecordingResponseData struct {
	// Unique identifier and token for controlling the call.
	CallControlID OptString `json:"call_control_id"`
	// ID that is unique to the call and can be used to correlate webhook events.
	CallLegID OptString `json:"call_leg_id"`
	// ID that is unique to the call session and can be used to correlate webhook events. Call session is
	// a group of related call legs that logically belong to the same phone call, e.g. an inbound and
	// outbound leg of a transferred call.
	CallSessionID OptString `json:"call_session_id"`
	// When `dual`, final audio file has the first leg on channel A, and the rest on channel B.
	Channels OptRecordingResponseDataChannels `json:"channels"`
	// Uniquely identifies the conference.
	ConferenceID OptString `json:"conference_id"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt OptString `json:"created_at"`
	// The links to download the recording files.
	DownloadUrls OptRecordingResponseDataDownloadUrls `json:"download_urls"`
	// The duration of the recording in milliseconds.
	DurationMillis OptInt32 `json:"duration_millis"`
	// Uniquely identifies the recording.
	ID         OptString                          `json:"id"`
	RecordType OptRecordingResponseDataRecordType `json:"record_type"`
	// ISO 8601 formatted date of when the recording started.
	RecordingStartedAt OptString `json:"recording_started_at"`
	// ISO 8601 formatted date of when the recording ended.
	RecordingEndedAt OptString `json:"recording_ended_at"`
	// The kind of event that led to this recording being created.
	Source OptRecordingResponseDataSource `json:"source"`
	// The status of the recording. Only resources for `completed` recordings are currently supported.
	Status OptRecordingResponseDataStatus `json:"status"`
	// ISO 8601 formatted date indicating when the resource was updated.
	UpdatedAt OptString `json:"updated_at"`
}

// GetCallControlID returns the value of CallControlID.
func (s *RecordingResponseData) GetCallControlID() OptString {
	return s.CallControlID
}

// GetCallLegID returns the value of CallLegID.
func (s *RecordingResponseData) GetCallLegID() OptString {
	return s.CallLegID
}

// GetCallSessionID returns the value of CallSessionID.
func (s *RecordingResponseData) GetCallSessionID() OptString {
	return s.CallSessionID
}

// GetChannels returns the value of Channels.
func (s *RecordingResponseData) GetChannels() OptRecordingResponseDataChannels {
	return s.Channels
}

// GetConferenceID returns the value of ConferenceID.
func (s *RecordingResponseData) GetConferenceID() OptString {
	return s.ConferenceID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *RecordingResponseData) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetDownloadUrls returns the value of DownloadUrls.
func (s *RecordingResponseData) GetDownloadUrls() OptRecordingResponseDataDownloadUrls {
	return s.DownloadUrls
}

// GetDurationMillis returns the value of DurationMillis.
func (s *RecordingResponseData) GetDurationMillis() OptInt32 {
	return s.DurationMillis
}

// GetID returns the value of ID.
func (s *RecordingResponseData) GetID() OptString {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *RecordingResponseData) GetRecordType() OptRecordingResponseDataRecordType {
	return s.RecordType
}

// GetRecordingStartedAt returns the value of RecordingStartedAt.
func (s *RecordingResponseData) GetRecordingStartedAt() OptString {
	return s.RecordingStartedAt
}

// GetRecordingEndedAt returns the value of RecordingEndedAt.
func (s *RecordingResponseData) GetRecordingEndedAt() OptString {
	return s.RecordingEndedAt
}

// GetSource returns the value of Source.
func (s *RecordingResponseData) GetSource() OptRecordingResponseDataSource {
	return s.Source
}

// GetStatus returns the value of Status.
func (s *RecordingResponseData) GetStatus() OptRecordingResponseDataStatus {
	return s.Status
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *RecordingResponseData) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// SetCallControlID sets the value of CallControlID.
func (s *RecordingResponseData) SetCallControlID(val OptString) {
	s.CallControlID = val
}

// SetCallLegID sets the value of CallLegID.
func (s *RecordingResponseData) SetCallLegID(val OptString) {
	s.CallLegID = val
}

// SetCallSessionID sets the value of CallSessionID.
func (s *RecordingResponseData) SetCallSessionID(val OptString) {
	s.CallSessionID = val
}

// SetChannels sets the value of Channels.
func (s *RecordingResponseData) SetChannels(val OptRecordingResponseDataChannels) {
	s.Channels = val
}

// SetConferenceID sets the value of ConferenceID.
func (s *RecordingResponseData) SetConferenceID(val OptString) {
	s.ConferenceID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *RecordingResponseData) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetDownloadUrls sets the value of DownloadUrls.
func (s *RecordingResponseData) SetDownloadUrls(val OptRecordingResponseDataDownloadUrls) {
	s.DownloadUrls = val
}

// SetDurationMillis sets the value of DurationMillis.
func (s *RecordingResponseData) SetDurationMillis(val OptInt32) {
	s.DurationMillis = val
}

// SetID sets the value of ID.
func (s *RecordingResponseData) SetID(val OptString) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *RecordingResponseData) SetRecordType(val OptRecordingResponseDataRecordType) {
	s.RecordType = val
}

// SetRecordingStartedAt sets the value of RecordingStartedAt.
func (s *RecordingResponseData) SetRecordingStartedAt(val OptString) {
	s.RecordingStartedAt = val
}

// SetRecordingEndedAt sets the value of RecordingEndedAt.
func (s *RecordingResponseData) SetRecordingEndedAt(val OptString) {
	s.RecordingEndedAt = val
}

// SetSource sets the value of Source.
func (s *RecordingResponseData) SetSource(val OptRecordingResponseDataSource) {
	s.Source = val
}

// SetStatus sets the value of Status.
func (s *RecordingResponseData) SetStatus(val OptRecordingResponseDataStatus) {
	s.Status = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *RecordingResponseData) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// When `dual`, final audio file has the first leg on channel A, and the rest on channel B.
type RecordingResponseDataChannels string

const (
	RecordingResponseDataChannelsSingle RecordingResponseDataChannels = "single"
	RecordingResponseDataChannelsDual   RecordingResponseDataChannels = "dual"
)

// AllValues returns all RecordingResponseDataChannels values.
func (RecordingResponseDataChannels) AllValues() []RecordingResponseDataChannels {
	return []RecordingResponseDataChannels{
		RecordingResponseDataChannelsSingle,
		RecordingResponseDataChannelsDual,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RecordingResponseDataChannels) MarshalText() ([]byte, error) {
	switch s {
	case RecordingResponseDataChannelsSingle:
		return []byte(s), nil
	case RecordingResponseDataChannelsDual:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecordingResponseDataChannels) UnmarshalText(data []byte) error {
	switch RecordingResponseDataChannels(data) {
	case RecordingResponseDataChannelsSingle:
		*s = RecordingResponseDataChannelsSingle
		return nil
	case RecordingResponseDataChannelsDual:
		*s = RecordingResponseDataChannelsDual
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The links to download the recording files.
type RecordingResponseDataDownloadUrls struct {
	// Link to download the recording in mp3 format.
	Mp3 OptString `json:"mp3"`
	// Link to download the recording in wav format.
	Wav OptString `json:"wav"`
}

// GetMp3 returns the value of Mp3.
func (s *RecordingResponseDataDownloadUrls) GetMp3() OptString {
	return s.Mp3
}

// GetWav returns the value of Wav.
func (s *RecordingResponseDataDownloadUrls) GetWav() OptString {
	return s.Wav
}

// SetMp3 sets the value of Mp3.
func (s *RecordingResponseDataDownloadUrls) SetMp3(val OptString) {
	s.Mp3 = val
}

// SetWav sets the value of Wav.
func (s *RecordingResponseDataDownloadUrls) SetWav(val OptString) {
	s.Wav = val
}

type RecordingResponseDataRecordType string

const (
	RecordingResponseDataRecordTypeRecording RecordingResponseDataRecordType = "recording"
)

// AllValues returns all RecordingResponseDataRecordType values.
func (RecordingResponseDataRecordType) AllValues() []RecordingResponseDataRecordType {
	return []RecordingResponseDataRecordType{
		RecordingResponseDataRecordTypeRecording,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RecordingResponseDataRecordType) MarshalText() ([]byte, error) {
	switch s {
	case RecordingResponseDataRecordTypeRecording:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecordingResponseDataRecordType) UnmarshalText(data []byte) error {
	switch RecordingResponseDataRecordType(data) {
	case RecordingResponseDataRecordTypeRecording:
		*s = RecordingResponseDataRecordTypeRecording
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The kind of event that led to this recording being created.
type RecordingResponseDataSource string

const (
	RecordingResponseDataSourceConference RecordingResponseDataSource = "conference"
	RecordingResponseDataSourceCall       RecordingResponseDataSource = "call"
)

// AllValues returns all RecordingResponseDataSource values.
func (RecordingResponseDataSource) AllValues() []RecordingResponseDataSource {
	return []RecordingResponseDataSource{
		RecordingResponseDataSourceConference,
		RecordingResponseDataSourceCall,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RecordingResponseDataSource) MarshalText() ([]byte, error) {
	switch s {
	case RecordingResponseDataSourceConference:
		return []byte(s), nil
	case RecordingResponseDataSourceCall:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecordingResponseDataSource) UnmarshalText(data []byte) error {
	switch RecordingResponseDataSource(data) {
	case RecordingResponseDataSourceConference:
		*s = RecordingResponseDataSourceConference
		return nil
	case RecordingResponseDataSourceCall:
		*s = RecordingResponseDataSourceCall
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The status of the recording. Only resources for `completed` recordings are currently supported.
type RecordingResponseDataStatus string

const (
	RecordingResponseDataStatusCompleted RecordingResponseDataStatus = "completed"
)

// AllValues returns all RecordingResponseDataStatus values.
func (RecordingResponseDataStatus) AllValues() []RecordingResponseDataStatus {
	return []RecordingResponseDataStatus{
		RecordingResponseDataStatusCompleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RecordingResponseDataStatus) MarshalText() ([]byte, error) {
	switch s {
	case RecordingResponseDataStatusCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecordingResponseDataStatus) UnmarshalText(data []byte) error {
	switch RecordingResponseDataStatus(data) {
	case RecordingResponseDataStatusCompleted:
		*s = RecordingResponseDataStatusCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Defines how the recording was created.
// Ref: #/components/schemas/RecordingSource
type RecordingSource string

const (
	RecordingSourceStartCallRecordingAPI       RecordingSource = "StartCallRecordingAPI"
	RecordingSourceStartConferenceRecordingAPI RecordingSource = "StartConferenceRecordingAPI"
	RecordingSourceOutboundAPI                 RecordingSource = "OutboundAPI"
	RecordingSourceDialVerb                    RecordingSource = "DialVerb"
	RecordingSourceConference                  RecordingSource = "Conference"
	RecordingSourceRecordVerb                  RecordingSource = "RecordVerb"
	RecordingSourceTrunking                    RecordingSource = "Trunking"
)

// AllValues returns all RecordingSource values.
func (RecordingSource) AllValues() []RecordingSource {
	return []RecordingSource{
		RecordingSourceStartCallRecordingAPI,
		RecordingSourceStartConferenceRecordingAPI,
		RecordingSourceOutboundAPI,
		RecordingSourceDialVerb,
		RecordingSourceConference,
		RecordingSourceRecordVerb,
		RecordingSourceTrunking,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RecordingSource) MarshalText() ([]byte, error) {
	switch s {
	case RecordingSourceStartCallRecordingAPI:
		return []byte(s), nil
	case RecordingSourceStartConferenceRecordingAPI:
		return []byte(s), nil
	case RecordingSourceOutboundAPI:
		return []byte(s), nil
	case RecordingSourceDialVerb:
		return []byte(s), nil
	case RecordingSourceConference:
		return []byte(s), nil
	case RecordingSourceRecordVerb:
		return []byte(s), nil
	case RecordingSourceTrunking:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecordingSource) UnmarshalText(data []byte) error {
	switch RecordingSource(data) {
	case RecordingSourceStartCallRecordingAPI:
		*s = RecordingSourceStartCallRecordingAPI
		return nil
	case RecordingSourceStartConferenceRecordingAPI:
		*s = RecordingSourceStartConferenceRecordingAPI
		return nil
	case RecordingSourceOutboundAPI:
		*s = RecordingSourceOutboundAPI
		return nil
	case RecordingSourceDialVerb:
		*s = RecordingSourceDialVerb
		return nil
	case RecordingSourceConference:
		*s = RecordingSourceConference
		return nil
	case RecordingSourceRecordVerb:
		*s = RecordingSourceRecordVerb
		return nil
	case RecordingSourceTrunking:
		*s = RecordingSourceTrunking
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type RecordingStatusCallbackEvent string

// The audio track to record for the call. The default is `both`.
// Ref: #/components/schemas/RecordingTrack
type RecordingTrack string

const (
	RecordingTrackInbound  RecordingTrack = "inbound"
	RecordingTrackOutbound RecordingTrack = "outbound"
	RecordingTrackBoth     RecordingTrack = "both"
)

// AllValues returns all RecordingTrack values.
func (RecordingTrack) AllValues() []RecordingTrack {
	return []RecordingTrack{
		RecordingTrackInbound,
		RecordingTrackOutbound,
		RecordingTrackBoth,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RecordingTrack) MarshalText() ([]byte, error) {
	switch s {
	case RecordingTrackInbound:
		return []byte(s), nil
	case RecordingTrackOutbound:
		return []byte(s), nil
	case RecordingTrackBoth:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecordingTrack) UnmarshalText(data []byte) error {
	switch RecordingTrack(data) {
	case RecordingTrackInbound:
		*s = RecordingTrackInbound
		return nil
	case RecordingTrackOutbound:
		*s = RecordingTrackOutbound
		return nil
	case RecordingTrackBoth:
		*s = RecordingTrackBoth
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/RecordingTranscription
type RecordingTranscription struct {
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt OptString `json:"created_at"`
	// The duration of the recording transcription in milliseconds.
	DurationMillis OptInt32 `json:"duration_millis"`
	// Uniquely identifies the recording transcription.
	ID OptString `json:"id"`
	// Uniquely identifies the recording associated with this transcription.
	RecordingID OptString                           `json:"recording_id"`
	RecordType  OptRecordingTranscriptionRecordType `json:"record_type"`
	// The status of the recording transcriptions. The transcription text will be available only when the
	// status is completed.
	Status OptRecordingTranscriptionStatus `json:"status"`
	// The recording's transcribed text.
	TranscriptionText OptString `json:"transcription_text"`
	// ISO 8601 formatted date indicating when the resource was updated.
	UpdatedAt OptString `json:"updated_at"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *RecordingTranscription) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetDurationMillis returns the value of DurationMillis.
func (s *RecordingTranscription) GetDurationMillis() OptInt32 {
	return s.DurationMillis
}

// GetID returns the value of ID.
func (s *RecordingTranscription) GetID() OptString {
	return s.ID
}

// GetRecordingID returns the value of RecordingID.
func (s *RecordingTranscription) GetRecordingID() OptString {
	return s.RecordingID
}

// GetRecordType returns the value of RecordType.
func (s *RecordingTranscription) GetRecordType() OptRecordingTranscriptionRecordType {
	return s.RecordType
}

// GetStatus returns the value of Status.
func (s *RecordingTranscription) GetStatus() OptRecordingTranscriptionStatus {
	return s.Status
}

// GetTranscriptionText returns the value of TranscriptionText.
func (s *RecordingTranscription) GetTranscriptionText() OptString {
	return s.TranscriptionText
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *RecordingTranscription) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// SetCreatedAt sets the value of CreatedAt.
func (s *RecordingTranscription) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetDurationMillis sets the value of DurationMillis.
func (s *RecordingTranscription) SetDurationMillis(val OptInt32) {
	s.DurationMillis = val
}

// SetID sets the value of ID.
func (s *RecordingTranscription) SetID(val OptString) {
	s.ID = val
}

// SetRecordingID sets the value of RecordingID.
func (s *RecordingTranscription) SetRecordingID(val OptString) {
	s.RecordingID = val
}

// SetRecordType sets the value of RecordType.
func (s *RecordingTranscription) SetRecordType(val OptRecordingTranscriptionRecordType) {
	s.RecordType = val
}

// SetStatus sets the value of Status.
func (s *RecordingTranscription) SetStatus(val OptRecordingTranscriptionStatus) {
	s.Status = val
}

// SetTranscriptionText sets the value of TranscriptionText.
func (s *RecordingTranscription) SetTranscriptionText(val OptString) {
	s.TranscriptionText = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *RecordingTranscription) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

type RecordingTranscriptionRecordType string

const (
	RecordingTranscriptionRecordTypeRecordingTranscription RecordingTranscriptionRecordType = "recording_transcription"
)

// AllValues returns all RecordingTranscriptionRecordType values.
func (RecordingTranscriptionRecordType) AllValues() []RecordingTranscriptionRecordType {
	return []RecordingTranscriptionRecordType{
		RecordingTranscriptionRecordTypeRecordingTranscription,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RecordingTranscriptionRecordType) MarshalText() ([]byte, error) {
	switch s {
	case RecordingTranscriptionRecordTypeRecordingTranscription:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecordingTranscriptionRecordType) UnmarshalText(data []byte) error {
	switch RecordingTranscriptionRecordType(data) {
	case RecordingTranscriptionRecordTypeRecordingTranscription:
		*s = RecordingTranscriptionRecordTypeRecordingTranscription
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type RecordingTranscriptionResponse struct {
	Data OptRecordingTranscription `json:"data"`
}

// GetData returns the value of Data.
func (s *RecordingTranscriptionResponse) GetData() OptRecordingTranscription {
	return s.Data
}

// SetData sets the value of Data.
func (s *RecordingTranscriptionResponse) SetData(val OptRecordingTranscription) {
	s.Data = val
}

func (*RecordingTranscriptionResponse) deleteRecordingTranscriptionRes() {}
func (*RecordingTranscriptionResponse) getRecordingTranscriptionRes()    {}

// The status of the recording transcriptions. The transcription text will be available only when the
// status is completed.
type RecordingTranscriptionStatus string

const (
	RecordingTranscriptionStatusInProgress RecordingTranscriptionStatus = "in-progress"
	RecordingTranscriptionStatusCompleted  RecordingTranscriptionStatus = "completed"
)

// AllValues returns all RecordingTranscriptionStatus values.
func (RecordingTranscriptionStatus) AllValues() []RecordingTranscriptionStatus {
	return []RecordingTranscriptionStatus{
		RecordingTranscriptionStatusInProgress,
		RecordingTranscriptionStatusCompleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RecordingTranscriptionStatus) MarshalText() ([]byte, error) {
	switch s {
	case RecordingTranscriptionStatusInProgress:
		return []byte(s), nil
	case RecordingTranscriptionStatusCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecordingTranscriptionStatus) UnmarshalText(data []byte) error {
	switch RecordingTranscriptionStatus(data) {
	case RecordingTranscriptionStatusInProgress:
		*s = RecordingTranscriptionStatusInProgress
		return nil
	case RecordingTranscriptionStatusCompleted:
		*s = RecordingTranscriptionStatusCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type RecordingsResponseBody struct {
	Data []RecordingResponse `json:"data"`
	Meta OptPaginationMeta   `json:"meta"`
}

// GetData returns the value of Data.
func (s *RecordingsResponseBody) GetData() []RecordingResponse {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *RecordingsResponseBody) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *RecordingsResponseBody) SetData(val []RecordingResponse) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *RecordingsResponseBody) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*RecordingsResponseBody) getRecordingsRes() {}

// Ref: #/components/schemas/ReferRequest
type ReferRequest struct {
	// The SIP URI to which the call will be referred to.
	SipAddress string `json:"sip_address"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands
	// with the same `command_id` as one that has already been executed.
	CommandID OptString `json:"command_id"`
	// Custom headers to be added to the SIP INVITE.
	CustomHeaders []CustomSipHeader `json:"custom_headers"`
	// SIP Authentication username used for SIP challenges.
	SipAuthUsername OptString `json:"sip_auth_username"`
	// SIP Authentication password used for SIP challenges.
	SipAuthPassword OptString `json:"sip_auth_password"`
	// SIP headers to be added to the request. Currently only User-to-User header is supported.
	SipHeaders []SipHeader `json:"sip_headers"`
}

// GetSipAddress returns the value of SipAddress.
func (s *ReferRequest) GetSipAddress() string {
	return s.SipAddress
}

// GetClientState returns the value of ClientState.
func (s *ReferRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *ReferRequest) GetCommandID() OptString {
	return s.CommandID
}

// GetCustomHeaders returns the value of CustomHeaders.
func (s *ReferRequest) GetCustomHeaders() []CustomSipHeader {
	return s.CustomHeaders
}

// GetSipAuthUsername returns the value of SipAuthUsername.
func (s *ReferRequest) GetSipAuthUsername() OptString {
	return s.SipAuthUsername
}

// GetSipAuthPassword returns the value of SipAuthPassword.
func (s *ReferRequest) GetSipAuthPassword() OptString {
	return s.SipAuthPassword
}

// GetSipHeaders returns the value of SipHeaders.
func (s *ReferRequest) GetSipHeaders() []SipHeader {
	return s.SipHeaders
}

// SetSipAddress sets the value of SipAddress.
func (s *ReferRequest) SetSipAddress(val string) {
	s.SipAddress = val
}

// SetClientState sets the value of ClientState.
func (s *ReferRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *ReferRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// SetCustomHeaders sets the value of CustomHeaders.
func (s *ReferRequest) SetCustomHeaders(val []CustomSipHeader) {
	s.CustomHeaders = val
}

// SetSipAuthUsername sets the value of SipAuthUsername.
func (s *ReferRequest) SetSipAuthUsername(val OptString) {
	s.SipAuthUsername = val
}

// SetSipAuthPassword sets the value of SipAuthPassword.
func (s *ReferRequest) SetSipAuthPassword(val OptString) {
	s.SipAuthPassword = val
}

// SetSipHeaders sets the value of SipHeaders.
func (s *ReferRequest) SetSipHeaders(val []SipHeader) {
	s.SipHeaders = val
}

type Region string

// Ref: #/components/schemas/RegisterCallRequest
type RegisterCallRequest struct {
	// The DID that you will dial out from.
	From string `json:"from"`
	// The DID that you will dial out to.
	To string `json:"to"`
	// The reason for call (this will be displayed on call recipient's device).
	Reason string `json:"reason"`
}

// GetFrom returns the value of From.
func (s *RegisterCallRequest) GetFrom() string {
	return s.From
}

// GetTo returns the value of To.
func (s *RegisterCallRequest) GetTo() string {
	return s.To
}

// GetReason returns the value of Reason.
func (s *RegisterCallRequest) GetReason() string {
	return s.Reason
}

// SetFrom sets the value of From.
func (s *RegisterCallRequest) SetFrom(val string) {
	s.From = val
}

// SetTo sets the value of To.
func (s *RegisterCallRequest) SetTo(val string) {
	s.To = val
}

// SetReason sets the value of Reason.
func (s *RegisterCallRequest) SetReason(val string) {
	s.Reason = val
}

type RegisterCallResponse struct {
	Data OptRegisterCallResponseData `json:"data"`
}

// GetData returns the value of Data.
func (s *RegisterCallResponse) GetData() OptRegisterCallResponseData {
	return s.Data
}

// SetData sets the value of Data.
func (s *RegisterCallResponse) SetData(val OptRegisterCallResponseData) {
	s.Data = val
}

func (*RegisterCallResponse) registerCallRes() {}

type RegisterCallResponseData struct {
	Result OptString `json:"result"`
}

// GetResult returns the value of Result.
func (s *RegisterCallResponseData) GetResult() OptString {
	return s.Result
}

// SetResult sets the value of Result.
func (s *RegisterCallResponseData) SetResult(val OptString) {
	s.Result = val
}

// Ref: #/components/schemas/RejectRequest
type RejectRequest struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
	// Cause for call rejection.
	Cause RejectRequestCause `json:"cause"`
}

// GetClientState returns the value of ClientState.
func (s *RejectRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *RejectRequest) GetCommandID() OptString {
	return s.CommandID
}

// GetCause returns the value of Cause.
func (s *RejectRequest) GetCause() RejectRequestCause {
	return s.Cause
}

// SetClientState sets the value of ClientState.
func (s *RejectRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *RejectRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// SetCause sets the value of Cause.
func (s *RejectRequest) SetCause(val RejectRequestCause) {
	s.Cause = val
}

// Cause for call rejection.
type RejectRequestCause string

const (
	RejectRequestCauseCALLREJECTED RejectRequestCause = "CALL_REJECTED"
	RejectRequestCauseUSERBUSY     RejectRequestCause = "USER_BUSY"
)

// AllValues returns all RejectRequestCause values.
func (RejectRequestCause) AllValues() []RejectRequestCause {
	return []RejectRequestCause{
		RejectRequestCauseCALLREJECTED,
		RejectRequestCauseUSERBUSY,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RejectRequestCause) MarshalText() ([]byte, error) {
	switch s {
	case RejectRequestCauseCALLREJECTED:
		return []byte(s), nil
	case RejectRequestCauseUSERBUSY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RejectRequestCause) UnmarshalText(data []byte) error {
	switch RejectRequestCause(data) {
	case RejectRequestCauseCALLREJECTED:
		*s = RejectRequestCauseCALLREJECTED
		return nil
	case RejectRequestCauseUSERBUSY:
		*s = RejectRequestCauseUSERBUSY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ResumeRecordingRequest
type ResumeRecordingRequest struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetClientState returns the value of ClientState.
func (s *ResumeRecordingRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *ResumeRecordingRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetClientState sets the value of ClientState.
func (s *ResumeRecordingRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *ResumeRecordingRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// RetrieveCallControlApplicationNotFound is response for RetrieveCallControlApplication operation.
type RetrieveCallControlApplicationNotFound struct{}

func (*RetrieveCallControlApplicationNotFound) retrieveCallControlApplicationRes() {}

// RetrieveCallControlApplicationUnprocessableEntity is response for RetrieveCallControlApplication operation.
type RetrieveCallControlApplicationUnprocessableEntity struct{}

func (*RetrieveCallControlApplicationUnprocessableEntity) retrieveCallControlApplicationRes() {}

type RetrieveCallStatusResponse struct {
	Data OptCall `json:"data"`
}

// GetData returns the value of Data.
func (s *RetrieveCallStatusResponse) GetData() OptCall {
	return s.Data
}

// SetData sets the value of Data.
func (s *RetrieveCallStatusResponse) SetData(val OptCall) {
	s.Data = val
}

func (*RetrieveCallStatusResponse) dialCallRes()           {}
func (*RetrieveCallStatusResponse) retrieveCallStatusRes() {}

// Ref: #/components/schemas/RetrieveVerificationResponse
type RetrieveVerificationResponse struct {
	Data Verification `json:"data"`
}

// GetData returns the value of Data.
func (s *RetrieveVerificationResponse) GetData() Verification {
	return s.Data
}

// SetData sets the value of Data.
func (s *RetrieveVerificationResponse) SetData(val Verification) {
	s.Data = val
}

func (*RetrieveVerificationResponse) retrieveVerificationRes() {}

// Ref: #/components/schemas/RoomRecording
type RoomRecording struct {
	// A unique identifier for the room recording.
	ID OptUUID `json:"id"`
	// Identify the room associated with the room recording.
	RoomID OptUUID `json:"room_id"`
	// Identify the room session associated with the room recording.
	SessionID OptUUID `json:"session_id"`
	// Identify the room participant associated with the room recording.
	ParticipantID OptUUID `json:"participant_id"`
	// Shows the room recording status.
	Status OptRoomRecordingStatus `json:"status"`
	// Shows the room recording type.
	Type OptRoomRecordingType `json:"type"`
	// Shows the room recording size in MB.
	SizeMB OptFloat32 `json:"size_mb"`
	// Url to download the recording.
	DownloadURL OptString `json:"download_url"`
	// Shows the codec used for the room recording.
	Codec OptString `json:"codec"`
	// Shows the room recording duration in seconds.
	DurationSecs OptInt `json:"duration_secs"`
	// ISO 8601 timestamp when the room recording was created.
	CreatedAt OptString `json:"created_at"`
	// ISO 8601 timestamp when the room recording was updated.
	UpdatedAt OptString `json:"updated_at"`
	// ISO 8601 timestamp when the room recording has ended.
	EndedAt OptString `json:"ended_at"`
	// ISO 8601 timestamp when the room recording has stated.
	StartedAt OptString `json:"started_at"`
	// ISO 8601 timestamp when the room recording has completed.
	CompletedAt OptString `json:"completed_at"`
	RecordType  OptString `json:"record_type"`
}

// GetID returns the value of ID.
func (s *RoomRecording) GetID() OptUUID {
	return s.ID
}

// GetRoomID returns the value of RoomID.
func (s *RoomRecording) GetRoomID() OptUUID {
	return s.RoomID
}

// GetSessionID returns the value of SessionID.
func (s *RoomRecording) GetSessionID() OptUUID {
	return s.SessionID
}

// GetParticipantID returns the value of ParticipantID.
func (s *RoomRecording) GetParticipantID() OptUUID {
	return s.ParticipantID
}

// GetStatus returns the value of Status.
func (s *RoomRecording) GetStatus() OptRoomRecordingStatus {
	return s.Status
}

// GetType returns the value of Type.
func (s *RoomRecording) GetType() OptRoomRecordingType {
	return s.Type
}

// GetSizeMB returns the value of SizeMB.
func (s *RoomRecording) GetSizeMB() OptFloat32 {
	return s.SizeMB
}

// GetDownloadURL returns the value of DownloadURL.
func (s *RoomRecording) GetDownloadURL() OptString {
	return s.DownloadURL
}

// GetCodec returns the value of Codec.
func (s *RoomRecording) GetCodec() OptString {
	return s.Codec
}

// GetDurationSecs returns the value of DurationSecs.
func (s *RoomRecording) GetDurationSecs() OptInt {
	return s.DurationSecs
}

// GetCreatedAt returns the value of CreatedAt.
func (s *RoomRecording) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *RoomRecording) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetEndedAt returns the value of EndedAt.
func (s *RoomRecording) GetEndedAt() OptString {
	return s.EndedAt
}

// GetStartedAt returns the value of StartedAt.
func (s *RoomRecording) GetStartedAt() OptString {
	return s.StartedAt
}

// GetCompletedAt returns the value of CompletedAt.
func (s *RoomRecording) GetCompletedAt() OptString {
	return s.CompletedAt
}

// GetRecordType returns the value of RecordType.
func (s *RoomRecording) GetRecordType() OptString {
	return s.RecordType
}

// SetID sets the value of ID.
func (s *RoomRecording) SetID(val OptUUID) {
	s.ID = val
}

// SetRoomID sets the value of RoomID.
func (s *RoomRecording) SetRoomID(val OptUUID) {
	s.RoomID = val
}

// SetSessionID sets the value of SessionID.
func (s *RoomRecording) SetSessionID(val OptUUID) {
	s.SessionID = val
}

// SetParticipantID sets the value of ParticipantID.
func (s *RoomRecording) SetParticipantID(val OptUUID) {
	s.ParticipantID = val
}

// SetStatus sets the value of Status.
func (s *RoomRecording) SetStatus(val OptRoomRecordingStatus) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *RoomRecording) SetType(val OptRoomRecordingType) {
	s.Type = val
}

// SetSizeMB sets the value of SizeMB.
func (s *RoomRecording) SetSizeMB(val OptFloat32) {
	s.SizeMB = val
}

// SetDownloadURL sets the value of DownloadURL.
func (s *RoomRecording) SetDownloadURL(val OptString) {
	s.DownloadURL = val
}

// SetCodec sets the value of Codec.
func (s *RoomRecording) SetCodec(val OptString) {
	s.Codec = val
}

// SetDurationSecs sets the value of DurationSecs.
func (s *RoomRecording) SetDurationSecs(val OptInt) {
	s.DurationSecs = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *RoomRecording) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *RoomRecording) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetEndedAt sets the value of EndedAt.
func (s *RoomRecording) SetEndedAt(val OptString) {
	s.EndedAt = val
}

// SetStartedAt sets the value of StartedAt.
func (s *RoomRecording) SetStartedAt(val OptString) {
	s.StartedAt = val
}

// SetCompletedAt sets the value of CompletedAt.
func (s *RoomRecording) SetCompletedAt(val OptString) {
	s.CompletedAt = val
}

// SetRecordType sets the value of RecordType.
func (s *RoomRecording) SetRecordType(val OptString) {
	s.RecordType = val
}

// Shows the room recording status.
type RoomRecordingStatus string

const (
	RoomRecordingStatusCompleted  RoomRecordingStatus = "completed"
	RoomRecordingStatusProcessing RoomRecordingStatus = "processing"
)

// AllValues returns all RoomRecordingStatus values.
func (RoomRecordingStatus) AllValues() []RoomRecordingStatus {
	return []RoomRecordingStatus{
		RoomRecordingStatusCompleted,
		RoomRecordingStatusProcessing,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RoomRecordingStatus) MarshalText() ([]byte, error) {
	switch s {
	case RoomRecordingStatusCompleted:
		return []byte(s), nil
	case RoomRecordingStatusProcessing:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RoomRecordingStatus) UnmarshalText(data []byte) error {
	switch RoomRecordingStatus(data) {
	case RoomRecordingStatusCompleted:
		*s = RoomRecordingStatusCompleted
		return nil
	case RoomRecordingStatusProcessing:
		*s = RoomRecordingStatusProcessing
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Shows the room recording type.
type RoomRecordingType string

const (
	RoomRecordingTypeAudio RoomRecordingType = "audio"
	RoomRecordingTypeVideo RoomRecordingType = "video"
)

// AllValues returns all RoomRecordingType values.
func (RoomRecordingType) AllValues() []RoomRecordingType {
	return []RoomRecordingType{
		RoomRecordingTypeAudio,
		RoomRecordingTypeVideo,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RoomRecordingType) MarshalText() ([]byte, error) {
	switch s {
	case RoomRecordingTypeAudio:
		return []byte(s), nil
	case RoomRecordingTypeVideo:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RoomRecordingType) UnmarshalText(data []byte) error {
	switch RoomRecordingType(data) {
	case RoomRecordingTypeAudio:
		*s = RoomRecordingTypeAudio
		return nil
	case RoomRecordingTypeVideo:
		*s = RoomRecordingTypeVideo
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/S3ConfigurationData
type S3ConfigurationData struct {
	Bucket             OptBucket             `json:"bucket"`
	Region             OptRegion             `json:"region"`
	AWSAccessKeyID     OptAwsAccessKeyId     `json:"aws_access_key_id"`
	AWSSecretAccessKey OptAwsSecretAccessKey `json:"aws_secret_access_key"`
}

// GetBucket returns the value of Bucket.
func (s *S3ConfigurationData) GetBucket() OptBucket {
	return s.Bucket
}

// GetRegion returns the value of Region.
func (s *S3ConfigurationData) GetRegion() OptRegion {
	return s.Region
}

// GetAWSAccessKeyID returns the value of AWSAccessKeyID.
func (s *S3ConfigurationData) GetAWSAccessKeyID() OptAwsAccessKeyId {
	return s.AWSAccessKeyID
}

// GetAWSSecretAccessKey returns the value of AWSSecretAccessKey.
func (s *S3ConfigurationData) GetAWSSecretAccessKey() OptAwsSecretAccessKey {
	return s.AWSSecretAccessKey
}

// SetBucket sets the value of Bucket.
func (s *S3ConfigurationData) SetBucket(val OptBucket) {
	s.Bucket = val
}

// SetRegion sets the value of Region.
func (s *S3ConfigurationData) SetRegion(val OptRegion) {
	s.Region = val
}

// SetAWSAccessKeyID sets the value of AWSAccessKeyID.
func (s *S3ConfigurationData) SetAWSAccessKeyID(val OptAwsAccessKeyId) {
	s.AWSAccessKeyID = val
}

// SetAWSSecretAccessKey sets the value of AWSSecretAccessKey.
func (s *S3ConfigurationData) SetAWSSecretAccessKey(val OptAwsSecretAccessKey) {
	s.AWSSecretAccessKey = val
}

// Ref: #/components/schemas/SendDTMFRequest
type SendDTMFRequest struct {
	// DTMF digits to send. Valid digits are 0-9, A-D, *, and #. Pauses can be added using w (0.5s) and W
	// (1s).
	Digits string `json:"digits"`
	// Specifies for how many milliseconds each digit will be played in the audio stream. Ranges from 100
	// to 500ms.
	DurationMillis OptInt32 `json:"duration_millis"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetDigits returns the value of Digits.
func (s *SendDTMFRequest) GetDigits() string {
	return s.Digits
}

// GetDurationMillis returns the value of DurationMillis.
func (s *SendDTMFRequest) GetDurationMillis() OptInt32 {
	return s.DurationMillis
}

// GetClientState returns the value of ClientState.
func (s *SendDTMFRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *SendDTMFRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetDigits sets the value of Digits.
func (s *SendDTMFRequest) SetDigits(val string) {
	s.Digits = val
}

// SetDurationMillis sets the value of DurationMillis.
func (s *SendDTMFRequest) SetDurationMillis(val OptInt32) {
	s.DurationMillis = val
}

// SetClientState sets the value of ClientState.
func (s *SendDTMFRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *SendDTMFRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// Ref: #/components/schemas/SipHeader
type SipHeader struct {
	// The name of the header to add.
	Name SipHeaderName `json:"name"`
	// The value of the header.
	Value string `json:"value"`
}

// GetName returns the value of Name.
func (s *SipHeader) GetName() SipHeaderName {
	return s.Name
}

// GetValue returns the value of Value.
func (s *SipHeader) GetValue() string {
	return s.Value
}

// SetName sets the value of Name.
func (s *SipHeader) SetName(val SipHeaderName) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *SipHeader) SetValue(val string) {
	s.Value = val
}

// The name of the header to add.
type SipHeaderName string

const (
	SipHeaderNameUserToUser SipHeaderName = "User-to-User"
)

// AllValues returns all SipHeaderName values.
func (SipHeaderName) AllValues() []SipHeaderName {
	return []SipHeaderName{
		SipHeaderNameUserToUser,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SipHeaderName) MarshalText() ([]byte, error) {
	switch s {
	case SipHeaderNameUserToUser:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SipHeaderName) UnmarshalText(data []byte) error {
	switch SipHeaderName(data) {
	case SipHeaderNameUserToUser:
		*s = SipHeaderNameUserToUser
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SortApplication string

const (
	SortApplicationCreatedAt    SortApplication = "created_at"
	SortApplicationFriendlyName SortApplication = "friendly_name"
	SortApplicationActive       SortApplication = "active"
)

// AllValues returns all SortApplication values.
func (SortApplication) AllValues() []SortApplication {
	return []SortApplication{
		SortApplicationCreatedAt,
		SortApplicationFriendlyName,
		SortApplicationActive,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SortApplication) MarshalText() ([]byte, error) {
	switch s {
	case SortApplicationCreatedAt:
		return []byte(s), nil
	case SortApplicationFriendlyName:
		return []byte(s), nil
	case SortApplicationActive:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SortApplication) UnmarshalText(data []byte) error {
	switch SortApplication(data) {
	case SortApplicationCreatedAt:
		*s = SortApplicationCreatedAt
		return nil
	case SortApplicationFriendlyName:
		*s = SortApplicationFriendlyName
		return nil
	case SortApplicationActive:
		*s = SortApplicationActive
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SortConnection string

const (
	SortConnectionCreatedAt      SortConnection = "created_at"
	SortConnectionConnectionName SortConnection = "connection_name"
	SortConnectionActive         SortConnection = "active"
)

// AllValues returns all SortConnection values.
func (SortConnection) AllValues() []SortConnection {
	return []SortConnection{
		SortConnectionCreatedAt,
		SortConnectionConnectionName,
		SortConnectionActive,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SortConnection) MarshalText() ([]byte, error) {
	switch s {
	case SortConnectionCreatedAt:
		return []byte(s), nil
	case SortConnectionConnectionName:
		return []byte(s), nil
	case SortConnectionActive:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SortConnection) UnmarshalText(data []byte) error {
	switch SortConnection(data) {
	case SortConnectionCreatedAt:
		*s = SortConnectionCreatedAt
		return nil
	case SortConnectionConnectionName:
		*s = SortConnectionConnectionName
		return nil
	case SortConnectionActive:
		*s = SortConnectionActive
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Use this field to modify sound effects, for example adjust the pitch.
// Ref: #/components/schemas/SoundModifications
type SoundModifications struct {
	// Set the pitch directly, value should be > 0, default 1 (lower = lower tone).
	Pitch OptFloat64 `json:"pitch"`
	// Adjust the pitch in semitones, values should be between -14 and 14, default 0.
	Semitone OptFloat64 `json:"semitone"`
	// Adjust the pitch in octaves, values should be between -1 and 1, default 0.
	Octaves OptFloat64 `json:"octaves"`
	// The track to which the sound modifications will be applied. Accepted values are `inbound` or
	// `outbound`.
	Track OptString `json:"track"`
}

// GetPitch returns the value of Pitch.
func (s *SoundModifications) GetPitch() OptFloat64 {
	return s.Pitch
}

// GetSemitone returns the value of Semitone.
func (s *SoundModifications) GetSemitone() OptFloat64 {
	return s.Semitone
}

// GetOctaves returns the value of Octaves.
func (s *SoundModifications) GetOctaves() OptFloat64 {
	return s.Octaves
}

// GetTrack returns the value of Track.
func (s *SoundModifications) GetTrack() OptString {
	return s.Track
}

// SetPitch sets the value of Pitch.
func (s *SoundModifications) SetPitch(val OptFloat64) {
	s.Pitch = val
}

// SetSemitone sets the value of Semitone.
func (s *SoundModifications) SetSemitone(val OptFloat64) {
	s.Semitone = val
}

// SetOctaves sets the value of Octaves.
func (s *SoundModifications) SetOctaves(val OptFloat64) {
	s.Octaves = val
}

// SetTrack sets the value of Track.
func (s *SoundModifications) SetTrack(val OptString) {
	s.Track = val
}

// Ref: #/components/schemas/SourceResponse
type SourceResponse struct {
	// A JSON Pointer [RFC6901] to the associated entity in the request document.
	Pointer OptString `json:"pointer"`
	// A string indicating which URI query parameter caused the error.
	Parameter OptString `json:"parameter"`
}

// GetPointer returns the value of Pointer.
func (s *SourceResponse) GetPointer() OptString {
	return s.Pointer
}

// GetParameter returns the value of Parameter.
func (s *SourceResponse) GetParameter() OptString {
	return s.Parameter
}

// SetPointer sets the value of Pointer.
func (s *SourceResponse) SetPointer(val OptString) {
	s.Pointer = val
}

// SetParameter sets the value of Parameter.
func (s *SourceResponse) SetParameter(val OptString) {
	s.Parameter = val
}

// Ref: #/components/schemas/SpeakRequest
type SpeakRequest struct {
	// The text or SSML to be converted into speech. There is a 3,000 character limit.
	Payload string `json:"payload"`
	// The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup
	// Language (SSML).
	PayloadType OptSpeakRequestPayloadType `json:"payload_type"`
	// This parameter impacts speech quality, language options and payload types. When using `basic`,
	// only the `en-US` language and payload type `text` are allowed.
	ServiceLevel OptSpeakRequestServiceLevel `json:"service_level"`
	// When specified, it stops the current audio being played. Specify `current` to stop the current
	// audio being played, and to play the next file in the queue. Specify `all` to stop the current
	// audio file being played and to also clear all audio files from the queue.
	Stop OptString `json:"stop"`
	// The gender of the voice used to speak back the text or the specific Amazon Polly voice to be used
	// in the form of `Polly.<voice>`, e.g. `Polly.Brian`. All standard Amazon Polly voices are supported.
	Voice SpeakRequestVoice `json:"voice"`
	// The language you want spoken. This parameter is ignored when a `Polly.*` voice is specified.
	Language OptSpeakRequestLanguage `json:"language"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetPayload returns the value of Payload.
func (s *SpeakRequest) GetPayload() string {
	return s.Payload
}

// GetPayloadType returns the value of PayloadType.
func (s *SpeakRequest) GetPayloadType() OptSpeakRequestPayloadType {
	return s.PayloadType
}

// GetServiceLevel returns the value of ServiceLevel.
func (s *SpeakRequest) GetServiceLevel() OptSpeakRequestServiceLevel {
	return s.ServiceLevel
}

// GetStop returns the value of Stop.
func (s *SpeakRequest) GetStop() OptString {
	return s.Stop
}

// GetVoice returns the value of Voice.
func (s *SpeakRequest) GetVoice() SpeakRequestVoice {
	return s.Voice
}

// GetLanguage returns the value of Language.
func (s *SpeakRequest) GetLanguage() OptSpeakRequestLanguage {
	return s.Language
}

// GetClientState returns the value of ClientState.
func (s *SpeakRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *SpeakRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetPayload sets the value of Payload.
func (s *SpeakRequest) SetPayload(val string) {
	s.Payload = val
}

// SetPayloadType sets the value of PayloadType.
func (s *SpeakRequest) SetPayloadType(val OptSpeakRequestPayloadType) {
	s.PayloadType = val
}

// SetServiceLevel sets the value of ServiceLevel.
func (s *SpeakRequest) SetServiceLevel(val OptSpeakRequestServiceLevel) {
	s.ServiceLevel = val
}

// SetStop sets the value of Stop.
func (s *SpeakRequest) SetStop(val OptString) {
	s.Stop = val
}

// SetVoice sets the value of Voice.
func (s *SpeakRequest) SetVoice(val SpeakRequestVoice) {
	s.Voice = val
}

// SetLanguage sets the value of Language.
func (s *SpeakRequest) SetLanguage(val OptSpeakRequestLanguage) {
	s.Language = val
}

// SetClientState sets the value of ClientState.
func (s *SpeakRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *SpeakRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// The language you want spoken. This parameter is ignored when a `Polly.*` voice is specified.
type SpeakRequestLanguage string

const (
	SpeakRequestLanguageArb     SpeakRequestLanguage = "arb"
	SpeakRequestLanguageCmnCN   SpeakRequestLanguage = "cmn-CN"
	SpeakRequestLanguageCyGB    SpeakRequestLanguage = "cy-GB"
	SpeakRequestLanguageDaDK    SpeakRequestLanguage = "da-DK"
	SpeakRequestLanguageDeDE    SpeakRequestLanguage = "de-DE"
	SpeakRequestLanguageEnAU    SpeakRequestLanguage = "en-AU"
	SpeakRequestLanguageEnGB    SpeakRequestLanguage = "en-GB"
	SpeakRequestLanguageEnGBWLS SpeakRequestLanguage = "en-GB-WLS"
	SpeakRequestLanguageEnIN    SpeakRequestLanguage = "en-IN"
	SpeakRequestLanguageEnUS    SpeakRequestLanguage = "en-US"
	SpeakRequestLanguageEsES    SpeakRequestLanguage = "es-ES"
	SpeakRequestLanguageEsMX    SpeakRequestLanguage = "es-MX"
	SpeakRequestLanguageEsUS    SpeakRequestLanguage = "es-US"
	SpeakRequestLanguageFrCA    SpeakRequestLanguage = "fr-CA"
	SpeakRequestLanguageFrFR    SpeakRequestLanguage = "fr-FR"
	SpeakRequestLanguageHiIN    SpeakRequestLanguage = "hi-IN"
	SpeakRequestLanguageIsIS    SpeakRequestLanguage = "is-IS"
	SpeakRequestLanguageItIT    SpeakRequestLanguage = "it-IT"
	SpeakRequestLanguageJaJP    SpeakRequestLanguage = "ja-JP"
	SpeakRequestLanguageKoKR    SpeakRequestLanguage = "ko-KR"
	SpeakRequestLanguageNbNO    SpeakRequestLanguage = "nb-NO"
	SpeakRequestLanguageNlNL    SpeakRequestLanguage = "nl-NL"
	SpeakRequestLanguagePlPL    SpeakRequestLanguage = "pl-PL"
	SpeakRequestLanguagePtBR    SpeakRequestLanguage = "pt-BR"
	SpeakRequestLanguagePtPT    SpeakRequestLanguage = "pt-PT"
	SpeakRequestLanguageRoRO    SpeakRequestLanguage = "ro-RO"
	SpeakRequestLanguageRuRU    SpeakRequestLanguage = "ru-RU"
	SpeakRequestLanguageSvSE    SpeakRequestLanguage = "sv-SE"
	SpeakRequestLanguageTrTR    SpeakRequestLanguage = "tr-TR"
)

// AllValues returns all SpeakRequestLanguage values.
func (SpeakRequestLanguage) AllValues() []SpeakRequestLanguage {
	return []SpeakRequestLanguage{
		SpeakRequestLanguageArb,
		SpeakRequestLanguageCmnCN,
		SpeakRequestLanguageCyGB,
		SpeakRequestLanguageDaDK,
		SpeakRequestLanguageDeDE,
		SpeakRequestLanguageEnAU,
		SpeakRequestLanguageEnGB,
		SpeakRequestLanguageEnGBWLS,
		SpeakRequestLanguageEnIN,
		SpeakRequestLanguageEnUS,
		SpeakRequestLanguageEsES,
		SpeakRequestLanguageEsMX,
		SpeakRequestLanguageEsUS,
		SpeakRequestLanguageFrCA,
		SpeakRequestLanguageFrFR,
		SpeakRequestLanguageHiIN,
		SpeakRequestLanguageIsIS,
		SpeakRequestLanguageItIT,
		SpeakRequestLanguageJaJP,
		SpeakRequestLanguageKoKR,
		SpeakRequestLanguageNbNO,
		SpeakRequestLanguageNlNL,
		SpeakRequestLanguagePlPL,
		SpeakRequestLanguagePtBR,
		SpeakRequestLanguagePtPT,
		SpeakRequestLanguageRoRO,
		SpeakRequestLanguageRuRU,
		SpeakRequestLanguageSvSE,
		SpeakRequestLanguageTrTR,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SpeakRequestLanguage) MarshalText() ([]byte, error) {
	switch s {
	case SpeakRequestLanguageArb:
		return []byte(s), nil
	case SpeakRequestLanguageCmnCN:
		return []byte(s), nil
	case SpeakRequestLanguageCyGB:
		return []byte(s), nil
	case SpeakRequestLanguageDaDK:
		return []byte(s), nil
	case SpeakRequestLanguageDeDE:
		return []byte(s), nil
	case SpeakRequestLanguageEnAU:
		return []byte(s), nil
	case SpeakRequestLanguageEnGB:
		return []byte(s), nil
	case SpeakRequestLanguageEnGBWLS:
		return []byte(s), nil
	case SpeakRequestLanguageEnIN:
		return []byte(s), nil
	case SpeakRequestLanguageEnUS:
		return []byte(s), nil
	case SpeakRequestLanguageEsES:
		return []byte(s), nil
	case SpeakRequestLanguageEsMX:
		return []byte(s), nil
	case SpeakRequestLanguageEsUS:
		return []byte(s), nil
	case SpeakRequestLanguageFrCA:
		return []byte(s), nil
	case SpeakRequestLanguageFrFR:
		return []byte(s), nil
	case SpeakRequestLanguageHiIN:
		return []byte(s), nil
	case SpeakRequestLanguageIsIS:
		return []byte(s), nil
	case SpeakRequestLanguageItIT:
		return []byte(s), nil
	case SpeakRequestLanguageJaJP:
		return []byte(s), nil
	case SpeakRequestLanguageKoKR:
		return []byte(s), nil
	case SpeakRequestLanguageNbNO:
		return []byte(s), nil
	case SpeakRequestLanguageNlNL:
		return []byte(s), nil
	case SpeakRequestLanguagePlPL:
		return []byte(s), nil
	case SpeakRequestLanguagePtBR:
		return []byte(s), nil
	case SpeakRequestLanguagePtPT:
		return []byte(s), nil
	case SpeakRequestLanguageRoRO:
		return []byte(s), nil
	case SpeakRequestLanguageRuRU:
		return []byte(s), nil
	case SpeakRequestLanguageSvSE:
		return []byte(s), nil
	case SpeakRequestLanguageTrTR:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SpeakRequestLanguage) UnmarshalText(data []byte) error {
	switch SpeakRequestLanguage(data) {
	case SpeakRequestLanguageArb:
		*s = SpeakRequestLanguageArb
		return nil
	case SpeakRequestLanguageCmnCN:
		*s = SpeakRequestLanguageCmnCN
		return nil
	case SpeakRequestLanguageCyGB:
		*s = SpeakRequestLanguageCyGB
		return nil
	case SpeakRequestLanguageDaDK:
		*s = SpeakRequestLanguageDaDK
		return nil
	case SpeakRequestLanguageDeDE:
		*s = SpeakRequestLanguageDeDE
		return nil
	case SpeakRequestLanguageEnAU:
		*s = SpeakRequestLanguageEnAU
		return nil
	case SpeakRequestLanguageEnGB:
		*s = SpeakRequestLanguageEnGB
		return nil
	case SpeakRequestLanguageEnGBWLS:
		*s = SpeakRequestLanguageEnGBWLS
		return nil
	case SpeakRequestLanguageEnIN:
		*s = SpeakRequestLanguageEnIN
		return nil
	case SpeakRequestLanguageEnUS:
		*s = SpeakRequestLanguageEnUS
		return nil
	case SpeakRequestLanguageEsES:
		*s = SpeakRequestLanguageEsES
		return nil
	case SpeakRequestLanguageEsMX:
		*s = SpeakRequestLanguageEsMX
		return nil
	case SpeakRequestLanguageEsUS:
		*s = SpeakRequestLanguageEsUS
		return nil
	case SpeakRequestLanguageFrCA:
		*s = SpeakRequestLanguageFrCA
		return nil
	case SpeakRequestLanguageFrFR:
		*s = SpeakRequestLanguageFrFR
		return nil
	case SpeakRequestLanguageHiIN:
		*s = SpeakRequestLanguageHiIN
		return nil
	case SpeakRequestLanguageIsIS:
		*s = SpeakRequestLanguageIsIS
		return nil
	case SpeakRequestLanguageItIT:
		*s = SpeakRequestLanguageItIT
		return nil
	case SpeakRequestLanguageJaJP:
		*s = SpeakRequestLanguageJaJP
		return nil
	case SpeakRequestLanguageKoKR:
		*s = SpeakRequestLanguageKoKR
		return nil
	case SpeakRequestLanguageNbNO:
		*s = SpeakRequestLanguageNbNO
		return nil
	case SpeakRequestLanguageNlNL:
		*s = SpeakRequestLanguageNlNL
		return nil
	case SpeakRequestLanguagePlPL:
		*s = SpeakRequestLanguagePlPL
		return nil
	case SpeakRequestLanguagePtBR:
		*s = SpeakRequestLanguagePtBR
		return nil
	case SpeakRequestLanguagePtPT:
		*s = SpeakRequestLanguagePtPT
		return nil
	case SpeakRequestLanguageRoRO:
		*s = SpeakRequestLanguageRoRO
		return nil
	case SpeakRequestLanguageRuRU:
		*s = SpeakRequestLanguageRuRU
		return nil
	case SpeakRequestLanguageSvSE:
		*s = SpeakRequestLanguageSvSE
		return nil
	case SpeakRequestLanguageTrTR:
		*s = SpeakRequestLanguageTrTR
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup
// Language (SSML).
type SpeakRequestPayloadType string

const (
	SpeakRequestPayloadTypeText SpeakRequestPayloadType = "text"
	SpeakRequestPayloadTypeSsml SpeakRequestPayloadType = "ssml"
)

// AllValues returns all SpeakRequestPayloadType values.
func (SpeakRequestPayloadType) AllValues() []SpeakRequestPayloadType {
	return []SpeakRequestPayloadType{
		SpeakRequestPayloadTypeText,
		SpeakRequestPayloadTypeSsml,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SpeakRequestPayloadType) MarshalText() ([]byte, error) {
	switch s {
	case SpeakRequestPayloadTypeText:
		return []byte(s), nil
	case SpeakRequestPayloadTypeSsml:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SpeakRequestPayloadType) UnmarshalText(data []byte) error {
	switch SpeakRequestPayloadType(data) {
	case SpeakRequestPayloadTypeText:
		*s = SpeakRequestPayloadTypeText
		return nil
	case SpeakRequestPayloadTypeSsml:
		*s = SpeakRequestPayloadTypeSsml
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// This parameter impacts speech quality, language options and payload types. When using `basic`,
// only the `en-US` language and payload type `text` are allowed.
type SpeakRequestServiceLevel string

const (
	SpeakRequestServiceLevelBasic   SpeakRequestServiceLevel = "basic"
	SpeakRequestServiceLevelPremium SpeakRequestServiceLevel = "premium"
)

// AllValues returns all SpeakRequestServiceLevel values.
func (SpeakRequestServiceLevel) AllValues() []SpeakRequestServiceLevel {
	return []SpeakRequestServiceLevel{
		SpeakRequestServiceLevelBasic,
		SpeakRequestServiceLevelPremium,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SpeakRequestServiceLevel) MarshalText() ([]byte, error) {
	switch s {
	case SpeakRequestServiceLevelBasic:
		return []byte(s), nil
	case SpeakRequestServiceLevelPremium:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SpeakRequestServiceLevel) UnmarshalText(data []byte) error {
	switch SpeakRequestServiceLevel(data) {
	case SpeakRequestServiceLevelBasic:
		*s = SpeakRequestServiceLevelBasic
		return nil
	case SpeakRequestServiceLevelPremium:
		*s = SpeakRequestServiceLevelPremium
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The gender of the voice used to speak back the text or the specific Amazon Polly voice to be used
// in the form of `Polly.<voice>`, e.g. `Polly.Brian`. All standard Amazon Polly voices are supported.
type SpeakRequestVoice string

const (
	SpeakRequestVoiceMale   SpeakRequestVoice = "male"
	SpeakRequestVoiceFemale SpeakRequestVoice = "female"
)

// AllValues returns all SpeakRequestVoice values.
func (SpeakRequestVoice) AllValues() []SpeakRequestVoice {
	return []SpeakRequestVoice{
		SpeakRequestVoiceMale,
		SpeakRequestVoiceFemale,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SpeakRequestVoice) MarshalText() ([]byte, error) {
	switch s {
	case SpeakRequestVoiceMale:
		return []byte(s), nil
	case SpeakRequestVoiceFemale:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SpeakRequestVoice) UnmarshalText(data []byte) error {
	switch SpeakRequestVoice(data) {
	case SpeakRequestVoiceMale:
		*s = SpeakRequestVoiceMale
		return nil
	case SpeakRequestVoiceFemale:
		*s = SpeakRequestVoiceFemale
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/StartForkingRequest
type StartForkingRequest struct {
	// The network target, <udp:ip_address:port>, where the call's RTP media packets should be forwarded.
	// Both incoming and outgoing media packets will be delivered to the specified target, and
	// information about the stream will be included in the encapsulation protocol header, including the
	// direction (0 = inbound; 1 = outbound), leg (0 = A-leg; 1 = B-leg), and call_leg_id.
	Target OptString `json:"target"`
	// The network target, <udp:ip_address:port>, where the call's incoming RTP media packets should be
	// forwarded.
	Rx OptString `json:"rx"`
	// Optionally specify a media type to stream. If `decrypted` selected, Telnyx will decrypt incoming
	// SIP media before forking to the target. `rx` and `tx` are required fields if `decrypted` selected.
	StreamType OptStartForkingRequestStreamType `json:"stream_type"`
	// The network target, <udp:ip_address:port>, where the call's outgoing RTP media packets should be
	// forwarded.
	Tx OptString `json:"tx"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetTarget returns the value of Target.
func (s *StartForkingRequest) GetTarget() OptString {
	return s.Target
}

// GetRx returns the value of Rx.
func (s *StartForkingRequest) GetRx() OptString {
	return s.Rx
}

// GetStreamType returns the value of StreamType.
func (s *StartForkingRequest) GetStreamType() OptStartForkingRequestStreamType {
	return s.StreamType
}

// GetTx returns the value of Tx.
func (s *StartForkingRequest) GetTx() OptString {
	return s.Tx
}

// GetClientState returns the value of ClientState.
func (s *StartForkingRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *StartForkingRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetTarget sets the value of Target.
func (s *StartForkingRequest) SetTarget(val OptString) {
	s.Target = val
}

// SetRx sets the value of Rx.
func (s *StartForkingRequest) SetRx(val OptString) {
	s.Rx = val
}

// SetStreamType sets the value of StreamType.
func (s *StartForkingRequest) SetStreamType(val OptStartForkingRequestStreamType) {
	s.StreamType = val
}

// SetTx sets the value of Tx.
func (s *StartForkingRequest) SetTx(val OptString) {
	s.Tx = val
}

// SetClientState sets the value of ClientState.
func (s *StartForkingRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *StartForkingRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// Optionally specify a media type to stream. If `decrypted` selected, Telnyx will decrypt incoming
// SIP media before forking to the target. `rx` and `tx` are required fields if `decrypted` selected.
type StartForkingRequestStreamType string

const (
	StartForkingRequestStreamTypeRaw       StartForkingRequestStreamType = "raw"
	StartForkingRequestStreamTypeDecrypted StartForkingRequestStreamType = "decrypted"
)

// AllValues returns all StartForkingRequestStreamType values.
func (StartForkingRequestStreamType) AllValues() []StartForkingRequestStreamType {
	return []StartForkingRequestStreamType{
		StartForkingRequestStreamTypeRaw,
		StartForkingRequestStreamTypeDecrypted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StartForkingRequestStreamType) MarshalText() ([]byte, error) {
	switch s {
	case StartForkingRequestStreamTypeRaw:
		return []byte(s), nil
	case StartForkingRequestStreamTypeDecrypted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StartForkingRequestStreamType) UnmarshalText(data []byte) error {
	switch StartForkingRequestStreamType(data) {
	case StartForkingRequestStreamTypeRaw:
		*s = StartForkingRequestStreamTypeRaw
		return nil
	case StartForkingRequestStreamTypeDecrypted:
		*s = StartForkingRequestStreamTypeDecrypted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/StartRecordingRequest
type StartRecordingRequest struct {
	// The audio file format used when storing the call recording. Can be either `mp3` or `wav`.
	Format StartRecordingRequestFormat `json:"format"`
	// When `dual`, final audio file will be stereo recorded with the first leg on channel A, and the
	// rest on channel B.
	Channels StartRecordingRequestChannels `json:"channels"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
	// If enabled, a beep sound will be played at the start of a recording.
	PlayBeep OptBool `json:"play_beep"`
	// Defines the maximum length for the recording in seconds. The minimum value is 0. The maximum value
	// is 14400. The default value is 0 (infinite).
	MaxLength OptInt32 `json:"max_length"`
	// The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected.
	//  The timer only starts when the speech is detected. Please note that call transcription is used to
	// detect silence and the related charge will be applied. The minimum value is 0. The default value
	// is 0 (infinite).
	TimeoutSecs OptInt32 `json:"timeout_secs"`
	// The audio track to be recorded. Can be either `both`, `inbound` or `outbound`. If only single
	// track is specified (`inbound`, `outbound`), `channels` configuration is ignored and it will be
	// recorded as mono (single channel).
	RecordingTrack OptStartRecordingRequestRecordingTrack `json:"recording_track"`
	// When set to `trim-silence`, silence will be removed from the beginning and end of the recording.
	Trim OptStartRecordingRequestTrim `json:"trim"`
	// The custom recording file name to be used instead of the default `call_leg_id`. Telnyx will still
	// add a Unix timestamp suffix.
	CustomFileName OptString `json:"custom_file_name"`
}

// GetFormat returns the value of Format.
func (s *StartRecordingRequest) GetFormat() StartRecordingRequestFormat {
	return s.Format
}

// GetChannels returns the value of Channels.
func (s *StartRecordingRequest) GetChannels() StartRecordingRequestChannels {
	return s.Channels
}

// GetClientState returns the value of ClientState.
func (s *StartRecordingRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *StartRecordingRequest) GetCommandID() OptString {
	return s.CommandID
}

// GetPlayBeep returns the value of PlayBeep.
func (s *StartRecordingRequest) GetPlayBeep() OptBool {
	return s.PlayBeep
}

// GetMaxLength returns the value of MaxLength.
func (s *StartRecordingRequest) GetMaxLength() OptInt32 {
	return s.MaxLength
}

// GetTimeoutSecs returns the value of TimeoutSecs.
func (s *StartRecordingRequest) GetTimeoutSecs() OptInt32 {
	return s.TimeoutSecs
}

// GetRecordingTrack returns the value of RecordingTrack.
func (s *StartRecordingRequest) GetRecordingTrack() OptStartRecordingRequestRecordingTrack {
	return s.RecordingTrack
}

// GetTrim returns the value of Trim.
func (s *StartRecordingRequest) GetTrim() OptStartRecordingRequestTrim {
	return s.Trim
}

// GetCustomFileName returns the value of CustomFileName.
func (s *StartRecordingRequest) GetCustomFileName() OptString {
	return s.CustomFileName
}

// SetFormat sets the value of Format.
func (s *StartRecordingRequest) SetFormat(val StartRecordingRequestFormat) {
	s.Format = val
}

// SetChannels sets the value of Channels.
func (s *StartRecordingRequest) SetChannels(val StartRecordingRequestChannels) {
	s.Channels = val
}

// SetClientState sets the value of ClientState.
func (s *StartRecordingRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *StartRecordingRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// SetPlayBeep sets the value of PlayBeep.
func (s *StartRecordingRequest) SetPlayBeep(val OptBool) {
	s.PlayBeep = val
}

// SetMaxLength sets the value of MaxLength.
func (s *StartRecordingRequest) SetMaxLength(val OptInt32) {
	s.MaxLength = val
}

// SetTimeoutSecs sets the value of TimeoutSecs.
func (s *StartRecordingRequest) SetTimeoutSecs(val OptInt32) {
	s.TimeoutSecs = val
}

// SetRecordingTrack sets the value of RecordingTrack.
func (s *StartRecordingRequest) SetRecordingTrack(val OptStartRecordingRequestRecordingTrack) {
	s.RecordingTrack = val
}

// SetTrim sets the value of Trim.
func (s *StartRecordingRequest) SetTrim(val OptStartRecordingRequestTrim) {
	s.Trim = val
}

// SetCustomFileName sets the value of CustomFileName.
func (s *StartRecordingRequest) SetCustomFileName(val OptString) {
	s.CustomFileName = val
}

// When `dual`, final audio file will be stereo recorded with the first leg on channel A, and the
// rest on channel B.
type StartRecordingRequestChannels string

const (
	StartRecordingRequestChannelsSingle StartRecordingRequestChannels = "single"
	StartRecordingRequestChannelsDual   StartRecordingRequestChannels = "dual"
)

// AllValues returns all StartRecordingRequestChannels values.
func (StartRecordingRequestChannels) AllValues() []StartRecordingRequestChannels {
	return []StartRecordingRequestChannels{
		StartRecordingRequestChannelsSingle,
		StartRecordingRequestChannelsDual,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StartRecordingRequestChannels) MarshalText() ([]byte, error) {
	switch s {
	case StartRecordingRequestChannelsSingle:
		return []byte(s), nil
	case StartRecordingRequestChannelsDual:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StartRecordingRequestChannels) UnmarshalText(data []byte) error {
	switch StartRecordingRequestChannels(data) {
	case StartRecordingRequestChannelsSingle:
		*s = StartRecordingRequestChannelsSingle
		return nil
	case StartRecordingRequestChannelsDual:
		*s = StartRecordingRequestChannelsDual
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The audio file format used when storing the call recording. Can be either `mp3` or `wav`.
type StartRecordingRequestFormat string

const (
	StartRecordingRequestFormatWav StartRecordingRequestFormat = "wav"
	StartRecordingRequestFormatMp3 StartRecordingRequestFormat = "mp3"
)

// AllValues returns all StartRecordingRequestFormat values.
func (StartRecordingRequestFormat) AllValues() []StartRecordingRequestFormat {
	return []StartRecordingRequestFormat{
		StartRecordingRequestFormatWav,
		StartRecordingRequestFormatMp3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StartRecordingRequestFormat) MarshalText() ([]byte, error) {
	switch s {
	case StartRecordingRequestFormatWav:
		return []byte(s), nil
	case StartRecordingRequestFormatMp3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StartRecordingRequestFormat) UnmarshalText(data []byte) error {
	switch StartRecordingRequestFormat(data) {
	case StartRecordingRequestFormatWav:
		*s = StartRecordingRequestFormatWav
		return nil
	case StartRecordingRequestFormatMp3:
		*s = StartRecordingRequestFormatMp3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The audio track to be recorded. Can be either `both`, `inbound` or `outbound`. If only single
// track is specified (`inbound`, `outbound`), `channels` configuration is ignored and it will be
// recorded as mono (single channel).
type StartRecordingRequestRecordingTrack string

const (
	StartRecordingRequestRecordingTrackBoth     StartRecordingRequestRecordingTrack = "both"
	StartRecordingRequestRecordingTrackInbound  StartRecordingRequestRecordingTrack = "inbound"
	StartRecordingRequestRecordingTrackOutbound StartRecordingRequestRecordingTrack = "outbound"
)

// AllValues returns all StartRecordingRequestRecordingTrack values.
func (StartRecordingRequestRecordingTrack) AllValues() []StartRecordingRequestRecordingTrack {
	return []StartRecordingRequestRecordingTrack{
		StartRecordingRequestRecordingTrackBoth,
		StartRecordingRequestRecordingTrackInbound,
		StartRecordingRequestRecordingTrackOutbound,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StartRecordingRequestRecordingTrack) MarshalText() ([]byte, error) {
	switch s {
	case StartRecordingRequestRecordingTrackBoth:
		return []byte(s), nil
	case StartRecordingRequestRecordingTrackInbound:
		return []byte(s), nil
	case StartRecordingRequestRecordingTrackOutbound:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StartRecordingRequestRecordingTrack) UnmarshalText(data []byte) error {
	switch StartRecordingRequestRecordingTrack(data) {
	case StartRecordingRequestRecordingTrackBoth:
		*s = StartRecordingRequestRecordingTrackBoth
		return nil
	case StartRecordingRequestRecordingTrackInbound:
		*s = StartRecordingRequestRecordingTrackInbound
		return nil
	case StartRecordingRequestRecordingTrackOutbound:
		*s = StartRecordingRequestRecordingTrackOutbound
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// When set to `trim-silence`, silence will be removed from the beginning and end of the recording.
type StartRecordingRequestTrim string

const (
	StartRecordingRequestTrimTrimSilence StartRecordingRequestTrim = "trim-silence"
)

// AllValues returns all StartRecordingRequestTrim values.
func (StartRecordingRequestTrim) AllValues() []StartRecordingRequestTrim {
	return []StartRecordingRequestTrim{
		StartRecordingRequestTrimTrimSilence,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StartRecordingRequestTrim) MarshalText() ([]byte, error) {
	switch s {
	case StartRecordingRequestTrimTrimSilence:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StartRecordingRequestTrim) UnmarshalText(data []byte) error {
	switch StartRecordingRequestTrim(data) {
	case StartRecordingRequestTrimTrimSilence:
		*s = StartRecordingRequestTrimTrimSilence
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/StartStreamingRequest
type StartStreamingRequest struct {
	// The destination WebSocket address where the stream is going to be delivered.
	StreamURL OptString `json:"stream_url"`
	// Specifies which track should be streamed.
	StreamTrack OptStartStreamingRequestStreamTrack `json:"stream_track"`
	// Enables Dialogflow for the current call. The default value is false.
	EnableDialogflow OptBool             `json:"enable_dialogflow"`
	DialogflowConfig OptDialogflowConfig `json:"dialogflow_config"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetStreamURL returns the value of StreamURL.
func (s *StartStreamingRequest) GetStreamURL() OptString {
	return s.StreamURL
}

// GetStreamTrack returns the value of StreamTrack.
func (s *StartStreamingRequest) GetStreamTrack() OptStartStreamingRequestStreamTrack {
	return s.StreamTrack
}

// GetEnableDialogflow returns the value of EnableDialogflow.
func (s *StartStreamingRequest) GetEnableDialogflow() OptBool {
	return s.EnableDialogflow
}

// GetDialogflowConfig returns the value of DialogflowConfig.
func (s *StartStreamingRequest) GetDialogflowConfig() OptDialogflowConfig {
	return s.DialogflowConfig
}

// GetClientState returns the value of ClientState.
func (s *StartStreamingRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *StartStreamingRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetStreamURL sets the value of StreamURL.
func (s *StartStreamingRequest) SetStreamURL(val OptString) {
	s.StreamURL = val
}

// SetStreamTrack sets the value of StreamTrack.
func (s *StartStreamingRequest) SetStreamTrack(val OptStartStreamingRequestStreamTrack) {
	s.StreamTrack = val
}

// SetEnableDialogflow sets the value of EnableDialogflow.
func (s *StartStreamingRequest) SetEnableDialogflow(val OptBool) {
	s.EnableDialogflow = val
}

// SetDialogflowConfig sets the value of DialogflowConfig.
func (s *StartStreamingRequest) SetDialogflowConfig(val OptDialogflowConfig) {
	s.DialogflowConfig = val
}

// SetClientState sets the value of ClientState.
func (s *StartStreamingRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *StartStreamingRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// Specifies which track should be streamed.
type StartStreamingRequestStreamTrack string

const (
	StartStreamingRequestStreamTrackInboundTrack  StartStreamingRequestStreamTrack = "inbound_track"
	StartStreamingRequestStreamTrackOutboundTrack StartStreamingRequestStreamTrack = "outbound_track"
	StartStreamingRequestStreamTrackBothTracks    StartStreamingRequestStreamTrack = "both_tracks"
)

// AllValues returns all StartStreamingRequestStreamTrack values.
func (StartStreamingRequestStreamTrack) AllValues() []StartStreamingRequestStreamTrack {
	return []StartStreamingRequestStreamTrack{
		StartStreamingRequestStreamTrackInboundTrack,
		StartStreamingRequestStreamTrackOutboundTrack,
		StartStreamingRequestStreamTrackBothTracks,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StartStreamingRequestStreamTrack) MarshalText() ([]byte, error) {
	switch s {
	case StartStreamingRequestStreamTrackInboundTrack:
		return []byte(s), nil
	case StartStreamingRequestStreamTrackOutboundTrack:
		return []byte(s), nil
	case StartStreamingRequestStreamTrackBothTracks:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StartStreamingRequestStreamTrack) UnmarshalText(data []byte) error {
	switch StartStreamingRequestStreamTrack(data) {
	case StartStreamingRequestStreamTrackInboundTrack:
		*s = StartStreamingRequestStreamTrackInboundTrack
		return nil
	case StartStreamingRequestStreamTrackOutboundTrack:
		*s = StartStreamingRequestStreamTrackOutboundTrack
		return nil
	case StartStreamingRequestStreamTrackBothTracks:
		*s = StartStreamingRequestStreamTrackBothTracks
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Status string

const (
	StatusCanceled  Status = "canceled"
	StatusCompleted Status = "completed"
	StatusFailed    Status = "failed"
	StatusBusy      Status = "busy"
	StatusNoAnswer  Status = "no-answer"
)

// AllValues returns all Status values.
func (Status) AllValues() []Status {
	return []Status{
		StatusCanceled,
		StatusCompleted,
		StatusFailed,
		StatusBusy,
		StatusNoAnswer,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Status) MarshalText() ([]byte, error) {
	switch s {
	case StatusCanceled:
		return []byte(s), nil
	case StatusCompleted:
		return []byte(s), nil
	case StatusFailed:
		return []byte(s), nil
	case StatusBusy:
		return []byte(s), nil
	case StatusNoAnswer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Status) UnmarshalText(data []byte) error {
	switch Status(data) {
	case StatusCanceled:
		*s = StatusCanceled
		return nil
	case StatusCompleted:
		*s = StatusCompleted
		return nil
	case StatusFailed:
		*s = StatusFailed
		return nil
	case StatusBusy:
		*s = StatusBusy
		return nil
	case StatusNoAnswer:
		*s = StatusNoAnswer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/StopForkingRequest
type StopForkingRequest struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
	// Optionally specify a `stream_type`. This should match the `stream_type` that was used in
	// `fork_start` command to properly stop the fork.
	StreamType OptStopForkingRequestStreamType `json:"stream_type"`
}

// GetClientState returns the value of ClientState.
func (s *StopForkingRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *StopForkingRequest) GetCommandID() OptString {
	return s.CommandID
}

// GetStreamType returns the value of StreamType.
func (s *StopForkingRequest) GetStreamType() OptStopForkingRequestStreamType {
	return s.StreamType
}

// SetClientState sets the value of ClientState.
func (s *StopForkingRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *StopForkingRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// SetStreamType sets the value of StreamType.
func (s *StopForkingRequest) SetStreamType(val OptStopForkingRequestStreamType) {
	s.StreamType = val
}

// Optionally specify a `stream_type`. This should match the `stream_type` that was used in
// `fork_start` command to properly stop the fork.
type StopForkingRequestStreamType string

const (
	StopForkingRequestStreamTypeRaw       StopForkingRequestStreamType = "raw"
	StopForkingRequestStreamTypeDecrypted StopForkingRequestStreamType = "decrypted"
)

// AllValues returns all StopForkingRequestStreamType values.
func (StopForkingRequestStreamType) AllValues() []StopForkingRequestStreamType {
	return []StopForkingRequestStreamType{
		StopForkingRequestStreamTypeRaw,
		StopForkingRequestStreamTypeDecrypted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StopForkingRequestStreamType) MarshalText() ([]byte, error) {
	switch s {
	case StopForkingRequestStreamTypeRaw:
		return []byte(s), nil
	case StopForkingRequestStreamTypeDecrypted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StopForkingRequestStreamType) UnmarshalText(data []byte) error {
	switch StopForkingRequestStreamType(data) {
	case StopForkingRequestStreamTypeRaw:
		*s = StopForkingRequestStreamTypeRaw
		return nil
	case StopForkingRequestStreamTypeDecrypted:
		*s = StopForkingRequestStreamTypeDecrypted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/StopGatherRequest
type StopGatherRequest struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetClientState returns the value of ClientState.
func (s *StopGatherRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *StopGatherRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetClientState sets the value of ClientState.
func (s *StopGatherRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *StopGatherRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// Ref: #/components/schemas/StopRecordingRequest
type StopRecordingRequest struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetClientState returns the value of ClientState.
func (s *StopRecordingRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *StopRecordingRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetClientState sets the value of ClientState.
func (s *StopRecordingRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *StopRecordingRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// Ref: #/components/schemas/StopStreamingRequest
type StopStreamingRequest struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetClientState returns the value of ClientState.
func (s *StopStreamingRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *StopStreamingRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetClientState sets the value of ClientState.
func (s *StopStreamingRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *StopStreamingRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// Ref: #/components/schemas/TelephonyCredential
type TelephonyCredential struct {
	// Identifies the resource.
	ID OptString `json:"id"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	Name       OptString `json:"name"`
	// Identifies the resource this credential is associated with.
	ResourceID OptString `json:"resource_id"`
	// Defaults to false.
	Expired OptBool `json:"expired"`
	// The randomly generated SIP username for the credential.
	SipUsername OptString `json:"sip_username"`
	// The randomly generated SIP password for the credential.
	SipPassword OptString `json:"sip_password"`
	// ISO-8601 formatted date indicating when the resource was created.
	CreatedAt OptString `json:"created_at"`
	// ISO-8601 formatted date indicating when the resource was updated.
	UpdatedAt OptString `json:"updated_at"`
	// ISO-8601 formatted date indicating when the resource will expire.
	ExpiresAt OptString `json:"expires_at"`
}

// GetID returns the value of ID.
func (s *TelephonyCredential) GetID() OptString {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *TelephonyCredential) GetRecordType() OptString {
	return s.RecordType
}

// GetName returns the value of Name.
func (s *TelephonyCredential) GetName() OptString {
	return s.Name
}

// GetResourceID returns the value of ResourceID.
func (s *TelephonyCredential) GetResourceID() OptString {
	return s.ResourceID
}

// GetExpired returns the value of Expired.
func (s *TelephonyCredential) GetExpired() OptBool {
	return s.Expired
}

// GetSipUsername returns the value of SipUsername.
func (s *TelephonyCredential) GetSipUsername() OptString {
	return s.SipUsername
}

// GetSipPassword returns the value of SipPassword.
func (s *TelephonyCredential) GetSipPassword() OptString {
	return s.SipPassword
}

// GetCreatedAt returns the value of CreatedAt.
func (s *TelephonyCredential) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *TelephonyCredential) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *TelephonyCredential) GetExpiresAt() OptString {
	return s.ExpiresAt
}

// SetID sets the value of ID.
func (s *TelephonyCredential) SetID(val OptString) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *TelephonyCredential) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetName sets the value of Name.
func (s *TelephonyCredential) SetName(val OptString) {
	s.Name = val
}

// SetResourceID sets the value of ResourceID.
func (s *TelephonyCredential) SetResourceID(val OptString) {
	s.ResourceID = val
}

// SetExpired sets the value of Expired.
func (s *TelephonyCredential) SetExpired(val OptBool) {
	s.Expired = val
}

// SetSipUsername sets the value of SipUsername.
func (s *TelephonyCredential) SetSipUsername(val OptString) {
	s.SipUsername = val
}

// SetSipPassword sets the value of SipPassword.
func (s *TelephonyCredential) SetSipPassword(val OptString) {
	s.SipPassword = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *TelephonyCredential) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *TelephonyCredential) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *TelephonyCredential) SetExpiresAt(val OptString) {
	s.ExpiresAt = val
}

// Ref: #/components/schemas/TelephonyCredentialCreateRequest
type TelephonyCredentialCreateRequest struct {
	Name OptString `json:"name"`
	// Tags a credential to filter for bulk operations. A single tag can hold at maximum 1000 credentials.
	Tag OptString `json:"tag"`
	// Identifies the Credential Connection this credential is associated with.
	ConnectionID string `json:"connection_id"`
	// ISO-8601 formatted date indicating when the credential will expire.
	ExpiresAt OptString `json:"expires_at"`
}

// GetName returns the value of Name.
func (s *TelephonyCredentialCreateRequest) GetName() OptString {
	return s.Name
}

// GetTag returns the value of Tag.
func (s *TelephonyCredentialCreateRequest) GetTag() OptString {
	return s.Tag
}

// GetConnectionID returns the value of ConnectionID.
func (s *TelephonyCredentialCreateRequest) GetConnectionID() string {
	return s.ConnectionID
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *TelephonyCredentialCreateRequest) GetExpiresAt() OptString {
	return s.ExpiresAt
}

// SetName sets the value of Name.
func (s *TelephonyCredentialCreateRequest) SetName(val OptString) {
	s.Name = val
}

// SetTag sets the value of Tag.
func (s *TelephonyCredentialCreateRequest) SetTag(val OptString) {
	s.Tag = val
}

// SetConnectionID sets the value of ConnectionID.
func (s *TelephonyCredentialCreateRequest) SetConnectionID(val string) {
	s.ConnectionID = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *TelephonyCredentialCreateRequest) SetExpiresAt(val OptString) {
	s.ExpiresAt = val
}

type TelephonyCredentialResponse struct {
	Data OptTelephonyCredential `json:"data"`
}

// GetData returns the value of Data.
func (s *TelephonyCredentialResponse) GetData() OptTelephonyCredential {
	return s.Data
}

// SetData sets the value of Data.
func (s *TelephonyCredentialResponse) SetData(val OptTelephonyCredential) {
	s.Data = val
}

func (*TelephonyCredentialResponse) createTelephonyCredentialRes() {}
func (*TelephonyCredentialResponse) deleteTelephonyCredentialRes() {}
func (*TelephonyCredentialResponse) getTelephonyCredentialRes()    {}
func (*TelephonyCredentialResponse) performCredentialActionRes()   {}
func (*TelephonyCredentialResponse) updateTelephonyCredentialRes() {}

// Ref: #/components/schemas/TelephonyCredentialUpdateRequest
type TelephonyCredentialUpdateRequest struct {
	Name OptString `json:"name"`
	// Tags a credential to filter for bulk operations. A single tag can hold at maximum 1000 credentials.
	Tag OptString `json:"tag"`
	// Identifies the Credential Connection this credential is associated with.
	ConnectionID OptString `json:"connection_id"`
	// ISO-8601 formatted date indicating when the credential will expire.
	ExpiresAt OptString `json:"expires_at"`
}

// GetName returns the value of Name.
func (s *TelephonyCredentialUpdateRequest) GetName() OptString {
	return s.Name
}

// GetTag returns the value of Tag.
func (s *TelephonyCredentialUpdateRequest) GetTag() OptString {
	return s.Tag
}

// GetConnectionID returns the value of ConnectionID.
func (s *TelephonyCredentialUpdateRequest) GetConnectionID() OptString {
	return s.ConnectionID
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *TelephonyCredentialUpdateRequest) GetExpiresAt() OptString {
	return s.ExpiresAt
}

// SetName sets the value of Name.
func (s *TelephonyCredentialUpdateRequest) SetName(val OptString) {
	s.Name = val
}

// SetTag sets the value of Tag.
func (s *TelephonyCredentialUpdateRequest) SetTag(val OptString) {
	s.Tag = val
}

// SetConnectionID sets the value of ConnectionID.
func (s *TelephonyCredentialUpdateRequest) SetConnectionID(val OptString) {
	s.ConnectionID = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *TelephonyCredentialUpdateRequest) SetExpiresAt(val OptString) {
	s.ExpiresAt = val
}

// Ref: #/components/schemas/TexmlApplication
type TexmlApplication struct {
	ID OptIntId `json:"id"`
	// Identifies the type of the resource.
	RecordType              OptString                  `json:"record_type"`
	FriendlyName            OptApplicationName         `json:"friendly_name"`
	Active                  OptConnectionActive        `json:"active"`
	AnchorsiteOverride      OptAnchorsiteOverride      `json:"anchorsite_override"`
	DtmfType                OptDtmfType                `json:"dtmf_type"`
	FirstCommandTimeout     OptFirstCommandTimeout     `json:"first_command_timeout"`
	FirstCommandTimeoutSecs OptFirstCommandTimeoutSecs `json:"first_command_timeout_secs"`
	// URL to which Telnyx will deliver your XML Translator webhooks.
	VoiceURL OptString `json:"voice_url"`
	// URL to which Telnyx will deliver your XML Translator webhooks if we get an error response from
	// your voice_url.
	VoiceFallbackURL OptString `json:"voice_fallback_url"`
	// HTTP request method Telnyx will use to interact with your XML Translator webhooks. Either 'get' or
	// 'post'.
	VoiceMethod OptTexmlApplicationVoiceMethod `json:"voice_method"`
	// URL for Telnyx to send requests to containing information about call progress events.
	StatusCallback OptString `json:"status_callback"`
	// HTTP request method Telnyx should use when requesting the status_callback URL.
	StatusCallbackMethod OptTexmlApplicationStatusCallbackMethod `json:"status_callback_method"`
	Inbound              OptTexmlApplicationInbound              `json:"inbound"`
	Outbound             OptTexmlApplicationOutbound             `json:"outbound"`
	CreatedAt            OptCreatedAt                            `json:"created_at"`
	UpdatedAt            OptUpdatedAt                            `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *TexmlApplication) GetID() OptIntId {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *TexmlApplication) GetRecordType() OptString {
	return s.RecordType
}

// GetFriendlyName returns the value of FriendlyName.
func (s *TexmlApplication) GetFriendlyName() OptApplicationName {
	return s.FriendlyName
}

// GetActive returns the value of Active.
func (s *TexmlApplication) GetActive() OptConnectionActive {
	return s.Active
}

// GetAnchorsiteOverride returns the value of AnchorsiteOverride.
func (s *TexmlApplication) GetAnchorsiteOverride() OptAnchorsiteOverride {
	return s.AnchorsiteOverride
}

// GetDtmfType returns the value of DtmfType.
func (s *TexmlApplication) GetDtmfType() OptDtmfType {
	return s.DtmfType
}

// GetFirstCommandTimeout returns the value of FirstCommandTimeout.
func (s *TexmlApplication) GetFirstCommandTimeout() OptFirstCommandTimeout {
	return s.FirstCommandTimeout
}

// GetFirstCommandTimeoutSecs returns the value of FirstCommandTimeoutSecs.
func (s *TexmlApplication) GetFirstCommandTimeoutSecs() OptFirstCommandTimeoutSecs {
	return s.FirstCommandTimeoutSecs
}

// GetVoiceURL returns the value of VoiceURL.
func (s *TexmlApplication) GetVoiceURL() OptString {
	return s.VoiceURL
}

// GetVoiceFallbackURL returns the value of VoiceFallbackURL.
func (s *TexmlApplication) GetVoiceFallbackURL() OptString {
	return s.VoiceFallbackURL
}

// GetVoiceMethod returns the value of VoiceMethod.
func (s *TexmlApplication) GetVoiceMethod() OptTexmlApplicationVoiceMethod {
	return s.VoiceMethod
}

// GetStatusCallback returns the value of StatusCallback.
func (s *TexmlApplication) GetStatusCallback() OptString {
	return s.StatusCallback
}

// GetStatusCallbackMethod returns the value of StatusCallbackMethod.
func (s *TexmlApplication) GetStatusCallbackMethod() OptTexmlApplicationStatusCallbackMethod {
	return s.StatusCallbackMethod
}

// GetInbound returns the value of Inbound.
func (s *TexmlApplication) GetInbound() OptTexmlApplicationInbound {
	return s.Inbound
}

// GetOutbound returns the value of Outbound.
func (s *TexmlApplication) GetOutbound() OptTexmlApplicationOutbound {
	return s.Outbound
}

// GetCreatedAt returns the value of CreatedAt.
func (s *TexmlApplication) GetCreatedAt() OptCreatedAt {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *TexmlApplication) GetUpdatedAt() OptUpdatedAt {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *TexmlApplication) SetID(val OptIntId) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *TexmlApplication) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetFriendlyName sets the value of FriendlyName.
func (s *TexmlApplication) SetFriendlyName(val OptApplicationName) {
	s.FriendlyName = val
}

// SetActive sets the value of Active.
func (s *TexmlApplication) SetActive(val OptConnectionActive) {
	s.Active = val
}

// SetAnchorsiteOverride sets the value of AnchorsiteOverride.
func (s *TexmlApplication) SetAnchorsiteOverride(val OptAnchorsiteOverride) {
	s.AnchorsiteOverride = val
}

// SetDtmfType sets the value of DtmfType.
func (s *TexmlApplication) SetDtmfType(val OptDtmfType) {
	s.DtmfType = val
}

// SetFirstCommandTimeout sets the value of FirstCommandTimeout.
func (s *TexmlApplication) SetFirstCommandTimeout(val OptFirstCommandTimeout) {
	s.FirstCommandTimeout = val
}

// SetFirstCommandTimeoutSecs sets the value of FirstCommandTimeoutSecs.
func (s *TexmlApplication) SetFirstCommandTimeoutSecs(val OptFirstCommandTimeoutSecs) {
	s.FirstCommandTimeoutSecs = val
}

// SetVoiceURL sets the value of VoiceURL.
func (s *TexmlApplication) SetVoiceURL(val OptString) {
	s.VoiceURL = val
}

// SetVoiceFallbackURL sets the value of VoiceFallbackURL.
func (s *TexmlApplication) SetVoiceFallbackURL(val OptString) {
	s.VoiceFallbackURL = val
}

// SetVoiceMethod sets the value of VoiceMethod.
func (s *TexmlApplication) SetVoiceMethod(val OptTexmlApplicationVoiceMethod) {
	s.VoiceMethod = val
}

// SetStatusCallback sets the value of StatusCallback.
func (s *TexmlApplication) SetStatusCallback(val OptString) {
	s.StatusCallback = val
}

// SetStatusCallbackMethod sets the value of StatusCallbackMethod.
func (s *TexmlApplication) SetStatusCallbackMethod(val OptTexmlApplicationStatusCallbackMethod) {
	s.StatusCallbackMethod = val
}

// SetInbound sets the value of Inbound.
func (s *TexmlApplication) SetInbound(val OptTexmlApplicationInbound) {
	s.Inbound = val
}

// SetOutbound sets the value of Outbound.
func (s *TexmlApplication) SetOutbound(val OptTexmlApplicationOutbound) {
	s.Outbound = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *TexmlApplication) SetCreatedAt(val OptCreatedAt) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *TexmlApplication) SetUpdatedAt(val OptUpdatedAt) {
	s.UpdatedAt = val
}

type TexmlApplicationInbound struct {
	// When set, this will limit the total number of inbound calls to phone numbers associated with this
	// connection.
	ChannelLimit OptInt `json:"channel_limit"`
	// When enabled Telnyx will include Shaken/Stir data in the Webhook for new inbound calls.
	ShakenStirEnabled OptBool `json:"shaken_stir_enabled"`
	// Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a
	// phone number is used, from a SIP endpoint. Example: the subdomain "example.sip.telnyx.com" can be
	// called from any SIP endpoint by using the SIP URI "sip:@example.sip.telnyx.com" where the user
	// part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain
	// calls.
	SipSubdomain OptString `json:"sip_subdomain"`
	// This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public
	// Internet) or "Only my connections" (any connection assigned to the same Telnyx user).
	SipSubdomainReceiveSettings OptTexmlApplicationInboundSipSubdomainReceiveSettings `json:"sip_subdomain_receive_settings"`
}

// GetChannelLimit returns the value of ChannelLimit.
func (s *TexmlApplicationInbound) GetChannelLimit() OptInt {
	return s.ChannelLimit
}

// GetShakenStirEnabled returns the value of ShakenStirEnabled.
func (s *TexmlApplicationInbound) GetShakenStirEnabled() OptBool {
	return s.ShakenStirEnabled
}

// GetSipSubdomain returns the value of SipSubdomain.
func (s *TexmlApplicationInbound) GetSipSubdomain() OptString {
	return s.SipSubdomain
}

// GetSipSubdomainReceiveSettings returns the value of SipSubdomainReceiveSettings.
func (s *TexmlApplicationInbound) GetSipSubdomainReceiveSettings() OptTexmlApplicationInboundSipSubdomainReceiveSettings {
	return s.SipSubdomainReceiveSettings
}

// SetChannelLimit sets the value of ChannelLimit.
func (s *TexmlApplicationInbound) SetChannelLimit(val OptInt) {
	s.ChannelLimit = val
}

// SetShakenStirEnabled sets the value of ShakenStirEnabled.
func (s *TexmlApplicationInbound) SetShakenStirEnabled(val OptBool) {
	s.ShakenStirEnabled = val
}

// SetSipSubdomain sets the value of SipSubdomain.
func (s *TexmlApplicationInbound) SetSipSubdomain(val OptString) {
	s.SipSubdomain = val
}

// SetSipSubdomainReceiveSettings sets the value of SipSubdomainReceiveSettings.
func (s *TexmlApplicationInbound) SetSipSubdomainReceiveSettings(val OptTexmlApplicationInboundSipSubdomainReceiveSettings) {
	s.SipSubdomainReceiveSettings = val
}

// This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public
// Internet) or "Only my connections" (any connection assigned to the same Telnyx user).
type TexmlApplicationInboundSipSubdomainReceiveSettings string

const (
	TexmlApplicationInboundSipSubdomainReceiveSettingsOnlyMyConnections TexmlApplicationInboundSipSubdomainReceiveSettings = "only_my_connections"
	TexmlApplicationInboundSipSubdomainReceiveSettingsFromAnyone        TexmlApplicationInboundSipSubdomainReceiveSettings = "from_anyone"
)

// AllValues returns all TexmlApplicationInboundSipSubdomainReceiveSettings values.
func (TexmlApplicationInboundSipSubdomainReceiveSettings) AllValues() []TexmlApplicationInboundSipSubdomainReceiveSettings {
	return []TexmlApplicationInboundSipSubdomainReceiveSettings{
		TexmlApplicationInboundSipSubdomainReceiveSettingsOnlyMyConnections,
		TexmlApplicationInboundSipSubdomainReceiveSettingsFromAnyone,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TexmlApplicationInboundSipSubdomainReceiveSettings) MarshalText() ([]byte, error) {
	switch s {
	case TexmlApplicationInboundSipSubdomainReceiveSettingsOnlyMyConnections:
		return []byte(s), nil
	case TexmlApplicationInboundSipSubdomainReceiveSettingsFromAnyone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TexmlApplicationInboundSipSubdomainReceiveSettings) UnmarshalText(data []byte) error {
	switch TexmlApplicationInboundSipSubdomainReceiveSettings(data) {
	case TexmlApplicationInboundSipSubdomainReceiveSettingsOnlyMyConnections:
		*s = TexmlApplicationInboundSipSubdomainReceiveSettingsOnlyMyConnections
		return nil
	case TexmlApplicationInboundSipSubdomainReceiveSettingsFromAnyone:
		*s = TexmlApplicationInboundSipSubdomainReceiveSettingsFromAnyone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TexmlApplicationOutbound struct {
	// When set, this will limit the total number of outbound calls to phone numbers associated with this
	// connection.
	ChannelLimit           OptInt                    `json:"channel_limit"`
	OutboundVoiceProfileID OptOutboundVoiceProfileId `json:"outbound_voice_profile_id"`
}

// GetChannelLimit returns the value of ChannelLimit.
func (s *TexmlApplicationOutbound) GetChannelLimit() OptInt {
	return s.ChannelLimit
}

// GetOutboundVoiceProfileID returns the value of OutboundVoiceProfileID.
func (s *TexmlApplicationOutbound) GetOutboundVoiceProfileID() OptOutboundVoiceProfileId {
	return s.OutboundVoiceProfileID
}

// SetChannelLimit sets the value of ChannelLimit.
func (s *TexmlApplicationOutbound) SetChannelLimit(val OptInt) {
	s.ChannelLimit = val
}

// SetOutboundVoiceProfileID sets the value of OutboundVoiceProfileID.
func (s *TexmlApplicationOutbound) SetOutboundVoiceProfileID(val OptOutboundVoiceProfileId) {
	s.OutboundVoiceProfileID = val
}

type TexmlApplicationResponse struct {
	Data OptTexmlApplication `json:"data"`
}

// GetData returns the value of Data.
func (s *TexmlApplicationResponse) GetData() OptTexmlApplication {
	return s.Data
}

// SetData sets the value of Data.
func (s *TexmlApplicationResponse) SetData(val OptTexmlApplication) {
	s.Data = val
}

func (*TexmlApplicationResponse) createTexmlApplicationRes() {}
func (*TexmlApplicationResponse) deleteTexmlApplicationRes() {}
func (*TexmlApplicationResponse) getTexmlApplicationRes()    {}
func (*TexmlApplicationResponse) updateTexmlApplicationRes() {}

// HTTP request method Telnyx should use when requesting the status_callback URL.
type TexmlApplicationStatusCallbackMethod string

const (
	TexmlApplicationStatusCallbackMethodGet  TexmlApplicationStatusCallbackMethod = "get"
	TexmlApplicationStatusCallbackMethodPost TexmlApplicationStatusCallbackMethod = "post"
)

// AllValues returns all TexmlApplicationStatusCallbackMethod values.
func (TexmlApplicationStatusCallbackMethod) AllValues() []TexmlApplicationStatusCallbackMethod {
	return []TexmlApplicationStatusCallbackMethod{
		TexmlApplicationStatusCallbackMethodGet,
		TexmlApplicationStatusCallbackMethodPost,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TexmlApplicationStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case TexmlApplicationStatusCallbackMethodGet:
		return []byte(s), nil
	case TexmlApplicationStatusCallbackMethodPost:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TexmlApplicationStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch TexmlApplicationStatusCallbackMethod(data) {
	case TexmlApplicationStatusCallbackMethodGet:
		*s = TexmlApplicationStatusCallbackMethodGet
		return nil
	case TexmlApplicationStatusCallbackMethodPost:
		*s = TexmlApplicationStatusCallbackMethodPost
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request method Telnyx will use to interact with your XML Translator webhooks. Either 'get' or
// 'post'.
type TexmlApplicationVoiceMethod string

const (
	TexmlApplicationVoiceMethodGet  TexmlApplicationVoiceMethod = "get"
	TexmlApplicationVoiceMethodPost TexmlApplicationVoiceMethod = "post"
)

// AllValues returns all TexmlApplicationVoiceMethod values.
func (TexmlApplicationVoiceMethod) AllValues() []TexmlApplicationVoiceMethod {
	return []TexmlApplicationVoiceMethod{
		TexmlApplicationVoiceMethodGet,
		TexmlApplicationVoiceMethodPost,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TexmlApplicationVoiceMethod) MarshalText() ([]byte, error) {
	switch s {
	case TexmlApplicationVoiceMethodGet:
		return []byte(s), nil
	case TexmlApplicationVoiceMethodPost:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TexmlApplicationVoiceMethod) UnmarshalText(data []byte) error {
	switch TexmlApplicationVoiceMethod(data) {
	case TexmlApplicationVoiceMethodGet:
		*s = TexmlApplicationVoiceMethodGet
		return nil
	case TexmlApplicationVoiceMethodPost:
		*s = TexmlApplicationVoiceMethodPost
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TexmlCreateCallRecordingRequestBody
type TexmlCreateCallRecordingRequestBody struct {
	PlayBeep                      OptPlayBeep                     `json:"PlayBeep"`
	RecordingStatusCallbackEvent  OptRecordingStatusCallbackEvent `json:"RecordingStatusCallbackEvent"`
	RecordingStatusCallback       OptTexmlStatusCallback          `json:"RecordingStatusCallback"`
	RecordingStatusCallbackMethod OptTexmlStatusCallbackMethod    `json:"RecordingStatusCallbackMethod"`
	RecordingChannels             OptTexmlRecordingChannels       `json:"RecordingChannels"`
	RecordingTrack                OptRecordingTrack               `json:"RecordingTrack"`
}

// GetPlayBeep returns the value of PlayBeep.
func (s *TexmlCreateCallRecordingRequestBody) GetPlayBeep() OptPlayBeep {
	return s.PlayBeep
}

// GetRecordingStatusCallbackEvent returns the value of RecordingStatusCallbackEvent.
func (s *TexmlCreateCallRecordingRequestBody) GetRecordingStatusCallbackEvent() OptRecordingStatusCallbackEvent {
	return s.RecordingStatusCallbackEvent
}

// GetRecordingStatusCallback returns the value of RecordingStatusCallback.
func (s *TexmlCreateCallRecordingRequestBody) GetRecordingStatusCallback() OptTexmlStatusCallback {
	return s.RecordingStatusCallback
}

// GetRecordingStatusCallbackMethod returns the value of RecordingStatusCallbackMethod.
func (s *TexmlCreateCallRecordingRequestBody) GetRecordingStatusCallbackMethod() OptTexmlStatusCallbackMethod {
	return s.RecordingStatusCallbackMethod
}

// GetRecordingChannels returns the value of RecordingChannels.
func (s *TexmlCreateCallRecordingRequestBody) GetRecordingChannels() OptTexmlRecordingChannels {
	return s.RecordingChannels
}

// GetRecordingTrack returns the value of RecordingTrack.
func (s *TexmlCreateCallRecordingRequestBody) GetRecordingTrack() OptRecordingTrack {
	return s.RecordingTrack
}

// SetPlayBeep sets the value of PlayBeep.
func (s *TexmlCreateCallRecordingRequestBody) SetPlayBeep(val OptPlayBeep) {
	s.PlayBeep = val
}

// SetRecordingStatusCallbackEvent sets the value of RecordingStatusCallbackEvent.
func (s *TexmlCreateCallRecordingRequestBody) SetRecordingStatusCallbackEvent(val OptRecordingStatusCallbackEvent) {
	s.RecordingStatusCallbackEvent = val
}

// SetRecordingStatusCallback sets the value of RecordingStatusCallback.
func (s *TexmlCreateCallRecordingRequestBody) SetRecordingStatusCallback(val OptTexmlStatusCallback) {
	s.RecordingStatusCallback = val
}

// SetRecordingStatusCallbackMethod sets the value of RecordingStatusCallbackMethod.
func (s *TexmlCreateCallRecordingRequestBody) SetRecordingStatusCallbackMethod(val OptTexmlStatusCallbackMethod) {
	s.RecordingStatusCallbackMethod = val
}

// SetRecordingChannels sets the value of RecordingChannels.
func (s *TexmlCreateCallRecordingRequestBody) SetRecordingChannels(val OptTexmlRecordingChannels) {
	s.RecordingChannels = val
}

// SetRecordingTrack sets the value of RecordingTrack.
func (s *TexmlCreateCallRecordingRequestBody) SetRecordingTrack(val OptRecordingTrack) {
	s.RecordingTrack = val
}

// Ref: #/components/schemas/TexmlCreateCallRecordingResponseBody
type TexmlCreateCallRecordingResponseBody struct {
	AccountSid    OptAccountSid                `json:"account_sid"`
	CallSid       OptCallControlId             `json:"call_sid"`
	ConferenceSid OptNilConferenceSid          `json:"conference_sid"`
	Channels      OptTwimlRecordingChannels    `json:"channels"`
	DateCreated   OptDateTimeRFC2822           `json:"date_created"`
	DateUpdated   OptDateTimeRFC2822           `json:"date_updated"`
	StartTime     OptDateTimeRFC2822           `json:"start_time"`
	Price         OptNilTexmlRecordingPrice    `json:"price"`
	PriceUnit     OptNilTexmlPriceUnit         `json:"price_unit"`
	Duration      OptNilTexmlRecordingDuration `json:"duration"`
	Sid           OptTexmlSid                  `json:"sid"`
	Source        OptRecordingSource           `json:"source"`
	ErrorCode     OptNilTexmlErrorCode         `json:"error_code"`
	Track         OptRecordingTrack            `json:"track"`
	// The relative URI for this recording resource.
	URI OptString `json:"uri"`
}

// GetAccountSid returns the value of AccountSid.
func (s *TexmlCreateCallRecordingResponseBody) GetAccountSid() OptAccountSid {
	return s.AccountSid
}

// GetCallSid returns the value of CallSid.
func (s *TexmlCreateCallRecordingResponseBody) GetCallSid() OptCallControlId {
	return s.CallSid
}

// GetConferenceSid returns the value of ConferenceSid.
func (s *TexmlCreateCallRecordingResponseBody) GetConferenceSid() OptNilConferenceSid {
	return s.ConferenceSid
}

// GetChannels returns the value of Channels.
func (s *TexmlCreateCallRecordingResponseBody) GetChannels() OptTwimlRecordingChannels {
	return s.Channels
}

// GetDateCreated returns the value of DateCreated.
func (s *TexmlCreateCallRecordingResponseBody) GetDateCreated() OptDateTimeRFC2822 {
	return s.DateCreated
}

// GetDateUpdated returns the value of DateUpdated.
func (s *TexmlCreateCallRecordingResponseBody) GetDateUpdated() OptDateTimeRFC2822 {
	return s.DateUpdated
}

// GetStartTime returns the value of StartTime.
func (s *TexmlCreateCallRecordingResponseBody) GetStartTime() OptDateTimeRFC2822 {
	return s.StartTime
}

// GetPrice returns the value of Price.
func (s *TexmlCreateCallRecordingResponseBody) GetPrice() OptNilTexmlRecordingPrice {
	return s.Price
}

// GetPriceUnit returns the value of PriceUnit.
func (s *TexmlCreateCallRecordingResponseBody) GetPriceUnit() OptNilTexmlPriceUnit {
	return s.PriceUnit
}

// GetDuration returns the value of Duration.
func (s *TexmlCreateCallRecordingResponseBody) GetDuration() OptNilTexmlRecordingDuration {
	return s.Duration
}

// GetSid returns the value of Sid.
func (s *TexmlCreateCallRecordingResponseBody) GetSid() OptTexmlSid {
	return s.Sid
}

// GetSource returns the value of Source.
func (s *TexmlCreateCallRecordingResponseBody) GetSource() OptRecordingSource {
	return s.Source
}

// GetErrorCode returns the value of ErrorCode.
func (s *TexmlCreateCallRecordingResponseBody) GetErrorCode() OptNilTexmlErrorCode {
	return s.ErrorCode
}

// GetTrack returns the value of Track.
func (s *TexmlCreateCallRecordingResponseBody) GetTrack() OptRecordingTrack {
	return s.Track
}

// GetURI returns the value of URI.
func (s *TexmlCreateCallRecordingResponseBody) GetURI() OptString {
	return s.URI
}

// SetAccountSid sets the value of AccountSid.
func (s *TexmlCreateCallRecordingResponseBody) SetAccountSid(val OptAccountSid) {
	s.AccountSid = val
}

// SetCallSid sets the value of CallSid.
func (s *TexmlCreateCallRecordingResponseBody) SetCallSid(val OptCallControlId) {
	s.CallSid = val
}

// SetConferenceSid sets the value of ConferenceSid.
func (s *TexmlCreateCallRecordingResponseBody) SetConferenceSid(val OptNilConferenceSid) {
	s.ConferenceSid = val
}

// SetChannels sets the value of Channels.
func (s *TexmlCreateCallRecordingResponseBody) SetChannels(val OptTwimlRecordingChannels) {
	s.Channels = val
}

// SetDateCreated sets the value of DateCreated.
func (s *TexmlCreateCallRecordingResponseBody) SetDateCreated(val OptDateTimeRFC2822) {
	s.DateCreated = val
}

// SetDateUpdated sets the value of DateUpdated.
func (s *TexmlCreateCallRecordingResponseBody) SetDateUpdated(val OptDateTimeRFC2822) {
	s.DateUpdated = val
}

// SetStartTime sets the value of StartTime.
func (s *TexmlCreateCallRecordingResponseBody) SetStartTime(val OptDateTimeRFC2822) {
	s.StartTime = val
}

// SetPrice sets the value of Price.
func (s *TexmlCreateCallRecordingResponseBody) SetPrice(val OptNilTexmlRecordingPrice) {
	s.Price = val
}

// SetPriceUnit sets the value of PriceUnit.
func (s *TexmlCreateCallRecordingResponseBody) SetPriceUnit(val OptNilTexmlPriceUnit) {
	s.PriceUnit = val
}

// SetDuration sets the value of Duration.
func (s *TexmlCreateCallRecordingResponseBody) SetDuration(val OptNilTexmlRecordingDuration) {
	s.Duration = val
}

// SetSid sets the value of Sid.
func (s *TexmlCreateCallRecordingResponseBody) SetSid(val OptTexmlSid) {
	s.Sid = val
}

// SetSource sets the value of Source.
func (s *TexmlCreateCallRecordingResponseBody) SetSource(val OptRecordingSource) {
	s.Source = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *TexmlCreateCallRecordingResponseBody) SetErrorCode(val OptNilTexmlErrorCode) {
	s.ErrorCode = val
}

// SetTrack sets the value of Track.
func (s *TexmlCreateCallRecordingResponseBody) SetTrack(val OptRecordingTrack) {
	s.Track = val
}

// SetURI sets the value of URI.
func (s *TexmlCreateCallRecordingResponseBody) SetURI(val OptString) {
	s.URI = val
}

func (*TexmlCreateCallRecordingResponseBody) startTeXMLCallRecordingRes()  {}
func (*TexmlCreateCallRecordingResponseBody) updateTeXMLCallRecordingRes() {}

type TexmlErrorCode string

// Ref: #/components/schemas/TexmlGetCallRecordingResponseBody
type TexmlGetCallRecordingResponseBody struct {
	AccountSid       OptAccountSid                     `json:"account_sid"`
	CallSid          OptCallControlId                  `json:"call_sid"`
	ConferenceSid    OptNilConferenceSid               `json:"conference_sid"`
	Channels         OptTwimlRecordingChannels         `json:"channels"`
	DateCreated      OptDateTimeRFC2822                `json:"date_created"`
	DateUpdated      OptDateTimeRFC2822                `json:"date_updated"`
	StartTime        OptDateTimeRFC2822                `json:"start_time"`
	Duration         OptNilTexmlRecordingDuration      `json:"duration"`
	Sid              OptTexmlSid                       `json:"sid"`
	Source           OptRecordingSource                `json:"source"`
	Status           OptTexmlRecordingStatus           `json:"status"`
	ErrorCode        OptNilTexmlErrorCode              `json:"error_code"`
	SubresourcesUris OptTexmlRecordingSubresourcesUris `json:"subresources_uris"`
	// The relative URI for this recording resource.
	URI      OptString                 `json:"uri"`
	MediaURL OptTexmlRecordingMediaUrl `json:"media_url"`
}

// GetAccountSid returns the value of AccountSid.
func (s *TexmlGetCallRecordingResponseBody) GetAccountSid() OptAccountSid {
	return s.AccountSid
}

// GetCallSid returns the value of CallSid.
func (s *TexmlGetCallRecordingResponseBody) GetCallSid() OptCallControlId {
	return s.CallSid
}

// GetConferenceSid returns the value of ConferenceSid.
func (s *TexmlGetCallRecordingResponseBody) GetConferenceSid() OptNilConferenceSid {
	return s.ConferenceSid
}

// GetChannels returns the value of Channels.
func (s *TexmlGetCallRecordingResponseBody) GetChannels() OptTwimlRecordingChannels {
	return s.Channels
}

// GetDateCreated returns the value of DateCreated.
func (s *TexmlGetCallRecordingResponseBody) GetDateCreated() OptDateTimeRFC2822 {
	return s.DateCreated
}

// GetDateUpdated returns the value of DateUpdated.
func (s *TexmlGetCallRecordingResponseBody) GetDateUpdated() OptDateTimeRFC2822 {
	return s.DateUpdated
}

// GetStartTime returns the value of StartTime.
func (s *TexmlGetCallRecordingResponseBody) GetStartTime() OptDateTimeRFC2822 {
	return s.StartTime
}

// GetDuration returns the value of Duration.
func (s *TexmlGetCallRecordingResponseBody) GetDuration() OptNilTexmlRecordingDuration {
	return s.Duration
}

// GetSid returns the value of Sid.
func (s *TexmlGetCallRecordingResponseBody) GetSid() OptTexmlSid {
	return s.Sid
}

// GetSource returns the value of Source.
func (s *TexmlGetCallRecordingResponseBody) GetSource() OptRecordingSource {
	return s.Source
}

// GetStatus returns the value of Status.
func (s *TexmlGetCallRecordingResponseBody) GetStatus() OptTexmlRecordingStatus {
	return s.Status
}

// GetErrorCode returns the value of ErrorCode.
func (s *TexmlGetCallRecordingResponseBody) GetErrorCode() OptNilTexmlErrorCode {
	return s.ErrorCode
}

// GetSubresourcesUris returns the value of SubresourcesUris.
func (s *TexmlGetCallRecordingResponseBody) GetSubresourcesUris() OptTexmlRecordingSubresourcesUris {
	return s.SubresourcesUris
}

// GetURI returns the value of URI.
func (s *TexmlGetCallRecordingResponseBody) GetURI() OptString {
	return s.URI
}

// GetMediaURL returns the value of MediaURL.
func (s *TexmlGetCallRecordingResponseBody) GetMediaURL() OptTexmlRecordingMediaUrl {
	return s.MediaURL
}

// SetAccountSid sets the value of AccountSid.
func (s *TexmlGetCallRecordingResponseBody) SetAccountSid(val OptAccountSid) {
	s.AccountSid = val
}

// SetCallSid sets the value of CallSid.
func (s *TexmlGetCallRecordingResponseBody) SetCallSid(val OptCallControlId) {
	s.CallSid = val
}

// SetConferenceSid sets the value of ConferenceSid.
func (s *TexmlGetCallRecordingResponseBody) SetConferenceSid(val OptNilConferenceSid) {
	s.ConferenceSid = val
}

// SetChannels sets the value of Channels.
func (s *TexmlGetCallRecordingResponseBody) SetChannels(val OptTwimlRecordingChannels) {
	s.Channels = val
}

// SetDateCreated sets the value of DateCreated.
func (s *TexmlGetCallRecordingResponseBody) SetDateCreated(val OptDateTimeRFC2822) {
	s.DateCreated = val
}

// SetDateUpdated sets the value of DateUpdated.
func (s *TexmlGetCallRecordingResponseBody) SetDateUpdated(val OptDateTimeRFC2822) {
	s.DateUpdated = val
}

// SetStartTime sets the value of StartTime.
func (s *TexmlGetCallRecordingResponseBody) SetStartTime(val OptDateTimeRFC2822) {
	s.StartTime = val
}

// SetDuration sets the value of Duration.
func (s *TexmlGetCallRecordingResponseBody) SetDuration(val OptNilTexmlRecordingDuration) {
	s.Duration = val
}

// SetSid sets the value of Sid.
func (s *TexmlGetCallRecordingResponseBody) SetSid(val OptTexmlSid) {
	s.Sid = val
}

// SetSource sets the value of Source.
func (s *TexmlGetCallRecordingResponseBody) SetSource(val OptRecordingSource) {
	s.Source = val
}

// SetStatus sets the value of Status.
func (s *TexmlGetCallRecordingResponseBody) SetStatus(val OptTexmlRecordingStatus) {
	s.Status = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *TexmlGetCallRecordingResponseBody) SetErrorCode(val OptNilTexmlErrorCode) {
	s.ErrorCode = val
}

// SetSubresourcesUris sets the value of SubresourcesUris.
func (s *TexmlGetCallRecordingResponseBody) SetSubresourcesUris(val OptTexmlRecordingSubresourcesUris) {
	s.SubresourcesUris = val
}

// SetURI sets the value of URI.
func (s *TexmlGetCallRecordingResponseBody) SetURI(val OptString) {
	s.URI = val
}

// SetMediaURL sets the value of MediaURL.
func (s *TexmlGetCallRecordingResponseBody) SetMediaURL(val OptTexmlRecordingMediaUrl) {
	s.MediaURL = val
}

func (*TexmlGetCallRecordingResponseBody) getTeXMLCallRecordingRes() {}

// Ref: #/components/schemas/TexmlGetCallRecordingsResponseBody
type TexmlGetCallRecordingsResponseBody struct {
	Recordings []TexmlGetCallRecordingResponseBody `json:"recordings"`
	// The number of the last element on the page, zero-indexed.
	End OptInt `json:"end"`
	// Relative uri to the first page of the query results.
	FirstPageURI OptURI `json:"first_page_uri"`
	// Relative uri to the previous page of the query results.
	PreviousPageURI OptURI `json:"previous_page_uri"`
	// Relative uri to the next page of the query results.
	NextPageURI OptString `json:"next_page_uri"`
	// Current page number, zero-indexed.
	Page OptInt `json:"page"`
	// The number of items on the page.
	PageSize OptInt `json:"page_size"`
	// The number of the first element on the page, zero-indexed.
	Start OptInt `json:"start"`
	// The URI of the current page.
	URI OptString `json:"uri"`
}

// GetRecordings returns the value of Recordings.
func (s *TexmlGetCallRecordingsResponseBody) GetRecordings() []TexmlGetCallRecordingResponseBody {
	return s.Recordings
}

// GetEnd returns the value of End.
func (s *TexmlGetCallRecordingsResponseBody) GetEnd() OptInt {
	return s.End
}

// GetFirstPageURI returns the value of FirstPageURI.
func (s *TexmlGetCallRecordingsResponseBody) GetFirstPageURI() OptURI {
	return s.FirstPageURI
}

// GetPreviousPageURI returns the value of PreviousPageURI.
func (s *TexmlGetCallRecordingsResponseBody) GetPreviousPageURI() OptURI {
	return s.PreviousPageURI
}

// GetNextPageURI returns the value of NextPageURI.
func (s *TexmlGetCallRecordingsResponseBody) GetNextPageURI() OptString {
	return s.NextPageURI
}

// GetPage returns the value of Page.
func (s *TexmlGetCallRecordingsResponseBody) GetPage() OptInt {
	return s.Page
}

// GetPageSize returns the value of PageSize.
func (s *TexmlGetCallRecordingsResponseBody) GetPageSize() OptInt {
	return s.PageSize
}

// GetStart returns the value of Start.
func (s *TexmlGetCallRecordingsResponseBody) GetStart() OptInt {
	return s.Start
}

// GetURI returns the value of URI.
func (s *TexmlGetCallRecordingsResponseBody) GetURI() OptString {
	return s.URI
}

// SetRecordings sets the value of Recordings.
func (s *TexmlGetCallRecordingsResponseBody) SetRecordings(val []TexmlGetCallRecordingResponseBody) {
	s.Recordings = val
}

// SetEnd sets the value of End.
func (s *TexmlGetCallRecordingsResponseBody) SetEnd(val OptInt) {
	s.End = val
}

// SetFirstPageURI sets the value of FirstPageURI.
func (s *TexmlGetCallRecordingsResponseBody) SetFirstPageURI(val OptURI) {
	s.FirstPageURI = val
}

// SetPreviousPageURI sets the value of PreviousPageURI.
func (s *TexmlGetCallRecordingsResponseBody) SetPreviousPageURI(val OptURI) {
	s.PreviousPageURI = val
}

// SetNextPageURI sets the value of NextPageURI.
func (s *TexmlGetCallRecordingsResponseBody) SetNextPageURI(val OptString) {
	s.NextPageURI = val
}

// SetPage sets the value of Page.
func (s *TexmlGetCallRecordingsResponseBody) SetPage(val OptInt) {
	s.Page = val
}

// SetPageSize sets the value of PageSize.
func (s *TexmlGetCallRecordingsResponseBody) SetPageSize(val OptInt) {
	s.PageSize = val
}

// SetStart sets the value of Start.
func (s *TexmlGetCallRecordingsResponseBody) SetStart(val OptInt) {
	s.Start = val
}

// SetURI sets the value of URI.
func (s *TexmlGetCallRecordingsResponseBody) SetURI(val OptString) {
	s.URI = val
}

func (*TexmlGetCallRecordingsResponseBody) fetchTeXMLCallRecordingsRes()       {}
func (*TexmlGetCallRecordingsResponseBody) fetchTeXMLConferenceRecordingsRes() {}
func (*TexmlGetCallRecordingsResponseBody) getTeXMLCallRecordingsRes()         {}

type TexmlListRecordingTranscriptionResponse struct {
	Transcriptions []TexmlRecordingTranscription `json:"transcriptions"`
	// The number of the last element on the page, zero-indexed.
	End OptInt `json:"end"`
	// Relative uri to the first page of the query results.
	FirstPageURI OptURI `json:"first_page_uri"`
	// Relative uri to the previous page of the query results.
	PreviousPageURI OptURI `json:"previous_page_uri"`
	// Relative uri to the next page of the query results.
	NextPageURI OptString `json:"next_page_uri"`
	// Current page number, zero-indexed.
	Page OptInt `json:"page"`
	// The number of items on the page.
	PageSize OptInt `json:"page_size"`
	// The number of the first element on the page, zero-indexed.
	Start OptInt `json:"start"`
	// The URI of the current page.
	URI OptString `json:"uri"`
}

// GetTranscriptions returns the value of Transcriptions.
func (s *TexmlListRecordingTranscriptionResponse) GetTranscriptions() []TexmlRecordingTranscription {
	return s.Transcriptions
}

// GetEnd returns the value of End.
func (s *TexmlListRecordingTranscriptionResponse) GetEnd() OptInt {
	return s.End
}

// GetFirstPageURI returns the value of FirstPageURI.
func (s *TexmlListRecordingTranscriptionResponse) GetFirstPageURI() OptURI {
	return s.FirstPageURI
}

// GetPreviousPageURI returns the value of PreviousPageURI.
func (s *TexmlListRecordingTranscriptionResponse) GetPreviousPageURI() OptURI {
	return s.PreviousPageURI
}

// GetNextPageURI returns the value of NextPageURI.
func (s *TexmlListRecordingTranscriptionResponse) GetNextPageURI() OptString {
	return s.NextPageURI
}

// GetPage returns the value of Page.
func (s *TexmlListRecordingTranscriptionResponse) GetPage() OptInt {
	return s.Page
}

// GetPageSize returns the value of PageSize.
func (s *TexmlListRecordingTranscriptionResponse) GetPageSize() OptInt {
	return s.PageSize
}

// GetStart returns the value of Start.
func (s *TexmlListRecordingTranscriptionResponse) GetStart() OptInt {
	return s.Start
}

// GetURI returns the value of URI.
func (s *TexmlListRecordingTranscriptionResponse) GetURI() OptString {
	return s.URI
}

// SetTranscriptions sets the value of Transcriptions.
func (s *TexmlListRecordingTranscriptionResponse) SetTranscriptions(val []TexmlRecordingTranscription) {
	s.Transcriptions = val
}

// SetEnd sets the value of End.
func (s *TexmlListRecordingTranscriptionResponse) SetEnd(val OptInt) {
	s.End = val
}

// SetFirstPageURI sets the value of FirstPageURI.
func (s *TexmlListRecordingTranscriptionResponse) SetFirstPageURI(val OptURI) {
	s.FirstPageURI = val
}

// SetPreviousPageURI sets the value of PreviousPageURI.
func (s *TexmlListRecordingTranscriptionResponse) SetPreviousPageURI(val OptURI) {
	s.PreviousPageURI = val
}

// SetNextPageURI sets the value of NextPageURI.
func (s *TexmlListRecordingTranscriptionResponse) SetNextPageURI(val OptString) {
	s.NextPageURI = val
}

// SetPage sets the value of Page.
func (s *TexmlListRecordingTranscriptionResponse) SetPage(val OptInt) {
	s.Page = val
}

// SetPageSize sets the value of PageSize.
func (s *TexmlListRecordingTranscriptionResponse) SetPageSize(val OptInt) {
	s.PageSize = val
}

// SetStart sets the value of Start.
func (s *TexmlListRecordingTranscriptionResponse) SetStart(val OptInt) {
	s.Start = val
}

// SetURI sets the value of URI.
func (s *TexmlListRecordingTranscriptionResponse) SetURI(val OptString) {
	s.URI = val
}

func (*TexmlListRecordingTranscriptionResponse) getTeXMLRecordingTranscriptionsRes() {}

type TexmlPriceUnit string

// When `dual`, final audio file has the first leg on channel A, and the rest on channel B. `mono`
// mixes both tracks into a single channel.
// Ref: #/components/schemas/TexmlRecordingChannels
type TexmlRecordingChannels string

const (
	TexmlRecordingChannelsMono TexmlRecordingChannels = "mono"
	TexmlRecordingChannelsDual TexmlRecordingChannels = "dual"
)

// AllValues returns all TexmlRecordingChannels values.
func (TexmlRecordingChannels) AllValues() []TexmlRecordingChannels {
	return []TexmlRecordingChannels{
		TexmlRecordingChannelsMono,
		TexmlRecordingChannelsDual,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TexmlRecordingChannels) MarshalText() ([]byte, error) {
	switch s {
	case TexmlRecordingChannelsMono:
		return []byte(s), nil
	case TexmlRecordingChannelsDual:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TexmlRecordingChannels) UnmarshalText(data []byte) error {
	switch TexmlRecordingChannels(data) {
	case TexmlRecordingChannelsMono:
		*s = TexmlRecordingChannelsMono
		return nil
	case TexmlRecordingChannelsDual:
		*s = TexmlRecordingChannelsDual
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TexmlRecordingDuration string

type TexmlRecordingMediaUrl url.URL

type TexmlRecordingPrice string

// Ref: #/components/schemas/TexmlRecordingStatus
type TexmlRecordingStatus string

const (
	TexmlRecordingStatusInProgress TexmlRecordingStatus = "in-progress"
	TexmlRecordingStatusCompleted  TexmlRecordingStatus = "completed"
	TexmlRecordingStatusPaused     TexmlRecordingStatus = "paused"
	TexmlRecordingStatusStopped    TexmlRecordingStatus = "stopped"
)

// AllValues returns all TexmlRecordingStatus values.
func (TexmlRecordingStatus) AllValues() []TexmlRecordingStatus {
	return []TexmlRecordingStatus{
		TexmlRecordingStatusInProgress,
		TexmlRecordingStatusCompleted,
		TexmlRecordingStatusPaused,
		TexmlRecordingStatusStopped,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TexmlRecordingStatus) MarshalText() ([]byte, error) {
	switch s {
	case TexmlRecordingStatusInProgress:
		return []byte(s), nil
	case TexmlRecordingStatusCompleted:
		return []byte(s), nil
	case TexmlRecordingStatusPaused:
		return []byte(s), nil
	case TexmlRecordingStatusStopped:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TexmlRecordingStatus) UnmarshalText(data []byte) error {
	switch TexmlRecordingStatus(data) {
	case TexmlRecordingStatusInProgress:
		*s = TexmlRecordingStatusInProgress
		return nil
	case TexmlRecordingStatusCompleted:
		*s = TexmlRecordingStatusCompleted
		return nil
	case TexmlRecordingStatusPaused:
		*s = TexmlRecordingStatusPaused
		return nil
	case TexmlRecordingStatusStopped:
		*s = TexmlRecordingStatusStopped
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Subresources details for a recording if available.
// Ref: #/components/schemas/TexmlRecordingSubresourcesUris
type TexmlRecordingSubresourcesUris struct {
	Transcriptions OptNilURI `json:"transcriptions"`
}

// GetTranscriptions returns the value of Transcriptions.
func (s *TexmlRecordingSubresourcesUris) GetTranscriptions() OptNilURI {
	return s.Transcriptions
}

// SetTranscriptions sets the value of Transcriptions.
func (s *TexmlRecordingSubresourcesUris) SetTranscriptions(val OptNilURI) {
	s.Transcriptions = val
}

// Ref: #/components/schemas/TexmlRecordingTranscription
type TexmlRecordingTranscription struct {
	AccountSid OptAccountSid    `json:"account_sid"`
	CallSid    OptCallControlId `json:"call_sid"`
	// The version of the API that was used to make the request.
	APIVersion   OptString                    `json:"api_version"`
	DateCreated  OptDateTimeRFC2822           `json:"date_created"`
	DateUpdated  OptDateTimeRFC2822           `json:"date_updated"`
	Duration     OptNilTexmlRecordingDuration `json:"duration"`
	Sid          OptTexmlSid                  `json:"sid"`
	RecordingSid OptTexmlSid                  `json:"recording_sid"`
	// The status of the recording transcriptions. The transcription text will be available only when the
	// status is completed.
	Status OptTexmlRecordingTranscriptionStatus `json:"status"`
	// The recording's transcribed text.
	TranscriptionText OptString `json:"transcription_text"`
	// The relative URI for the recording transcription resource.
	URI OptString `json:"uri"`
}

// GetAccountSid returns the value of AccountSid.
func (s *TexmlRecordingTranscription) GetAccountSid() OptAccountSid {
	return s.AccountSid
}

// GetCallSid returns the value of CallSid.
func (s *TexmlRecordingTranscription) GetCallSid() OptCallControlId {
	return s.CallSid
}

// GetAPIVersion returns the value of APIVersion.
func (s *TexmlRecordingTranscription) GetAPIVersion() OptString {
	return s.APIVersion
}

// GetDateCreated returns the value of DateCreated.
func (s *TexmlRecordingTranscription) GetDateCreated() OptDateTimeRFC2822 {
	return s.DateCreated
}

// GetDateUpdated returns the value of DateUpdated.
func (s *TexmlRecordingTranscription) GetDateUpdated() OptDateTimeRFC2822 {
	return s.DateUpdated
}

// GetDuration returns the value of Duration.
func (s *TexmlRecordingTranscription) GetDuration() OptNilTexmlRecordingDuration {
	return s.Duration
}

// GetSid returns the value of Sid.
func (s *TexmlRecordingTranscription) GetSid() OptTexmlSid {
	return s.Sid
}

// GetRecordingSid returns the value of RecordingSid.
func (s *TexmlRecordingTranscription) GetRecordingSid() OptTexmlSid {
	return s.RecordingSid
}

// GetStatus returns the value of Status.
func (s *TexmlRecordingTranscription) GetStatus() OptTexmlRecordingTranscriptionStatus {
	return s.Status
}

// GetTranscriptionText returns the value of TranscriptionText.
func (s *TexmlRecordingTranscription) GetTranscriptionText() OptString {
	return s.TranscriptionText
}

// GetURI returns the value of URI.
func (s *TexmlRecordingTranscription) GetURI() OptString {
	return s.URI
}

// SetAccountSid sets the value of AccountSid.
func (s *TexmlRecordingTranscription) SetAccountSid(val OptAccountSid) {
	s.AccountSid = val
}

// SetCallSid sets the value of CallSid.
func (s *TexmlRecordingTranscription) SetCallSid(val OptCallControlId) {
	s.CallSid = val
}

// SetAPIVersion sets the value of APIVersion.
func (s *TexmlRecordingTranscription) SetAPIVersion(val OptString) {
	s.APIVersion = val
}

// SetDateCreated sets the value of DateCreated.
func (s *TexmlRecordingTranscription) SetDateCreated(val OptDateTimeRFC2822) {
	s.DateCreated = val
}

// SetDateUpdated sets the value of DateUpdated.
func (s *TexmlRecordingTranscription) SetDateUpdated(val OptDateTimeRFC2822) {
	s.DateUpdated = val
}

// SetDuration sets the value of Duration.
func (s *TexmlRecordingTranscription) SetDuration(val OptNilTexmlRecordingDuration) {
	s.Duration = val
}

// SetSid sets the value of Sid.
func (s *TexmlRecordingTranscription) SetSid(val OptTexmlSid) {
	s.Sid = val
}

// SetRecordingSid sets the value of RecordingSid.
func (s *TexmlRecordingTranscription) SetRecordingSid(val OptTexmlSid) {
	s.RecordingSid = val
}

// SetStatus sets the value of Status.
func (s *TexmlRecordingTranscription) SetStatus(val OptTexmlRecordingTranscriptionStatus) {
	s.Status = val
}

// SetTranscriptionText sets the value of TranscriptionText.
func (s *TexmlRecordingTranscription) SetTranscriptionText(val OptString) {
	s.TranscriptionText = val
}

// SetURI sets the value of URI.
func (s *TexmlRecordingTranscription) SetURI(val OptString) {
	s.URI = val
}

func (*TexmlRecordingTranscription) getTeXMLRecordingTranscriptionRes() {}

// The status of the recording transcriptions. The transcription text will be available only when the
// status is completed.
type TexmlRecordingTranscriptionStatus string

const (
	TexmlRecordingTranscriptionStatusInProgress TexmlRecordingTranscriptionStatus = "in-progress"
	TexmlRecordingTranscriptionStatusCompleted  TexmlRecordingTranscriptionStatus = "completed"
)

// AllValues returns all TexmlRecordingTranscriptionStatus values.
func (TexmlRecordingTranscriptionStatus) AllValues() []TexmlRecordingTranscriptionStatus {
	return []TexmlRecordingTranscriptionStatus{
		TexmlRecordingTranscriptionStatusInProgress,
		TexmlRecordingTranscriptionStatusCompleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TexmlRecordingTranscriptionStatus) MarshalText() ([]byte, error) {
	switch s {
	case TexmlRecordingTranscriptionStatusInProgress:
		return []byte(s), nil
	case TexmlRecordingTranscriptionStatusCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TexmlRecordingTranscriptionStatus) UnmarshalText(data []byte) error {
	switch TexmlRecordingTranscriptionStatus(data) {
	case TexmlRecordingTranscriptionStatusInProgress:
		*s = TexmlRecordingTranscriptionStatusInProgress
		return nil
	case TexmlRecordingTranscriptionStatusCompleted:
		*s = TexmlRecordingTranscriptionStatusCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TexmlSid string

type TexmlStatusCallback url.URL

// HTTP method used to send status callbacks.
// Ref: #/components/schemas/TexmlStatusCallbackMethod
type TexmlStatusCallbackMethod string

const (
	TexmlStatusCallbackMethodGET  TexmlStatusCallbackMethod = "GET"
	TexmlStatusCallbackMethodPOST TexmlStatusCallbackMethod = "POST"
)

// AllValues returns all TexmlStatusCallbackMethod values.
func (TexmlStatusCallbackMethod) AllValues() []TexmlStatusCallbackMethod {
	return []TexmlStatusCallbackMethod{
		TexmlStatusCallbackMethodGET,
		TexmlStatusCallbackMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TexmlStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case TexmlStatusCallbackMethodGET:
		return []byte(s), nil
	case TexmlStatusCallbackMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TexmlStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch TexmlStatusCallbackMethod(data) {
	case TexmlStatusCallbackMethodGET:
		*s = TexmlStatusCallbackMethodGET
		return nil
	case TexmlStatusCallbackMethodPOST:
		*s = TexmlStatusCallbackMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TexmlUpdateCallRecordingRequestBody
type TexmlUpdateCallRecordingRequestBody struct {
	Status OptTexmlUpdateCallRecordingRequestBodyStatus `json:"Status"`
}

// GetStatus returns the value of Status.
func (s *TexmlUpdateCallRecordingRequestBody) GetStatus() OptTexmlUpdateCallRecordingRequestBodyStatus {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *TexmlUpdateCallRecordingRequestBody) SetStatus(val OptTexmlUpdateCallRecordingRequestBodyStatus) {
	s.Status = val
}

type TexmlUpdateCallRecordingRequestBodyStatus string

const (
	TexmlUpdateCallRecordingRequestBodyStatusInProgress TexmlUpdateCallRecordingRequestBodyStatus = "in-progress"
	TexmlUpdateCallRecordingRequestBodyStatusPaused     TexmlUpdateCallRecordingRequestBodyStatus = "paused"
	TexmlUpdateCallRecordingRequestBodyStatusStopped    TexmlUpdateCallRecordingRequestBodyStatus = "stopped"
)

// AllValues returns all TexmlUpdateCallRecordingRequestBodyStatus values.
func (TexmlUpdateCallRecordingRequestBodyStatus) AllValues() []TexmlUpdateCallRecordingRequestBodyStatus {
	return []TexmlUpdateCallRecordingRequestBodyStatus{
		TexmlUpdateCallRecordingRequestBodyStatusInProgress,
		TexmlUpdateCallRecordingRequestBodyStatusPaused,
		TexmlUpdateCallRecordingRequestBodyStatusStopped,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TexmlUpdateCallRecordingRequestBodyStatus) MarshalText() ([]byte, error) {
	switch s {
	case TexmlUpdateCallRecordingRequestBodyStatusInProgress:
		return []byte(s), nil
	case TexmlUpdateCallRecordingRequestBodyStatusPaused:
		return []byte(s), nil
	case TexmlUpdateCallRecordingRequestBodyStatusStopped:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TexmlUpdateCallRecordingRequestBodyStatus) UnmarshalText(data []byte) error {
	switch TexmlUpdateCallRecordingRequestBodyStatus(data) {
	case TexmlUpdateCallRecordingRequestBodyStatusInProgress:
		*s = TexmlUpdateCallRecordingRequestBodyStatusInProgress
		return nil
	case TexmlUpdateCallRecordingRequestBodyStatusPaused:
		*s = TexmlUpdateCallRecordingRequestBodyStatusPaused
		return nil
	case TexmlUpdateCallRecordingRequestBodyStatusStopped:
		*s = TexmlUpdateCallRecordingRequestBodyStatusStopped
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TranscriptionStartRequest
type TranscriptionStartRequest struct {
	// Engine to use for speech recognition. `A` - `google`, `B` - `telnyx`.
	TranscriptionEngine OptTranscriptionStartRequestTranscriptionEngine `json:"transcription_engine"`
	// Language to use for speech recognition.
	Language OptTranscriptionStartRequestLanguage `json:"language"`
	// Whether to send also interim results. If set to false, only final results will be sent. Applies to
	// `google` engine only.
	InterimResults OptBool `json:"interim_results"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Indicates which leg of the call will be transcribed. Use `inbound` for the leg that requested the
	// transcription, `outbound` for the other leg, and `both` for both legs of the call. Will default to
	// `inbound`.
	TranscriptionTracks OptString `json:"transcription_tracks"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetTranscriptionEngine returns the value of TranscriptionEngine.
func (s *TranscriptionStartRequest) GetTranscriptionEngine() OptTranscriptionStartRequestTranscriptionEngine {
	return s.TranscriptionEngine
}

// GetLanguage returns the value of Language.
func (s *TranscriptionStartRequest) GetLanguage() OptTranscriptionStartRequestLanguage {
	return s.Language
}

// GetInterimResults returns the value of InterimResults.
func (s *TranscriptionStartRequest) GetInterimResults() OptBool {
	return s.InterimResults
}

// GetClientState returns the value of ClientState.
func (s *TranscriptionStartRequest) GetClientState() OptString {
	return s.ClientState
}

// GetTranscriptionTracks returns the value of TranscriptionTracks.
func (s *TranscriptionStartRequest) GetTranscriptionTracks() OptString {
	return s.TranscriptionTracks
}

// GetCommandID returns the value of CommandID.
func (s *TranscriptionStartRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetTranscriptionEngine sets the value of TranscriptionEngine.
func (s *TranscriptionStartRequest) SetTranscriptionEngine(val OptTranscriptionStartRequestTranscriptionEngine) {
	s.TranscriptionEngine = val
}

// SetLanguage sets the value of Language.
func (s *TranscriptionStartRequest) SetLanguage(val OptTranscriptionStartRequestLanguage) {
	s.Language = val
}

// SetInterimResults sets the value of InterimResults.
func (s *TranscriptionStartRequest) SetInterimResults(val OptBool) {
	s.InterimResults = val
}

// SetClientState sets the value of ClientState.
func (s *TranscriptionStartRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetTranscriptionTracks sets the value of TranscriptionTracks.
func (s *TranscriptionStartRequest) SetTranscriptionTracks(val OptString) {
	s.TranscriptionTracks = val
}

// SetCommandID sets the value of CommandID.
func (s *TranscriptionStartRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// Language to use for speech recognition.
type TranscriptionStartRequestLanguage string

const (
	TranscriptionStartRequestLanguageDe TranscriptionStartRequestLanguage = "de"
	TranscriptionStartRequestLanguageEn TranscriptionStartRequestLanguage = "en"
	TranscriptionStartRequestLanguageEs TranscriptionStartRequestLanguage = "es"
	TranscriptionStartRequestLanguageFr TranscriptionStartRequestLanguage = "fr"
	TranscriptionStartRequestLanguageIt TranscriptionStartRequestLanguage = "it"
	TranscriptionStartRequestLanguagePl TranscriptionStartRequestLanguage = "pl"
)

// AllValues returns all TranscriptionStartRequestLanguage values.
func (TranscriptionStartRequestLanguage) AllValues() []TranscriptionStartRequestLanguage {
	return []TranscriptionStartRequestLanguage{
		TranscriptionStartRequestLanguageDe,
		TranscriptionStartRequestLanguageEn,
		TranscriptionStartRequestLanguageEs,
		TranscriptionStartRequestLanguageFr,
		TranscriptionStartRequestLanguageIt,
		TranscriptionStartRequestLanguagePl,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TranscriptionStartRequestLanguage) MarshalText() ([]byte, error) {
	switch s {
	case TranscriptionStartRequestLanguageDe:
		return []byte(s), nil
	case TranscriptionStartRequestLanguageEn:
		return []byte(s), nil
	case TranscriptionStartRequestLanguageEs:
		return []byte(s), nil
	case TranscriptionStartRequestLanguageFr:
		return []byte(s), nil
	case TranscriptionStartRequestLanguageIt:
		return []byte(s), nil
	case TranscriptionStartRequestLanguagePl:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TranscriptionStartRequestLanguage) UnmarshalText(data []byte) error {
	switch TranscriptionStartRequestLanguage(data) {
	case TranscriptionStartRequestLanguageDe:
		*s = TranscriptionStartRequestLanguageDe
		return nil
	case TranscriptionStartRequestLanguageEn:
		*s = TranscriptionStartRequestLanguageEn
		return nil
	case TranscriptionStartRequestLanguageEs:
		*s = TranscriptionStartRequestLanguageEs
		return nil
	case TranscriptionStartRequestLanguageFr:
		*s = TranscriptionStartRequestLanguageFr
		return nil
	case TranscriptionStartRequestLanguageIt:
		*s = TranscriptionStartRequestLanguageIt
		return nil
	case TranscriptionStartRequestLanguagePl:
		*s = TranscriptionStartRequestLanguagePl
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Engine to use for speech recognition. `A` - `google`, `B` - `telnyx`.
type TranscriptionStartRequestTranscriptionEngine string

const (
	TranscriptionStartRequestTranscriptionEngineA TranscriptionStartRequestTranscriptionEngine = "A"
	TranscriptionStartRequestTranscriptionEngineB TranscriptionStartRequestTranscriptionEngine = "B"
)

// AllValues returns all TranscriptionStartRequestTranscriptionEngine values.
func (TranscriptionStartRequestTranscriptionEngine) AllValues() []TranscriptionStartRequestTranscriptionEngine {
	return []TranscriptionStartRequestTranscriptionEngine{
		TranscriptionStartRequestTranscriptionEngineA,
		TranscriptionStartRequestTranscriptionEngineB,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TranscriptionStartRequestTranscriptionEngine) MarshalText() ([]byte, error) {
	switch s {
	case TranscriptionStartRequestTranscriptionEngineA:
		return []byte(s), nil
	case TranscriptionStartRequestTranscriptionEngineB:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TranscriptionStartRequestTranscriptionEngine) UnmarshalText(data []byte) error {
	switch TranscriptionStartRequestTranscriptionEngine(data) {
	case TranscriptionStartRequestTranscriptionEngineA:
		*s = TranscriptionStartRequestTranscriptionEngineA
		return nil
	case TranscriptionStartRequestTranscriptionEngineB:
		*s = TranscriptionStartRequestTranscriptionEngineB
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TranscriptionStopRequest
type TranscriptionStopRequest struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetClientState returns the value of ClientState.
func (s *TranscriptionStopRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *TranscriptionStopRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetClientState sets the value of ClientState.
func (s *TranscriptionStopRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *TranscriptionStopRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// Ref: #/components/schemas/TransferCallRequest
type TransferCallRequest struct {
	// The DID or SIP URI to dial out to.
	To string `json:"to"`
	// The `from` number to be used as the caller id presented to the destination (`to` number). The
	// number should be in +E164 format. This attribute will default to the `to` number of the original
	// call if omitted.
	From OptString `json:"from"`
	// The `from_display_name` string to be used as the caller id name (SIP From Display Name) presented
	// to the destination (`to` number). The string should have a maximum of 128 characters, containing
	// only letters, numbers, spaces, and -_~!.+ special characters. If ommited, the display name will be
	// the same as the number in the `from` field.
	FromDisplayName OptString `json:"from_display_name"`
	// The URL of a file to be played back when the transfer destination answers before bridging the call.
	//  The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together
	// in one request.
	AudioURL OptString `json:"audio_url"`
	// The media_name of a file to be played back when the transfer destination answers before bridging
	// the call. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by
	// the same user/organization. The file must either be a WAV or MP3 file.
	MediaName OptString `json:"media_name"`
	// The number of seconds that Telnyx will wait for the call to be answered by the destination to
	// which it is being transferred. If the timeout is reached before an answer is received, the call
	// will hangup and a `call.hangup` webhook with a `hangup_cause` of `timeout` will be sent. Minimum
	// value is 5 seconds. Maximum value is 120 seconds.
	TimeoutSecs OptInt32 `json:"timeout_secs"`
	// Sets the maximum duration of a Call Control Leg in seconds. If the time limit is reached, the call
	// will hangup and a `call.hangup` webhook with a `hangup_cause` of `time_limit` will be sent. For
	// example, by setting a time limit of 120 seconds, a Call Leg will be automatically terminated two
	// minutes after being answered. The default time limit is 14400 seconds or 4 hours and this is also
	// the maximum allowed call length.
	TimeLimitSecs OptInt32 `json:"time_limit_secs"`
	// Enables Answering Machine Detection. When a call is answered, Telnyx runs real-time detection to
	// determine if it was picked up by a human or a machine and sends an `call.machine.detection.ended`
	// webhook with the analysis result. If 'greeting_end' or 'detect_words' is used and a 'machine' is
	// detected, you will receive another 'call.machine.greeting.ended' webhook when the answering
	// machine greeting ends with a beep or silence. If `detect_beep` is used, you will only receive
	// 'call.machine.greeting.ended' if a beep is detected.
	AnsweringMachineDetection OptTransferCallRequestAnsweringMachineDetection `json:"answering_machine_detection"`
	// Optional configuration parameters to modify 'answering_machine_detection' performance.
	AnsweringMachineDetectionConfig OptTransferCallRequestAnsweringMachineDetectionConfig `json:"answering_machine_detection_config"`
	// Custom headers to be added to the SIP INVITE.
	CustomHeaders []CustomSipHeader `json:"custom_headers"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to add state to every subsequent webhook for the new leg. It must be a valid
	// Base-64 encoded string.
	TargetLegClientState OptString `json:"target_leg_client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
	// Defines whether media should be encrypted on the new call leg.
	MediaEncryption OptTransferCallRequestMediaEncryption `json:"media_encryption"`
	// SIP Authentication username used for SIP challenges.
	SipAuthUsername OptString `json:"sip_auth_username"`
	// SIP Authentication password used for SIP challenges.
	SipAuthPassword OptString `json:"sip_auth_password"`
	// SIP headers to be added to the SIP INVITE. Currently only User-to-User header is supported.
	SipHeaders []SipHeader `json:"sip_headers"`
	// Defines SIP transport protocol to be used on the call.
	SipTransportProtocol OptTransferCallRequestSipTransportProtocol `json:"sip_transport_protocol"`
	SoundModifications   OptSoundModifications                      `json:"sound_modifications"`
	// Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.
	WebhookURL OptString `json:"webhook_url"`
	// HTTP request type used for `webhook_url`.
	WebhookURLMethod OptTransferCallRequestWebhookURLMethod `json:"webhook_url_method"`
}

// GetTo returns the value of To.
func (s *TransferCallRequest) GetTo() string {
	return s.To
}

// GetFrom returns the value of From.
func (s *TransferCallRequest) GetFrom() OptString {
	return s.From
}

// GetFromDisplayName returns the value of FromDisplayName.
func (s *TransferCallRequest) GetFromDisplayName() OptString {
	return s.FromDisplayName
}

// GetAudioURL returns the value of AudioURL.
func (s *TransferCallRequest) GetAudioURL() OptString {
	return s.AudioURL
}

// GetMediaName returns the value of MediaName.
func (s *TransferCallRequest) GetMediaName() OptString {
	return s.MediaName
}

// GetTimeoutSecs returns the value of TimeoutSecs.
func (s *TransferCallRequest) GetTimeoutSecs() OptInt32 {
	return s.TimeoutSecs
}

// GetTimeLimitSecs returns the value of TimeLimitSecs.
func (s *TransferCallRequest) GetTimeLimitSecs() OptInt32 {
	return s.TimeLimitSecs
}

// GetAnsweringMachineDetection returns the value of AnsweringMachineDetection.
func (s *TransferCallRequest) GetAnsweringMachineDetection() OptTransferCallRequestAnsweringMachineDetection {
	return s.AnsweringMachineDetection
}

// GetAnsweringMachineDetectionConfig returns the value of AnsweringMachineDetectionConfig.
func (s *TransferCallRequest) GetAnsweringMachineDetectionConfig() OptTransferCallRequestAnsweringMachineDetectionConfig {
	return s.AnsweringMachineDetectionConfig
}

// GetCustomHeaders returns the value of CustomHeaders.
func (s *TransferCallRequest) GetCustomHeaders() []CustomSipHeader {
	return s.CustomHeaders
}

// GetClientState returns the value of ClientState.
func (s *TransferCallRequest) GetClientState() OptString {
	return s.ClientState
}

// GetTargetLegClientState returns the value of TargetLegClientState.
func (s *TransferCallRequest) GetTargetLegClientState() OptString {
	return s.TargetLegClientState
}

// GetCommandID returns the value of CommandID.
func (s *TransferCallRequest) GetCommandID() OptString {
	return s.CommandID
}

// GetMediaEncryption returns the value of MediaEncryption.
func (s *TransferCallRequest) GetMediaEncryption() OptTransferCallRequestMediaEncryption {
	return s.MediaEncryption
}

// GetSipAuthUsername returns the value of SipAuthUsername.
func (s *TransferCallRequest) GetSipAuthUsername() OptString {
	return s.SipAuthUsername
}

// GetSipAuthPassword returns the value of SipAuthPassword.
func (s *TransferCallRequest) GetSipAuthPassword() OptString {
	return s.SipAuthPassword
}

// GetSipHeaders returns the value of SipHeaders.
func (s *TransferCallRequest) GetSipHeaders() []SipHeader {
	return s.SipHeaders
}

// GetSipTransportProtocol returns the value of SipTransportProtocol.
func (s *TransferCallRequest) GetSipTransportProtocol() OptTransferCallRequestSipTransportProtocol {
	return s.SipTransportProtocol
}

// GetSoundModifications returns the value of SoundModifications.
func (s *TransferCallRequest) GetSoundModifications() OptSoundModifications {
	return s.SoundModifications
}

// GetWebhookURL returns the value of WebhookURL.
func (s *TransferCallRequest) GetWebhookURL() OptString {
	return s.WebhookURL
}

// GetWebhookURLMethod returns the value of WebhookURLMethod.
func (s *TransferCallRequest) GetWebhookURLMethod() OptTransferCallRequestWebhookURLMethod {
	return s.WebhookURLMethod
}

// SetTo sets the value of To.
func (s *TransferCallRequest) SetTo(val string) {
	s.To = val
}

// SetFrom sets the value of From.
func (s *TransferCallRequest) SetFrom(val OptString) {
	s.From = val
}

// SetFromDisplayName sets the value of FromDisplayName.
func (s *TransferCallRequest) SetFromDisplayName(val OptString) {
	s.FromDisplayName = val
}

// SetAudioURL sets the value of AudioURL.
func (s *TransferCallRequest) SetAudioURL(val OptString) {
	s.AudioURL = val
}

// SetMediaName sets the value of MediaName.
func (s *TransferCallRequest) SetMediaName(val OptString) {
	s.MediaName = val
}

// SetTimeoutSecs sets the value of TimeoutSecs.
func (s *TransferCallRequest) SetTimeoutSecs(val OptInt32) {
	s.TimeoutSecs = val
}

// SetTimeLimitSecs sets the value of TimeLimitSecs.
func (s *TransferCallRequest) SetTimeLimitSecs(val OptInt32) {
	s.TimeLimitSecs = val
}

// SetAnsweringMachineDetection sets the value of AnsweringMachineDetection.
func (s *TransferCallRequest) SetAnsweringMachineDetection(val OptTransferCallRequestAnsweringMachineDetection) {
	s.AnsweringMachineDetection = val
}

// SetAnsweringMachineDetectionConfig sets the value of AnsweringMachineDetectionConfig.
func (s *TransferCallRequest) SetAnsweringMachineDetectionConfig(val OptTransferCallRequestAnsweringMachineDetectionConfig) {
	s.AnsweringMachineDetectionConfig = val
}

// SetCustomHeaders sets the value of CustomHeaders.
func (s *TransferCallRequest) SetCustomHeaders(val []CustomSipHeader) {
	s.CustomHeaders = val
}

// SetClientState sets the value of ClientState.
func (s *TransferCallRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetTargetLegClientState sets the value of TargetLegClientState.
func (s *TransferCallRequest) SetTargetLegClientState(val OptString) {
	s.TargetLegClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *TransferCallRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// SetMediaEncryption sets the value of MediaEncryption.
func (s *TransferCallRequest) SetMediaEncryption(val OptTransferCallRequestMediaEncryption) {
	s.MediaEncryption = val
}

// SetSipAuthUsername sets the value of SipAuthUsername.
func (s *TransferCallRequest) SetSipAuthUsername(val OptString) {
	s.SipAuthUsername = val
}

// SetSipAuthPassword sets the value of SipAuthPassword.
func (s *TransferCallRequest) SetSipAuthPassword(val OptString) {
	s.SipAuthPassword = val
}

// SetSipHeaders sets the value of SipHeaders.
func (s *TransferCallRequest) SetSipHeaders(val []SipHeader) {
	s.SipHeaders = val
}

// SetSipTransportProtocol sets the value of SipTransportProtocol.
func (s *TransferCallRequest) SetSipTransportProtocol(val OptTransferCallRequestSipTransportProtocol) {
	s.SipTransportProtocol = val
}

// SetSoundModifications sets the value of SoundModifications.
func (s *TransferCallRequest) SetSoundModifications(val OptSoundModifications) {
	s.SoundModifications = val
}

// SetWebhookURL sets the value of WebhookURL.
func (s *TransferCallRequest) SetWebhookURL(val OptString) {
	s.WebhookURL = val
}

// SetWebhookURLMethod sets the value of WebhookURLMethod.
func (s *TransferCallRequest) SetWebhookURLMethod(val OptTransferCallRequestWebhookURLMethod) {
	s.WebhookURLMethod = val
}

// Enables Answering Machine Detection. When a call is answered, Telnyx runs real-time detection to
// determine if it was picked up by a human or a machine and sends an `call.machine.detection.ended`
// webhook with the analysis result. If 'greeting_end' or 'detect_words' is used and a 'machine' is
// detected, you will receive another 'call.machine.greeting.ended' webhook when the answering
// machine greeting ends with a beep or silence. If `detect_beep` is used, you will only receive
// 'call.machine.greeting.ended' if a beep is detected.
type TransferCallRequestAnsweringMachineDetection string

const (
	TransferCallRequestAnsweringMachineDetectionPremium     TransferCallRequestAnsweringMachineDetection = "premium"
	TransferCallRequestAnsweringMachineDetectionDetect      TransferCallRequestAnsweringMachineDetection = "detect"
	TransferCallRequestAnsweringMachineDetectionDetectBeep  TransferCallRequestAnsweringMachineDetection = "detect_beep"
	TransferCallRequestAnsweringMachineDetectionDetectWords TransferCallRequestAnsweringMachineDetection = "detect_words"
	TransferCallRequestAnsweringMachineDetectionGreetingEnd TransferCallRequestAnsweringMachineDetection = "greeting_end"
	TransferCallRequestAnsweringMachineDetectionDisabled    TransferCallRequestAnsweringMachineDetection = "disabled"
)

// AllValues returns all TransferCallRequestAnsweringMachineDetection values.
func (TransferCallRequestAnsweringMachineDetection) AllValues() []TransferCallRequestAnsweringMachineDetection {
	return []TransferCallRequestAnsweringMachineDetection{
		TransferCallRequestAnsweringMachineDetectionPremium,
		TransferCallRequestAnsweringMachineDetectionDetect,
		TransferCallRequestAnsweringMachineDetectionDetectBeep,
		TransferCallRequestAnsweringMachineDetectionDetectWords,
		TransferCallRequestAnsweringMachineDetectionGreetingEnd,
		TransferCallRequestAnsweringMachineDetectionDisabled,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TransferCallRequestAnsweringMachineDetection) MarshalText() ([]byte, error) {
	switch s {
	case TransferCallRequestAnsweringMachineDetectionPremium:
		return []byte(s), nil
	case TransferCallRequestAnsweringMachineDetectionDetect:
		return []byte(s), nil
	case TransferCallRequestAnsweringMachineDetectionDetectBeep:
		return []byte(s), nil
	case TransferCallRequestAnsweringMachineDetectionDetectWords:
		return []byte(s), nil
	case TransferCallRequestAnsweringMachineDetectionGreetingEnd:
		return []byte(s), nil
	case TransferCallRequestAnsweringMachineDetectionDisabled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TransferCallRequestAnsweringMachineDetection) UnmarshalText(data []byte) error {
	switch TransferCallRequestAnsweringMachineDetection(data) {
	case TransferCallRequestAnsweringMachineDetectionPremium:
		*s = TransferCallRequestAnsweringMachineDetectionPremium
		return nil
	case TransferCallRequestAnsweringMachineDetectionDetect:
		*s = TransferCallRequestAnsweringMachineDetectionDetect
		return nil
	case TransferCallRequestAnsweringMachineDetectionDetectBeep:
		*s = TransferCallRequestAnsweringMachineDetectionDetectBeep
		return nil
	case TransferCallRequestAnsweringMachineDetectionDetectWords:
		*s = TransferCallRequestAnsweringMachineDetectionDetectWords
		return nil
	case TransferCallRequestAnsweringMachineDetectionGreetingEnd:
		*s = TransferCallRequestAnsweringMachineDetectionGreetingEnd
		return nil
	case TransferCallRequestAnsweringMachineDetectionDisabled:
		*s = TransferCallRequestAnsweringMachineDetectionDisabled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Optional configuration parameters to modify 'answering_machine_detection' performance.
type TransferCallRequestAnsweringMachineDetectionConfig struct {
	// Maximum timeout threshold for overall detection.
	TotalAnalysisTimeMillis OptInt32 `json:"total_analysis_time_millis"`
	// Silence duration threshold after a greeting message or voice for it be considered human.
	AfterGreetingSilenceMillis OptInt32 `json:"after_greeting_silence_millis"`
	// Maximum threshold for silence between words.
	BetweenWordsSilenceMillis OptInt32 `json:"between_words_silence_millis"`
	// Maximum threshold of a human greeting. If greeting longer than this value, considered machine.
	GreetingDurationMillis OptInt32 `json:"greeting_duration_millis"`
	// If initial silence duration is greater than this value, consider it a machine.
	InitialSilenceMillis OptInt32 `json:"initial_silence_millis"`
	// If number of detected words is greater than this value, consder it a machine.
	MaximumNumberOfWords OptInt32 `json:"maximum_number_of_words"`
	// If a single word lasts longer than this threshold, consider it a machine.
	MaximumWordLengthMillis OptInt32 `json:"maximum_word_length_millis"`
	// Minimum noise threshold for any analysis.
	SilenceThreshold OptInt32 `json:"silence_threshold"`
	// If machine already detected, maximum timeout threshold to determine the end of the machine
	// greeting.
	GreetingTotalAnalysisTimeMillis OptInt32 `json:"greeting_total_analysis_time_millis"`
	// If machine already detected, maximum threshold for silence between words. If exceeded, the
	// greeting is considered ended.
	GreetingSilenceDurationMillis OptInt32 `json:"greeting_silence_duration_millis"`
}

// GetTotalAnalysisTimeMillis returns the value of TotalAnalysisTimeMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) GetTotalAnalysisTimeMillis() OptInt32 {
	return s.TotalAnalysisTimeMillis
}

// GetAfterGreetingSilenceMillis returns the value of AfterGreetingSilenceMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) GetAfterGreetingSilenceMillis() OptInt32 {
	return s.AfterGreetingSilenceMillis
}

// GetBetweenWordsSilenceMillis returns the value of BetweenWordsSilenceMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) GetBetweenWordsSilenceMillis() OptInt32 {
	return s.BetweenWordsSilenceMillis
}

// GetGreetingDurationMillis returns the value of GreetingDurationMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) GetGreetingDurationMillis() OptInt32 {
	return s.GreetingDurationMillis
}

// GetInitialSilenceMillis returns the value of InitialSilenceMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) GetInitialSilenceMillis() OptInt32 {
	return s.InitialSilenceMillis
}

// GetMaximumNumberOfWords returns the value of MaximumNumberOfWords.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) GetMaximumNumberOfWords() OptInt32 {
	return s.MaximumNumberOfWords
}

// GetMaximumWordLengthMillis returns the value of MaximumWordLengthMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) GetMaximumWordLengthMillis() OptInt32 {
	return s.MaximumWordLengthMillis
}

// GetSilenceThreshold returns the value of SilenceThreshold.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) GetSilenceThreshold() OptInt32 {
	return s.SilenceThreshold
}

// GetGreetingTotalAnalysisTimeMillis returns the value of GreetingTotalAnalysisTimeMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) GetGreetingTotalAnalysisTimeMillis() OptInt32 {
	return s.GreetingTotalAnalysisTimeMillis
}

// GetGreetingSilenceDurationMillis returns the value of GreetingSilenceDurationMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) GetGreetingSilenceDurationMillis() OptInt32 {
	return s.GreetingSilenceDurationMillis
}

// SetTotalAnalysisTimeMillis sets the value of TotalAnalysisTimeMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) SetTotalAnalysisTimeMillis(val OptInt32) {
	s.TotalAnalysisTimeMillis = val
}

// SetAfterGreetingSilenceMillis sets the value of AfterGreetingSilenceMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) SetAfterGreetingSilenceMillis(val OptInt32) {
	s.AfterGreetingSilenceMillis = val
}

// SetBetweenWordsSilenceMillis sets the value of BetweenWordsSilenceMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) SetBetweenWordsSilenceMillis(val OptInt32) {
	s.BetweenWordsSilenceMillis = val
}

// SetGreetingDurationMillis sets the value of GreetingDurationMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) SetGreetingDurationMillis(val OptInt32) {
	s.GreetingDurationMillis = val
}

// SetInitialSilenceMillis sets the value of InitialSilenceMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) SetInitialSilenceMillis(val OptInt32) {
	s.InitialSilenceMillis = val
}

// SetMaximumNumberOfWords sets the value of MaximumNumberOfWords.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) SetMaximumNumberOfWords(val OptInt32) {
	s.MaximumNumberOfWords = val
}

// SetMaximumWordLengthMillis sets the value of MaximumWordLengthMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) SetMaximumWordLengthMillis(val OptInt32) {
	s.MaximumWordLengthMillis = val
}

// SetSilenceThreshold sets the value of SilenceThreshold.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) SetSilenceThreshold(val OptInt32) {
	s.SilenceThreshold = val
}

// SetGreetingTotalAnalysisTimeMillis sets the value of GreetingTotalAnalysisTimeMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) SetGreetingTotalAnalysisTimeMillis(val OptInt32) {
	s.GreetingTotalAnalysisTimeMillis = val
}

// SetGreetingSilenceDurationMillis sets the value of GreetingSilenceDurationMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) SetGreetingSilenceDurationMillis(val OptInt32) {
	s.GreetingSilenceDurationMillis = val
}

// Defines whether media should be encrypted on the new call leg.
type TransferCallRequestMediaEncryption string

const (
	TransferCallRequestMediaEncryptionDisabled TransferCallRequestMediaEncryption = "disabled"
	TransferCallRequestMediaEncryptionSRTP     TransferCallRequestMediaEncryption = "SRTP"
)

// AllValues returns all TransferCallRequestMediaEncryption values.
func (TransferCallRequestMediaEncryption) AllValues() []TransferCallRequestMediaEncryption {
	return []TransferCallRequestMediaEncryption{
		TransferCallRequestMediaEncryptionDisabled,
		TransferCallRequestMediaEncryptionSRTP,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TransferCallRequestMediaEncryption) MarshalText() ([]byte, error) {
	switch s {
	case TransferCallRequestMediaEncryptionDisabled:
		return []byte(s), nil
	case TransferCallRequestMediaEncryptionSRTP:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TransferCallRequestMediaEncryption) UnmarshalText(data []byte) error {
	switch TransferCallRequestMediaEncryption(data) {
	case TransferCallRequestMediaEncryptionDisabled:
		*s = TransferCallRequestMediaEncryptionDisabled
		return nil
	case TransferCallRequestMediaEncryptionSRTP:
		*s = TransferCallRequestMediaEncryptionSRTP
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Defines SIP transport protocol to be used on the call.
type TransferCallRequestSipTransportProtocol string

const (
	TransferCallRequestSipTransportProtocolUDP TransferCallRequestSipTransportProtocol = "UDP"
	TransferCallRequestSipTransportProtocolTCP TransferCallRequestSipTransportProtocol = "TCP"
	TransferCallRequestSipTransportProtocolTLS TransferCallRequestSipTransportProtocol = "TLS"
)

// AllValues returns all TransferCallRequestSipTransportProtocol values.
func (TransferCallRequestSipTransportProtocol) AllValues() []TransferCallRequestSipTransportProtocol {
	return []TransferCallRequestSipTransportProtocol{
		TransferCallRequestSipTransportProtocolUDP,
		TransferCallRequestSipTransportProtocolTCP,
		TransferCallRequestSipTransportProtocolTLS,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TransferCallRequestSipTransportProtocol) MarshalText() ([]byte, error) {
	switch s {
	case TransferCallRequestSipTransportProtocolUDP:
		return []byte(s), nil
	case TransferCallRequestSipTransportProtocolTCP:
		return []byte(s), nil
	case TransferCallRequestSipTransportProtocolTLS:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TransferCallRequestSipTransportProtocol) UnmarshalText(data []byte) error {
	switch TransferCallRequestSipTransportProtocol(data) {
	case TransferCallRequestSipTransportProtocolUDP:
		*s = TransferCallRequestSipTransportProtocolUDP
		return nil
	case TransferCallRequestSipTransportProtocolTCP:
		*s = TransferCallRequestSipTransportProtocolTCP
		return nil
	case TransferCallRequestSipTransportProtocolTLS:
		*s = TransferCallRequestSipTransportProtocolTLS
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request type used for `webhook_url`.
type TransferCallRequestWebhookURLMethod string

const (
	TransferCallRequestWebhookURLMethodPOST TransferCallRequestWebhookURLMethod = "POST"
	TransferCallRequestWebhookURLMethodGET  TransferCallRequestWebhookURLMethod = "GET"
)

// AllValues returns all TransferCallRequestWebhookURLMethod values.
func (TransferCallRequestWebhookURLMethod) AllValues() []TransferCallRequestWebhookURLMethod {
	return []TransferCallRequestWebhookURLMethod{
		TransferCallRequestWebhookURLMethodPOST,
		TransferCallRequestWebhookURLMethodGET,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TransferCallRequestWebhookURLMethod) MarshalText() ([]byte, error) {
	switch s {
	case TransferCallRequestWebhookURLMethodPOST:
		return []byte(s), nil
	case TransferCallRequestWebhookURLMethodGET:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TransferCallRequestWebhookURLMethod) UnmarshalText(data []byte) error {
	switch TransferCallRequestWebhookURLMethod(data) {
	case TransferCallRequestWebhookURLMethodPOST:
		*s = TransferCallRequestWebhookURLMethodPOST
		return nil
	case TransferCallRequestWebhookURLMethodGET:
		*s = TransferCallRequestWebhookURLMethodGET
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TwimlRecordingChannels
type TwimlRecordingChannels int

const (
	TwimlRecordingChannels1 TwimlRecordingChannels = 1
	TwimlRecordingChannels2 TwimlRecordingChannels = 2
)

// AllValues returns all TwimlRecordingChannels values.
func (TwimlRecordingChannels) AllValues() []TwimlRecordingChannels {
	return []TwimlRecordingChannels{
		TwimlRecordingChannels1,
		TwimlRecordingChannels2,
	}
}

// Ref: #/components/responses/UnauthorizedResponse
type UnauthorizedResponse struct{}

func (*UnauthorizedResponse) createTexmlApplicationRes()         {}
func (*UnauthorizedResponse) deleteCallControlApplicationRes()   {}
func (*UnauthorizedResponse) deleteTexmlApplicationRes()         {}
func (*UnauthorizedResponse) findTexmlApplicationsRes()          {}
func (*UnauthorizedResponse) getTexmlApplicationRes()            {}
func (*UnauthorizedResponse) listCallControlApplicationsRes()    {}
func (*UnauthorizedResponse) retrieveCallControlApplicationRes() {}
func (*UnauthorizedResponse) updateCallControlApplicationRes()   {}
func (*UnauthorizedResponse) updateTexmlApplicationRes()         {}

type UnprocessableEntityError jx.Raw

type UnprocessableEntityErrorResponse struct {
	Errors []UnprocessableEntityError `json:"errors"`
}

// GetErrors returns the value of Errors.
func (s *UnprocessableEntityErrorResponse) GetErrors() []UnprocessableEntityError {
	return s.Errors
}

// SetErrors sets the value of Errors.
func (s *UnprocessableEntityErrorResponse) SetErrors(val []UnprocessableEntityError) {
	s.Errors = val
}

func (*UnprocessableEntityErrorResponse) createVerifiedNumberRes()   {}
func (*UnprocessableEntityErrorResponse) listVerifiedNumbersRes()    {}
func (*UnprocessableEntityErrorResponse) verifyVerificationCodeRes() {}

// UpdateBulkTelephonyCredentialUnprocessableEntity is response for UpdateBulkTelephonyCredential operation.
type UpdateBulkTelephonyCredentialUnprocessableEntity struct{}

func (*UpdateBulkTelephonyCredentialUnprocessableEntity) updateBulkTelephonyCredentialRes() {}

// UpdateCallControlApplicationNotFound is response for UpdateCallControlApplication operation.
type UpdateCallControlApplicationNotFound struct{}

func (*UpdateCallControlApplicationNotFound) updateCallControlApplicationRes() {}

// Ref: #/components/schemas/UpdateCallControlApplicationRequest
type UpdateCallControlApplicationRequest struct {
	// A user-assigned name to help manage the application.
	ApplicationName string `json:"application_name"`
	// The URL where webhooks related to this connection will be sent. Must include a scheme, such as
	// 'https'.
	WebhookEventURL string `json:"webhook_event_url"`
	// Specifies whether the connection can be used.
	Active             OptBool               `json:"active"`
	AnchorsiteOverride OptAnchorsiteOverride `json:"anchorsite_override"`
	// Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to
	// Telnyx will be accepted in all formats.
	DtmfType OptUpdateCallControlApplicationRequestDtmfType `json:"dtmf_type"`
	// Specifies whether calls to phone numbers associated with this connection should hangup after
	// timing out.
	FirstCommandTimeout OptBool `json:"first_command_timeout"`
	// Specifies how many seconds to wait before timing out a dial command.
	FirstCommandTimeoutSecs OptInt                            `json:"first_command_timeout_secs"`
	Inbound                 OptCallControlApplicationInbound  `json:"inbound"`
	Outbound                OptCallControlApplicationOutbound `json:"outbound"`
	// Determines which webhook format will be used, Telnyx API v1 or v2.
	WebhookAPIVersion OptUpdateCallControlApplicationRequestWebhookAPIVersion `json:"webhook_api_version"`
	// The failover URL where webhooks related to this connection will be sent if sending to the primary
	// URL fails. Must include a scheme, such as 'https'.
	WebhookEventFailoverURL OptNilString `json:"webhook_event_failover_url"`
	// Specifies how many seconds to wait before timing out a webhook.
	WebhookTimeoutSecs OptNilInt `json:"webhook_timeout_secs"`
}

// GetApplicationName returns the value of ApplicationName.
func (s *UpdateCallControlApplicationRequest) GetApplicationName() string {
	return s.ApplicationName
}

// GetWebhookEventURL returns the value of WebhookEventURL.
func (s *UpdateCallControlApplicationRequest) GetWebhookEventURL() string {
	return s.WebhookEventURL
}

// GetActive returns the value of Active.
func (s *UpdateCallControlApplicationRequest) GetActive() OptBool {
	return s.Active
}

// GetAnchorsiteOverride returns the value of AnchorsiteOverride.
func (s *UpdateCallControlApplicationRequest) GetAnchorsiteOverride() OptAnchorsiteOverride {
	return s.AnchorsiteOverride
}

// GetDtmfType returns the value of DtmfType.
func (s *UpdateCallControlApplicationRequest) GetDtmfType() OptUpdateCallControlApplicationRequestDtmfType {
	return s.DtmfType
}

// GetFirstCommandTimeout returns the value of FirstCommandTimeout.
func (s *UpdateCallControlApplicationRequest) GetFirstCommandTimeout() OptBool {
	return s.FirstCommandTimeout
}

// GetFirstCommandTimeoutSecs returns the value of FirstCommandTimeoutSecs.
func (s *UpdateCallControlApplicationRequest) GetFirstCommandTimeoutSecs() OptInt {
	return s.FirstCommandTimeoutSecs
}

// GetInbound returns the value of Inbound.
func (s *UpdateCallControlApplicationRequest) GetInbound() OptCallControlApplicationInbound {
	return s.Inbound
}

// GetOutbound returns the value of Outbound.
func (s *UpdateCallControlApplicationRequest) GetOutbound() OptCallControlApplicationOutbound {
	return s.Outbound
}

// GetWebhookAPIVersion returns the value of WebhookAPIVersion.
func (s *UpdateCallControlApplicationRequest) GetWebhookAPIVersion() OptUpdateCallControlApplicationRequestWebhookAPIVersion {
	return s.WebhookAPIVersion
}

// GetWebhookEventFailoverURL returns the value of WebhookEventFailoverURL.
func (s *UpdateCallControlApplicationRequest) GetWebhookEventFailoverURL() OptNilString {
	return s.WebhookEventFailoverURL
}

// GetWebhookTimeoutSecs returns the value of WebhookTimeoutSecs.
func (s *UpdateCallControlApplicationRequest) GetWebhookTimeoutSecs() OptNilInt {
	return s.WebhookTimeoutSecs
}

// SetApplicationName sets the value of ApplicationName.
func (s *UpdateCallControlApplicationRequest) SetApplicationName(val string) {
	s.ApplicationName = val
}

// SetWebhookEventURL sets the value of WebhookEventURL.
func (s *UpdateCallControlApplicationRequest) SetWebhookEventURL(val string) {
	s.WebhookEventURL = val
}

// SetActive sets the value of Active.
func (s *UpdateCallControlApplicationRequest) SetActive(val OptBool) {
	s.Active = val
}

// SetAnchorsiteOverride sets the value of AnchorsiteOverride.
func (s *UpdateCallControlApplicationRequest) SetAnchorsiteOverride(val OptAnchorsiteOverride) {
	s.AnchorsiteOverride = val
}

// SetDtmfType sets the value of DtmfType.
func (s *UpdateCallControlApplicationRequest) SetDtmfType(val OptUpdateCallControlApplicationRequestDtmfType) {
	s.DtmfType = val
}

// SetFirstCommandTimeout sets the value of FirstCommandTimeout.
func (s *UpdateCallControlApplicationRequest) SetFirstCommandTimeout(val OptBool) {
	s.FirstCommandTimeout = val
}

// SetFirstCommandTimeoutSecs sets the value of FirstCommandTimeoutSecs.
func (s *UpdateCallControlApplicationRequest) SetFirstCommandTimeoutSecs(val OptInt) {
	s.FirstCommandTimeoutSecs = val
}

// SetInbound sets the value of Inbound.
func (s *UpdateCallControlApplicationRequest) SetInbound(val OptCallControlApplicationInbound) {
	s.Inbound = val
}

// SetOutbound sets the value of Outbound.
func (s *UpdateCallControlApplicationRequest) SetOutbound(val OptCallControlApplicationOutbound) {
	s.Outbound = val
}

// SetWebhookAPIVersion sets the value of WebhookAPIVersion.
func (s *UpdateCallControlApplicationRequest) SetWebhookAPIVersion(val OptUpdateCallControlApplicationRequestWebhookAPIVersion) {
	s.WebhookAPIVersion = val
}

// SetWebhookEventFailoverURL sets the value of WebhookEventFailoverURL.
func (s *UpdateCallControlApplicationRequest) SetWebhookEventFailoverURL(val OptNilString) {
	s.WebhookEventFailoverURL = val
}

// SetWebhookTimeoutSecs sets the value of WebhookTimeoutSecs.
func (s *UpdateCallControlApplicationRequest) SetWebhookTimeoutSecs(val OptNilInt) {
	s.WebhookTimeoutSecs = val
}

// Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to
// Telnyx will be accepted in all formats.
type UpdateCallControlApplicationRequestDtmfType string

const (
	UpdateCallControlApplicationRequestDtmfTypeRFC2833 UpdateCallControlApplicationRequestDtmfType = "RFC 2833"
	UpdateCallControlApplicationRequestDtmfTypeInband  UpdateCallControlApplicationRequestDtmfType = "Inband"
	UpdateCallControlApplicationRequestDtmfTypeSIPINFO UpdateCallControlApplicationRequestDtmfType = "SIP INFO"
)

// AllValues returns all UpdateCallControlApplicationRequestDtmfType values.
func (UpdateCallControlApplicationRequestDtmfType) AllValues() []UpdateCallControlApplicationRequestDtmfType {
	return []UpdateCallControlApplicationRequestDtmfType{
		UpdateCallControlApplicationRequestDtmfTypeRFC2833,
		UpdateCallControlApplicationRequestDtmfTypeInband,
		UpdateCallControlApplicationRequestDtmfTypeSIPINFO,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateCallControlApplicationRequestDtmfType) MarshalText() ([]byte, error) {
	switch s {
	case UpdateCallControlApplicationRequestDtmfTypeRFC2833:
		return []byte(s), nil
	case UpdateCallControlApplicationRequestDtmfTypeInband:
		return []byte(s), nil
	case UpdateCallControlApplicationRequestDtmfTypeSIPINFO:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateCallControlApplicationRequestDtmfType) UnmarshalText(data []byte) error {
	switch UpdateCallControlApplicationRequestDtmfType(data) {
	case UpdateCallControlApplicationRequestDtmfTypeRFC2833:
		*s = UpdateCallControlApplicationRequestDtmfTypeRFC2833
		return nil
	case UpdateCallControlApplicationRequestDtmfTypeInband:
		*s = UpdateCallControlApplicationRequestDtmfTypeInband
		return nil
	case UpdateCallControlApplicationRequestDtmfTypeSIPINFO:
		*s = UpdateCallControlApplicationRequestDtmfTypeSIPINFO
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Determines which webhook format will be used, Telnyx API v1 or v2.
type UpdateCallControlApplicationRequestWebhookAPIVersion string

const (
	UpdateCallControlApplicationRequestWebhookAPIVersion1 UpdateCallControlApplicationRequestWebhookAPIVersion = "1"
	UpdateCallControlApplicationRequestWebhookAPIVersion2 UpdateCallControlApplicationRequestWebhookAPIVersion = "2"
)

// AllValues returns all UpdateCallControlApplicationRequestWebhookAPIVersion values.
func (UpdateCallControlApplicationRequestWebhookAPIVersion) AllValues() []UpdateCallControlApplicationRequestWebhookAPIVersion {
	return []UpdateCallControlApplicationRequestWebhookAPIVersion{
		UpdateCallControlApplicationRequestWebhookAPIVersion1,
		UpdateCallControlApplicationRequestWebhookAPIVersion2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateCallControlApplicationRequestWebhookAPIVersion) MarshalText() ([]byte, error) {
	switch s {
	case UpdateCallControlApplicationRequestWebhookAPIVersion1:
		return []byte(s), nil
	case UpdateCallControlApplicationRequestWebhookAPIVersion2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateCallControlApplicationRequestWebhookAPIVersion) UnmarshalText(data []byte) error {
	switch UpdateCallControlApplicationRequestWebhookAPIVersion(data) {
	case UpdateCallControlApplicationRequestWebhookAPIVersion1:
		*s = UpdateCallControlApplicationRequestWebhookAPIVersion1
		return nil
	case UpdateCallControlApplicationRequestWebhookAPIVersion2:
		*s = UpdateCallControlApplicationRequestWebhookAPIVersion2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// UpdateCallControlApplicationUnprocessableEntity is response for UpdateCallControlApplication operation.
type UpdateCallControlApplicationUnprocessableEntity struct{}

func (*UpdateCallControlApplicationUnprocessableEntity) updateCallControlApplicationRes() {}

// Ref: #/components/schemas/UpdateCallRequest
type UpdateCallRequest struct {
	// The value to set the call status to. Setting the status to completed ends the call.
	Status OptString `json:"Status"`
	// The URL where TeXML will make a request to retrieve a new set of TeXML instructions to continue
	// the call flow.
	URL OptString `json:"Url"`
	// HTTP request type used for `Url`.
	Method OptUpdateCallRequestMethod `json:"Method"`
	// A failover URL for which Telnyx will retrieve the TeXML call instructions if the Url is not
	// responding.
	FallbackUrl OptString `json:"FallbackUrl"`
	// HTTP request type used for `FallbackUrl`.
	FallbackMethod OptUpdateCallRequestFallbackMethod `json:"FallbackMethod"`
	// URL destination for Telnyx to send status callback events to for the call.
	StatusCallback OptString `json:"StatusCallback"`
	// HTTP request type used for `StatusCallback`.
	StatusCallbackMethod OptUpdateCallRequestStatusCallbackMethod `json:"StatusCallbackMethod"`
	// TeXML to replace the current one with.
	Texml OptString `json:"Texml"`
}

// GetStatus returns the value of Status.
func (s *UpdateCallRequest) GetStatus() OptString {
	return s.Status
}

// GetURL returns the value of URL.
func (s *UpdateCallRequest) GetURL() OptString {
	return s.URL
}

// GetMethod returns the value of Method.
func (s *UpdateCallRequest) GetMethod() OptUpdateCallRequestMethod {
	return s.Method
}

// GetFallbackUrl returns the value of FallbackUrl.
func (s *UpdateCallRequest) GetFallbackUrl() OptString {
	return s.FallbackUrl
}

// GetFallbackMethod returns the value of FallbackMethod.
func (s *UpdateCallRequest) GetFallbackMethod() OptUpdateCallRequestFallbackMethod {
	return s.FallbackMethod
}

// GetStatusCallback returns the value of StatusCallback.
func (s *UpdateCallRequest) GetStatusCallback() OptString {
	return s.StatusCallback
}

// GetStatusCallbackMethod returns the value of StatusCallbackMethod.
func (s *UpdateCallRequest) GetStatusCallbackMethod() OptUpdateCallRequestStatusCallbackMethod {
	return s.StatusCallbackMethod
}

// GetTexml returns the value of Texml.
func (s *UpdateCallRequest) GetTexml() OptString {
	return s.Texml
}

// SetStatus sets the value of Status.
func (s *UpdateCallRequest) SetStatus(val OptString) {
	s.Status = val
}

// SetURL sets the value of URL.
func (s *UpdateCallRequest) SetURL(val OptString) {
	s.URL = val
}

// SetMethod sets the value of Method.
func (s *UpdateCallRequest) SetMethod(val OptUpdateCallRequestMethod) {
	s.Method = val
}

// SetFallbackUrl sets the value of FallbackUrl.
func (s *UpdateCallRequest) SetFallbackUrl(val OptString) {
	s.FallbackUrl = val
}

// SetFallbackMethod sets the value of FallbackMethod.
func (s *UpdateCallRequest) SetFallbackMethod(val OptUpdateCallRequestFallbackMethod) {
	s.FallbackMethod = val
}

// SetStatusCallback sets the value of StatusCallback.
func (s *UpdateCallRequest) SetStatusCallback(val OptString) {
	s.StatusCallback = val
}

// SetStatusCallbackMethod sets the value of StatusCallbackMethod.
func (s *UpdateCallRequest) SetStatusCallbackMethod(val OptUpdateCallRequestStatusCallbackMethod) {
	s.StatusCallbackMethod = val
}

// SetTexml sets the value of Texml.
func (s *UpdateCallRequest) SetTexml(val OptString) {
	s.Texml = val
}

// HTTP request type used for `FallbackUrl`.
type UpdateCallRequestFallbackMethod string

const (
	UpdateCallRequestFallbackMethodGET  UpdateCallRequestFallbackMethod = "GET"
	UpdateCallRequestFallbackMethodPOST UpdateCallRequestFallbackMethod = "POST"
)

// AllValues returns all UpdateCallRequestFallbackMethod values.
func (UpdateCallRequestFallbackMethod) AllValues() []UpdateCallRequestFallbackMethod {
	return []UpdateCallRequestFallbackMethod{
		UpdateCallRequestFallbackMethodGET,
		UpdateCallRequestFallbackMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateCallRequestFallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case UpdateCallRequestFallbackMethodGET:
		return []byte(s), nil
	case UpdateCallRequestFallbackMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateCallRequestFallbackMethod) UnmarshalText(data []byte) error {
	switch UpdateCallRequestFallbackMethod(data) {
	case UpdateCallRequestFallbackMethodGET:
		*s = UpdateCallRequestFallbackMethodGET
		return nil
	case UpdateCallRequestFallbackMethodPOST:
		*s = UpdateCallRequestFallbackMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request type used for `Url`.
type UpdateCallRequestMethod string

const (
	UpdateCallRequestMethodGET  UpdateCallRequestMethod = "GET"
	UpdateCallRequestMethodPOST UpdateCallRequestMethod = "POST"
)

// AllValues returns all UpdateCallRequestMethod values.
func (UpdateCallRequestMethod) AllValues() []UpdateCallRequestMethod {
	return []UpdateCallRequestMethod{
		UpdateCallRequestMethodGET,
		UpdateCallRequestMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateCallRequestMethod) MarshalText() ([]byte, error) {
	switch s {
	case UpdateCallRequestMethodGET:
		return []byte(s), nil
	case UpdateCallRequestMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateCallRequestMethod) UnmarshalText(data []byte) error {
	switch UpdateCallRequestMethod(data) {
	case UpdateCallRequestMethodGET:
		*s = UpdateCallRequestMethodGET
		return nil
	case UpdateCallRequestMethodPOST:
		*s = UpdateCallRequestMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request type used for `StatusCallback`.
type UpdateCallRequestStatusCallbackMethod string

const (
	UpdateCallRequestStatusCallbackMethodGET  UpdateCallRequestStatusCallbackMethod = "GET"
	UpdateCallRequestStatusCallbackMethodPOST UpdateCallRequestStatusCallbackMethod = "POST"
)

// AllValues returns all UpdateCallRequestStatusCallbackMethod values.
func (UpdateCallRequestStatusCallbackMethod) AllValues() []UpdateCallRequestStatusCallbackMethod {
	return []UpdateCallRequestStatusCallbackMethod{
		UpdateCallRequestStatusCallbackMethodGET,
		UpdateCallRequestStatusCallbackMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateCallRequestStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case UpdateCallRequestStatusCallbackMethodGET:
		return []byte(s), nil
	case UpdateCallRequestStatusCallbackMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateCallRequestStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch UpdateCallRequestStatusCallbackMethod(data) {
	case UpdateCallRequestStatusCallbackMethodGET:
		*s = UpdateCallRequestStatusCallbackMethodGET
		return nil
	case UpdateCallRequestStatusCallbackMethodPOST:
		*s = UpdateCallRequestStatusCallbackMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/UpdateCommandResult
type UpdateCommandResult struct {
	Sid    OptString `json:"sid"`
	Status OptString `json:"status"`
}

// GetSid returns the value of Sid.
func (s *UpdateCommandResult) GetSid() OptString {
	return s.Sid
}

// GetStatus returns the value of Status.
func (s *UpdateCommandResult) GetStatus() OptString {
	return s.Status
}

// SetSid sets the value of Sid.
func (s *UpdateCommandResult) SetSid(val OptString) {
	s.Sid = val
}

// SetStatus sets the value of Status.
func (s *UpdateCommandResult) SetStatus(val OptString) {
	s.Status = val
}

// Ref: #/components/schemas/UpdateConferenceParticipantRequest
type UpdateConferenceParticipantRequest struct {
	// Whether the participant should be muted.
	Muted OptBool `json:"Muted"`
	// Whether the participant should be on hold.
	Hold OptBool `json:"Hold"`
	// The URL to be called using the `HoldMethod` for music that plays when the participant is on hold.
	// The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`,
	// `<Pause>`, or `<Redirect>` verbs.
	HoldUrl OptString `json:"HoldUrl"`
	// The HTTP method to use when calling the `HoldUrl`.
	HoldMethod OptUpdateConferenceParticipantRequestHoldMethod `json:"HoldMethod"`
	// The URL to call to announce something to the participant. The URL may return an MP3 fileo a WAV
	// file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
	AnnounceUrl OptString `json:"AnnounceUrl"`
	// The HTTP method used to call the `AnnounceUrl`. Defaults to `POST`.
	AnnounceMethod OptUpdateConferenceParticipantRequestAnnounceMethod `json:"AnnounceMethod"`
	// The URL to call for an audio file to play while the participant is waiting for the conference to
	// start.
	WaitUrl OptString `json:"WaitUrl"`
	// Whether to play a notification beep to the conference when the participant exits.
	BeepOnExit OptBool `json:"BeepOnExit"`
	// Whether to end the conference when the participant leaves.
	EndConferenceOnExit OptBool `json:"EndConferenceOnExit"`
	// Whether the participant is coaching another call. When `true`, `CallSidToCoach` has to be given.
	Coaching OptBool `json:"Coaching"`
	// The SID of the participant who is being coached. The participant being coached is the only
	// participant who can hear the participant who is coaching.
	CallSidToCoach OptString `json:"CallSidToCoach"`
}

// GetMuted returns the value of Muted.
func (s *UpdateConferenceParticipantRequest) GetMuted() OptBool {
	return s.Muted
}

// GetHold returns the value of Hold.
func (s *UpdateConferenceParticipantRequest) GetHold() OptBool {
	return s.Hold
}

// GetHoldUrl returns the value of HoldUrl.
func (s *UpdateConferenceParticipantRequest) GetHoldUrl() OptString {
	return s.HoldUrl
}

// GetHoldMethod returns the value of HoldMethod.
func (s *UpdateConferenceParticipantRequest) GetHoldMethod() OptUpdateConferenceParticipantRequestHoldMethod {
	return s.HoldMethod
}

// GetAnnounceUrl returns the value of AnnounceUrl.
func (s *UpdateConferenceParticipantRequest) GetAnnounceUrl() OptString {
	return s.AnnounceUrl
}

// GetAnnounceMethod returns the value of AnnounceMethod.
func (s *UpdateConferenceParticipantRequest) GetAnnounceMethod() OptUpdateConferenceParticipantRequestAnnounceMethod {
	return s.AnnounceMethod
}

// GetWaitUrl returns the value of WaitUrl.
func (s *UpdateConferenceParticipantRequest) GetWaitUrl() OptString {
	return s.WaitUrl
}

// GetBeepOnExit returns the value of BeepOnExit.
func (s *UpdateConferenceParticipantRequest) GetBeepOnExit() OptBool {
	return s.BeepOnExit
}

// GetEndConferenceOnExit returns the value of EndConferenceOnExit.
func (s *UpdateConferenceParticipantRequest) GetEndConferenceOnExit() OptBool {
	return s.EndConferenceOnExit
}

// GetCoaching returns the value of Coaching.
func (s *UpdateConferenceParticipantRequest) GetCoaching() OptBool {
	return s.Coaching
}

// GetCallSidToCoach returns the value of CallSidToCoach.
func (s *UpdateConferenceParticipantRequest) GetCallSidToCoach() OptString {
	return s.CallSidToCoach
}

// SetMuted sets the value of Muted.
func (s *UpdateConferenceParticipantRequest) SetMuted(val OptBool) {
	s.Muted = val
}

// SetHold sets the value of Hold.
func (s *UpdateConferenceParticipantRequest) SetHold(val OptBool) {
	s.Hold = val
}

// SetHoldUrl sets the value of HoldUrl.
func (s *UpdateConferenceParticipantRequest) SetHoldUrl(val OptString) {
	s.HoldUrl = val
}

// SetHoldMethod sets the value of HoldMethod.
func (s *UpdateConferenceParticipantRequest) SetHoldMethod(val OptUpdateConferenceParticipantRequestHoldMethod) {
	s.HoldMethod = val
}

// SetAnnounceUrl sets the value of AnnounceUrl.
func (s *UpdateConferenceParticipantRequest) SetAnnounceUrl(val OptString) {
	s.AnnounceUrl = val
}

// SetAnnounceMethod sets the value of AnnounceMethod.
func (s *UpdateConferenceParticipantRequest) SetAnnounceMethod(val OptUpdateConferenceParticipantRequestAnnounceMethod) {
	s.AnnounceMethod = val
}

// SetWaitUrl sets the value of WaitUrl.
func (s *UpdateConferenceParticipantRequest) SetWaitUrl(val OptString) {
	s.WaitUrl = val
}

// SetBeepOnExit sets the value of BeepOnExit.
func (s *UpdateConferenceParticipantRequest) SetBeepOnExit(val OptBool) {
	s.BeepOnExit = val
}

// SetEndConferenceOnExit sets the value of EndConferenceOnExit.
func (s *UpdateConferenceParticipantRequest) SetEndConferenceOnExit(val OptBool) {
	s.EndConferenceOnExit = val
}

// SetCoaching sets the value of Coaching.
func (s *UpdateConferenceParticipantRequest) SetCoaching(val OptBool) {
	s.Coaching = val
}

// SetCallSidToCoach sets the value of CallSidToCoach.
func (s *UpdateConferenceParticipantRequest) SetCallSidToCoach(val OptString) {
	s.CallSidToCoach = val
}

// The HTTP method used to call the `AnnounceUrl`. Defaults to `POST`.
type UpdateConferenceParticipantRequestAnnounceMethod string

const (
	UpdateConferenceParticipantRequestAnnounceMethodGET  UpdateConferenceParticipantRequestAnnounceMethod = "GET"
	UpdateConferenceParticipantRequestAnnounceMethodPOST UpdateConferenceParticipantRequestAnnounceMethod = "POST"
)

// AllValues returns all UpdateConferenceParticipantRequestAnnounceMethod values.
func (UpdateConferenceParticipantRequestAnnounceMethod) AllValues() []UpdateConferenceParticipantRequestAnnounceMethod {
	return []UpdateConferenceParticipantRequestAnnounceMethod{
		UpdateConferenceParticipantRequestAnnounceMethodGET,
		UpdateConferenceParticipantRequestAnnounceMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateConferenceParticipantRequestAnnounceMethod) MarshalText() ([]byte, error) {
	switch s {
	case UpdateConferenceParticipantRequestAnnounceMethodGET:
		return []byte(s), nil
	case UpdateConferenceParticipantRequestAnnounceMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateConferenceParticipantRequestAnnounceMethod) UnmarshalText(data []byte) error {
	switch UpdateConferenceParticipantRequestAnnounceMethod(data) {
	case UpdateConferenceParticipantRequestAnnounceMethodGET:
		*s = UpdateConferenceParticipantRequestAnnounceMethodGET
		return nil
	case UpdateConferenceParticipantRequestAnnounceMethodPOST:
		*s = UpdateConferenceParticipantRequestAnnounceMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The HTTP method to use when calling the `HoldUrl`.
type UpdateConferenceParticipantRequestHoldMethod string

const (
	UpdateConferenceParticipantRequestHoldMethodGET  UpdateConferenceParticipantRequestHoldMethod = "GET"
	UpdateConferenceParticipantRequestHoldMethodPOST UpdateConferenceParticipantRequestHoldMethod = "POST"
)

// AllValues returns all UpdateConferenceParticipantRequestHoldMethod values.
func (UpdateConferenceParticipantRequestHoldMethod) AllValues() []UpdateConferenceParticipantRequestHoldMethod {
	return []UpdateConferenceParticipantRequestHoldMethod{
		UpdateConferenceParticipantRequestHoldMethodGET,
		UpdateConferenceParticipantRequestHoldMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateConferenceParticipantRequestHoldMethod) MarshalText() ([]byte, error) {
	switch s {
	case UpdateConferenceParticipantRequestHoldMethodGET:
		return []byte(s), nil
	case UpdateConferenceParticipantRequestHoldMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateConferenceParticipantRequestHoldMethod) UnmarshalText(data []byte) error {
	switch UpdateConferenceParticipantRequestHoldMethod(data) {
	case UpdateConferenceParticipantRequestHoldMethodGET:
		*s = UpdateConferenceParticipantRequestHoldMethodGET
		return nil
	case UpdateConferenceParticipantRequestHoldMethodPOST:
		*s = UpdateConferenceParticipantRequestHoldMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/UpdateConferenceRequest
type UpdateConferenceRequest struct {
	// The new status of the resource. Specifying `completed` will end the conference and hang up all
	// participants.
	Status OptString `json:"Status"`
	// The URL we should call to announce something into the conference. The URL may return an MP3 file,
	// a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
	AnnounceUrl OptString `json:"AnnounceUrl"`
	// The HTTP method used to call the `AnnounceUrl`. Defaults to `POST`.
	AnnounceMethod OptUpdateConferenceRequestAnnounceMethod `json:"AnnounceMethod"`
}

// GetStatus returns the value of Status.
func (s *UpdateConferenceRequest) GetStatus() OptString {
	return s.Status
}

// GetAnnounceUrl returns the value of AnnounceUrl.
func (s *UpdateConferenceRequest) GetAnnounceUrl() OptString {
	return s.AnnounceUrl
}

// GetAnnounceMethod returns the value of AnnounceMethod.
func (s *UpdateConferenceRequest) GetAnnounceMethod() OptUpdateConferenceRequestAnnounceMethod {
	return s.AnnounceMethod
}

// SetStatus sets the value of Status.
func (s *UpdateConferenceRequest) SetStatus(val OptString) {
	s.Status = val
}

// SetAnnounceUrl sets the value of AnnounceUrl.
func (s *UpdateConferenceRequest) SetAnnounceUrl(val OptString) {
	s.AnnounceUrl = val
}

// SetAnnounceMethod sets the value of AnnounceMethod.
func (s *UpdateConferenceRequest) SetAnnounceMethod(val OptUpdateConferenceRequestAnnounceMethod) {
	s.AnnounceMethod = val
}

// The HTTP method used to call the `AnnounceUrl`. Defaults to `POST`.
type UpdateConferenceRequestAnnounceMethod string

const (
	UpdateConferenceRequestAnnounceMethodGET  UpdateConferenceRequestAnnounceMethod = "GET"
	UpdateConferenceRequestAnnounceMethodPOST UpdateConferenceRequestAnnounceMethod = "POST"
)

// AllValues returns all UpdateConferenceRequestAnnounceMethod values.
func (UpdateConferenceRequestAnnounceMethod) AllValues() []UpdateConferenceRequestAnnounceMethod {
	return []UpdateConferenceRequestAnnounceMethod{
		UpdateConferenceRequestAnnounceMethodGET,
		UpdateConferenceRequestAnnounceMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateConferenceRequestAnnounceMethod) MarshalText() ([]byte, error) {
	switch s {
	case UpdateConferenceRequestAnnounceMethodGET:
		return []byte(s), nil
	case UpdateConferenceRequestAnnounceMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateConferenceRequestAnnounceMethod) UnmarshalText(data []byte) error {
	switch UpdateConferenceRequestAnnounceMethod(data) {
	case UpdateConferenceRequestAnnounceMethodGET:
		*s = UpdateConferenceRequestAnnounceMethodGET
		return nil
	case UpdateConferenceRequestAnnounceMethodPOST:
		*s = UpdateConferenceRequestAnnounceMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// UpdateProfileOK is response for UpdateProfile operation.
type UpdateProfileOK struct{}

func (*UpdateProfileOK) updateProfileRes() {}

type UpdateTeXMLCallResponse struct {
	Data OptUpdateCommandResult `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateTeXMLCallResponse) GetData() OptUpdateCommandResult {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateTeXMLCallResponse) SetData(val OptUpdateCommandResult) {
	s.Data = val
}

// UpdateTelephonyCredentialNotFound is response for UpdateTelephonyCredential operation.
type UpdateTelephonyCredentialNotFound struct{}

func (*UpdateTelephonyCredentialNotFound) updateTelephonyCredentialRes() {}

// UpdateTelephonyCredentialUnauthorized is response for UpdateTelephonyCredential operation.
type UpdateTelephonyCredentialUnauthorized struct{}

func (*UpdateTelephonyCredentialUnauthorized) updateTelephonyCredentialRes() {}

// UpdateTelephonyCredentialUnprocessableEntity is response for UpdateTelephonyCredential operation.
type UpdateTelephonyCredentialUnprocessableEntity struct{}

func (*UpdateTelephonyCredentialUnprocessableEntity) updateTelephonyCredentialRes() {}

type UpdateTexmlApplicationBadRequest ErrorResponse

func (*UpdateTexmlApplicationBadRequest) updateTexmlApplicationRes() {}

type UpdateTexmlApplicationNotFound ErrorResponse

func (*UpdateTexmlApplicationNotFound) updateTexmlApplicationRes() {}

// Ref: #/components/schemas/UpdateTexmlApplicationRequest
type UpdateTexmlApplicationRequest struct {
	FriendlyName            ApplicationName            `json:"friendly_name"`
	Active                  OptConnectionActive        `json:"active"`
	AnchorsiteOverride      OptAnchorsiteOverride      `json:"anchorsite_override"`
	DtmfType                OptDtmfType                `json:"dtmf_type"`
	FirstCommandTimeout     OptFirstCommandTimeout     `json:"first_command_timeout"`
	FirstCommandTimeoutSecs OptFirstCommandTimeoutSecs `json:"first_command_timeout_secs"`
	// URL to which Telnyx will deliver your XML Translator webhooks.
	VoiceURL string `json:"voice_url"`
	// URL to which Telnyx will deliver your XML Translator webhooks if we get an error response from
	// your voice_url.
	VoiceFallbackURL OptString `json:"voice_fallback_url"`
	// HTTP request method Telnyx will use to interact with your XML Translator webhooks. Either 'get' or
	// 'post'.
	VoiceMethod OptUpdateTexmlApplicationRequestVoiceMethod `json:"voice_method"`
	// URL for Telnyx to send requests to containing information about call progress events.
	StatusCallback OptString `json:"status_callback"`
	// HTTP request method Telnyx should use when requesting the status_callback URL.
	StatusCallbackMethod OptUpdateTexmlApplicationRequestStatusCallbackMethod `json:"status_callback_method"`
	Inbound              OptUpdateTexmlApplicationRequestInbound              `json:"inbound"`
	Outbound             OptUpdateTexmlApplicationRequestOutbound             `json:"outbound"`
}

// GetFriendlyName returns the value of FriendlyName.
func (s *UpdateTexmlApplicationRequest) GetFriendlyName() ApplicationName {
	return s.FriendlyName
}

// GetActive returns the value of Active.
func (s *UpdateTexmlApplicationRequest) GetActive() OptConnectionActive {
	return s.Active
}

// GetAnchorsiteOverride returns the value of AnchorsiteOverride.
func (s *UpdateTexmlApplicationRequest) GetAnchorsiteOverride() OptAnchorsiteOverride {
	return s.AnchorsiteOverride
}

// GetDtmfType returns the value of DtmfType.
func (s *UpdateTexmlApplicationRequest) GetDtmfType() OptDtmfType {
	return s.DtmfType
}

// GetFirstCommandTimeout returns the value of FirstCommandTimeout.
func (s *UpdateTexmlApplicationRequest) GetFirstCommandTimeout() OptFirstCommandTimeout {
	return s.FirstCommandTimeout
}

// GetFirstCommandTimeoutSecs returns the value of FirstCommandTimeoutSecs.
func (s *UpdateTexmlApplicationRequest) GetFirstCommandTimeoutSecs() OptFirstCommandTimeoutSecs {
	return s.FirstCommandTimeoutSecs
}

// GetVoiceURL returns the value of VoiceURL.
func (s *UpdateTexmlApplicationRequest) GetVoiceURL() string {
	return s.VoiceURL
}

// GetVoiceFallbackURL returns the value of VoiceFallbackURL.
func (s *UpdateTexmlApplicationRequest) GetVoiceFallbackURL() OptString {
	return s.VoiceFallbackURL
}

// GetVoiceMethod returns the value of VoiceMethod.
func (s *UpdateTexmlApplicationRequest) GetVoiceMethod() OptUpdateTexmlApplicationRequestVoiceMethod {
	return s.VoiceMethod
}

// GetStatusCallback returns the value of StatusCallback.
func (s *UpdateTexmlApplicationRequest) GetStatusCallback() OptString {
	return s.StatusCallback
}

// GetStatusCallbackMethod returns the value of StatusCallbackMethod.
func (s *UpdateTexmlApplicationRequest) GetStatusCallbackMethod() OptUpdateTexmlApplicationRequestStatusCallbackMethod {
	return s.StatusCallbackMethod
}

// GetInbound returns the value of Inbound.
func (s *UpdateTexmlApplicationRequest) GetInbound() OptUpdateTexmlApplicationRequestInbound {
	return s.Inbound
}

// GetOutbound returns the value of Outbound.
func (s *UpdateTexmlApplicationRequest) GetOutbound() OptUpdateTexmlApplicationRequestOutbound {
	return s.Outbound
}

// SetFriendlyName sets the value of FriendlyName.
func (s *UpdateTexmlApplicationRequest) SetFriendlyName(val ApplicationName) {
	s.FriendlyName = val
}

// SetActive sets the value of Active.
func (s *UpdateTexmlApplicationRequest) SetActive(val OptConnectionActive) {
	s.Active = val
}

// SetAnchorsiteOverride sets the value of AnchorsiteOverride.
func (s *UpdateTexmlApplicationRequest) SetAnchorsiteOverride(val OptAnchorsiteOverride) {
	s.AnchorsiteOverride = val
}

// SetDtmfType sets the value of DtmfType.
func (s *UpdateTexmlApplicationRequest) SetDtmfType(val OptDtmfType) {
	s.DtmfType = val
}

// SetFirstCommandTimeout sets the value of FirstCommandTimeout.
func (s *UpdateTexmlApplicationRequest) SetFirstCommandTimeout(val OptFirstCommandTimeout) {
	s.FirstCommandTimeout = val
}

// SetFirstCommandTimeoutSecs sets the value of FirstCommandTimeoutSecs.
func (s *UpdateTexmlApplicationRequest) SetFirstCommandTimeoutSecs(val OptFirstCommandTimeoutSecs) {
	s.FirstCommandTimeoutSecs = val
}

// SetVoiceURL sets the value of VoiceURL.
func (s *UpdateTexmlApplicationRequest) SetVoiceURL(val string) {
	s.VoiceURL = val
}

// SetVoiceFallbackURL sets the value of VoiceFallbackURL.
func (s *UpdateTexmlApplicationRequest) SetVoiceFallbackURL(val OptString) {
	s.VoiceFallbackURL = val
}

// SetVoiceMethod sets the value of VoiceMethod.
func (s *UpdateTexmlApplicationRequest) SetVoiceMethod(val OptUpdateTexmlApplicationRequestVoiceMethod) {
	s.VoiceMethod = val
}

// SetStatusCallback sets the value of StatusCallback.
func (s *UpdateTexmlApplicationRequest) SetStatusCallback(val OptString) {
	s.StatusCallback = val
}

// SetStatusCallbackMethod sets the value of StatusCallbackMethod.
func (s *UpdateTexmlApplicationRequest) SetStatusCallbackMethod(val OptUpdateTexmlApplicationRequestStatusCallbackMethod) {
	s.StatusCallbackMethod = val
}

// SetInbound sets the value of Inbound.
func (s *UpdateTexmlApplicationRequest) SetInbound(val OptUpdateTexmlApplicationRequestInbound) {
	s.Inbound = val
}

// SetOutbound sets the value of Outbound.
func (s *UpdateTexmlApplicationRequest) SetOutbound(val OptUpdateTexmlApplicationRequestOutbound) {
	s.Outbound = val
}

type UpdateTexmlApplicationRequestInbound struct {
	// When set, this will limit the total number of inbound calls to phone numbers associated with this
	// connection.
	ChannelLimit OptInt `json:"channel_limit"`
	// When enabled Telnyx will include Shaken/Stir data in the Webhook for new inbound calls.
	ShakenStirEnabled OptBool `json:"shaken_stir_enabled"`
	// Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a
	// phone number is used, from a SIP endpoint. Example: the subdomain "example.sip.telnyx.com" can be
	// called from any SIP endpoint by using the SIP URI "sip:@example.sip.telnyx.com" where the user
	// part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain
	// calls.
	SipSubdomain OptString `json:"sip_subdomain"`
	// This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public
	// Internet) or "Only my connections" (any connection assigned to the same Telnyx user).
	SipSubdomainReceiveSettings OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings `json:"sip_subdomain_receive_settings"`
}

// GetChannelLimit returns the value of ChannelLimit.
func (s *UpdateTexmlApplicationRequestInbound) GetChannelLimit() OptInt {
	return s.ChannelLimit
}

// GetShakenStirEnabled returns the value of ShakenStirEnabled.
func (s *UpdateTexmlApplicationRequestInbound) GetShakenStirEnabled() OptBool {
	return s.ShakenStirEnabled
}

// GetSipSubdomain returns the value of SipSubdomain.
func (s *UpdateTexmlApplicationRequestInbound) GetSipSubdomain() OptString {
	return s.SipSubdomain
}

// GetSipSubdomainReceiveSettings returns the value of SipSubdomainReceiveSettings.
func (s *UpdateTexmlApplicationRequestInbound) GetSipSubdomainReceiveSettings() OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings {
	return s.SipSubdomainReceiveSettings
}

// SetChannelLimit sets the value of ChannelLimit.
func (s *UpdateTexmlApplicationRequestInbound) SetChannelLimit(val OptInt) {
	s.ChannelLimit = val
}

// SetShakenStirEnabled sets the value of ShakenStirEnabled.
func (s *UpdateTexmlApplicationRequestInbound) SetShakenStirEnabled(val OptBool) {
	s.ShakenStirEnabled = val
}

// SetSipSubdomain sets the value of SipSubdomain.
func (s *UpdateTexmlApplicationRequestInbound) SetSipSubdomain(val OptString) {
	s.SipSubdomain = val
}

// SetSipSubdomainReceiveSettings sets the value of SipSubdomainReceiveSettings.
func (s *UpdateTexmlApplicationRequestInbound) SetSipSubdomainReceiveSettings(val OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) {
	s.SipSubdomainReceiveSettings = val
}

// This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public
// Internet) or "Only my connections" (any connection assigned to the same Telnyx user).
type UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings string

const (
	UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsOnlyMyConnections UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings = "only_my_connections"
	UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsFromAnyone        UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings = "from_anyone"
)

// AllValues returns all UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings values.
func (UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) AllValues() []UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings {
	return []UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings{
		UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsOnlyMyConnections,
		UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsFromAnyone,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) MarshalText() ([]byte, error) {
	switch s {
	case UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsOnlyMyConnections:
		return []byte(s), nil
	case UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsFromAnyone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) UnmarshalText(data []byte) error {
	switch UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings(data) {
	case UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsOnlyMyConnections:
		*s = UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsOnlyMyConnections
		return nil
	case UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsFromAnyone:
		*s = UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsFromAnyone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateTexmlApplicationRequestOutbound struct {
	// When set, this will limit the total number of outbound calls to phone numbers associated with this
	// connection.
	ChannelLimit           OptInt                    `json:"channel_limit"`
	OutboundVoiceProfileID OptOutboundVoiceProfileId `json:"outbound_voice_profile_id"`
}

// GetChannelLimit returns the value of ChannelLimit.
func (s *UpdateTexmlApplicationRequestOutbound) GetChannelLimit() OptInt {
	return s.ChannelLimit
}

// GetOutboundVoiceProfileID returns the value of OutboundVoiceProfileID.
func (s *UpdateTexmlApplicationRequestOutbound) GetOutboundVoiceProfileID() OptOutboundVoiceProfileId {
	return s.OutboundVoiceProfileID
}

// SetChannelLimit sets the value of ChannelLimit.
func (s *UpdateTexmlApplicationRequestOutbound) SetChannelLimit(val OptInt) {
	s.ChannelLimit = val
}

// SetOutboundVoiceProfileID sets the value of OutboundVoiceProfileID.
func (s *UpdateTexmlApplicationRequestOutbound) SetOutboundVoiceProfileID(val OptOutboundVoiceProfileId) {
	s.OutboundVoiceProfileID = val
}

// HTTP request method Telnyx should use when requesting the status_callback URL.
type UpdateTexmlApplicationRequestStatusCallbackMethod string

const (
	UpdateTexmlApplicationRequestStatusCallbackMethodGet  UpdateTexmlApplicationRequestStatusCallbackMethod = "get"
	UpdateTexmlApplicationRequestStatusCallbackMethodPost UpdateTexmlApplicationRequestStatusCallbackMethod = "post"
)

// AllValues returns all UpdateTexmlApplicationRequestStatusCallbackMethod values.
func (UpdateTexmlApplicationRequestStatusCallbackMethod) AllValues() []UpdateTexmlApplicationRequestStatusCallbackMethod {
	return []UpdateTexmlApplicationRequestStatusCallbackMethod{
		UpdateTexmlApplicationRequestStatusCallbackMethodGet,
		UpdateTexmlApplicationRequestStatusCallbackMethodPost,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateTexmlApplicationRequestStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case UpdateTexmlApplicationRequestStatusCallbackMethodGet:
		return []byte(s), nil
	case UpdateTexmlApplicationRequestStatusCallbackMethodPost:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateTexmlApplicationRequestStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch UpdateTexmlApplicationRequestStatusCallbackMethod(data) {
	case UpdateTexmlApplicationRequestStatusCallbackMethodGet:
		*s = UpdateTexmlApplicationRequestStatusCallbackMethodGet
		return nil
	case UpdateTexmlApplicationRequestStatusCallbackMethodPost:
		*s = UpdateTexmlApplicationRequestStatusCallbackMethodPost
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request method Telnyx will use to interact with your XML Translator webhooks. Either 'get' or
// 'post'.
type UpdateTexmlApplicationRequestVoiceMethod string

const (
	UpdateTexmlApplicationRequestVoiceMethodGet  UpdateTexmlApplicationRequestVoiceMethod = "get"
	UpdateTexmlApplicationRequestVoiceMethodPost UpdateTexmlApplicationRequestVoiceMethod = "post"
)

// AllValues returns all UpdateTexmlApplicationRequestVoiceMethod values.
func (UpdateTexmlApplicationRequestVoiceMethod) AllValues() []UpdateTexmlApplicationRequestVoiceMethod {
	return []UpdateTexmlApplicationRequestVoiceMethod{
		UpdateTexmlApplicationRequestVoiceMethodGet,
		UpdateTexmlApplicationRequestVoiceMethodPost,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateTexmlApplicationRequestVoiceMethod) MarshalText() ([]byte, error) {
	switch s {
	case UpdateTexmlApplicationRequestVoiceMethodGet:
		return []byte(s), nil
	case UpdateTexmlApplicationRequestVoiceMethodPost:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateTexmlApplicationRequestVoiceMethod) UnmarshalText(data []byte) error {
	switch UpdateTexmlApplicationRequestVoiceMethod(data) {
	case UpdateTexmlApplicationRequestVoiceMethodGet:
		*s = UpdateTexmlApplicationRequestVoiceMethodGet
		return nil
	case UpdateTexmlApplicationRequestVoiceMethodPost:
		*s = UpdateTexmlApplicationRequestVoiceMethodPost
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateTexmlApplicationUnauthorized ErrorResponse

func (*UpdateTexmlApplicationUnauthorized) updateTexmlApplicationRes() {}

type UpdateTexmlApplicationUnprocessableEntity ErrorResponse

func (*UpdateTexmlApplicationUnprocessableEntity) updateTexmlApplicationRes() {}

// Ref: #/components/schemas/UpdateVerifiedCallsDisplayProfileRequest
type UpdateVerifiedCallsDisplayProfileRequest struct {
	CallReasons  CallReasons  `json:"call_reasons"`
	PhoneNumbers PhoneNumbers `json:"phone_numbers"`
}

// GetCallReasons returns the value of CallReasons.
func (s *UpdateVerifiedCallsDisplayProfileRequest) GetCallReasons() CallReasons {
	return s.CallReasons
}

// GetPhoneNumbers returns the value of PhoneNumbers.
func (s *UpdateVerifiedCallsDisplayProfileRequest) GetPhoneNumbers() PhoneNumbers {
	return s.PhoneNumbers
}

// SetCallReasons sets the value of CallReasons.
func (s *UpdateVerifiedCallsDisplayProfileRequest) SetCallReasons(val CallReasons) {
	s.CallReasons = val
}

// SetPhoneNumbers sets the value of PhoneNumbers.
func (s *UpdateVerifiedCallsDisplayProfileRequest) SetPhoneNumbers(val PhoneNumbers) {
	s.PhoneNumbers = val
}

// Ref: #/components/schemas/UpdateVerifyProfileCallRequest
type UpdateVerifyProfileCallRequest struct {
	// The message template identifier selected from /verify_profiles/templates.
	MessagingTemplateID OptUUID `json:"messaging_template_id"`
	// The name that identifies the application requesting 2fa in the verification message.
	AppName OptString `json:"app_name"`
	// Enabled country destinations to send verification codes. The elements in the list must be valid
	// ISO 3166-1 alpha-2 country codes. If set to `["*"]`, all destinations will be allowed.
	WhitelistedDestinations []string `json:"whitelisted_destinations"`
	// For every request that is initiated via this Verify profile, this sets the number of seconds
	// before a verification request code expires. Once the verification request expires, the user cannot
	// use the code to verify their identity.
	DefaultVerificationTimeoutSecs OptInt `json:"default_verification_timeout_secs"`
}

// GetMessagingTemplateID returns the value of MessagingTemplateID.
func (s *UpdateVerifyProfileCallRequest) GetMessagingTemplateID() OptUUID {
	return s.MessagingTemplateID
}

// GetAppName returns the value of AppName.
func (s *UpdateVerifyProfileCallRequest) GetAppName() OptString {
	return s.AppName
}

// GetWhitelistedDestinations returns the value of WhitelistedDestinations.
func (s *UpdateVerifyProfileCallRequest) GetWhitelistedDestinations() []string {
	return s.WhitelistedDestinations
}

// GetDefaultVerificationTimeoutSecs returns the value of DefaultVerificationTimeoutSecs.
func (s *UpdateVerifyProfileCallRequest) GetDefaultVerificationTimeoutSecs() OptInt {
	return s.DefaultVerificationTimeoutSecs
}

// SetMessagingTemplateID sets the value of MessagingTemplateID.
func (s *UpdateVerifyProfileCallRequest) SetMessagingTemplateID(val OptUUID) {
	s.MessagingTemplateID = val
}

// SetAppName sets the value of AppName.
func (s *UpdateVerifyProfileCallRequest) SetAppName(val OptString) {
	s.AppName = val
}

// SetWhitelistedDestinations sets the value of WhitelistedDestinations.
func (s *UpdateVerifyProfileCallRequest) SetWhitelistedDestinations(val []string) {
	s.WhitelistedDestinations = val
}

// SetDefaultVerificationTimeoutSecs sets the value of DefaultVerificationTimeoutSecs.
func (s *UpdateVerifyProfileCallRequest) SetDefaultVerificationTimeoutSecs(val OptInt) {
	s.DefaultVerificationTimeoutSecs = val
}

// Ref: #/components/schemas/UpdateVerifyProfileFlashcallRequest
type UpdateVerifyProfileFlashcallRequest struct {
	// Enabled country destinations to send verification codes. The elements in the list must be valid
	// ISO 3166-1 alpha-2 country codes. If set to `["*"]`, all destinations will be allowed.
	WhitelistedDestinations []string `json:"whitelisted_destinations"`
	// For every request that is initiated via this Verify profile, this sets the number of seconds
	// before a verification request code expires. Once the verification request expires, the user cannot
	// use the code to verify their identity.
	DefaultVerificationTimeoutSecs OptInt `json:"default_verification_timeout_secs"`
}

// GetWhitelistedDestinations returns the value of WhitelistedDestinations.
func (s *UpdateVerifyProfileFlashcallRequest) GetWhitelistedDestinations() []string {
	return s.WhitelistedDestinations
}

// GetDefaultVerificationTimeoutSecs returns the value of DefaultVerificationTimeoutSecs.
func (s *UpdateVerifyProfileFlashcallRequest) GetDefaultVerificationTimeoutSecs() OptInt {
	return s.DefaultVerificationTimeoutSecs
}

// SetWhitelistedDestinations sets the value of WhitelistedDestinations.
func (s *UpdateVerifyProfileFlashcallRequest) SetWhitelistedDestinations(val []string) {
	s.WhitelistedDestinations = val
}

// SetDefaultVerificationTimeoutSecs sets the value of DefaultVerificationTimeoutSecs.
func (s *UpdateVerifyProfileFlashcallRequest) SetDefaultVerificationTimeoutSecs(val OptInt) {
	s.DefaultVerificationTimeoutSecs = val
}

type UpdateVerifyProfileReq struct {
	Name               OptString                              `json:"name"`
	WebhookURL         OptString                              `json:"webhook_url"`
	WebhookFailoverURL OptString                              `json:"webhook_failover_url"`
	SMS                OptUpdateVerifyProfileSMSRequest       `json:"sms"`
	Call               OptUpdateVerifyProfileCallRequest      `json:"call"`
	Flashcall          OptUpdateVerifyProfileFlashcallRequest `json:"flashcall"`
	Language           OptString                              `json:"language"`
}

// GetName returns the value of Name.
func (s *UpdateVerifyProfileReq) GetName() OptString {
	return s.Name
}

// GetWebhookURL returns the value of WebhookURL.
func (s *UpdateVerifyProfileReq) GetWebhookURL() OptString {
	return s.WebhookURL
}

// GetWebhookFailoverURL returns the value of WebhookFailoverURL.
func (s *UpdateVerifyProfileReq) GetWebhookFailoverURL() OptString {
	return s.WebhookFailoverURL
}

// GetSMS returns the value of SMS.
func (s *UpdateVerifyProfileReq) GetSMS() OptUpdateVerifyProfileSMSRequest {
	return s.SMS
}

// GetCall returns the value of Call.
func (s *UpdateVerifyProfileReq) GetCall() OptUpdateVerifyProfileCallRequest {
	return s.Call
}

// GetFlashcall returns the value of Flashcall.
func (s *UpdateVerifyProfileReq) GetFlashcall() OptUpdateVerifyProfileFlashcallRequest {
	return s.Flashcall
}

// GetLanguage returns the value of Language.
func (s *UpdateVerifyProfileReq) GetLanguage() OptString {
	return s.Language
}

// SetName sets the value of Name.
func (s *UpdateVerifyProfileReq) SetName(val OptString) {
	s.Name = val
}

// SetWebhookURL sets the value of WebhookURL.
func (s *UpdateVerifyProfileReq) SetWebhookURL(val OptString) {
	s.WebhookURL = val
}

// SetWebhookFailoverURL sets the value of WebhookFailoverURL.
func (s *UpdateVerifyProfileReq) SetWebhookFailoverURL(val OptString) {
	s.WebhookFailoverURL = val
}

// SetSMS sets the value of SMS.
func (s *UpdateVerifyProfileReq) SetSMS(val OptUpdateVerifyProfileSMSRequest) {
	s.SMS = val
}

// SetCall sets the value of Call.
func (s *UpdateVerifyProfileReq) SetCall(val OptUpdateVerifyProfileCallRequest) {
	s.Call = val
}

// SetFlashcall sets the value of Flashcall.
func (s *UpdateVerifyProfileReq) SetFlashcall(val OptUpdateVerifyProfileFlashcallRequest) {
	s.Flashcall = val
}

// SetLanguage sets the value of Language.
func (s *UpdateVerifyProfileReq) SetLanguage(val OptString) {
	s.Language = val
}

// Ref: #/components/schemas/UpdateVerifyProfileSMSRequest
type UpdateVerifyProfileSMSRequest struct {
	// The message template identifier selected from /verify_profiles/templates.
	MessagingTemplateID OptUUID `json:"messaging_template_id"`
	// The name that identifies the application requesting 2fa in the verification message.
	AppName OptString `json:"app_name"`
	// The alphanumeric sender ID to use when sending to destinations that require an alphanumeric sender
	// ID.
	AlphaSender OptNilString `json:"alpha_sender"`
	// Enabled country destinations to send verification codes. The elements in the list must be valid
	// ISO 3166-1 alpha-2 country codes. If set to `["*"]`, all destinations will be allowed.
	WhitelistedDestinations []string `json:"whitelisted_destinations"`
	// For every request that is initiated via this Verify profile, this sets the number of seconds
	// before a verification request code expires. Once the verification request expires, the user cannot
	// use the code to verify their identity.
	DefaultVerificationTimeoutSecs OptInt `json:"default_verification_timeout_secs"`
}

// GetMessagingTemplateID returns the value of MessagingTemplateID.
func (s *UpdateVerifyProfileSMSRequest) GetMessagingTemplateID() OptUUID {
	return s.MessagingTemplateID
}

// GetAppName returns the value of AppName.
func (s *UpdateVerifyProfileSMSRequest) GetAppName() OptString {
	return s.AppName
}

// GetAlphaSender returns the value of AlphaSender.
func (s *UpdateVerifyProfileSMSRequest) GetAlphaSender() OptNilString {
	return s.AlphaSender
}

// GetWhitelistedDestinations returns the value of WhitelistedDestinations.
func (s *UpdateVerifyProfileSMSRequest) GetWhitelistedDestinations() []string {
	return s.WhitelistedDestinations
}

// GetDefaultVerificationTimeoutSecs returns the value of DefaultVerificationTimeoutSecs.
func (s *UpdateVerifyProfileSMSRequest) GetDefaultVerificationTimeoutSecs() OptInt {
	return s.DefaultVerificationTimeoutSecs
}

// SetMessagingTemplateID sets the value of MessagingTemplateID.
func (s *UpdateVerifyProfileSMSRequest) SetMessagingTemplateID(val OptUUID) {
	s.MessagingTemplateID = val
}

// SetAppName sets the value of AppName.
func (s *UpdateVerifyProfileSMSRequest) SetAppName(val OptString) {
	s.AppName = val
}

// SetAlphaSender sets the value of AlphaSender.
func (s *UpdateVerifyProfileSMSRequest) SetAlphaSender(val OptNilString) {
	s.AlphaSender = val
}

// SetWhitelistedDestinations sets the value of WhitelistedDestinations.
func (s *UpdateVerifyProfileSMSRequest) SetWhitelistedDestinations(val []string) {
	s.WhitelistedDestinations = val
}

// SetDefaultVerificationTimeoutSecs sets the value of DefaultVerificationTimeoutSecs.
func (s *UpdateVerifyProfileSMSRequest) SetDefaultVerificationTimeoutSecs(val OptInt) {
	s.DefaultVerificationTimeoutSecs = val
}

type UpdatedAt string

// Ref: #/components/schemas/UserBalance
type UserBalance struct {
	// Identifies the type of the resource.
	RecordType OptUserBalanceRecordType `json:"record_type"`
	// The account's current balance.
	Balance OptString `json:"balance"`
	// The account's credit limit.
	CreditLimit OptString `json:"credit_limit"`
	// Available amount to spend (balance + credit limit).
	AvailableCredit OptString `json:"available_credit"`
	// The ISO 4217 currency identifier.
	Currency OptString `json:"currency"`
}

// GetRecordType returns the value of RecordType.
func (s *UserBalance) GetRecordType() OptUserBalanceRecordType {
	return s.RecordType
}

// GetBalance returns the value of Balance.
func (s *UserBalance) GetBalance() OptString {
	return s.Balance
}

// GetCreditLimit returns the value of CreditLimit.
func (s *UserBalance) GetCreditLimit() OptString {
	return s.CreditLimit
}

// GetAvailableCredit returns the value of AvailableCredit.
func (s *UserBalance) GetAvailableCredit() OptString {
	return s.AvailableCredit
}

// GetCurrency returns the value of Currency.
func (s *UserBalance) GetCurrency() OptString {
	return s.Currency
}

// SetRecordType sets the value of RecordType.
func (s *UserBalance) SetRecordType(val OptUserBalanceRecordType) {
	s.RecordType = val
}

// SetBalance sets the value of Balance.
func (s *UserBalance) SetBalance(val OptString) {
	s.Balance = val
}

// SetCreditLimit sets the value of CreditLimit.
func (s *UserBalance) SetCreditLimit(val OptString) {
	s.CreditLimit = val
}

// SetAvailableCredit sets the value of AvailableCredit.
func (s *UserBalance) SetAvailableCredit(val OptString) {
	s.AvailableCredit = val
}

// SetCurrency sets the value of Currency.
func (s *UserBalance) SetCurrency(val OptString) {
	s.Currency = val
}

// Identifies the type of the resource.
type UserBalanceRecordType string

const (
	UserBalanceRecordTypeBalance UserBalanceRecordType = "balance"
)

// AllValues returns all UserBalanceRecordType values.
func (UserBalanceRecordType) AllValues() []UserBalanceRecordType {
	return []UserBalanceRecordType{
		UserBalanceRecordTypeBalance,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserBalanceRecordType) MarshalText() ([]byte, error) {
	switch s {
	case UserBalanceRecordTypeBalance:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserBalanceRecordType) UnmarshalText(data []byte) error {
	switch UserBalanceRecordType(data) {
	case UserBalanceRecordTypeBalance:
		*s = UserBalanceRecordTypeBalance
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UserBalanceResponse struct {
	Data OptUserBalance `json:"data"`
}

// GetData returns the value of Data.
func (s *UserBalanceResponse) GetData() OptUserBalance {
	return s.Data
}

// SetData sets the value of Data.
func (s *UserBalanceResponse) SetData(val OptUserBalance) {
	s.Data = val
}

func (*UserBalanceResponse) getUserBalanceRes() {}

// Ref: #/components/schemas/ValidationError
type ValidationError struct {
	Loc  []ValidationErrorLocItem `json:"loc"`
	Msg  string                   `json:"msg"`
	Type string                   `json:"type"`
}

// GetLoc returns the value of Loc.
func (s *ValidationError) GetLoc() []ValidationErrorLocItem {
	return s.Loc
}

// GetMsg returns the value of Msg.
func (s *ValidationError) GetMsg() string {
	return s.Msg
}

// GetType returns the value of Type.
func (s *ValidationError) GetType() string {
	return s.Type
}

// SetLoc sets the value of Loc.
func (s *ValidationError) SetLoc(val []ValidationErrorLocItem) {
	s.Loc = val
}

// SetMsg sets the value of Msg.
func (s *ValidationError) SetMsg(val string) {
	s.Msg = val
}

// SetType sets the value of Type.
func (s *ValidationError) SetType(val string) {
	s.Type = val
}

// ValidationErrorLocItem represents sum type.
type ValidationErrorLocItem struct {
	Type   ValidationErrorLocItemType // switch on this field
	String string
	Int    int
}

// ValidationErrorLocItemType is oneOf type of ValidationErrorLocItem.
type ValidationErrorLocItemType string

// Possible values for ValidationErrorLocItemType.
const (
	StringValidationErrorLocItem ValidationErrorLocItemType = "string"
	IntValidationErrorLocItem    ValidationErrorLocItemType = "int"
)

// IsString reports whether ValidationErrorLocItem is string.
func (s ValidationErrorLocItem) IsString() bool { return s.Type == StringValidationErrorLocItem }

// IsInt reports whether ValidationErrorLocItem is int.
func (s ValidationErrorLocItem) IsInt() bool { return s.Type == IntValidationErrorLocItem }

// SetString sets ValidationErrorLocItem to string.
func (s *ValidationErrorLocItem) SetString(v string) {
	s.Type = StringValidationErrorLocItem
	s.String = v
}

// GetString returns string and true boolean if ValidationErrorLocItem is string.
func (s ValidationErrorLocItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringValidationErrorLocItem returns new ValidationErrorLocItem from string.
func NewStringValidationErrorLocItem(v string) ValidationErrorLocItem {
	var s ValidationErrorLocItem
	s.SetString(v)
	return s
}

// SetInt sets ValidationErrorLocItem to int.
func (s *ValidationErrorLocItem) SetInt(v int) {
	s.Type = IntValidationErrorLocItem
	s.Int = v
}

// GetInt returns int and true boolean if ValidationErrorLocItem is int.
func (s ValidationErrorLocItem) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntValidationErrorLocItem returns new ValidationErrorLocItem from int.
func NewIntValidationErrorLocItem(v int) ValidationErrorLocItem {
	var s ValidationErrorLocItem
	s.SetInt(v)
	return s
}

// Ref: #/components/schemas/Verification
type Verification struct {
	ID         OptUUID                   `json:"id"`
	Type       OptVerificationType       `json:"type"`
	RecordType OptVerificationRecordType `json:"record_type"`
	// +E164 formatted phone number.
	PhoneNumber OptString `json:"phone_number"`
	// The identifier of the associated Verify profile.
	VerifyProfileID OptUUID `json:"verify_profile_id"`
	// This is the number of seconds before the code of the request is expired. Once this request has
	// expired, the code will no longer verify the user. Note: this will override the
	// `default_verification_timeout_secs` on the Verify profile.
	TimeoutSecs OptInt                `json:"timeout_secs"`
	Status      OptVerificationStatus `json:"status"`
	CreatedAt   OptString             `json:"created_at"`
	UpdatedAt   OptString             `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *Verification) GetID() OptUUID {
	return s.ID
}

// GetType returns the value of Type.
func (s *Verification) GetType() OptVerificationType {
	return s.Type
}

// GetRecordType returns the value of RecordType.
func (s *Verification) GetRecordType() OptVerificationRecordType {
	return s.RecordType
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *Verification) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetVerifyProfileID returns the value of VerifyProfileID.
func (s *Verification) GetVerifyProfileID() OptUUID {
	return s.VerifyProfileID
}

// GetTimeoutSecs returns the value of TimeoutSecs.
func (s *Verification) GetTimeoutSecs() OptInt {
	return s.TimeoutSecs
}

// GetStatus returns the value of Status.
func (s *Verification) GetStatus() OptVerificationStatus {
	return s.Status
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Verification) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Verification) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Verification) SetID(val OptUUID) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *Verification) SetType(val OptVerificationType) {
	s.Type = val
}

// SetRecordType sets the value of RecordType.
func (s *Verification) SetRecordType(val OptVerificationRecordType) {
	s.RecordType = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *Verification) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetVerifyProfileID sets the value of VerifyProfileID.
func (s *Verification) SetVerifyProfileID(val OptUUID) {
	s.VerifyProfileID = val
}

// SetTimeoutSecs sets the value of TimeoutSecs.
func (s *Verification) SetTimeoutSecs(val OptInt) {
	s.TimeoutSecs = val
}

// SetStatus sets the value of Status.
func (s *Verification) SetStatus(val OptVerificationStatus) {
	s.Status = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Verification) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Verification) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// The possible verification profile record types.
// Ref: #/components/schemas/VerificationProfileRecordType
type VerificationProfileRecordType string

const (
	VerificationProfileRecordTypeVerificationProfile VerificationProfileRecordType = "verification_profile"
)

// AllValues returns all VerificationProfileRecordType values.
func (VerificationProfileRecordType) AllValues() []VerificationProfileRecordType {
	return []VerificationProfileRecordType{
		VerificationProfileRecordTypeVerificationProfile,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VerificationProfileRecordType) MarshalText() ([]byte, error) {
	switch s {
	case VerificationProfileRecordTypeVerificationProfile:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VerificationProfileRecordType) UnmarshalText(data []byte) error {
	switch VerificationProfileRecordType(data) {
	case VerificationProfileRecordTypeVerificationProfile:
		*s = VerificationProfileRecordTypeVerificationProfile
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The possible verification record types.
// Ref: #/components/schemas/VerificationRecordType
type VerificationRecordType string

const (
	VerificationRecordTypeVerification VerificationRecordType = "verification"
)

// AllValues returns all VerificationRecordType values.
func (VerificationRecordType) AllValues() []VerificationRecordType {
	return []VerificationRecordType{
		VerificationRecordTypeVerification,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VerificationRecordType) MarshalText() ([]byte, error) {
	switch s {
	case VerificationRecordTypeVerification:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VerificationRecordType) UnmarshalText(data []byte) error {
	switch VerificationRecordType(data) {
	case VerificationRecordTypeVerification:
		*s = VerificationRecordTypeVerification
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The possible statuses of the verification request.
// Ref: #/components/schemas/VerificationStatus
type VerificationStatus string

const (
	VerificationStatusPending  VerificationStatus = "pending"
	VerificationStatusAccepted VerificationStatus = "accepted"
	VerificationStatusInvalid  VerificationStatus = "invalid"
	VerificationStatusExpired  VerificationStatus = "expired"
	VerificationStatusError    VerificationStatus = "error"
)

// AllValues returns all VerificationStatus values.
func (VerificationStatus) AllValues() []VerificationStatus {
	return []VerificationStatus{
		VerificationStatusPending,
		VerificationStatusAccepted,
		VerificationStatusInvalid,
		VerificationStatusExpired,
		VerificationStatusError,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VerificationStatus) MarshalText() ([]byte, error) {
	switch s {
	case VerificationStatusPending:
		return []byte(s), nil
	case VerificationStatusAccepted:
		return []byte(s), nil
	case VerificationStatusInvalid:
		return []byte(s), nil
	case VerificationStatusExpired:
		return []byte(s), nil
	case VerificationStatusError:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VerificationStatus) UnmarshalText(data []byte) error {
	switch VerificationStatus(data) {
	case VerificationStatusPending:
		*s = VerificationStatusPending
		return nil
	case VerificationStatusAccepted:
		*s = VerificationStatusAccepted
		return nil
	case VerificationStatusInvalid:
		*s = VerificationStatusInvalid
		return nil
	case VerificationStatusExpired:
		*s = VerificationStatusExpired
		return nil
	case VerificationStatusError:
		*s = VerificationStatusError
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The possible types of verification.
// Ref: #/components/schemas/VerificationType
type VerificationType string

const (
	VerificationTypeSMS       VerificationType = "sms"
	VerificationTypeCall      VerificationType = "call"
	VerificationTypeFlashcall VerificationType = "flashcall"
)

// AllValues returns all VerificationType values.
func (VerificationType) AllValues() []VerificationType {
	return []VerificationType{
		VerificationTypeSMS,
		VerificationTypeCall,
		VerificationTypeFlashcall,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VerificationType) MarshalText() ([]byte, error) {
	switch s {
	case VerificationTypeSMS:
		return []byte(s), nil
	case VerificationTypeCall:
		return []byte(s), nil
	case VerificationTypeFlashcall:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VerificationType) UnmarshalText(data []byte) error {
	switch VerificationType(data) {
	case VerificationTypeSMS:
		*s = VerificationTypeSMS
		return nil
	case VerificationTypeCall:
		*s = VerificationTypeCall
		return nil
	case VerificationTypeFlashcall:
		*s = VerificationTypeFlashcall
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/VerifiedCallsDisplayProfile
type VerifiedCallsDisplayProfile struct {
	RecordType OptString `json:"record_type"`
	ID         OptUUID   `json:"id"`
	// The Verified Calls Display Profile's name.
	Name OptString `json:"name"`
	// The display name to be shown as the caller name in phones.
	DisplayName OptString `json:"display_name"`
	// The URL pointing to a public image file that will be displayed during calls in phones.
	LogoURL OptString `json:"logo_url"`
	// The approval status of the Verified Calls Display Profile in Google.
	Status OptVerifiedCallsDisplayProfileStatus `json:"status"`
	// The associated Business Identity.
	BusinessIdentity OptVerifiedCallsDisplayProfileBusinessIdentity `json:"business_identity"`
	PhoneNumbers     []VerifiedCallsDisplayProfilePhoneNumbersItem  `json:"phone_numbers"`
	CallReasons      []VerifiedCallsDisplayProfileCallReasonsItem   `json:"call_reasons"`
	// An ISO 8601 datetime string for when the display profile was added to the Telnyx platform.
	CreatedAt OptString `json:"created_at"`
	// An ISO 8601 datetime string for when the display profile was updated.
	UpdatedAt OptString `json:"updated_at"`
}

// GetRecordType returns the value of RecordType.
func (s *VerifiedCallsDisplayProfile) GetRecordType() OptString {
	return s.RecordType
}

// GetID returns the value of ID.
func (s *VerifiedCallsDisplayProfile) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *VerifiedCallsDisplayProfile) GetName() OptString {
	return s.Name
}

// GetDisplayName returns the value of DisplayName.
func (s *VerifiedCallsDisplayProfile) GetDisplayName() OptString {
	return s.DisplayName
}

// GetLogoURL returns the value of LogoURL.
func (s *VerifiedCallsDisplayProfile) GetLogoURL() OptString {
	return s.LogoURL
}

// GetStatus returns the value of Status.
func (s *VerifiedCallsDisplayProfile) GetStatus() OptVerifiedCallsDisplayProfileStatus {
	return s.Status
}

// GetBusinessIdentity returns the value of BusinessIdentity.
func (s *VerifiedCallsDisplayProfile) GetBusinessIdentity() OptVerifiedCallsDisplayProfileBusinessIdentity {
	return s.BusinessIdentity
}

// GetPhoneNumbers returns the value of PhoneNumbers.
func (s *VerifiedCallsDisplayProfile) GetPhoneNumbers() []VerifiedCallsDisplayProfilePhoneNumbersItem {
	return s.PhoneNumbers
}

// GetCallReasons returns the value of CallReasons.
func (s *VerifiedCallsDisplayProfile) GetCallReasons() []VerifiedCallsDisplayProfileCallReasonsItem {
	return s.CallReasons
}

// GetCreatedAt returns the value of CreatedAt.
func (s *VerifiedCallsDisplayProfile) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *VerifiedCallsDisplayProfile) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// SetRecordType sets the value of RecordType.
func (s *VerifiedCallsDisplayProfile) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetID sets the value of ID.
func (s *VerifiedCallsDisplayProfile) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *VerifiedCallsDisplayProfile) SetName(val OptString) {
	s.Name = val
}

// SetDisplayName sets the value of DisplayName.
func (s *VerifiedCallsDisplayProfile) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetLogoURL sets the value of LogoURL.
func (s *VerifiedCallsDisplayProfile) SetLogoURL(val OptString) {
	s.LogoURL = val
}

// SetStatus sets the value of Status.
func (s *VerifiedCallsDisplayProfile) SetStatus(val OptVerifiedCallsDisplayProfileStatus) {
	s.Status = val
}

// SetBusinessIdentity sets the value of BusinessIdentity.
func (s *VerifiedCallsDisplayProfile) SetBusinessIdentity(val OptVerifiedCallsDisplayProfileBusinessIdentity) {
	s.BusinessIdentity = val
}

// SetPhoneNumbers sets the value of PhoneNumbers.
func (s *VerifiedCallsDisplayProfile) SetPhoneNumbers(val []VerifiedCallsDisplayProfilePhoneNumbersItem) {
	s.PhoneNumbers = val
}

// SetCallReasons sets the value of CallReasons.
func (s *VerifiedCallsDisplayProfile) SetCallReasons(val []VerifiedCallsDisplayProfileCallReasonsItem) {
	s.CallReasons = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *VerifiedCallsDisplayProfile) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *VerifiedCallsDisplayProfile) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// The associated Business Identity.
type VerifiedCallsDisplayProfileBusinessIdentity struct {
	RecordType OptString `json:"record_type"`
	// The name of the business identity on the telnyx platform.
	Name OptString `json:"name"`
}

// GetRecordType returns the value of RecordType.
func (s *VerifiedCallsDisplayProfileBusinessIdentity) GetRecordType() OptString {
	return s.RecordType
}

// GetName returns the value of Name.
func (s *VerifiedCallsDisplayProfileBusinessIdentity) GetName() OptString {
	return s.Name
}

// SetRecordType sets the value of RecordType.
func (s *VerifiedCallsDisplayProfileBusinessIdentity) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetName sets the value of Name.
func (s *VerifiedCallsDisplayProfileBusinessIdentity) SetName(val OptString) {
	s.Name = val
}

// The Call Reason to be displayed to the call recipient.
type VerifiedCallsDisplayProfileCallReasonsItem struct {
	RecordType OptString `json:"record_type"`
	ID         OptUUID   `json:"id"`
	// The Call Reason text to be displayed to the call recipient.
	Reason OptString `json:"reason"`
	// The approval status of this individual call reason in Google.
	GoogleVerificationStatus OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus `json:"google_verification_status"`
	// Additional information about the decision, if available.
	GoogleApprovalInfo OptString `json:"google_approval_info"`
	DisplayProfileID   OptUUID   `json:"display_profile_id"`
	// Marks the Phone Number to be removed from the Display Profile.
	Delete OptBool `json:"delete"`
}

// GetRecordType returns the value of RecordType.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) GetRecordType() OptString {
	return s.RecordType
}

// GetID returns the value of ID.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) GetID() OptUUID {
	return s.ID
}

// GetReason returns the value of Reason.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) GetReason() OptString {
	return s.Reason
}

// GetGoogleVerificationStatus returns the value of GoogleVerificationStatus.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) GetGoogleVerificationStatus() OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus {
	return s.GoogleVerificationStatus
}

// GetGoogleApprovalInfo returns the value of GoogleApprovalInfo.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) GetGoogleApprovalInfo() OptString {
	return s.GoogleApprovalInfo
}

// GetDisplayProfileID returns the value of DisplayProfileID.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) GetDisplayProfileID() OptUUID {
	return s.DisplayProfileID
}

// GetDelete returns the value of Delete.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) GetDelete() OptBool {
	return s.Delete
}

// SetRecordType sets the value of RecordType.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetID sets the value of ID.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) SetID(val OptUUID) {
	s.ID = val
}

// SetReason sets the value of Reason.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) SetReason(val OptString) {
	s.Reason = val
}

// SetGoogleVerificationStatus sets the value of GoogleVerificationStatus.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) SetGoogleVerificationStatus(val OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus) {
	s.GoogleVerificationStatus = val
}

// SetGoogleApprovalInfo sets the value of GoogleApprovalInfo.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) SetGoogleApprovalInfo(val OptString) {
	s.GoogleApprovalInfo = val
}

// SetDisplayProfileID sets the value of DisplayProfileID.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) SetDisplayProfileID(val OptUUID) {
	s.DisplayProfileID = val
}

// SetDelete sets the value of Delete.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) SetDelete(val OptBool) {
	s.Delete = val
}

// The approval status of this individual call reason in Google.
type VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus string

const (
	VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusSTATEUNSPECIFIED VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus = "STATE_UNSPECIFIED"
	VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusPENDINGAPPROVAL  VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus = "PENDING_APPROVAL"
	VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusAPPROVED         VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus = "APPROVED"
	VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusDENIED           VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus = "DENIED"
	VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusPENDINGREMOVAL   VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus = "PENDING_REMOVAL"
)

// AllValues returns all VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus values.
func (VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus) AllValues() []VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus {
	return []VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus{
		VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusSTATEUNSPECIFIED,
		VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusPENDINGAPPROVAL,
		VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusAPPROVED,
		VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusDENIED,
		VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusPENDINGREMOVAL,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus) MarshalText() ([]byte, error) {
	switch s {
	case VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusSTATEUNSPECIFIED:
		return []byte(s), nil
	case VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusPENDINGAPPROVAL:
		return []byte(s), nil
	case VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusAPPROVED:
		return []byte(s), nil
	case VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusDENIED:
		return []byte(s), nil
	case VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusPENDINGREMOVAL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus) UnmarshalText(data []byte) error {
	switch VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus(data) {
	case VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusSTATEUNSPECIFIED:
		*s = VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusSTATEUNSPECIFIED
		return nil
	case VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusPENDINGAPPROVAL:
		*s = VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusPENDINGAPPROVAL
		return nil
	case VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusAPPROVED:
		*s = VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusAPPROVED
		return nil
	case VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusDENIED:
		*s = VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusDENIED
		return nil
	case VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusPENDINGREMOVAL:
		*s = VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusPENDINGREMOVAL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A Phone Number that can make phone calls displaying the configured brand information.
type VerifiedCallsDisplayProfilePhoneNumbersItem struct {
	RecordType OptString `json:"record_type"`
	ID         OptUUID   `json:"id"`
	// The phone number in e164 format.
	PhoneNumber OptString `json:"phone_number"`
	// The approval status of this individual phone number in Google.
	GoogleVerificationStatus OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus `json:"google_verification_status"`
	// Additional information about the decision, if available.
	GoogleApprovalInfo OptString `json:"google_approval_info"`
	DisplayProfileID   OptUUID   `json:"display_profile_id"`
	// Marks the Phone Number to be removed from the Display Profile.
	Delete OptBool `json:"delete"`
}

// GetRecordType returns the value of RecordType.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) GetRecordType() OptString {
	return s.RecordType
}

// GetID returns the value of ID.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) GetID() OptUUID {
	return s.ID
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetGoogleVerificationStatus returns the value of GoogleVerificationStatus.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) GetGoogleVerificationStatus() OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus {
	return s.GoogleVerificationStatus
}

// GetGoogleApprovalInfo returns the value of GoogleApprovalInfo.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) GetGoogleApprovalInfo() OptString {
	return s.GoogleApprovalInfo
}

// GetDisplayProfileID returns the value of DisplayProfileID.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) GetDisplayProfileID() OptUUID {
	return s.DisplayProfileID
}

// GetDelete returns the value of Delete.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) GetDelete() OptBool {
	return s.Delete
}

// SetRecordType sets the value of RecordType.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetID sets the value of ID.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) SetID(val OptUUID) {
	s.ID = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetGoogleVerificationStatus sets the value of GoogleVerificationStatus.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) SetGoogleVerificationStatus(val OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus) {
	s.GoogleVerificationStatus = val
}

// SetGoogleApprovalInfo sets the value of GoogleApprovalInfo.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) SetGoogleApprovalInfo(val OptString) {
	s.GoogleApprovalInfo = val
}

// SetDisplayProfileID sets the value of DisplayProfileID.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) SetDisplayProfileID(val OptUUID) {
	s.DisplayProfileID = val
}

// SetDelete sets the value of Delete.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) SetDelete(val OptBool) {
	s.Delete = val
}

// The approval status of this individual phone number in Google.
type VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus string

const (
	VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusSTATEUNSPECIFIED VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus = "STATE_UNSPECIFIED"
	VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusPENDINGAPPROVAL  VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus = "PENDING_APPROVAL"
	VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusAPPROVED         VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus = "APPROVED"
	VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusDENIED           VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus = "DENIED"
	VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusPENDINGREMOVAL   VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus = "PENDING_REMOVAL"
)

// AllValues returns all VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus values.
func (VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus) AllValues() []VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus {
	return []VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus{
		VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusSTATEUNSPECIFIED,
		VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusPENDINGAPPROVAL,
		VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusAPPROVED,
		VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusDENIED,
		VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusPENDINGREMOVAL,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus) MarshalText() ([]byte, error) {
	switch s {
	case VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusSTATEUNSPECIFIED:
		return []byte(s), nil
	case VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusPENDINGAPPROVAL:
		return []byte(s), nil
	case VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusAPPROVED:
		return []byte(s), nil
	case VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusDENIED:
		return []byte(s), nil
	case VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusPENDINGREMOVAL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus) UnmarshalText(data []byte) error {
	switch VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus(data) {
	case VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusSTATEUNSPECIFIED:
		*s = VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusSTATEUNSPECIFIED
		return nil
	case VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusPENDINGAPPROVAL:
		*s = VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusPENDINGAPPROVAL
		return nil
	case VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusAPPROVED:
		*s = VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusAPPROVED
		return nil
	case VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusDENIED:
		*s = VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusDENIED
		return nil
	case VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusPENDINGREMOVAL:
		*s = VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusPENDINGREMOVAL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The approval status of the Verified Calls Display Profile in Google.
type VerifiedCallsDisplayProfileStatus string

const (
	VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEUNSPECIFIED    VerifiedCallsDisplayProfileStatus = "VERIFICATION_STATE_UNSPECIFIED"
	VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEUNVERIFIED     VerifiedCallsDisplayProfileStatus = "VERIFICATION_STATE_UNVERIFIED"
	VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEPENDING        VerifiedCallsDisplayProfileStatus = "VERIFICATION_STATE_PENDING"
	VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEVERIFIED       VerifiedCallsDisplayProfileStatus = "VERIFICATION_STATE_VERIFIED"
	VerifiedCallsDisplayProfileStatusVERIFICATIONSTATESUSPENDEDINGMB VerifiedCallsDisplayProfileStatus = "VERIFICATION_STATE_SUSPENDED_IN_GMB"
)

// AllValues returns all VerifiedCallsDisplayProfileStatus values.
func (VerifiedCallsDisplayProfileStatus) AllValues() []VerifiedCallsDisplayProfileStatus {
	return []VerifiedCallsDisplayProfileStatus{
		VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEUNSPECIFIED,
		VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEUNVERIFIED,
		VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEPENDING,
		VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEVERIFIED,
		VerifiedCallsDisplayProfileStatusVERIFICATIONSTATESUSPENDEDINGMB,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VerifiedCallsDisplayProfileStatus) MarshalText() ([]byte, error) {
	switch s {
	case VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEUNSPECIFIED:
		return []byte(s), nil
	case VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEUNVERIFIED:
		return []byte(s), nil
	case VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEPENDING:
		return []byte(s), nil
	case VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEVERIFIED:
		return []byte(s), nil
	case VerifiedCallsDisplayProfileStatusVERIFICATIONSTATESUSPENDEDINGMB:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VerifiedCallsDisplayProfileStatus) UnmarshalText(data []byte) error {
	switch VerifiedCallsDisplayProfileStatus(data) {
	case VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEUNSPECIFIED:
		*s = VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEUNSPECIFIED
		return nil
	case VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEUNVERIFIED:
		*s = VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEUNVERIFIED
		return nil
	case VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEPENDING:
		*s = VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEPENDING
		return nil
	case VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEVERIFIED:
		*s = VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEVERIFIED
		return nil
	case VerifiedCallsDisplayProfileStatusVERIFICATIONSTATESUSPENDEDINGMB:
		*s = VerifiedCallsDisplayProfileStatusVERIFICATIONSTATESUSPENDEDINGMB
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The possible verified numbers record types.
// Ref: #/components/schemas/VerifiedNumberRecordType
type VerifiedNumberRecordType string

const (
	VerifiedNumberRecordTypeVerifiedNumber VerifiedNumberRecordType = "verified_number"
)

// AllValues returns all VerifiedNumberRecordType values.
func (VerifiedNumberRecordType) AllValues() []VerifiedNumberRecordType {
	return []VerifiedNumberRecordType{
		VerifiedNumberRecordTypeVerifiedNumber,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VerifiedNumberRecordType) MarshalText() ([]byte, error) {
	switch s {
	case VerifiedNumberRecordTypeVerifiedNumber:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VerifiedNumberRecordType) UnmarshalText(data []byte) error {
	switch VerifiedNumberRecordType(data) {
	case VerifiedNumberRecordTypeVerifiedNumber:
		*s = VerifiedNumberRecordTypeVerifiedNumber
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/VerifiedNumberResponse
type VerifiedNumberResponse struct {
	PhoneNumber OptString                   `json:"phone_number"`
	RecordType  OptVerifiedNumberRecordType `json:"record_type"`
	VerifiedAt  OptString                   `json:"verified_at"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *VerifiedNumberResponse) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetRecordType returns the value of RecordType.
func (s *VerifiedNumberResponse) GetRecordType() OptVerifiedNumberRecordType {
	return s.RecordType
}

// GetVerifiedAt returns the value of VerifiedAt.
func (s *VerifiedNumberResponse) GetVerifiedAt() OptString {
	return s.VerifiedAt
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *VerifiedNumberResponse) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetRecordType sets the value of RecordType.
func (s *VerifiedNumberResponse) SetRecordType(val OptVerifiedNumberRecordType) {
	s.RecordType = val
}

// SetVerifiedAt sets the value of VerifiedAt.
func (s *VerifiedNumberResponse) SetVerifiedAt(val OptString) {
	s.VerifiedAt = val
}

// Ref: #/components/schemas/VerifiedNumberResponseDataWrapper
type VerifiedNumberResponseDataWrapper struct {
	Data OptVerifiedNumberResponse `json:"data"`
}

// GetData returns the value of Data.
func (s *VerifiedNumberResponseDataWrapper) GetData() OptVerifiedNumberResponse {
	return s.Data
}

// SetData sets the value of Data.
func (s *VerifiedNumberResponseDataWrapper) SetData(val OptVerifiedNumberResponse) {
	s.Data = val
}

func (*VerifiedNumberResponseDataWrapper) deleteVerifiedNumberRes()   {}
func (*VerifiedNumberResponseDataWrapper) getVerifiedNumberRes()      {}
func (*VerifiedNumberResponseDataWrapper) verifyVerificationCodeRes() {}

// Ref: #/components/schemas/VerifyProfileCallResponse
type VerifyProfileCallResponse struct {
	// The message template identifier selected from /verify_profiles/templates.
	MessagingTemplateID OptUUID `json:"messaging_template_id"`
	// The name that identifies the application requesting 2fa in the verification message.
	AppName OptString `json:"app_name"`
	// Enabled country destinations to send verification codes. The elements in the list must be valid
	// ISO 3166-1 alpha-2 country codes. If set to `["*"]`, all destinations will be allowed.
	WhitelistedDestinations []string `json:"whitelisted_destinations"`
	// For every request that is initiated via this Verify profile, this sets the number of seconds
	// before a verification request code expires. Once the verification request expires, the user cannot
	// use the code to verify their identity.
	DefaultVerificationTimeoutSecs OptInt `json:"default_verification_timeout_secs"`
}

// GetMessagingTemplateID returns the value of MessagingTemplateID.
func (s *VerifyProfileCallResponse) GetMessagingTemplateID() OptUUID {
	return s.MessagingTemplateID
}

// GetAppName returns the value of AppName.
func (s *VerifyProfileCallResponse) GetAppName() OptString {
	return s.AppName
}

// GetWhitelistedDestinations returns the value of WhitelistedDestinations.
func (s *VerifyProfileCallResponse) GetWhitelistedDestinations() []string {
	return s.WhitelistedDestinations
}

// GetDefaultVerificationTimeoutSecs returns the value of DefaultVerificationTimeoutSecs.
func (s *VerifyProfileCallResponse) GetDefaultVerificationTimeoutSecs() OptInt {
	return s.DefaultVerificationTimeoutSecs
}

// SetMessagingTemplateID sets the value of MessagingTemplateID.
func (s *VerifyProfileCallResponse) SetMessagingTemplateID(val OptUUID) {
	s.MessagingTemplateID = val
}

// SetAppName sets the value of AppName.
func (s *VerifyProfileCallResponse) SetAppName(val OptString) {
	s.AppName = val
}

// SetWhitelistedDestinations sets the value of WhitelistedDestinations.
func (s *VerifyProfileCallResponse) SetWhitelistedDestinations(val []string) {
	s.WhitelistedDestinations = val
}

// SetDefaultVerificationTimeoutSecs sets the value of DefaultVerificationTimeoutSecs.
func (s *VerifyProfileCallResponse) SetDefaultVerificationTimeoutSecs(val OptInt) {
	s.DefaultVerificationTimeoutSecs = val
}

// Ref: #/components/schemas/VerifyProfileFlashcallResponse
type VerifyProfileFlashcallResponse struct {
	// For every request that is initiated via this Verify profile, this sets the number of seconds
	// before a verification request code expires. Once the verification request expires, the user cannot
	// use the code to verify their identity.
	DefaultVerificationTimeoutSecs OptInt `json:"default_verification_timeout_secs"`
}

// GetDefaultVerificationTimeoutSecs returns the value of DefaultVerificationTimeoutSecs.
func (s *VerifyProfileFlashcallResponse) GetDefaultVerificationTimeoutSecs() OptInt {
	return s.DefaultVerificationTimeoutSecs
}

// SetDefaultVerificationTimeoutSecs sets the value of DefaultVerificationTimeoutSecs.
func (s *VerifyProfileFlashcallResponse) SetDefaultVerificationTimeoutSecs(val OptInt) {
	s.DefaultVerificationTimeoutSecs = val
}

// Ref: #/components/schemas/VerifyProfileMessageTemplateResponse
type VerifyProfileMessageTemplateResponse struct {
	ID   OptUUID   `json:"id"`
	Text OptString `json:"text"`
}

// GetID returns the value of ID.
func (s *VerifyProfileMessageTemplateResponse) GetID() OptUUID {
	return s.ID
}

// GetText returns the value of Text.
func (s *VerifyProfileMessageTemplateResponse) GetText() OptString {
	return s.Text
}

// SetID sets the value of ID.
func (s *VerifyProfileMessageTemplateResponse) SetID(val OptUUID) {
	s.ID = val
}

// SetText sets the value of Text.
func (s *VerifyProfileMessageTemplateResponse) SetText(val OptString) {
	s.Text = val
}

// Ref: #/components/schemas/VerifyProfileResponse
type VerifyProfileResponse struct {
	ID                 OptUUID                           `json:"id"`
	Name               OptString                         `json:"name"`
	WebhookURL         OptString                         `json:"webhook_url"`
	WebhookFailoverURL OptString                         `json:"webhook_failover_url"`
	RecordType         OptVerificationProfileRecordType  `json:"record_type"`
	CreatedAt          OptString                         `json:"created_at"`
	UpdatedAt          OptString                         `json:"updated_at"`
	SMS                OptVerifyProfileSMSResponse       `json:"sms"`
	Call               OptVerifyProfileCallResponse      `json:"call"`
	Flashcall          OptVerifyProfileFlashcallResponse `json:"flashcall"`
	Language           OptString                         `json:"language"`
}

// GetID returns the value of ID.
func (s *VerifyProfileResponse) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *VerifyProfileResponse) GetName() OptString {
	return s.Name
}

// GetWebhookURL returns the value of WebhookURL.
func (s *VerifyProfileResponse) GetWebhookURL() OptString {
	return s.WebhookURL
}

// GetWebhookFailoverURL returns the value of WebhookFailoverURL.
func (s *VerifyProfileResponse) GetWebhookFailoverURL() OptString {
	return s.WebhookFailoverURL
}

// GetRecordType returns the value of RecordType.
func (s *VerifyProfileResponse) GetRecordType() OptVerificationProfileRecordType {
	return s.RecordType
}

// GetCreatedAt returns the value of CreatedAt.
func (s *VerifyProfileResponse) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *VerifyProfileResponse) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetSMS returns the value of SMS.
func (s *VerifyProfileResponse) GetSMS() OptVerifyProfileSMSResponse {
	return s.SMS
}

// GetCall returns the value of Call.
func (s *VerifyProfileResponse) GetCall() OptVerifyProfileCallResponse {
	return s.Call
}

// GetFlashcall returns the value of Flashcall.
func (s *VerifyProfileResponse) GetFlashcall() OptVerifyProfileFlashcallResponse {
	return s.Flashcall
}

// GetLanguage returns the value of Language.
func (s *VerifyProfileResponse) GetLanguage() OptString {
	return s.Language
}

// SetID sets the value of ID.
func (s *VerifyProfileResponse) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *VerifyProfileResponse) SetName(val OptString) {
	s.Name = val
}

// SetWebhookURL sets the value of WebhookURL.
func (s *VerifyProfileResponse) SetWebhookURL(val OptString) {
	s.WebhookURL = val
}

// SetWebhookFailoverURL sets the value of WebhookFailoverURL.
func (s *VerifyProfileResponse) SetWebhookFailoverURL(val OptString) {
	s.WebhookFailoverURL = val
}

// SetRecordType sets the value of RecordType.
func (s *VerifyProfileResponse) SetRecordType(val OptVerificationProfileRecordType) {
	s.RecordType = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *VerifyProfileResponse) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *VerifyProfileResponse) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetSMS sets the value of SMS.
func (s *VerifyProfileResponse) SetSMS(val OptVerifyProfileSMSResponse) {
	s.SMS = val
}

// SetCall sets the value of Call.
func (s *VerifyProfileResponse) SetCall(val OptVerifyProfileCallResponse) {
	s.Call = val
}

// SetFlashcall sets the value of Flashcall.
func (s *VerifyProfileResponse) SetFlashcall(val OptVerifyProfileFlashcallResponse) {
	s.Flashcall = val
}

// SetLanguage sets the value of Language.
func (s *VerifyProfileResponse) SetLanguage(val OptString) {
	s.Language = val
}

// Ref: #/components/schemas/VerifyProfileResponseDataWrapper
type VerifyProfileResponseDataWrapper struct {
	Data OptVerifyProfileResponse `json:"data"`
}

// GetData returns the value of Data.
func (s *VerifyProfileResponseDataWrapper) GetData() OptVerifyProfileResponse {
	return s.Data
}

// SetData sets the value of Data.
func (s *VerifyProfileResponseDataWrapper) SetData(val OptVerifyProfileResponse) {
	s.Data = val
}

func (*VerifyProfileResponseDataWrapper) createVerifyProfileRes() {}
func (*VerifyProfileResponseDataWrapper) deleteProfileRes()       {}
func (*VerifyProfileResponseDataWrapper) getVerifyProfileRes()    {}
func (*VerifyProfileResponseDataWrapper) updateVerifyProfileRes() {}

// Ref: #/components/schemas/VerifyProfileSMSResponse
type VerifyProfileSMSResponse struct {
	// The message template identifier selected from /verify_profiles/templates.
	MessagingTemplateID OptUUID `json:"messaging_template_id"`
	// The name that identifies the application requesting 2fa in the verification message.
	AppName OptString `json:"app_name"`
	// The alphanumeric sender ID to use when sending to destinations that require an alphanumeric sender
	// ID.
	AlphaSender OptNilString `json:"alpha_sender"`
	// Enabled country destinations to send verification codes. The elements in the list must be valid
	// ISO 3166-1 alpha-2 country codes. If set to `["*"]`, all destinations will be allowed.
	WhitelistedDestinations []string `json:"whitelisted_destinations"`
	// For every request that is initiated via this Verify profile, this sets the number of seconds
	// before a verification request code expires. Once the verification request expires, the user cannot
	// use the code to verify their identity.
	DefaultVerificationTimeoutSecs OptInt `json:"default_verification_timeout_secs"`
}

// GetMessagingTemplateID returns the value of MessagingTemplateID.
func (s *VerifyProfileSMSResponse) GetMessagingTemplateID() OptUUID {
	return s.MessagingTemplateID
}

// GetAppName returns the value of AppName.
func (s *VerifyProfileSMSResponse) GetAppName() OptString {
	return s.AppName
}

// GetAlphaSender returns the value of AlphaSender.
func (s *VerifyProfileSMSResponse) GetAlphaSender() OptNilString {
	return s.AlphaSender
}

// GetWhitelistedDestinations returns the value of WhitelistedDestinations.
func (s *VerifyProfileSMSResponse) GetWhitelistedDestinations() []string {
	return s.WhitelistedDestinations
}

// GetDefaultVerificationTimeoutSecs returns the value of DefaultVerificationTimeoutSecs.
func (s *VerifyProfileSMSResponse) GetDefaultVerificationTimeoutSecs() OptInt {
	return s.DefaultVerificationTimeoutSecs
}

// SetMessagingTemplateID sets the value of MessagingTemplateID.
func (s *VerifyProfileSMSResponse) SetMessagingTemplateID(val OptUUID) {
	s.MessagingTemplateID = val
}

// SetAppName sets the value of AppName.
func (s *VerifyProfileSMSResponse) SetAppName(val OptString) {
	s.AppName = val
}

// SetAlphaSender sets the value of AlphaSender.
func (s *VerifyProfileSMSResponse) SetAlphaSender(val OptNilString) {
	s.AlphaSender = val
}

// SetWhitelistedDestinations sets the value of WhitelistedDestinations.
func (s *VerifyProfileSMSResponse) SetWhitelistedDestinations(val []string) {
	s.WhitelistedDestinations = val
}

// SetDefaultVerificationTimeoutSecs sets the value of DefaultVerificationTimeoutSecs.
func (s *VerifyProfileSMSResponse) SetDefaultVerificationTimeoutSecs(val OptInt) {
	s.DefaultVerificationTimeoutSecs = val
}

type VerifyVerificationCodeNotFound Errors

func (*VerifyVerificationCodeNotFound) verifyVerificationCodeRes() {}

type VerifyVerificationCodeReq struct {
	VerificationCode string `json:"verification_code"`
}

// GetVerificationCode returns the value of VerificationCode.
func (s *VerifyVerificationCodeReq) GetVerificationCode() string {
	return s.VerificationCode
}

// SetVerificationCode sets the value of VerificationCode.
func (s *VerifyVerificationCodeReq) SetVerificationCode(val string) {
	s.VerificationCode = val
}

// Ref: #/components/schemas/VerifyVerificationCodeRequest
type VerifyVerificationCodeRequest struct {
	// This is the code the user submits for verification.
	Code string `json:"code"`
	// The identifier of the associated Verify profile.
	VerifyProfileID uuid.UUID `json:"verify_profile_id"`
}

// GetCode returns the value of Code.
func (s *VerifyVerificationCodeRequest) GetCode() string {
	return s.Code
}

// GetVerifyProfileID returns the value of VerifyProfileID.
func (s *VerifyVerificationCodeRequest) GetVerifyProfileID() uuid.UUID {
	return s.VerifyProfileID
}

// SetCode sets the value of Code.
func (s *VerifyVerificationCodeRequest) SetCode(val string) {
	s.Code = val
}

// SetVerifyProfileID sets the value of VerifyProfileID.
func (s *VerifyVerificationCodeRequest) SetVerifyProfileID(val uuid.UUID) {
	s.VerifyProfileID = val
}

// Ref: #/components/schemas/VerifyVerificationCodeResponse
type VerifyVerificationCodeResponse struct {
	Data VerifyVerificationCodeResponseData `json:"data"`
}

// GetData returns the value of Data.
func (s *VerifyVerificationCodeResponse) GetData() VerifyVerificationCodeResponseData {
	return s.Data
}

// SetData sets the value of Data.
func (s *VerifyVerificationCodeResponse) SetData(val VerifyVerificationCodeResponseData) {
	s.Data = val
}

func (*VerifyVerificationCodeResponse) verifyVerificationCodeByPhoneNumberRes() {}

type VerifyVerificationCodeResponseData struct {
	// +E164 formatted phone number.
	PhoneNumber string `json:"phone_number"`
	// Identifies if the verification code has been accepted or rejected.
	ResponseCode VerifyVerificationCodeResponseDataResponseCode `json:"response_code"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *VerifyVerificationCodeResponseData) GetPhoneNumber() string {
	return s.PhoneNumber
}

// GetResponseCode returns the value of ResponseCode.
func (s *VerifyVerificationCodeResponseData) GetResponseCode() VerifyVerificationCodeResponseDataResponseCode {
	return s.ResponseCode
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *VerifyVerificationCodeResponseData) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// SetResponseCode sets the value of ResponseCode.
func (s *VerifyVerificationCodeResponseData) SetResponseCode(val VerifyVerificationCodeResponseDataResponseCode) {
	s.ResponseCode = val
}

// Identifies if the verification code has been accepted or rejected.
type VerifyVerificationCodeResponseDataResponseCode string

const (
	VerifyVerificationCodeResponseDataResponseCodeAccepted VerifyVerificationCodeResponseDataResponseCode = "accepted"
	VerifyVerificationCodeResponseDataResponseCodeRejected VerifyVerificationCodeResponseDataResponseCode = "rejected"
)

// AllValues returns all VerifyVerificationCodeResponseDataResponseCode values.
func (VerifyVerificationCodeResponseDataResponseCode) AllValues() []VerifyVerificationCodeResponseDataResponseCode {
	return []VerifyVerificationCodeResponseDataResponseCode{
		VerifyVerificationCodeResponseDataResponseCodeAccepted,
		VerifyVerificationCodeResponseDataResponseCodeRejected,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VerifyVerificationCodeResponseDataResponseCode) MarshalText() ([]byte, error) {
	switch s {
	case VerifyVerificationCodeResponseDataResponseCodeAccepted:
		return []byte(s), nil
	case VerifyVerificationCodeResponseDataResponseCodeRejected:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VerifyVerificationCodeResponseDataResponseCode) UnmarshalText(data []byte) error {
	switch VerifyVerificationCodeResponseDataResponseCode(data) {
	case VerifyVerificationCodeResponseDataResponseCodeAccepted:
		*s = VerifyVerificationCodeResponseDataResponseCodeAccepted
		return nil
	case VerifyVerificationCodeResponseDataResponseCodeRejected:
		*s = VerifyVerificationCodeResponseDataResponseCodeRejected
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type VerifyVerificationCodeUnauthorized Errors

func (*VerifyVerificationCodeUnauthorized) verifyVerificationCodeRes() {}

// Record of all attempts to deliver a webhook.
// Ref: #/components/schemas/webhook_delivery
type WebhookDelivery struct {
	// Uniquely identifies the webhook_delivery record.
	ID OptUUID `json:"id"`
	// Uniquely identifies the user that owns the webhook_delivery record.
	UserID OptUUID `json:"user_id"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	// Delivery status: 'delivered' when successfuly delivered or 'failed' if all attempts have failed.
	Status OptWebhookDeliveryStatus `json:"status"`
	// Original webhook JSON data. Payload fields vary according to event type.
	Webhook OptWebhookDeliveryWebhook `json:"webhook"`
	// ISO 8601 timestamp indicating when the first request attempt was initiated.
	StartedAt OptDateTime `json:"started_at"`
	// ISO 8601 timestamp indicating when the last webhook response has been received.
	FinishedAt OptDateTime `json:"finished_at"`
	// Detailed delivery attempts, ordered by most recent.
	Attempts []Attempt `json:"attempts"`
}

// GetID returns the value of ID.
func (s *WebhookDelivery) GetID() OptUUID {
	return s.ID
}

// GetUserID returns the value of UserID.
func (s *WebhookDelivery) GetUserID() OptUUID {
	return s.UserID
}

// GetRecordType returns the value of RecordType.
func (s *WebhookDelivery) GetRecordType() OptString {
	return s.RecordType
}

// GetStatus returns the value of Status.
func (s *WebhookDelivery) GetStatus() OptWebhookDeliveryStatus {
	return s.Status
}

// GetWebhook returns the value of Webhook.
func (s *WebhookDelivery) GetWebhook() OptWebhookDeliveryWebhook {
	return s.Webhook
}

// GetStartedAt returns the value of StartedAt.
func (s *WebhookDelivery) GetStartedAt() OptDateTime {
	return s.StartedAt
}

// GetFinishedAt returns the value of FinishedAt.
func (s *WebhookDelivery) GetFinishedAt() OptDateTime {
	return s.FinishedAt
}

// GetAttempts returns the value of Attempts.
func (s *WebhookDelivery) GetAttempts() []Attempt {
	return s.Attempts
}

// SetID sets the value of ID.
func (s *WebhookDelivery) SetID(val OptUUID) {
	s.ID = val
}

// SetUserID sets the value of UserID.
func (s *WebhookDelivery) SetUserID(val OptUUID) {
	s.UserID = val
}

// SetRecordType sets the value of RecordType.
func (s *WebhookDelivery) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetStatus sets the value of Status.
func (s *WebhookDelivery) SetStatus(val OptWebhookDeliveryStatus) {
	s.Status = val
}

// SetWebhook sets the value of Webhook.
func (s *WebhookDelivery) SetWebhook(val OptWebhookDeliveryWebhook) {
	s.Webhook = val
}

// SetStartedAt sets the value of StartedAt.
func (s *WebhookDelivery) SetStartedAt(val OptDateTime) {
	s.StartedAt = val
}

// SetFinishedAt sets the value of FinishedAt.
func (s *WebhookDelivery) SetFinishedAt(val OptDateTime) {
	s.FinishedAt = val
}

// SetAttempts sets the value of Attempts.
func (s *WebhookDelivery) SetAttempts(val []Attempt) {
	s.Attempts = val
}

// Delivery status: 'delivered' when successfuly delivered or 'failed' if all attempts have failed.
type WebhookDeliveryStatus string

const (
	WebhookDeliveryStatusDelivered WebhookDeliveryStatus = "delivered"
	WebhookDeliveryStatusFailed    WebhookDeliveryStatus = "failed"
)

// AllValues returns all WebhookDeliveryStatus values.
func (WebhookDeliveryStatus) AllValues() []WebhookDeliveryStatus {
	return []WebhookDeliveryStatus{
		WebhookDeliveryStatusDelivered,
		WebhookDeliveryStatusFailed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookDeliveryStatus) MarshalText() ([]byte, error) {
	switch s {
	case WebhookDeliveryStatusDelivered:
		return []byte(s), nil
	case WebhookDeliveryStatusFailed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookDeliveryStatus) UnmarshalText(data []byte) error {
	switch WebhookDeliveryStatus(data) {
	case WebhookDeliveryStatusDelivered:
		*s = WebhookDeliveryStatusDelivered
		return nil
	case WebhookDeliveryStatusFailed:
		*s = WebhookDeliveryStatusFailed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Original webhook JSON data. Payload fields vary according to event type.
type WebhookDeliveryWebhook struct {
	// Identifies the type of the resource.
	RecordType OptWebhookDeliveryWebhookRecordType `json:"record_type"`
	// The type of event being delivered.
	EventType OptString `json:"event_type"`
	// Identifies the type of resource.
	ID OptUUID `json:"id"`
	// ISO 8601 datetime of when the event occurred.
	OccurredAt OptDateTime                      `json:"occurred_at"`
	Payload    OptWebhookDeliveryWebhookPayload `json:"payload"`
}

// GetRecordType returns the value of RecordType.
func (s *WebhookDeliveryWebhook) GetRecordType() OptWebhookDeliveryWebhookRecordType {
	return s.RecordType
}

// GetEventType returns the value of EventType.
func (s *WebhookDeliveryWebhook) GetEventType() OptString {
	return s.EventType
}

// GetID returns the value of ID.
func (s *WebhookDeliveryWebhook) GetID() OptUUID {
	return s.ID
}

// GetOccurredAt returns the value of OccurredAt.
func (s *WebhookDeliveryWebhook) GetOccurredAt() OptDateTime {
	return s.OccurredAt
}

// GetPayload returns the value of Payload.
func (s *WebhookDeliveryWebhook) GetPayload() OptWebhookDeliveryWebhookPayload {
	return s.Payload
}

// SetRecordType sets the value of RecordType.
func (s *WebhookDeliveryWebhook) SetRecordType(val OptWebhookDeliveryWebhookRecordType) {
	s.RecordType = val
}

// SetEventType sets the value of EventType.
func (s *WebhookDeliveryWebhook) SetEventType(val OptString) {
	s.EventType = val
}

// SetID sets the value of ID.
func (s *WebhookDeliveryWebhook) SetID(val OptUUID) {
	s.ID = val
}

// SetOccurredAt sets the value of OccurredAt.
func (s *WebhookDeliveryWebhook) SetOccurredAt(val OptDateTime) {
	s.OccurredAt = val
}

// SetPayload sets the value of Payload.
func (s *WebhookDeliveryWebhook) SetPayload(val OptWebhookDeliveryWebhookPayload) {
	s.Payload = val
}

type WebhookDeliveryWebhookPayload map[string]jx.Raw

func (s *WebhookDeliveryWebhookPayload) init() WebhookDeliveryWebhookPayload {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Identifies the type of the resource.
type WebhookDeliveryWebhookRecordType string

const (
	WebhookDeliveryWebhookRecordTypeEvent WebhookDeliveryWebhookRecordType = "event"
)

// AllValues returns all WebhookDeliveryWebhookRecordType values.
func (WebhookDeliveryWebhookRecordType) AllValues() []WebhookDeliveryWebhookRecordType {
	return []WebhookDeliveryWebhookRecordType{
		WebhookDeliveryWebhookRecordTypeEvent,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookDeliveryWebhookRecordType) MarshalText() ([]byte, error) {
	switch s {
	case WebhookDeliveryWebhookRecordTypeEvent:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookDeliveryWebhookRecordType) UnmarshalText(data []byte) error {
	switch WebhookDeliveryWebhookRecordType(data) {
	case WebhookDeliveryWebhookRecordTypeEvent:
		*s = WebhookDeliveryWebhookRecordTypeEvent
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
