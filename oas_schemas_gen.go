// Code generated by ogen, DO NOT EDIT.

package telnyx

import (
	"io"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"

	ht "github.com/ogen-go/ogen/http"
)

type AccountSid string

// ActivatePortingOrderUnauthorized is response for ActivatePortingOrder operation.
type ActivatePortingOrderUnauthorized struct{}

func (*ActivatePortingOrderUnauthorized) activatePortingOrderRes() {}

// ActivatePortingOrderUnprocessableEntity is response for ActivatePortingOrder operation.
type ActivatePortingOrderUnprocessableEntity struct{}

func (*ActivatePortingOrderUnprocessableEntity) activatePortingOrderRes() {}

// Ref: #/components/schemas/ActiveCall
type ActiveCall struct {
	RecordType ActiveCallRecordType `json:"record_type"`
	// ID that is unique to the call session and can be used to correlate webhook events. Call session is
	// a group of related call legs that logically belong to the same phone call, e.g. an inbound and
	// outbound leg of a transferred call.
	CallSessionID string `json:"call_session_id"`
	// ID that is unique to the call and can be used to correlate webhook events.
	CallLegID string `json:"call_leg_id"`
	// Unique identifier and token for controlling the call.
	CallControlID string `json:"call_control_id"`
	// State received from a command.
	ClientState string `json:"client_state"`
	// Indicates the duration of the call in seconds.
	CallDuration int `json:"call_duration"`
}

// GetRecordType returns the value of RecordType.
func (s *ActiveCall) GetRecordType() ActiveCallRecordType {
	return s.RecordType
}

// GetCallSessionID returns the value of CallSessionID.
func (s *ActiveCall) GetCallSessionID() string {
	return s.CallSessionID
}

// GetCallLegID returns the value of CallLegID.
func (s *ActiveCall) GetCallLegID() string {
	return s.CallLegID
}

// GetCallControlID returns the value of CallControlID.
func (s *ActiveCall) GetCallControlID() string {
	return s.CallControlID
}

// GetClientState returns the value of ClientState.
func (s *ActiveCall) GetClientState() string {
	return s.ClientState
}

// GetCallDuration returns the value of CallDuration.
func (s *ActiveCall) GetCallDuration() int {
	return s.CallDuration
}

// SetRecordType sets the value of RecordType.
func (s *ActiveCall) SetRecordType(val ActiveCallRecordType) {
	s.RecordType = val
}

// SetCallSessionID sets the value of CallSessionID.
func (s *ActiveCall) SetCallSessionID(val string) {
	s.CallSessionID = val
}

// SetCallLegID sets the value of CallLegID.
func (s *ActiveCall) SetCallLegID(val string) {
	s.CallLegID = val
}

// SetCallControlID sets the value of CallControlID.
func (s *ActiveCall) SetCallControlID(val string) {
	s.CallControlID = val
}

// SetClientState sets the value of ClientState.
func (s *ActiveCall) SetClientState(val string) {
	s.ClientState = val
}

// SetCallDuration sets the value of CallDuration.
func (s *ActiveCall) SetCallDuration(val int) {
	s.CallDuration = val
}

type ActiveCallRecordType string

const (
	ActiveCallRecordTypeCall ActiveCallRecordType = "call"
)

// AllValues returns all ActiveCallRecordType values.
func (ActiveCallRecordType) AllValues() []ActiveCallRecordType {
	return []ActiveCallRecordType{
		ActiveCallRecordTypeCall,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ActiveCallRecordType) MarshalText() ([]byte, error) {
	switch s {
	case ActiveCallRecordTypeCall:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ActiveCallRecordType) UnmarshalText(data []byte) error {
	switch ActiveCallRecordType(data) {
	case ActiveCallRecordTypeCall:
		*s = ActiveCallRecordTypeCall
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ActiveCallsResponse struct {
	Data []ActiveCall            `json:"data"`
	Meta OptCursorPaginationMeta `json:"meta"`
}

// GetData returns the value of Data.
func (s *ActiveCallsResponse) GetData() []ActiveCall {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ActiveCallsResponse) GetMeta() OptCursorPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ActiveCallsResponse) SetData(val []ActiveCall) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ActiveCallsResponse) SetMeta(val OptCursorPaginationMeta) {
	s.Meta = val
}

func (*ActiveCallsResponse) listConnectionActiveCallsRes() {}

// `Latency` directs Telnyx to route media through the site with the lowest round-trip time to the
// user's connection. Telnyx calculates this time using ICMP ping messages. This can be disabled by
// specifying a site to handle all media.
// Ref: #/components/schemas/AnchorsiteOverride
type AnchorsiteOverride string

const (
	AnchorsiteOverrideLatency              AnchorsiteOverride = "Latency"
	AnchorsiteOverrideChicagoIL            AnchorsiteOverride = "Chicago, IL"
	AnchorsiteOverrideAshburnVA            AnchorsiteOverride = "Ashburn, VA"
	AnchorsiteOverrideSanJoseCA            AnchorsiteOverride = "San Jose, CA"
	AnchorsiteOverrideSydneyAustralia      AnchorsiteOverride = "Sydney, Australia"
	AnchorsiteOverrideAmsterdamNetherlands AnchorsiteOverride = "Amsterdam, Netherlands"
	AnchorsiteOverrideLondonUK             AnchorsiteOverride = "London, UK"
	AnchorsiteOverrideTorontoCanada        AnchorsiteOverride = "Toronto, Canada"
	AnchorsiteOverrideVancouverCanada      AnchorsiteOverride = "Vancouver, Canada"
	AnchorsiteOverrideFrankfurtGermany     AnchorsiteOverride = "Frankfurt, Germany"
)

// AllValues returns all AnchorsiteOverride values.
func (AnchorsiteOverride) AllValues() []AnchorsiteOverride {
	return []AnchorsiteOverride{
		AnchorsiteOverrideLatency,
		AnchorsiteOverrideChicagoIL,
		AnchorsiteOverrideAshburnVA,
		AnchorsiteOverrideSanJoseCA,
		AnchorsiteOverrideSydneyAustralia,
		AnchorsiteOverrideAmsterdamNetherlands,
		AnchorsiteOverrideLondonUK,
		AnchorsiteOverrideTorontoCanada,
		AnchorsiteOverrideVancouverCanada,
		AnchorsiteOverrideFrankfurtGermany,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AnchorsiteOverride) MarshalText() ([]byte, error) {
	switch s {
	case AnchorsiteOverrideLatency:
		return []byte(s), nil
	case AnchorsiteOverrideChicagoIL:
		return []byte(s), nil
	case AnchorsiteOverrideAshburnVA:
		return []byte(s), nil
	case AnchorsiteOverrideSanJoseCA:
		return []byte(s), nil
	case AnchorsiteOverrideSydneyAustralia:
		return []byte(s), nil
	case AnchorsiteOverrideAmsterdamNetherlands:
		return []byte(s), nil
	case AnchorsiteOverrideLondonUK:
		return []byte(s), nil
	case AnchorsiteOverrideTorontoCanada:
		return []byte(s), nil
	case AnchorsiteOverrideVancouverCanada:
		return []byte(s), nil
	case AnchorsiteOverrideFrankfurtGermany:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AnchorsiteOverride) UnmarshalText(data []byte) error {
	switch AnchorsiteOverride(data) {
	case AnchorsiteOverrideLatency:
		*s = AnchorsiteOverrideLatency
		return nil
	case AnchorsiteOverrideChicagoIL:
		*s = AnchorsiteOverrideChicagoIL
		return nil
	case AnchorsiteOverrideAshburnVA:
		*s = AnchorsiteOverrideAshburnVA
		return nil
	case AnchorsiteOverrideSanJoseCA:
		*s = AnchorsiteOverrideSanJoseCA
		return nil
	case AnchorsiteOverrideSydneyAustralia:
		*s = AnchorsiteOverrideSydneyAustralia
		return nil
	case AnchorsiteOverrideAmsterdamNetherlands:
		*s = AnchorsiteOverrideAmsterdamNetherlands
		return nil
	case AnchorsiteOverrideLondonUK:
		*s = AnchorsiteOverrideLondonUK
		return nil
	case AnchorsiteOverrideTorontoCanada:
		*s = AnchorsiteOverrideTorontoCanada
		return nil
	case AnchorsiteOverrideVancouverCanada:
		*s = AnchorsiteOverrideVancouverCanada
		return nil
	case AnchorsiteOverrideFrankfurtGermany:
		*s = AnchorsiteOverrideFrankfurtGermany
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AnswerRequest
type AnswerRequest struct {
	// Use this field to set the Billing Group ID for the call. Must be a valid and existing Billing
	// Group ID.
	BillingGroupID OptUUID `json:"billing_group_id"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
	// Custom headers to be added to the SIP INVITE response.
	CustomHeaders []CustomSipHeader `json:"custom_headers"`
	// The list of comma-separated codecs in a preferred order for the forked media to be received.
	PreferredCodecs OptAnswerRequestPreferredCodecs `json:"preferred_codecs"`
	// SIP headers to be added to the SIP INVITE response. Currently only User-to-User header is
	// supported.
	SipHeaders         []SipHeader           `json:"sip_headers"`
	SoundModifications OptSoundModifications `json:"sound_modifications"`
	// The destination WebSocket address where the stream is going to be delivered.
	StreamURL OptString `json:"stream_url"`
	// Specifies which track should be streamed.
	StreamTrack OptAnswerRequestStreamTrack `json:"stream_track"`
	// Generate silence RTP packets when no transmission available.
	SendSilenceWhenIdle OptBool `json:"send_silence_when_idle"`
	// Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.
	WebhookURL OptString `json:"webhook_url"`
	// HTTP request type used for `webhook_url`.
	WebhookURLMethod OptAnswerRequestWebhookURLMethod `json:"webhook_url_method"`
}

// GetBillingGroupID returns the value of BillingGroupID.
func (s *AnswerRequest) GetBillingGroupID() OptUUID {
	return s.BillingGroupID
}

// GetClientState returns the value of ClientState.
func (s *AnswerRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *AnswerRequest) GetCommandID() OptString {
	return s.CommandID
}

// GetCustomHeaders returns the value of CustomHeaders.
func (s *AnswerRequest) GetCustomHeaders() []CustomSipHeader {
	return s.CustomHeaders
}

// GetPreferredCodecs returns the value of PreferredCodecs.
func (s *AnswerRequest) GetPreferredCodecs() OptAnswerRequestPreferredCodecs {
	return s.PreferredCodecs
}

// GetSipHeaders returns the value of SipHeaders.
func (s *AnswerRequest) GetSipHeaders() []SipHeader {
	return s.SipHeaders
}

// GetSoundModifications returns the value of SoundModifications.
func (s *AnswerRequest) GetSoundModifications() OptSoundModifications {
	return s.SoundModifications
}

// GetStreamURL returns the value of StreamURL.
func (s *AnswerRequest) GetStreamURL() OptString {
	return s.StreamURL
}

// GetStreamTrack returns the value of StreamTrack.
func (s *AnswerRequest) GetStreamTrack() OptAnswerRequestStreamTrack {
	return s.StreamTrack
}

// GetSendSilenceWhenIdle returns the value of SendSilenceWhenIdle.
func (s *AnswerRequest) GetSendSilenceWhenIdle() OptBool {
	return s.SendSilenceWhenIdle
}

// GetWebhookURL returns the value of WebhookURL.
func (s *AnswerRequest) GetWebhookURL() OptString {
	return s.WebhookURL
}

// GetWebhookURLMethod returns the value of WebhookURLMethod.
func (s *AnswerRequest) GetWebhookURLMethod() OptAnswerRequestWebhookURLMethod {
	return s.WebhookURLMethod
}

// SetBillingGroupID sets the value of BillingGroupID.
func (s *AnswerRequest) SetBillingGroupID(val OptUUID) {
	s.BillingGroupID = val
}

// SetClientState sets the value of ClientState.
func (s *AnswerRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *AnswerRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// SetCustomHeaders sets the value of CustomHeaders.
func (s *AnswerRequest) SetCustomHeaders(val []CustomSipHeader) {
	s.CustomHeaders = val
}

// SetPreferredCodecs sets the value of PreferredCodecs.
func (s *AnswerRequest) SetPreferredCodecs(val OptAnswerRequestPreferredCodecs) {
	s.PreferredCodecs = val
}

// SetSipHeaders sets the value of SipHeaders.
func (s *AnswerRequest) SetSipHeaders(val []SipHeader) {
	s.SipHeaders = val
}

// SetSoundModifications sets the value of SoundModifications.
func (s *AnswerRequest) SetSoundModifications(val OptSoundModifications) {
	s.SoundModifications = val
}

// SetStreamURL sets the value of StreamURL.
func (s *AnswerRequest) SetStreamURL(val OptString) {
	s.StreamURL = val
}

// SetStreamTrack sets the value of StreamTrack.
func (s *AnswerRequest) SetStreamTrack(val OptAnswerRequestStreamTrack) {
	s.StreamTrack = val
}

// SetSendSilenceWhenIdle sets the value of SendSilenceWhenIdle.
func (s *AnswerRequest) SetSendSilenceWhenIdle(val OptBool) {
	s.SendSilenceWhenIdle = val
}

// SetWebhookURL sets the value of WebhookURL.
func (s *AnswerRequest) SetWebhookURL(val OptString) {
	s.WebhookURL = val
}

// SetWebhookURLMethod sets the value of WebhookURLMethod.
func (s *AnswerRequest) SetWebhookURLMethod(val OptAnswerRequestWebhookURLMethod) {
	s.WebhookURLMethod = val
}

// The list of comma-separated codecs in a preferred order for the forked media to be received.
type AnswerRequestPreferredCodecs string

const (
	AnswerRequestPreferredCodecsG722PCMUPCMAG729OPUSVP8H264 AnswerRequestPreferredCodecs = "G722,PCMU,PCMA,G729,OPUS,VP8,H264"
)

// AllValues returns all AnswerRequestPreferredCodecs values.
func (AnswerRequestPreferredCodecs) AllValues() []AnswerRequestPreferredCodecs {
	return []AnswerRequestPreferredCodecs{
		AnswerRequestPreferredCodecsG722PCMUPCMAG729OPUSVP8H264,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AnswerRequestPreferredCodecs) MarshalText() ([]byte, error) {
	switch s {
	case AnswerRequestPreferredCodecsG722PCMUPCMAG729OPUSVP8H264:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AnswerRequestPreferredCodecs) UnmarshalText(data []byte) error {
	switch AnswerRequestPreferredCodecs(data) {
	case AnswerRequestPreferredCodecsG722PCMUPCMAG729OPUSVP8H264:
		*s = AnswerRequestPreferredCodecsG722PCMUPCMAG729OPUSVP8H264
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Specifies which track should be streamed.
type AnswerRequestStreamTrack string

const (
	AnswerRequestStreamTrackInboundTrack  AnswerRequestStreamTrack = "inbound_track"
	AnswerRequestStreamTrackOutboundTrack AnswerRequestStreamTrack = "outbound_track"
	AnswerRequestStreamTrackBothTracks    AnswerRequestStreamTrack = "both_tracks"
)

// AllValues returns all AnswerRequestStreamTrack values.
func (AnswerRequestStreamTrack) AllValues() []AnswerRequestStreamTrack {
	return []AnswerRequestStreamTrack{
		AnswerRequestStreamTrackInboundTrack,
		AnswerRequestStreamTrackOutboundTrack,
		AnswerRequestStreamTrackBothTracks,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AnswerRequestStreamTrack) MarshalText() ([]byte, error) {
	switch s {
	case AnswerRequestStreamTrackInboundTrack:
		return []byte(s), nil
	case AnswerRequestStreamTrackOutboundTrack:
		return []byte(s), nil
	case AnswerRequestStreamTrackBothTracks:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AnswerRequestStreamTrack) UnmarshalText(data []byte) error {
	switch AnswerRequestStreamTrack(data) {
	case AnswerRequestStreamTrackInboundTrack:
		*s = AnswerRequestStreamTrackInboundTrack
		return nil
	case AnswerRequestStreamTrackOutboundTrack:
		*s = AnswerRequestStreamTrackOutboundTrack
		return nil
	case AnswerRequestStreamTrackBothTracks:
		*s = AnswerRequestStreamTrackBothTracks
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request type used for `webhook_url`.
type AnswerRequestWebhookURLMethod string

const (
	AnswerRequestWebhookURLMethodPOST AnswerRequestWebhookURLMethod = "POST"
	AnswerRequestWebhookURLMethodGET  AnswerRequestWebhookURLMethod = "GET"
)

// AllValues returns all AnswerRequestWebhookURLMethod values.
func (AnswerRequestWebhookURLMethod) AllValues() []AnswerRequestWebhookURLMethod {
	return []AnswerRequestWebhookURLMethod{
		AnswerRequestWebhookURLMethodPOST,
		AnswerRequestWebhookURLMethodGET,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AnswerRequestWebhookURLMethod) MarshalText() ([]byte, error) {
	switch s {
	case AnswerRequestWebhookURLMethodPOST:
		return []byte(s), nil
	case AnswerRequestWebhookURLMethodGET:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AnswerRequestWebhookURLMethod) UnmarshalText(data []byte) error {
	switch AnswerRequestWebhookURLMethod(data) {
	case AnswerRequestWebhookURLMethodPOST:
		*s = AnswerRequestWebhookURLMethodPOST
		return nil
	case AnswerRequestWebhookURLMethodGET:
		*s = AnswerRequestWebhookURLMethodGET
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ApplicationName string

type AssignPhoneNumberReq struct {
	PhoneNumber string `json:"phone_number"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *AssignPhoneNumberReq) GetPhoneNumber() string {
	return s.PhoneNumber
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *AssignPhoneNumberReq) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// Webhook delivery attempt details.
// Ref: #/components/schemas/attempt
type Attempt struct {
	Status OptAttemptStatus `json:"status"`
	// ISO 8601 timestamp indicating when the attempt was initiated.
	StartedAt OptDateTime `json:"started_at"`
	// ISO 8601 timestamp indicating when the attempt has finished.
	FinishedAt OptDateTime `json:"finished_at"`
	HTTP       OptHTTP     `json:"http"`
	// Webhook delivery error codes.
	Errors []int `json:"errors"`
}

// GetStatus returns the value of Status.
func (s *Attempt) GetStatus() OptAttemptStatus {
	return s.Status
}

// GetStartedAt returns the value of StartedAt.
func (s *Attempt) GetStartedAt() OptDateTime {
	return s.StartedAt
}

// GetFinishedAt returns the value of FinishedAt.
func (s *Attempt) GetFinishedAt() OptDateTime {
	return s.FinishedAt
}

// GetHTTP returns the value of HTTP.
func (s *Attempt) GetHTTP() OptHTTP {
	return s.HTTP
}

// GetErrors returns the value of Errors.
func (s *Attempt) GetErrors() []int {
	return s.Errors
}

// SetStatus sets the value of Status.
func (s *Attempt) SetStatus(val OptAttemptStatus) {
	s.Status = val
}

// SetStartedAt sets the value of StartedAt.
func (s *Attempt) SetStartedAt(val OptDateTime) {
	s.StartedAt = val
}

// SetFinishedAt sets the value of FinishedAt.
func (s *Attempt) SetFinishedAt(val OptDateTime) {
	s.FinishedAt = val
}

// SetHTTP sets the value of HTTP.
func (s *Attempt) SetHTTP(val OptHTTP) {
	s.HTTP = val
}

// SetErrors sets the value of Errors.
func (s *Attempt) SetErrors(val []int) {
	s.Errors = val
}

type AttemptStatus string

const (
	AttemptStatusDelivered AttemptStatus = "delivered"
	AttemptStatusFailed    AttemptStatus = "failed"
)

// AllValues returns all AttemptStatus values.
func (AttemptStatus) AllValues() []AttemptStatus {
	return []AttemptStatus{
		AttemptStatusDelivered,
		AttemptStatusFailed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AttemptStatus) MarshalText() ([]byte, error) {
	switch s {
	case AttemptStatusDelivered:
		return []byte(s), nil
	case AttemptStatusFailed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AttemptStatus) UnmarshalText(data []byte) error {
	switch AttemptStatus(data) {
	case AttemptStatusDelivered:
		*s = AttemptStatusDelivered
		return nil
	case AttemptStatusFailed:
		*s = AttemptStatusFailed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AudioTranscriptionRequest
type AudioTranscriptionRequestMultipart struct {
	// The audio file object to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg,
	//  wav, or webm. File uploads are limited to 100 MB.
	File ht.MultipartFile `json:"file"`
	// ID of the model to use. Only `distil-whisper/distil-large-v2` is currently available.
	Model AudioTranscriptionRequestMultipartModel `json:"model"`
	// The format of the transcript output. Use `verbose_json` to take advantage of timestamps.
	ResponseFormat OptAudioTranscriptionRequestMultipartResponseFormat `json:"response_format"`
	// The timestamp granularities to populate for this transcription. `response_format` must be set
	// verbose_json to use timestamp granularities. Currently `segment` is supported.
	TimestampGranularities OptAudioTranscriptionRequestMultipartTimestampGranularities `json:"timestamp_granularities[]"`
}

// GetFile returns the value of File.
func (s *AudioTranscriptionRequestMultipart) GetFile() ht.MultipartFile {
	return s.File
}

// GetModel returns the value of Model.
func (s *AudioTranscriptionRequestMultipart) GetModel() AudioTranscriptionRequestMultipartModel {
	return s.Model
}

// GetResponseFormat returns the value of ResponseFormat.
func (s *AudioTranscriptionRequestMultipart) GetResponseFormat() OptAudioTranscriptionRequestMultipartResponseFormat {
	return s.ResponseFormat
}

// GetTimestampGranularities returns the value of TimestampGranularities.
func (s *AudioTranscriptionRequestMultipart) GetTimestampGranularities() OptAudioTranscriptionRequestMultipartTimestampGranularities {
	return s.TimestampGranularities
}

// SetFile sets the value of File.
func (s *AudioTranscriptionRequestMultipart) SetFile(val ht.MultipartFile) {
	s.File = val
}

// SetModel sets the value of Model.
func (s *AudioTranscriptionRequestMultipart) SetModel(val AudioTranscriptionRequestMultipartModel) {
	s.Model = val
}

// SetResponseFormat sets the value of ResponseFormat.
func (s *AudioTranscriptionRequestMultipart) SetResponseFormat(val OptAudioTranscriptionRequestMultipartResponseFormat) {
	s.ResponseFormat = val
}

// SetTimestampGranularities sets the value of TimestampGranularities.
func (s *AudioTranscriptionRequestMultipart) SetTimestampGranularities(val OptAudioTranscriptionRequestMultipartTimestampGranularities) {
	s.TimestampGranularities = val
}

// ID of the model to use. Only `distil-whisper/distil-large-v2` is currently available.
type AudioTranscriptionRequestMultipartModel string

const (
	AudioTranscriptionRequestMultipartModelDistilWhisperDistilLargeV2 AudioTranscriptionRequestMultipartModel = "distil-whisper/distil-large-v2"
)

// AllValues returns all AudioTranscriptionRequestMultipartModel values.
func (AudioTranscriptionRequestMultipartModel) AllValues() []AudioTranscriptionRequestMultipartModel {
	return []AudioTranscriptionRequestMultipartModel{
		AudioTranscriptionRequestMultipartModelDistilWhisperDistilLargeV2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AudioTranscriptionRequestMultipartModel) MarshalText() ([]byte, error) {
	switch s {
	case AudioTranscriptionRequestMultipartModelDistilWhisperDistilLargeV2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AudioTranscriptionRequestMultipartModel) UnmarshalText(data []byte) error {
	switch AudioTranscriptionRequestMultipartModel(data) {
	case AudioTranscriptionRequestMultipartModelDistilWhisperDistilLargeV2:
		*s = AudioTranscriptionRequestMultipartModelDistilWhisperDistilLargeV2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The format of the transcript output. Use `verbose_json` to take advantage of timestamps.
type AudioTranscriptionRequestMultipartResponseFormat string

const (
	AudioTranscriptionRequestMultipartResponseFormatJSON        AudioTranscriptionRequestMultipartResponseFormat = "json"
	AudioTranscriptionRequestMultipartResponseFormatVerboseJSON AudioTranscriptionRequestMultipartResponseFormat = "verbose_json"
)

// AllValues returns all AudioTranscriptionRequestMultipartResponseFormat values.
func (AudioTranscriptionRequestMultipartResponseFormat) AllValues() []AudioTranscriptionRequestMultipartResponseFormat {
	return []AudioTranscriptionRequestMultipartResponseFormat{
		AudioTranscriptionRequestMultipartResponseFormatJSON,
		AudioTranscriptionRequestMultipartResponseFormatVerboseJSON,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AudioTranscriptionRequestMultipartResponseFormat) MarshalText() ([]byte, error) {
	switch s {
	case AudioTranscriptionRequestMultipartResponseFormatJSON:
		return []byte(s), nil
	case AudioTranscriptionRequestMultipartResponseFormatVerboseJSON:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AudioTranscriptionRequestMultipartResponseFormat) UnmarshalText(data []byte) error {
	switch AudioTranscriptionRequestMultipartResponseFormat(data) {
	case AudioTranscriptionRequestMultipartResponseFormatJSON:
		*s = AudioTranscriptionRequestMultipartResponseFormatJSON
		return nil
	case AudioTranscriptionRequestMultipartResponseFormatVerboseJSON:
		*s = AudioTranscriptionRequestMultipartResponseFormatVerboseJSON
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The timestamp granularities to populate for this transcription. `response_format` must be set
// verbose_json to use timestamp granularities. Currently `segment` is supported.
type AudioTranscriptionRequestMultipartTimestampGranularities string

const (
	AudioTranscriptionRequestMultipartTimestampGranularitiesSegment AudioTranscriptionRequestMultipartTimestampGranularities = "segment"
)

// AllValues returns all AudioTranscriptionRequestMultipartTimestampGranularities values.
func (AudioTranscriptionRequestMultipartTimestampGranularities) AllValues() []AudioTranscriptionRequestMultipartTimestampGranularities {
	return []AudioTranscriptionRequestMultipartTimestampGranularities{
		AudioTranscriptionRequestMultipartTimestampGranularitiesSegment,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AudioTranscriptionRequestMultipartTimestampGranularities) MarshalText() ([]byte, error) {
	switch s {
	case AudioTranscriptionRequestMultipartTimestampGranularitiesSegment:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AudioTranscriptionRequestMultipartTimestampGranularities) UnmarshalText(data []byte) error {
	switch AudioTranscriptionRequestMultipartTimestampGranularities(data) {
	case AudioTranscriptionRequestMultipartTimestampGranularitiesSegment:
		*s = AudioTranscriptionRequestMultipartTimestampGranularitiesSegment
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AudioTranscriptionResponse
type AudioTranscriptionResponse struct {
	// The transcribed text for the audio file.
	Text string `json:"text"`
	// The duration of the audio file in seconds. This is only included if `response_format` is set to
	// `verbose_json`.
	Duration OptFloat64 `json:"duration"`
	// Segments of the transcribed text and their corresponding details. This is only included if
	// `response_format` is set to `verbose_json`.
	Segments []AudioTranscriptionResponseSegments `json:"segments"`
}

// GetText returns the value of Text.
func (s *AudioTranscriptionResponse) GetText() string {
	return s.Text
}

// GetDuration returns the value of Duration.
func (s *AudioTranscriptionResponse) GetDuration() OptFloat64 {
	return s.Duration
}

// GetSegments returns the value of Segments.
func (s *AudioTranscriptionResponse) GetSegments() []AudioTranscriptionResponseSegments {
	return s.Segments
}

// SetText sets the value of Text.
func (s *AudioTranscriptionResponse) SetText(val string) {
	s.Text = val
}

// SetDuration sets the value of Duration.
func (s *AudioTranscriptionResponse) SetDuration(val OptFloat64) {
	s.Duration = val
}

// SetSegments sets the value of Segments.
func (s *AudioTranscriptionResponse) SetSegments(val []AudioTranscriptionResponseSegments) {
	s.Segments = val
}

func (*AudioTranscriptionResponse) audioPublicAudioTranscriptionsPostRes() {}

// Ref: #/components/schemas/AudioTranscriptionResponseSegments
type AudioTranscriptionResponseSegments struct {
	// Unique identifier of the segment.
	ID float64 `json:"id"`
	// Start time of the segment in seconds.
	Start float64 `json:"start"`
	// End time of the segment in seconds.
	End float64 `json:"end"`
	// Text content of the segment.
	Text string `json:"text"`
}

// GetID returns the value of ID.
func (s *AudioTranscriptionResponseSegments) GetID() float64 {
	return s.ID
}

// GetStart returns the value of Start.
func (s *AudioTranscriptionResponseSegments) GetStart() float64 {
	return s.Start
}

// GetEnd returns the value of End.
func (s *AudioTranscriptionResponseSegments) GetEnd() float64 {
	return s.End
}

// GetText returns the value of Text.
func (s *AudioTranscriptionResponseSegments) GetText() string {
	return s.Text
}

// SetID sets the value of ID.
func (s *AudioTranscriptionResponseSegments) SetID(val float64) {
	s.ID = val
}

// SetStart sets the value of Start.
func (s *AudioTranscriptionResponseSegments) SetStart(val float64) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *AudioTranscriptionResponseSegments) SetEnd(val float64) {
	s.End = val
}

// SetText sets the value of Text.
func (s *AudioTranscriptionResponseSegments) SetText(val string) {
	s.Text = val
}

// Ref: #/components/schemas/AvailablePhoneNumber
type AvailablePhoneNumber struct {
	RecordType   OptAvailablePhoneNumberRecordType `json:"record_type"`
	PhoneNumber  OptString                         `json:"phone_number"`
	VanityFormat OptString                         `json:"vanity_format"`
	// Specifies whether the phone number is an exact match based on the search criteria or not.
	BestEffort OptBool `json:"best_effort"`
	// Specifies whether the phone number can receive calls immediately after purchase or not.
	Quickship OptBool `json:"quickship"`
	// Specifies whether the phone number can be reserved before purchase or not.
	Reservable        OptBool             `json:"reservable"`
	RegionInformation []RegionInformation `json:"region_information"`
	CostInformation   OptCostInformation  `json:"cost_information"`
	Features          []Feature           `json:"features"`
}

// GetRecordType returns the value of RecordType.
func (s *AvailablePhoneNumber) GetRecordType() OptAvailablePhoneNumberRecordType {
	return s.RecordType
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *AvailablePhoneNumber) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetVanityFormat returns the value of VanityFormat.
func (s *AvailablePhoneNumber) GetVanityFormat() OptString {
	return s.VanityFormat
}

// GetBestEffort returns the value of BestEffort.
func (s *AvailablePhoneNumber) GetBestEffort() OptBool {
	return s.BestEffort
}

// GetQuickship returns the value of Quickship.
func (s *AvailablePhoneNumber) GetQuickship() OptBool {
	return s.Quickship
}

// GetReservable returns the value of Reservable.
func (s *AvailablePhoneNumber) GetReservable() OptBool {
	return s.Reservable
}

// GetRegionInformation returns the value of RegionInformation.
func (s *AvailablePhoneNumber) GetRegionInformation() []RegionInformation {
	return s.RegionInformation
}

// GetCostInformation returns the value of CostInformation.
func (s *AvailablePhoneNumber) GetCostInformation() OptCostInformation {
	return s.CostInformation
}

// GetFeatures returns the value of Features.
func (s *AvailablePhoneNumber) GetFeatures() []Feature {
	return s.Features
}

// SetRecordType sets the value of RecordType.
func (s *AvailablePhoneNumber) SetRecordType(val OptAvailablePhoneNumberRecordType) {
	s.RecordType = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *AvailablePhoneNumber) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetVanityFormat sets the value of VanityFormat.
func (s *AvailablePhoneNumber) SetVanityFormat(val OptString) {
	s.VanityFormat = val
}

// SetBestEffort sets the value of BestEffort.
func (s *AvailablePhoneNumber) SetBestEffort(val OptBool) {
	s.BestEffort = val
}

// SetQuickship sets the value of Quickship.
func (s *AvailablePhoneNumber) SetQuickship(val OptBool) {
	s.Quickship = val
}

// SetReservable sets the value of Reservable.
func (s *AvailablePhoneNumber) SetReservable(val OptBool) {
	s.Reservable = val
}

// SetRegionInformation sets the value of RegionInformation.
func (s *AvailablePhoneNumber) SetRegionInformation(val []RegionInformation) {
	s.RegionInformation = val
}

// SetCostInformation sets the value of CostInformation.
func (s *AvailablePhoneNumber) SetCostInformation(val OptCostInformation) {
	s.CostInformation = val
}

// SetFeatures sets the value of Features.
func (s *AvailablePhoneNumber) SetFeatures(val []Feature) {
	s.Features = val
}

// Ref: #/components/schemas/AvailablePhoneNumberBlock
type AvailablePhoneNumberBlock struct {
	RecordType        OptAvailablePhoneNumberBlockRecordType `json:"record_type"`
	StartingNumber    OptString                              `json:"starting_number"`
	Range             OptInt                                 `json:"range"`
	RegionInformation []RegionInformation                    `json:"region_information"`
	CostInformation   OptCostInformation                     `json:"cost_information"`
	Features          []Feature                              `json:"features"`
}

// GetRecordType returns the value of RecordType.
func (s *AvailablePhoneNumberBlock) GetRecordType() OptAvailablePhoneNumberBlockRecordType {
	return s.RecordType
}

// GetStartingNumber returns the value of StartingNumber.
func (s *AvailablePhoneNumberBlock) GetStartingNumber() OptString {
	return s.StartingNumber
}

// GetRange returns the value of Range.
func (s *AvailablePhoneNumberBlock) GetRange() OptInt {
	return s.Range
}

// GetRegionInformation returns the value of RegionInformation.
func (s *AvailablePhoneNumberBlock) GetRegionInformation() []RegionInformation {
	return s.RegionInformation
}

// GetCostInformation returns the value of CostInformation.
func (s *AvailablePhoneNumberBlock) GetCostInformation() OptCostInformation {
	return s.CostInformation
}

// GetFeatures returns the value of Features.
func (s *AvailablePhoneNumberBlock) GetFeatures() []Feature {
	return s.Features
}

// SetRecordType sets the value of RecordType.
func (s *AvailablePhoneNumberBlock) SetRecordType(val OptAvailablePhoneNumberBlockRecordType) {
	s.RecordType = val
}

// SetStartingNumber sets the value of StartingNumber.
func (s *AvailablePhoneNumberBlock) SetStartingNumber(val OptString) {
	s.StartingNumber = val
}

// SetRange sets the value of Range.
func (s *AvailablePhoneNumberBlock) SetRange(val OptInt) {
	s.Range = val
}

// SetRegionInformation sets the value of RegionInformation.
func (s *AvailablePhoneNumberBlock) SetRegionInformation(val []RegionInformation) {
	s.RegionInformation = val
}

// SetCostInformation sets the value of CostInformation.
func (s *AvailablePhoneNumberBlock) SetCostInformation(val OptCostInformation) {
	s.CostInformation = val
}

// SetFeatures sets the value of Features.
func (s *AvailablePhoneNumberBlock) SetFeatures(val []Feature) {
	s.Features = val
}

type AvailablePhoneNumberBlockRecordType string

const (
	AvailablePhoneNumberBlockRecordTypeAvailablePhoneNumberBlock AvailablePhoneNumberBlockRecordType = "available_phone_number_block"
)

// AllValues returns all AvailablePhoneNumberBlockRecordType values.
func (AvailablePhoneNumberBlockRecordType) AllValues() []AvailablePhoneNumberBlockRecordType {
	return []AvailablePhoneNumberBlockRecordType{
		AvailablePhoneNumberBlockRecordTypeAvailablePhoneNumberBlock,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AvailablePhoneNumberBlockRecordType) MarshalText() ([]byte, error) {
	switch s {
	case AvailablePhoneNumberBlockRecordTypeAvailablePhoneNumberBlock:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AvailablePhoneNumberBlockRecordType) UnmarshalText(data []byte) error {
	switch AvailablePhoneNumberBlockRecordType(data) {
	case AvailablePhoneNumberBlockRecordTypeAvailablePhoneNumberBlock:
		*s = AvailablePhoneNumberBlockRecordTypeAvailablePhoneNumberBlock
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type AvailablePhoneNumberRecordType string

const (
	AvailablePhoneNumberRecordTypeAvailablePhoneNumber AvailablePhoneNumberRecordType = "available_phone_number"
)

// AllValues returns all AvailablePhoneNumberRecordType values.
func (AvailablePhoneNumberRecordType) AllValues() []AvailablePhoneNumberRecordType {
	return []AvailablePhoneNumberRecordType{
		AvailablePhoneNumberRecordTypeAvailablePhoneNumber,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AvailablePhoneNumberRecordType) MarshalText() ([]byte, error) {
	switch s {
	case AvailablePhoneNumberRecordTypeAvailablePhoneNumber:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AvailablePhoneNumberRecordType) UnmarshalText(data []byte) error {
	switch AvailablePhoneNumberRecordType(data) {
	case AvailablePhoneNumberRecordTypeAvailablePhoneNumber:
		*s = AvailablePhoneNumberRecordTypeAvailablePhoneNumber
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AvailablePhoneNumbersMetadata
type AvailablePhoneNumbersMetadata struct {
	TotalResults      OptInt `json:"total_results"`
	BestEffortResults OptInt `json:"best_effort_results"`
}

// GetTotalResults returns the value of TotalResults.
func (s *AvailablePhoneNumbersMetadata) GetTotalResults() OptInt {
	return s.TotalResults
}

// GetBestEffortResults returns the value of BestEffortResults.
func (s *AvailablePhoneNumbersMetadata) GetBestEffortResults() OptInt {
	return s.BestEffortResults
}

// SetTotalResults sets the value of TotalResults.
func (s *AvailablePhoneNumbersMetadata) SetTotalResults(val OptInt) {
	s.TotalResults = val
}

// SetBestEffortResults sets the value of BestEffortResults.
func (s *AvailablePhoneNumbersMetadata) SetBestEffortResults(val OptInt) {
	s.BestEffortResults = val
}

type AwsAccessKeyId string

type AwsSecretAccessKey string

type AzureAccountKey string

type AzureAccountName string

// Ref: #/components/schemas/AzureConfigurationData
type AzureConfigurationData struct {
	Bucket      OptBucket           `json:"bucket"`
	AccountName OptAzureAccountName `json:"account_name"`
	AccountKey  OptAzureAccountKey  `json:"account_key"`
}

// GetBucket returns the value of Bucket.
func (s *AzureConfigurationData) GetBucket() OptBucket {
	return s.Bucket
}

// GetAccountName returns the value of AccountName.
func (s *AzureConfigurationData) GetAccountName() OptAzureAccountName {
	return s.AccountName
}

// GetAccountKey returns the value of AccountKey.
func (s *AzureConfigurationData) GetAccountKey() OptAzureAccountKey {
	return s.AccountKey
}

// SetBucket sets the value of Bucket.
func (s *AzureConfigurationData) SetBucket(val OptBucket) {
	s.Bucket = val
}

// SetAccountName sets the value of AccountName.
func (s *AzureConfigurationData) SetAccountName(val OptAzureAccountName) {
	s.AccountName = val
}

// SetAccountKey sets the value of AccountKey.
func (s *AzureConfigurationData) SetAccountKey(val OptAzureAccountKey) {
	s.AccountKey = val
}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// Ref: #/components/schemas/BridgeRequest
type BridgeRequest struct {
	// The Call Control ID of the call you want to bridge with, can't be used together with queue
	// parameter or video_room_id parameter.
	CallControlID string `json:"call_control_id"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
	// The name of the queue you want to bridge with, can't be used together with call_control_id
	// parameter or video_room_id parameter. Bridging with a queue means bridging with the first call in
	// the queue. The call will always be removed from the queue regardless of whether bridging succeeds.
	// Returns an error when the queue is empty.
	Queue OptString `json:"queue"`
	// The ID of the video room you want to bridge with, can't be used together with call_control_id
	// parameter or queue parameter.
	VideoRoomID OptUUID `json:"video_room_id"`
	// The additional parameter that will be passed to the video conference. It is a text field and the
	// user can decide how to use it. For example, you can set the participant name or pass JSON text. It
	// can be used only with video_room_id parameter.
	VideoRoomContext OptString `json:"video_room_context"`
	// Specifies behavior after the bridge ends (i.e. the opposite leg either hangs up or is transferred).
	//  If supplied with the value `self`, the current leg will be parked after unbridge. If not set, the
	// default behavior is to hang up the leg.
	ParkAfterUnbridge OptString `json:"park_after_unbridge"`
	// Specifies whether to play a ringtone if the call you want to bridge with has not yet been answered.
	PlayRingtone OptBool `json:"play_ringtone"`
}

// GetCallControlID returns the value of CallControlID.
func (s *BridgeRequest) GetCallControlID() string {
	return s.CallControlID
}

// GetClientState returns the value of ClientState.
func (s *BridgeRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *BridgeRequest) GetCommandID() OptString {
	return s.CommandID
}

// GetQueue returns the value of Queue.
func (s *BridgeRequest) GetQueue() OptString {
	return s.Queue
}

// GetVideoRoomID returns the value of VideoRoomID.
func (s *BridgeRequest) GetVideoRoomID() OptUUID {
	return s.VideoRoomID
}

// GetVideoRoomContext returns the value of VideoRoomContext.
func (s *BridgeRequest) GetVideoRoomContext() OptString {
	return s.VideoRoomContext
}

// GetParkAfterUnbridge returns the value of ParkAfterUnbridge.
func (s *BridgeRequest) GetParkAfterUnbridge() OptString {
	return s.ParkAfterUnbridge
}

// GetPlayRingtone returns the value of PlayRingtone.
func (s *BridgeRequest) GetPlayRingtone() OptBool {
	return s.PlayRingtone
}

// SetCallControlID sets the value of CallControlID.
func (s *BridgeRequest) SetCallControlID(val string) {
	s.CallControlID = val
}

// SetClientState sets the value of ClientState.
func (s *BridgeRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *BridgeRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// SetQueue sets the value of Queue.
func (s *BridgeRequest) SetQueue(val OptString) {
	s.Queue = val
}

// SetVideoRoomID sets the value of VideoRoomID.
func (s *BridgeRequest) SetVideoRoomID(val OptUUID) {
	s.VideoRoomID = val
}

// SetVideoRoomContext sets the value of VideoRoomContext.
func (s *BridgeRequest) SetVideoRoomContext(val OptString) {
	s.VideoRoomContext = val
}

// SetParkAfterUnbridge sets the value of ParkAfterUnbridge.
func (s *BridgeRequest) SetParkAfterUnbridge(val OptString) {
	s.ParkAfterUnbridge = val
}

// SetPlayRingtone sets the value of PlayRingtone.
func (s *BridgeRequest) SetPlayRingtone(val OptBool) {
	s.PlayRingtone = val
}

type Bucket string

type BulkCredentialActionAction string

const (
	BulkCredentialActionActionActivate   BulkCredentialActionAction = "activate"
	BulkCredentialActionActionDeactivate BulkCredentialActionAction = "deactivate"
)

// AllValues returns all BulkCredentialActionAction values.
func (BulkCredentialActionAction) AllValues() []BulkCredentialActionAction {
	return []BulkCredentialActionAction{
		BulkCredentialActionActionActivate,
		BulkCredentialActionActionDeactivate,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BulkCredentialActionAction) MarshalText() ([]byte, error) {
	switch s {
	case BulkCredentialActionActionActivate:
		return []byte(s), nil
	case BulkCredentialActionActionDeactivate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BulkCredentialActionAction) UnmarshalText(data []byte) error {
	switch BulkCredentialActionAction(data) {
	case BulkCredentialActionActionActivate:
		*s = BulkCredentialActionActionActivate
		return nil
	case BulkCredentialActionActionDeactivate:
		*s = BulkCredentialActionActionDeactivate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// BulkCredentialActionNotFound is response for BulkCredentialAction operation.
type BulkCredentialActionNotFound struct{}

func (*BulkCredentialActionNotFound) bulkCredentialActionRes() {}

// BulkCredentialActionUnauthorized is response for BulkCredentialAction operation.
type BulkCredentialActionUnauthorized struct{}

func (*BulkCredentialActionUnauthorized) bulkCredentialActionRes() {}

// BulkCredentialActionUnprocessableEntity is response for BulkCredentialAction operation.
type BulkCredentialActionUnprocessableEntity struct{}

func (*BulkCredentialActionUnprocessableEntity) bulkCredentialActionRes() {}

// Ref: #/components/schemas/BulkCredentialRequest
type BulkCredentialRequest struct {
	// A default name for all credentials.
	Name OptString `json:"name"`
	// Tags a credential for bulk operations. A single tag can hold at maximum 1000 credentials.
	Tag string `json:"tag"`
	// Amount of credentials to be created. A single tag can hold at maximum 1000 credentials.
	Amount OptInt `json:"amount"`
	// Identifies the connection this credential is associated with.
	ConnectionID string `json:"connection_id"`
}

// GetName returns the value of Name.
func (s *BulkCredentialRequest) GetName() OptString {
	return s.Name
}

// GetTag returns the value of Tag.
func (s *BulkCredentialRequest) GetTag() string {
	return s.Tag
}

// GetAmount returns the value of Amount.
func (s *BulkCredentialRequest) GetAmount() OptInt {
	return s.Amount
}

// GetConnectionID returns the value of ConnectionID.
func (s *BulkCredentialRequest) GetConnectionID() string {
	return s.ConnectionID
}

// SetName sets the value of Name.
func (s *BulkCredentialRequest) SetName(val OptString) {
	s.Name = val
}

// SetTag sets the value of Tag.
func (s *BulkCredentialRequest) SetTag(val string) {
	s.Tag = val
}

// SetAmount sets the value of Amount.
func (s *BulkCredentialRequest) SetAmount(val OptInt) {
	s.Amount = val
}

// SetConnectionID sets the value of ConnectionID.
func (s *BulkCredentialRequest) SetConnectionID(val string) {
	s.ConnectionID = val
}

type BulkCredentialResponse struct {
	Data OptBulkCredentialResponseData `json:"data"`
}

// GetData returns the value of Data.
func (s *BulkCredentialResponse) GetData() OptBulkCredentialResponseData {
	return s.Data
}

// SetData sets the value of Data.
func (s *BulkCredentialResponse) SetData(val OptBulkCredentialResponseData) {
	s.Data = val
}

func (*BulkCredentialResponse) bulkCredentialActionRes()           {}
func (*BulkCredentialResponse) createBulkTelephonyCredentialsRes() {}
func (*BulkCredentialResponse) deleteTelephonyCredentialsRes()     {}
func (*BulkCredentialResponse) updateBulkTelephonyCredentialRes()  {}

type BulkCredentialResponseData struct {
	// Amount of credentials affected.
	Credentials OptInt `json:"credentials"`
}

// GetCredentials returns the value of Credentials.
func (s *BulkCredentialResponseData) GetCredentials() OptInt {
	return s.Credentials
}

// SetCredentials sets the value of Credentials.
func (s *BulkCredentialResponseData) SetCredentials(val OptInt) {
	s.Credentials = val
}

type BulkDeleteRoomRecordingsResponse struct {
	Data OptBulkDeleteRoomRecordingsResponseData `json:"data"`
}

// GetData returns the value of Data.
func (s *BulkDeleteRoomRecordingsResponse) GetData() OptBulkDeleteRoomRecordingsResponseData {
	return s.Data
}

// SetData sets the value of Data.
func (s *BulkDeleteRoomRecordingsResponse) SetData(val OptBulkDeleteRoomRecordingsResponseData) {
	s.Data = val
}

func (*BulkDeleteRoomRecordingsResponse) deleteRoomRecordingsRes() {}

type BulkDeleteRoomRecordingsResponseData struct {
	// Amount of room recordings affected.
	RoomRecordings OptInt `json:"room_recordings"`
}

// GetRoomRecordings returns the value of RoomRecordings.
func (s *BulkDeleteRoomRecordingsResponseData) GetRoomRecordings() OptInt {
	return s.RoomRecordings
}

// SetRoomRecordings sets the value of RoomRecordings.
func (s *BulkDeleteRoomRecordingsResponseData) SetRoomRecordings(val OptInt) {
	s.RoomRecordings = val
}

// Ref: #/components/schemas/Call
type Call struct {
	RecordType CallRecordType `json:"record_type"`
	// ID that is unique to the call session and can be used to correlate webhook events. Call session is
	// a group of related call legs that logically belong to the same phone call, e.g. an inbound and
	// outbound leg of a transferred call.
	CallSessionID string `json:"call_session_id"`
	// ID that is unique to the call and can be used to correlate webhook events.
	CallLegID string `json:"call_leg_id"`
	// Unique identifier and token for controlling the call.
	CallControlID string `json:"call_control_id"`
	// Indicates whether the call is alive or not. For Dial command it will always be `false` (dialing is
	// asynchronous).
	IsAlive bool `json:"is_alive"`
	// State received from a command.
	ClientState OptString `json:"client_state"`
	// Indicates the duration of the call in seconds.
	CallDuration OptInt `json:"call_duration"`
}

// GetRecordType returns the value of RecordType.
func (s *Call) GetRecordType() CallRecordType {
	return s.RecordType
}

// GetCallSessionID returns the value of CallSessionID.
func (s *Call) GetCallSessionID() string {
	return s.CallSessionID
}

// GetCallLegID returns the value of CallLegID.
func (s *Call) GetCallLegID() string {
	return s.CallLegID
}

// GetCallControlID returns the value of CallControlID.
func (s *Call) GetCallControlID() string {
	return s.CallControlID
}

// GetIsAlive returns the value of IsAlive.
func (s *Call) GetIsAlive() bool {
	return s.IsAlive
}

// GetClientState returns the value of ClientState.
func (s *Call) GetClientState() OptString {
	return s.ClientState
}

// GetCallDuration returns the value of CallDuration.
func (s *Call) GetCallDuration() OptInt {
	return s.CallDuration
}

// SetRecordType sets the value of RecordType.
func (s *Call) SetRecordType(val CallRecordType) {
	s.RecordType = val
}

// SetCallSessionID sets the value of CallSessionID.
func (s *Call) SetCallSessionID(val string) {
	s.CallSessionID = val
}

// SetCallLegID sets the value of CallLegID.
func (s *Call) SetCallLegID(val string) {
	s.CallLegID = val
}

// SetCallControlID sets the value of CallControlID.
func (s *Call) SetCallControlID(val string) {
	s.CallControlID = val
}

// SetIsAlive sets the value of IsAlive.
func (s *Call) SetIsAlive(val bool) {
	s.IsAlive = val
}

// SetClientState sets the value of ClientState.
func (s *Call) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCallDuration sets the value of CallDuration.
func (s *Call) SetCallDuration(val OptInt) {
	s.CallDuration = val
}

// Ref: #/components/schemas/CallControlApplication
type CallControlApplication struct {
	// Specifies whether the connection can be used.
	Active             OptBool               `json:"active"`
	AnchorsiteOverride OptAnchorsiteOverride `json:"anchorsite_override"`
	// A user-assigned name to help manage the application.
	ApplicationName OptString `json:"application_name"`
	// ISO 8601 formatted date of when the resource was created.
	CreatedAt OptString `json:"created_at"`
	// Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to
	// Telnyx will be accepted in all formats.
	DtmfType OptCallControlApplicationDtmfType `json:"dtmf_type"`
	// Specifies whether calls to phone numbers associated with this connection should hangup after
	// timing out.
	FirstCommandTimeout OptBool `json:"first_command_timeout"`
	// Specifies how many seconds to wait before timing out a dial command.
	FirstCommandTimeoutSecs OptInt                              `json:"first_command_timeout_secs"`
	ID                      OptStringInt64                      `json:"id"`
	Inbound                 OptCallControlApplicationInbound    `json:"inbound"`
	Outbound                OptCallControlApplicationOutbound   `json:"outbound"`
	RecordType              OptCallControlApplicationRecordType `json:"record_type"`
	// ISO 8601 formatted date of when the resource was last updated.
	UpdatedAt OptString `json:"updated_at"`
	// Determines which webhook format will be used, Telnyx API v1 or v2.
	WebhookAPIVersion OptCallControlApplicationWebhookAPIVersion `json:"webhook_api_version"`
	// The failover URL where webhooks related to this connection will be sent if sending to the primary
	// URL fails. Must include a scheme, such as `https`.
	WebhookEventFailoverURL OptNilString `json:"webhook_event_failover_url"`
	// The URL where webhooks related to this connection will be sent. Must include a scheme, such as
	// `https`.
	WebhookEventURL    OptString `json:"webhook_event_url"`
	WebhookTimeoutSecs OptNilInt `json:"webhook_timeout_secs"`
}

// GetActive returns the value of Active.
func (s *CallControlApplication) GetActive() OptBool {
	return s.Active
}

// GetAnchorsiteOverride returns the value of AnchorsiteOverride.
func (s *CallControlApplication) GetAnchorsiteOverride() OptAnchorsiteOverride {
	return s.AnchorsiteOverride
}

// GetApplicationName returns the value of ApplicationName.
func (s *CallControlApplication) GetApplicationName() OptString {
	return s.ApplicationName
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CallControlApplication) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetDtmfType returns the value of DtmfType.
func (s *CallControlApplication) GetDtmfType() OptCallControlApplicationDtmfType {
	return s.DtmfType
}

// GetFirstCommandTimeout returns the value of FirstCommandTimeout.
func (s *CallControlApplication) GetFirstCommandTimeout() OptBool {
	return s.FirstCommandTimeout
}

// GetFirstCommandTimeoutSecs returns the value of FirstCommandTimeoutSecs.
func (s *CallControlApplication) GetFirstCommandTimeoutSecs() OptInt {
	return s.FirstCommandTimeoutSecs
}

// GetID returns the value of ID.
func (s *CallControlApplication) GetID() OptStringInt64 {
	return s.ID
}

// GetInbound returns the value of Inbound.
func (s *CallControlApplication) GetInbound() OptCallControlApplicationInbound {
	return s.Inbound
}

// GetOutbound returns the value of Outbound.
func (s *CallControlApplication) GetOutbound() OptCallControlApplicationOutbound {
	return s.Outbound
}

// GetRecordType returns the value of RecordType.
func (s *CallControlApplication) GetRecordType() OptCallControlApplicationRecordType {
	return s.RecordType
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *CallControlApplication) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetWebhookAPIVersion returns the value of WebhookAPIVersion.
func (s *CallControlApplication) GetWebhookAPIVersion() OptCallControlApplicationWebhookAPIVersion {
	return s.WebhookAPIVersion
}

// GetWebhookEventFailoverURL returns the value of WebhookEventFailoverURL.
func (s *CallControlApplication) GetWebhookEventFailoverURL() OptNilString {
	return s.WebhookEventFailoverURL
}

// GetWebhookEventURL returns the value of WebhookEventURL.
func (s *CallControlApplication) GetWebhookEventURL() OptString {
	return s.WebhookEventURL
}

// GetWebhookTimeoutSecs returns the value of WebhookTimeoutSecs.
func (s *CallControlApplication) GetWebhookTimeoutSecs() OptNilInt {
	return s.WebhookTimeoutSecs
}

// SetActive sets the value of Active.
func (s *CallControlApplication) SetActive(val OptBool) {
	s.Active = val
}

// SetAnchorsiteOverride sets the value of AnchorsiteOverride.
func (s *CallControlApplication) SetAnchorsiteOverride(val OptAnchorsiteOverride) {
	s.AnchorsiteOverride = val
}

// SetApplicationName sets the value of ApplicationName.
func (s *CallControlApplication) SetApplicationName(val OptString) {
	s.ApplicationName = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CallControlApplication) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetDtmfType sets the value of DtmfType.
func (s *CallControlApplication) SetDtmfType(val OptCallControlApplicationDtmfType) {
	s.DtmfType = val
}

// SetFirstCommandTimeout sets the value of FirstCommandTimeout.
func (s *CallControlApplication) SetFirstCommandTimeout(val OptBool) {
	s.FirstCommandTimeout = val
}

// SetFirstCommandTimeoutSecs sets the value of FirstCommandTimeoutSecs.
func (s *CallControlApplication) SetFirstCommandTimeoutSecs(val OptInt) {
	s.FirstCommandTimeoutSecs = val
}

// SetID sets the value of ID.
func (s *CallControlApplication) SetID(val OptStringInt64) {
	s.ID = val
}

// SetInbound sets the value of Inbound.
func (s *CallControlApplication) SetInbound(val OptCallControlApplicationInbound) {
	s.Inbound = val
}

// SetOutbound sets the value of Outbound.
func (s *CallControlApplication) SetOutbound(val OptCallControlApplicationOutbound) {
	s.Outbound = val
}

// SetRecordType sets the value of RecordType.
func (s *CallControlApplication) SetRecordType(val OptCallControlApplicationRecordType) {
	s.RecordType = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *CallControlApplication) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetWebhookAPIVersion sets the value of WebhookAPIVersion.
func (s *CallControlApplication) SetWebhookAPIVersion(val OptCallControlApplicationWebhookAPIVersion) {
	s.WebhookAPIVersion = val
}

// SetWebhookEventFailoverURL sets the value of WebhookEventFailoverURL.
func (s *CallControlApplication) SetWebhookEventFailoverURL(val OptNilString) {
	s.WebhookEventFailoverURL = val
}

// SetWebhookEventURL sets the value of WebhookEventURL.
func (s *CallControlApplication) SetWebhookEventURL(val OptString) {
	s.WebhookEventURL = val
}

// SetWebhookTimeoutSecs sets the value of WebhookTimeoutSecs.
func (s *CallControlApplication) SetWebhookTimeoutSecs(val OptNilInt) {
	s.WebhookTimeoutSecs = val
}

// Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to
// Telnyx will be accepted in all formats.
type CallControlApplicationDtmfType string

const (
	CallControlApplicationDtmfTypeRFC2833 CallControlApplicationDtmfType = "RFC 2833"
	CallControlApplicationDtmfTypeInband  CallControlApplicationDtmfType = "Inband"
	CallControlApplicationDtmfTypeSIPINFO CallControlApplicationDtmfType = "SIP INFO"
)

// AllValues returns all CallControlApplicationDtmfType values.
func (CallControlApplicationDtmfType) AllValues() []CallControlApplicationDtmfType {
	return []CallControlApplicationDtmfType{
		CallControlApplicationDtmfTypeRFC2833,
		CallControlApplicationDtmfTypeInband,
		CallControlApplicationDtmfTypeSIPINFO,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallControlApplicationDtmfType) MarshalText() ([]byte, error) {
	switch s {
	case CallControlApplicationDtmfTypeRFC2833:
		return []byte(s), nil
	case CallControlApplicationDtmfTypeInband:
		return []byte(s), nil
	case CallControlApplicationDtmfTypeSIPINFO:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallControlApplicationDtmfType) UnmarshalText(data []byte) error {
	switch CallControlApplicationDtmfType(data) {
	case CallControlApplicationDtmfTypeRFC2833:
		*s = CallControlApplicationDtmfTypeRFC2833
		return nil
	case CallControlApplicationDtmfTypeInband:
		*s = CallControlApplicationDtmfTypeInband
		return nil
	case CallControlApplicationDtmfTypeSIPINFO:
		*s = CallControlApplicationDtmfTypeSIPINFO
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CallControlApplicationInbound
type CallControlApplicationInbound struct {
	// When set, this will limit the total number of inbound calls to phone numbers associated with this
	// connection.
	ChannelLimit OptNilInt `json:"channel_limit"`
	// When enabled Telnyx will include Shaken/Stir data in the Webhook for new inbound calls.
	ShakenStirEnabled OptBool `json:"shaken_stir_enabled"`
	// Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a
	// phone number is used, from a SIP endpoint. Example: the subdomain "example.sip.telnyx.com" can be
	// called from any SIP endpoint by using the SIP URI "sip:@example.sip.telnyx.com" where the user
	// part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain
	// calls.
	SipSubdomain OptNilString `json:"sip_subdomain"`
	// This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public
	// Internet) or "Only my connections" (any connection assigned to the same Telnyx user).
	SipSubdomainReceiveSettings OptCallControlApplicationInboundSipSubdomainReceiveSettings `json:"sip_subdomain_receive_settings"`
}

// GetChannelLimit returns the value of ChannelLimit.
func (s *CallControlApplicationInbound) GetChannelLimit() OptNilInt {
	return s.ChannelLimit
}

// GetShakenStirEnabled returns the value of ShakenStirEnabled.
func (s *CallControlApplicationInbound) GetShakenStirEnabled() OptBool {
	return s.ShakenStirEnabled
}

// GetSipSubdomain returns the value of SipSubdomain.
func (s *CallControlApplicationInbound) GetSipSubdomain() OptNilString {
	return s.SipSubdomain
}

// GetSipSubdomainReceiveSettings returns the value of SipSubdomainReceiveSettings.
func (s *CallControlApplicationInbound) GetSipSubdomainReceiveSettings() OptCallControlApplicationInboundSipSubdomainReceiveSettings {
	return s.SipSubdomainReceiveSettings
}

// SetChannelLimit sets the value of ChannelLimit.
func (s *CallControlApplicationInbound) SetChannelLimit(val OptNilInt) {
	s.ChannelLimit = val
}

// SetShakenStirEnabled sets the value of ShakenStirEnabled.
func (s *CallControlApplicationInbound) SetShakenStirEnabled(val OptBool) {
	s.ShakenStirEnabled = val
}

// SetSipSubdomain sets the value of SipSubdomain.
func (s *CallControlApplicationInbound) SetSipSubdomain(val OptNilString) {
	s.SipSubdomain = val
}

// SetSipSubdomainReceiveSettings sets the value of SipSubdomainReceiveSettings.
func (s *CallControlApplicationInbound) SetSipSubdomainReceiveSettings(val OptCallControlApplicationInboundSipSubdomainReceiveSettings) {
	s.SipSubdomainReceiveSettings = val
}

// This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public
// Internet) or "Only my connections" (any connection assigned to the same Telnyx user).
type CallControlApplicationInboundSipSubdomainReceiveSettings string

const (
	CallControlApplicationInboundSipSubdomainReceiveSettingsOnlyMyConnections CallControlApplicationInboundSipSubdomainReceiveSettings = "only_my_connections"
	CallControlApplicationInboundSipSubdomainReceiveSettingsFromAnyone        CallControlApplicationInboundSipSubdomainReceiveSettings = "from_anyone"
)

// AllValues returns all CallControlApplicationInboundSipSubdomainReceiveSettings values.
func (CallControlApplicationInboundSipSubdomainReceiveSettings) AllValues() []CallControlApplicationInboundSipSubdomainReceiveSettings {
	return []CallControlApplicationInboundSipSubdomainReceiveSettings{
		CallControlApplicationInboundSipSubdomainReceiveSettingsOnlyMyConnections,
		CallControlApplicationInboundSipSubdomainReceiveSettingsFromAnyone,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallControlApplicationInboundSipSubdomainReceiveSettings) MarshalText() ([]byte, error) {
	switch s {
	case CallControlApplicationInboundSipSubdomainReceiveSettingsOnlyMyConnections:
		return []byte(s), nil
	case CallControlApplicationInboundSipSubdomainReceiveSettingsFromAnyone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallControlApplicationInboundSipSubdomainReceiveSettings) UnmarshalText(data []byte) error {
	switch CallControlApplicationInboundSipSubdomainReceiveSettings(data) {
	case CallControlApplicationInboundSipSubdomainReceiveSettingsOnlyMyConnections:
		*s = CallControlApplicationInboundSipSubdomainReceiveSettingsOnlyMyConnections
		return nil
	case CallControlApplicationInboundSipSubdomainReceiveSettingsFromAnyone:
		*s = CallControlApplicationInboundSipSubdomainReceiveSettingsFromAnyone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CallControlApplicationOutbound
type CallControlApplicationOutbound struct {
	// When set, this will limit the total number of outbound calls to phone numbers associated with this
	// connection.
	ChannelLimit OptNilInt `json:"channel_limit"`
	// Identifies the associated outbound voice profile.
	OutboundVoiceProfileID OptStringInt64 `json:"outbound_voice_profile_id"`
}

// GetChannelLimit returns the value of ChannelLimit.
func (s *CallControlApplicationOutbound) GetChannelLimit() OptNilInt {
	return s.ChannelLimit
}

// GetOutboundVoiceProfileID returns the value of OutboundVoiceProfileID.
func (s *CallControlApplicationOutbound) GetOutboundVoiceProfileID() OptStringInt64 {
	return s.OutboundVoiceProfileID
}

// SetChannelLimit sets the value of ChannelLimit.
func (s *CallControlApplicationOutbound) SetChannelLimit(val OptNilInt) {
	s.ChannelLimit = val
}

// SetOutboundVoiceProfileID sets the value of OutboundVoiceProfileID.
func (s *CallControlApplicationOutbound) SetOutboundVoiceProfileID(val OptStringInt64) {
	s.OutboundVoiceProfileID = val
}

type CallControlApplicationRecordType string

const (
	CallControlApplicationRecordTypeCallControlApplication CallControlApplicationRecordType = "call_control_application"
)

// AllValues returns all CallControlApplicationRecordType values.
func (CallControlApplicationRecordType) AllValues() []CallControlApplicationRecordType {
	return []CallControlApplicationRecordType{
		CallControlApplicationRecordTypeCallControlApplication,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallControlApplicationRecordType) MarshalText() ([]byte, error) {
	switch s {
	case CallControlApplicationRecordTypeCallControlApplication:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallControlApplicationRecordType) UnmarshalText(data []byte) error {
	switch CallControlApplicationRecordType(data) {
	case CallControlApplicationRecordTypeCallControlApplication:
		*s = CallControlApplicationRecordTypeCallControlApplication
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CallControlApplicationResponse struct {
	Data OptCallControlApplication `json:"data"`
}

// GetData returns the value of Data.
func (s *CallControlApplicationResponse) GetData() OptCallControlApplication {
	return s.Data
}

// SetData sets the value of Data.
func (s *CallControlApplicationResponse) SetData(val OptCallControlApplication) {
	s.Data = val
}

func (*CallControlApplicationResponse) createCallControlApplicationRes()   {}
func (*CallControlApplicationResponse) deleteCallControlApplicationRes()   {}
func (*CallControlApplicationResponse) retrieveCallControlApplicationRes() {}
func (*CallControlApplicationResponse) updateCallControlApplicationRes()   {}

// Determines which webhook format will be used, Telnyx API v1 or v2.
type CallControlApplicationWebhookAPIVersion string

const (
	CallControlApplicationWebhookAPIVersion1 CallControlApplicationWebhookAPIVersion = "1"
	CallControlApplicationWebhookAPIVersion2 CallControlApplicationWebhookAPIVersion = "2"
)

// AllValues returns all CallControlApplicationWebhookAPIVersion values.
func (CallControlApplicationWebhookAPIVersion) AllValues() []CallControlApplicationWebhookAPIVersion {
	return []CallControlApplicationWebhookAPIVersion{
		CallControlApplicationWebhookAPIVersion1,
		CallControlApplicationWebhookAPIVersion2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallControlApplicationWebhookAPIVersion) MarshalText() ([]byte, error) {
	switch s {
	case CallControlApplicationWebhookAPIVersion1:
		return []byte(s), nil
	case CallControlApplicationWebhookAPIVersion2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallControlApplicationWebhookAPIVersion) UnmarshalText(data []byte) error {
	switch CallControlApplicationWebhookAPIVersion(data) {
	case CallControlApplicationWebhookAPIVersion1:
		*s = CallControlApplicationWebhookAPIVersion1
		return nil
	case CallControlApplicationWebhookAPIVersion2:
		*s = CallControlApplicationWebhookAPIVersion2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CallControlCommandResponse struct {
	Data OptCallControlCommandResult `json:"data"`
}

// GetData returns the value of Data.
func (s *CallControlCommandResponse) GetData() OptCallControlCommandResult {
	return s.Data
}

// SetData sets the value of Data.
func (s *CallControlCommandResponse) SetData(val OptCallControlCommandResult) {
	s.Data = val
}

func (*CallControlCommandResponse) answerCallRes()             {}
func (*CallControlCommandResponse) bridgeCallRes()             {}
func (*CallControlCommandResponse) enqueueCallRes()            {}
func (*CallControlCommandResponse) gatherCallRes()             {}
func (*CallControlCommandResponse) gatherUsingAudioRes()       {}
func (*CallControlCommandResponse) gatherUsingSpeakRes()       {}
func (*CallControlCommandResponse) hangupCallRes()             {}
func (*CallControlCommandResponse) leaveQueueRes()             {}
func (*CallControlCommandResponse) noiseSuppressionStartRes()  {}
func (*CallControlCommandResponse) noiseSuppressionStopRes()   {}
func (*CallControlCommandResponse) pauseCallRecordingRes()     {}
func (*CallControlCommandResponse) referCallRes()              {}
func (*CallControlCommandResponse) rejectCallRes()             {}
func (*CallControlCommandResponse) resumeCallRecordingRes()    {}
func (*CallControlCommandResponse) sendDTMFRes()               {}
func (*CallControlCommandResponse) speakCallRes()              {}
func (*CallControlCommandResponse) startCallForkRes()          {}
func (*CallControlCommandResponse) startCallPlaybackRes()      {}
func (*CallControlCommandResponse) startCallRecordRes()        {}
func (*CallControlCommandResponse) startCallStreamingRes()     {}
func (*CallControlCommandResponse) startCallTranscriptionRes() {}
func (*CallControlCommandResponse) stopCallForkRes()           {}
func (*CallControlCommandResponse) stopCallGatherRes()         {}
func (*CallControlCommandResponse) stopCallPlaybackRes()       {}
func (*CallControlCommandResponse) stopCallRecordingRes()      {}
func (*CallControlCommandResponse) stopCallStreamingRes()      {}
func (*CallControlCommandResponse) stopCallTranscriptionRes()  {}
func (*CallControlCommandResponse) transferCallRes()           {}
func (*CallControlCommandResponse) updateClientStateRes()      {}

// Ref: #/components/schemas/CallControlCommandResult
type CallControlCommandResult struct {
	Result OptString `json:"result"`
}

// GetResult returns the value of Result.
func (s *CallControlCommandResult) GetResult() OptString {
	return s.Result
}

// SetResult sets the value of Result.
func (s *CallControlCommandResult) SetResult(val OptString) {
	s.Result = val
}

type CallControlId string

// The call forwarding settings for a phone number.
// Ref: #/components/schemas/CallForwarding
type CallForwarding struct {
	// Indicates if call forwarding will be enabled for this number if forwards_to and forwarding_type
	// are filled in. Defaults to true for backwards compatibility with APIV1 use of numbers endpoints.
	CallForwardingEnabled OptBool `json:"call_forwarding_enabled"`
	// The phone number to which inbound calls to this number are forwarded. Inbound calls will not be
	// forwarded if this field is left blank. If set, must be a +E.164-formatted phone number.
	ForwardsTo OptString `json:"forwards_to"`
	// Call forwarding type. 'forwards_to' must be set for this to have an effect.
	ForwardingType OptCallForwardingForwardingType `json:"forwarding_type"`
}

// GetCallForwardingEnabled returns the value of CallForwardingEnabled.
func (s *CallForwarding) GetCallForwardingEnabled() OptBool {
	return s.CallForwardingEnabled
}

// GetForwardsTo returns the value of ForwardsTo.
func (s *CallForwarding) GetForwardsTo() OptString {
	return s.ForwardsTo
}

// GetForwardingType returns the value of ForwardingType.
func (s *CallForwarding) GetForwardingType() OptCallForwardingForwardingType {
	return s.ForwardingType
}

// SetCallForwardingEnabled sets the value of CallForwardingEnabled.
func (s *CallForwarding) SetCallForwardingEnabled(val OptBool) {
	s.CallForwardingEnabled = val
}

// SetForwardsTo sets the value of ForwardsTo.
func (s *CallForwarding) SetForwardsTo(val OptString) {
	s.ForwardsTo = val
}

// SetForwardingType sets the value of ForwardingType.
func (s *CallForwarding) SetForwardingType(val OptCallForwardingForwardingType) {
	s.ForwardingType = val
}

// Call forwarding type. 'forwards_to' must be set for this to have an effect.
type CallForwardingForwardingType string

const (
	CallForwardingForwardingTypeAlways    CallForwardingForwardingType = "always"
	CallForwardingForwardingTypeOnFailure CallForwardingForwardingType = "on_failure"
)

// AllValues returns all CallForwardingForwardingType values.
func (CallForwardingForwardingType) AllValues() []CallForwardingForwardingType {
	return []CallForwardingForwardingType{
		CallForwardingForwardingTypeAlways,
		CallForwardingForwardingTypeOnFailure,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallForwardingForwardingType) MarshalText() ([]byte, error) {
	switch s {
	case CallForwardingForwardingTypeAlways:
		return []byte(s), nil
	case CallForwardingForwardingTypeOnFailure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallForwardingForwardingType) UnmarshalText(data []byte) error {
	switch CallForwardingForwardingType(data) {
	case CallForwardingForwardingTypeAlways:
		*s = CallForwardingForwardingTypeAlways
		return nil
	case CallForwardingForwardingTypeOnFailure:
		*s = CallForwardingForwardingTypeOnFailure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CallReasons []CallReasonsItem

// The Call Reason to be displayed to the call recipient.
type CallReasonsItem struct {
	RecordType OptString `json:"record_type"`
	ID         OptUUID   `json:"id"`
	// The Call Reason text to be displayed to the call recipient.
	Reason OptString `json:"reason"`
	// The approval status of this individual call reason in Google.
	GoogleVerificationStatus OptCallReasonsItemGoogleVerificationStatus `json:"google_verification_status"`
	// Additional information about the decision, if available.
	GoogleApprovalInfo OptString `json:"google_approval_info"`
	DisplayProfileID   OptUUID   `json:"display_profile_id"`
	// Marks the Phone Number to be removed from the Display Profile.
	Delete OptBool `json:"delete"`
}

// GetRecordType returns the value of RecordType.
func (s *CallReasonsItem) GetRecordType() OptString {
	return s.RecordType
}

// GetID returns the value of ID.
func (s *CallReasonsItem) GetID() OptUUID {
	return s.ID
}

// GetReason returns the value of Reason.
func (s *CallReasonsItem) GetReason() OptString {
	return s.Reason
}

// GetGoogleVerificationStatus returns the value of GoogleVerificationStatus.
func (s *CallReasonsItem) GetGoogleVerificationStatus() OptCallReasonsItemGoogleVerificationStatus {
	return s.GoogleVerificationStatus
}

// GetGoogleApprovalInfo returns the value of GoogleApprovalInfo.
func (s *CallReasonsItem) GetGoogleApprovalInfo() OptString {
	return s.GoogleApprovalInfo
}

// GetDisplayProfileID returns the value of DisplayProfileID.
func (s *CallReasonsItem) GetDisplayProfileID() OptUUID {
	return s.DisplayProfileID
}

// GetDelete returns the value of Delete.
func (s *CallReasonsItem) GetDelete() OptBool {
	return s.Delete
}

// SetRecordType sets the value of RecordType.
func (s *CallReasonsItem) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetID sets the value of ID.
func (s *CallReasonsItem) SetID(val OptUUID) {
	s.ID = val
}

// SetReason sets the value of Reason.
func (s *CallReasonsItem) SetReason(val OptString) {
	s.Reason = val
}

// SetGoogleVerificationStatus sets the value of GoogleVerificationStatus.
func (s *CallReasonsItem) SetGoogleVerificationStatus(val OptCallReasonsItemGoogleVerificationStatus) {
	s.GoogleVerificationStatus = val
}

// SetGoogleApprovalInfo sets the value of GoogleApprovalInfo.
func (s *CallReasonsItem) SetGoogleApprovalInfo(val OptString) {
	s.GoogleApprovalInfo = val
}

// SetDisplayProfileID sets the value of DisplayProfileID.
func (s *CallReasonsItem) SetDisplayProfileID(val OptUUID) {
	s.DisplayProfileID = val
}

// SetDelete sets the value of Delete.
func (s *CallReasonsItem) SetDelete(val OptBool) {
	s.Delete = val
}

// The approval status of this individual call reason in Google.
type CallReasonsItemGoogleVerificationStatus string

const (
	CallReasonsItemGoogleVerificationStatusSTATEUNSPECIFIED CallReasonsItemGoogleVerificationStatus = "STATE_UNSPECIFIED"
	CallReasonsItemGoogleVerificationStatusPENDINGAPPROVAL  CallReasonsItemGoogleVerificationStatus = "PENDING_APPROVAL"
	CallReasonsItemGoogleVerificationStatusAPPROVED         CallReasonsItemGoogleVerificationStatus = "APPROVED"
	CallReasonsItemGoogleVerificationStatusDENIED           CallReasonsItemGoogleVerificationStatus = "DENIED"
	CallReasonsItemGoogleVerificationStatusPENDINGREMOVAL   CallReasonsItemGoogleVerificationStatus = "PENDING_REMOVAL"
)

// AllValues returns all CallReasonsItemGoogleVerificationStatus values.
func (CallReasonsItemGoogleVerificationStatus) AllValues() []CallReasonsItemGoogleVerificationStatus {
	return []CallReasonsItemGoogleVerificationStatus{
		CallReasonsItemGoogleVerificationStatusSTATEUNSPECIFIED,
		CallReasonsItemGoogleVerificationStatusPENDINGAPPROVAL,
		CallReasonsItemGoogleVerificationStatusAPPROVED,
		CallReasonsItemGoogleVerificationStatusDENIED,
		CallReasonsItemGoogleVerificationStatusPENDINGREMOVAL,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallReasonsItemGoogleVerificationStatus) MarshalText() ([]byte, error) {
	switch s {
	case CallReasonsItemGoogleVerificationStatusSTATEUNSPECIFIED:
		return []byte(s), nil
	case CallReasonsItemGoogleVerificationStatusPENDINGAPPROVAL:
		return []byte(s), nil
	case CallReasonsItemGoogleVerificationStatusAPPROVED:
		return []byte(s), nil
	case CallReasonsItemGoogleVerificationStatusDENIED:
		return []byte(s), nil
	case CallReasonsItemGoogleVerificationStatusPENDINGREMOVAL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallReasonsItemGoogleVerificationStatus) UnmarshalText(data []byte) error {
	switch CallReasonsItemGoogleVerificationStatus(data) {
	case CallReasonsItemGoogleVerificationStatusSTATEUNSPECIFIED:
		*s = CallReasonsItemGoogleVerificationStatusSTATEUNSPECIFIED
		return nil
	case CallReasonsItemGoogleVerificationStatusPENDINGAPPROVAL:
		*s = CallReasonsItemGoogleVerificationStatusPENDINGAPPROVAL
		return nil
	case CallReasonsItemGoogleVerificationStatusAPPROVED:
		*s = CallReasonsItemGoogleVerificationStatusAPPROVED
		return nil
	case CallReasonsItemGoogleVerificationStatusDENIED:
		*s = CallReasonsItemGoogleVerificationStatusDENIED
		return nil
	case CallReasonsItemGoogleVerificationStatusPENDINGREMOVAL:
		*s = CallReasonsItemGoogleVerificationStatusPENDINGREMOVAL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CallRecordType string

const (
	CallRecordTypeCall CallRecordType = "call"
)

// AllValues returns all CallRecordType values.
func (CallRecordType) AllValues() []CallRecordType {
	return []CallRecordType{
		CallRecordTypeCall,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRecordType) MarshalText() ([]byte, error) {
	switch s {
	case CallRecordTypeCall:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRecordType) UnmarshalText(data []byte) error {
	switch CallRecordType(data) {
	case CallRecordTypeCall:
		*s = CallRecordTypeCall
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The call recording settings for a phone number.
// Ref: #/components/schemas/CallRecording
type CallRecording struct {
	// When enabled, any inbound call to this number will be recorded.
	InboundCallRecordingEnabled OptBool `json:"inbound_call_recording_enabled"`
	// The audio file format for calls being recorded.
	InboundCallRecordingFormat OptCallRecordingInboundCallRecordingFormat `json:"inbound_call_recording_format"`
	// When using 'dual' channels, final audio file will be stereo recorded with the first leg on channel
	// A, and the rest on channel B.
	InboundCallRecordingChannels OptCallRecordingInboundCallRecordingChannels `json:"inbound_call_recording_channels"`
}

// GetInboundCallRecordingEnabled returns the value of InboundCallRecordingEnabled.
func (s *CallRecording) GetInboundCallRecordingEnabled() OptBool {
	return s.InboundCallRecordingEnabled
}

// GetInboundCallRecordingFormat returns the value of InboundCallRecordingFormat.
func (s *CallRecording) GetInboundCallRecordingFormat() OptCallRecordingInboundCallRecordingFormat {
	return s.InboundCallRecordingFormat
}

// GetInboundCallRecordingChannels returns the value of InboundCallRecordingChannels.
func (s *CallRecording) GetInboundCallRecordingChannels() OptCallRecordingInboundCallRecordingChannels {
	return s.InboundCallRecordingChannels
}

// SetInboundCallRecordingEnabled sets the value of InboundCallRecordingEnabled.
func (s *CallRecording) SetInboundCallRecordingEnabled(val OptBool) {
	s.InboundCallRecordingEnabled = val
}

// SetInboundCallRecordingFormat sets the value of InboundCallRecordingFormat.
func (s *CallRecording) SetInboundCallRecordingFormat(val OptCallRecordingInboundCallRecordingFormat) {
	s.InboundCallRecordingFormat = val
}

// SetInboundCallRecordingChannels sets the value of InboundCallRecordingChannels.
func (s *CallRecording) SetInboundCallRecordingChannels(val OptCallRecordingInboundCallRecordingChannels) {
	s.InboundCallRecordingChannels = val
}

// When using 'dual' channels, final audio file will be stereo recorded with the first leg on channel
// A, and the rest on channel B.
type CallRecordingInboundCallRecordingChannels string

const (
	CallRecordingInboundCallRecordingChannelsSingle CallRecordingInboundCallRecordingChannels = "single"
	CallRecordingInboundCallRecordingChannelsDual   CallRecordingInboundCallRecordingChannels = "dual"
)

// AllValues returns all CallRecordingInboundCallRecordingChannels values.
func (CallRecordingInboundCallRecordingChannels) AllValues() []CallRecordingInboundCallRecordingChannels {
	return []CallRecordingInboundCallRecordingChannels{
		CallRecordingInboundCallRecordingChannelsSingle,
		CallRecordingInboundCallRecordingChannelsDual,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRecordingInboundCallRecordingChannels) MarshalText() ([]byte, error) {
	switch s {
	case CallRecordingInboundCallRecordingChannelsSingle:
		return []byte(s), nil
	case CallRecordingInboundCallRecordingChannelsDual:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRecordingInboundCallRecordingChannels) UnmarshalText(data []byte) error {
	switch CallRecordingInboundCallRecordingChannels(data) {
	case CallRecordingInboundCallRecordingChannelsSingle:
		*s = CallRecordingInboundCallRecordingChannelsSingle
		return nil
	case CallRecordingInboundCallRecordingChannelsDual:
		*s = CallRecordingInboundCallRecordingChannelsDual
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The audio file format for calls being recorded.
type CallRecordingInboundCallRecordingFormat string

const (
	CallRecordingInboundCallRecordingFormatWav CallRecordingInboundCallRecordingFormat = "wav"
	CallRecordingInboundCallRecordingFormatMp3 CallRecordingInboundCallRecordingFormat = "mp3"
)

// AllValues returns all CallRecordingInboundCallRecordingFormat values.
func (CallRecordingInboundCallRecordingFormat) AllValues() []CallRecordingInboundCallRecordingFormat {
	return []CallRecordingInboundCallRecordingFormat{
		CallRecordingInboundCallRecordingFormatWav,
		CallRecordingInboundCallRecordingFormatMp3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRecordingInboundCallRecordingFormat) MarshalText() ([]byte, error) {
	switch s {
	case CallRecordingInboundCallRecordingFormatWav:
		return []byte(s), nil
	case CallRecordingInboundCallRecordingFormatMp3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRecordingInboundCallRecordingFormat) UnmarshalText(data []byte) error {
	switch CallRecordingInboundCallRecordingFormat(data) {
	case CallRecordingInboundCallRecordingFormatWav:
		*s = CallRecordingInboundCallRecordingFormatWav
		return nil
	case CallRecordingInboundCallRecordingFormatMp3:
		*s = CallRecordingInboundCallRecordingFormatMp3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CallRequest
type CallRequest struct {
	// The DID or SIP URI to dial out to. Multiple DID or SIP URIs can be provided using an array of
	// strings.
	To CallRequestTo `json:"to"`
	// The `from` number to be used as the caller id presented to the destination (`to` number). The
	// number should be in +E164 format.
	From string `json:"from"`
	// The `from_display_name` string to be used as the caller id name (SIP From Display Name) presented
	// to the destination (`to` number). The string should have a maximum of 128 characters, containing
	// only letters, numbers, spaces, and -_~!.+ special characters. If ommited, the display name will be
	// the same as the number in the `from` field.
	FromDisplayName OptString `json:"from_display_name"`
	// The ID of the Call Control App (formerly ID of the connection) to be used when dialing the
	// destination.
	ConnectionID string `json:"connection_id"`
	// The URL of a file to be played back to the callee when the call is answered. The URL can point to
	// either a WAV or MP3 file. media_name and audio_url cannot be used together in one request.
	AudioURL OptString `json:"audio_url"`
	// The media_name of a file to be played back to the callee when the call is answered. The media_name
	// must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization.
	// The file must either be a WAV or MP3 file.
	MediaName OptString `json:"media_name"`
	// The list of comma-separated codecs in a preferred order for the forked media to be received.
	PreferredCodecs OptString `json:"preferred_codecs"`
	// The number of seconds that Telnyx will wait for the call to be answered by the destination to
	// which it is being called. If the timeout is reached before an answer is received, the call will
	// hangup and a `call.hangup` webhook with a `hangup_cause` of `timeout` will be sent. Minimum value
	// is 5 seconds. Maximum value is 120 seconds.
	TimeoutSecs OptInt32 `json:"timeout_secs"`
	// Sets the maximum duration of a Call Control Leg in seconds. If the time limit is reached, the call
	// will hangup and a `call.hangup` webhook with a `hangup_cause` of `time_limit` will be sent. For
	// example, by setting a time limit of 120 seconds, a Call Leg will be automatically terminated two
	// minutes after being answered. The default time limit is 14400 seconds or 4 hours and this is also
	// the maximum allowed call length.
	TimeLimitSecs OptInt32 `json:"time_limit_secs"`
	// Enables Answering Machine Detection. Telnyx offers Premium and Standard detections. With Premium
	// detection, when a call is answered, Telnyx runs real-time detection and sends a `call.machine.
	// premium.detection.ended` webhook with one of the following results: `human_residence`,
	// `human_business`, `machine`, `silence` or `fax_detected`. If we detect a beep, we also send a
	// `call.machine.premium.greeting.ended` webhook with the result of `beep_detected`. If we detect a
	// beep before `call.machine.premium.detection.ended` we only send `call.machine.premium.greeting.
	// ended`, and if we detect a beep after `call.machine.premium.detection.ended`, we send both
	// webhooks. With Standard detection, when a call is answered, Telnyx runs real-time detection to
	// determine if it was picked up by a human or a machine and sends an `call.machine.detection.ended`
	// webhook with the analysis result. If `greeting_end` or `detect_words` is used and a `machine` is
	// detected, you will receive another `call.machine.greeting.ended` webhook when the answering
	// machine greeting ends with a beep or silence. If `detect_beep` is used, you will only receive
	// `call.machine.greeting.ended` if a beep is detected.
	AnsweringMachineDetection OptCallRequestAnsweringMachineDetection `json:"answering_machine_detection"`
	// Optional configuration parameters to modify 'answering_machine_detection' performance.
	AnsweringMachineDetectionConfig OptCallRequestAnsweringMachineDetectionConfig `json:"answering_machine_detection_config"`
	// Optional configuration parameters to dial new participant into a conference.
	ConferenceConfig OptCallRequestConferenceConfig `json:"conference_config"`
	// Custom headers to be added to the SIP INVITE.
	CustomHeaders []CustomSipHeader `json:"custom_headers"`
	// Use this field to set the Billing Group ID for the call. Must be a valid and existing Billing
	// Group ID.
	BillingGroupID OptUUID `json:"billing_group_id"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore others Dial commands with the same
	// `command_id`.
	CommandID OptString `json:"command_id"`
	// Use another call's control id for sharing the same call session id.
	LinkTo OptString `json:"link_to"`
	// Defines whether media should be encrypted on the call.
	MediaEncryption OptCallRequestMediaEncryption `json:"media_encryption"`
	// SIP Authentication username used for SIP challenges.
	SipAuthUsername OptString `json:"sip_auth_username"`
	// SIP Authentication password used for SIP challenges.
	SipAuthPassword OptString `json:"sip_auth_password"`
	// SIP headers to be added to the SIP INVITE request. Currently only User-to-User header is supported.
	SipHeaders []SipHeader `json:"sip_headers"`
	// Defines SIP transport protocol to be used on the call.
	SipTransportProtocol OptCallRequestSipTransportProtocol `json:"sip_transport_protocol"`
	SoundModifications   OptSoundModifications              `json:"sound_modifications"`
	// The destination WebSocket address where the stream is going to be delivered.
	StreamURL OptString `json:"stream_url"`
	// Specifies which track should be streamed.
	StreamTrack OptCallRequestStreamTrack `json:"stream_track"`
	// Generate silence RTP packets when no transmission available.
	SendSilenceWhenIdle OptBool `json:"send_silence_when_idle"`
	// Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.
	WebhookURL OptString `json:"webhook_url"`
	// HTTP request type used for `webhook_url`.
	WebhookURLMethod OptCallRequestWebhookURLMethod `json:"webhook_url_method"`
	// Start recording automatically after an event. Disabled by default.
	Record OptCallRequestRecord `json:"record"`
	// Defines which channel should be recorded ('single' or 'dual') when `record` is specified.
	RecordChannels OptCallRequestRecordChannels `json:"record_channels"`
	// Defines the format of the recording ('wav' or 'mp3') when `record` is specified.
	RecordFormat OptCallRequestRecordFormat `json:"record_format"`
	// Defines the maximum length for the recording in seconds when `record` is specified. The minimum
	// value is 0. The maximum value is 43200. The default value is 0 (infinite).
	RecordMaxLength OptInt32 `json:"record_max_length"`
	// The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected
	// when `record` is specified. The timer only starts when the speech is detected. Please note that
	// call transcription is used to detect silence and the related charge will be applied. The minimum
	// value is 0. The default value is 0 (infinite).
	RecordTimeoutSecs OptInt32 `json:"record_timeout_secs"`
	// When set to `trim-silence`, silence will be removed from the beginning and end of the recording.
	RecordTrim OptCallRequestRecordTrim `json:"record_trim"`
	// The custom recording file name to be used instead of the default `call_leg_id`. Telnyx will still
	// add a Unix timestamp suffix.
	RecordCustomFileName OptString `json:"record_custom_file_name"`
	// Enables Dialogflow for the current call. The default value is false.
	EnableDialogflow OptBool             `json:"enable_dialogflow"`
	DialogflowConfig OptDialogflowConfig `json:"dialogflow_config"`
}

// GetTo returns the value of To.
func (s *CallRequest) GetTo() CallRequestTo {
	return s.To
}

// GetFrom returns the value of From.
func (s *CallRequest) GetFrom() string {
	return s.From
}

// GetFromDisplayName returns the value of FromDisplayName.
func (s *CallRequest) GetFromDisplayName() OptString {
	return s.FromDisplayName
}

// GetConnectionID returns the value of ConnectionID.
func (s *CallRequest) GetConnectionID() string {
	return s.ConnectionID
}

// GetAudioURL returns the value of AudioURL.
func (s *CallRequest) GetAudioURL() OptString {
	return s.AudioURL
}

// GetMediaName returns the value of MediaName.
func (s *CallRequest) GetMediaName() OptString {
	return s.MediaName
}

// GetPreferredCodecs returns the value of PreferredCodecs.
func (s *CallRequest) GetPreferredCodecs() OptString {
	return s.PreferredCodecs
}

// GetTimeoutSecs returns the value of TimeoutSecs.
func (s *CallRequest) GetTimeoutSecs() OptInt32 {
	return s.TimeoutSecs
}

// GetTimeLimitSecs returns the value of TimeLimitSecs.
func (s *CallRequest) GetTimeLimitSecs() OptInt32 {
	return s.TimeLimitSecs
}

// GetAnsweringMachineDetection returns the value of AnsweringMachineDetection.
func (s *CallRequest) GetAnsweringMachineDetection() OptCallRequestAnsweringMachineDetection {
	return s.AnsweringMachineDetection
}

// GetAnsweringMachineDetectionConfig returns the value of AnsweringMachineDetectionConfig.
func (s *CallRequest) GetAnsweringMachineDetectionConfig() OptCallRequestAnsweringMachineDetectionConfig {
	return s.AnsweringMachineDetectionConfig
}

// GetConferenceConfig returns the value of ConferenceConfig.
func (s *CallRequest) GetConferenceConfig() OptCallRequestConferenceConfig {
	return s.ConferenceConfig
}

// GetCustomHeaders returns the value of CustomHeaders.
func (s *CallRequest) GetCustomHeaders() []CustomSipHeader {
	return s.CustomHeaders
}

// GetBillingGroupID returns the value of BillingGroupID.
func (s *CallRequest) GetBillingGroupID() OptUUID {
	return s.BillingGroupID
}

// GetClientState returns the value of ClientState.
func (s *CallRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *CallRequest) GetCommandID() OptString {
	return s.CommandID
}

// GetLinkTo returns the value of LinkTo.
func (s *CallRequest) GetLinkTo() OptString {
	return s.LinkTo
}

// GetMediaEncryption returns the value of MediaEncryption.
func (s *CallRequest) GetMediaEncryption() OptCallRequestMediaEncryption {
	return s.MediaEncryption
}

// GetSipAuthUsername returns the value of SipAuthUsername.
func (s *CallRequest) GetSipAuthUsername() OptString {
	return s.SipAuthUsername
}

// GetSipAuthPassword returns the value of SipAuthPassword.
func (s *CallRequest) GetSipAuthPassword() OptString {
	return s.SipAuthPassword
}

// GetSipHeaders returns the value of SipHeaders.
func (s *CallRequest) GetSipHeaders() []SipHeader {
	return s.SipHeaders
}

// GetSipTransportProtocol returns the value of SipTransportProtocol.
func (s *CallRequest) GetSipTransportProtocol() OptCallRequestSipTransportProtocol {
	return s.SipTransportProtocol
}

// GetSoundModifications returns the value of SoundModifications.
func (s *CallRequest) GetSoundModifications() OptSoundModifications {
	return s.SoundModifications
}

// GetStreamURL returns the value of StreamURL.
func (s *CallRequest) GetStreamURL() OptString {
	return s.StreamURL
}

// GetStreamTrack returns the value of StreamTrack.
func (s *CallRequest) GetStreamTrack() OptCallRequestStreamTrack {
	return s.StreamTrack
}

// GetSendSilenceWhenIdle returns the value of SendSilenceWhenIdle.
func (s *CallRequest) GetSendSilenceWhenIdle() OptBool {
	return s.SendSilenceWhenIdle
}

// GetWebhookURL returns the value of WebhookURL.
func (s *CallRequest) GetWebhookURL() OptString {
	return s.WebhookURL
}

// GetWebhookURLMethod returns the value of WebhookURLMethod.
func (s *CallRequest) GetWebhookURLMethod() OptCallRequestWebhookURLMethod {
	return s.WebhookURLMethod
}

// GetRecord returns the value of Record.
func (s *CallRequest) GetRecord() OptCallRequestRecord {
	return s.Record
}

// GetRecordChannels returns the value of RecordChannels.
func (s *CallRequest) GetRecordChannels() OptCallRequestRecordChannels {
	return s.RecordChannels
}

// GetRecordFormat returns the value of RecordFormat.
func (s *CallRequest) GetRecordFormat() OptCallRequestRecordFormat {
	return s.RecordFormat
}

// GetRecordMaxLength returns the value of RecordMaxLength.
func (s *CallRequest) GetRecordMaxLength() OptInt32 {
	return s.RecordMaxLength
}

// GetRecordTimeoutSecs returns the value of RecordTimeoutSecs.
func (s *CallRequest) GetRecordTimeoutSecs() OptInt32 {
	return s.RecordTimeoutSecs
}

// GetRecordTrim returns the value of RecordTrim.
func (s *CallRequest) GetRecordTrim() OptCallRequestRecordTrim {
	return s.RecordTrim
}

// GetRecordCustomFileName returns the value of RecordCustomFileName.
func (s *CallRequest) GetRecordCustomFileName() OptString {
	return s.RecordCustomFileName
}

// GetEnableDialogflow returns the value of EnableDialogflow.
func (s *CallRequest) GetEnableDialogflow() OptBool {
	return s.EnableDialogflow
}

// GetDialogflowConfig returns the value of DialogflowConfig.
func (s *CallRequest) GetDialogflowConfig() OptDialogflowConfig {
	return s.DialogflowConfig
}

// SetTo sets the value of To.
func (s *CallRequest) SetTo(val CallRequestTo) {
	s.To = val
}

// SetFrom sets the value of From.
func (s *CallRequest) SetFrom(val string) {
	s.From = val
}

// SetFromDisplayName sets the value of FromDisplayName.
func (s *CallRequest) SetFromDisplayName(val OptString) {
	s.FromDisplayName = val
}

// SetConnectionID sets the value of ConnectionID.
func (s *CallRequest) SetConnectionID(val string) {
	s.ConnectionID = val
}

// SetAudioURL sets the value of AudioURL.
func (s *CallRequest) SetAudioURL(val OptString) {
	s.AudioURL = val
}

// SetMediaName sets the value of MediaName.
func (s *CallRequest) SetMediaName(val OptString) {
	s.MediaName = val
}

// SetPreferredCodecs sets the value of PreferredCodecs.
func (s *CallRequest) SetPreferredCodecs(val OptString) {
	s.PreferredCodecs = val
}

// SetTimeoutSecs sets the value of TimeoutSecs.
func (s *CallRequest) SetTimeoutSecs(val OptInt32) {
	s.TimeoutSecs = val
}

// SetTimeLimitSecs sets the value of TimeLimitSecs.
func (s *CallRequest) SetTimeLimitSecs(val OptInt32) {
	s.TimeLimitSecs = val
}

// SetAnsweringMachineDetection sets the value of AnsweringMachineDetection.
func (s *CallRequest) SetAnsweringMachineDetection(val OptCallRequestAnsweringMachineDetection) {
	s.AnsweringMachineDetection = val
}

// SetAnsweringMachineDetectionConfig sets the value of AnsweringMachineDetectionConfig.
func (s *CallRequest) SetAnsweringMachineDetectionConfig(val OptCallRequestAnsweringMachineDetectionConfig) {
	s.AnsweringMachineDetectionConfig = val
}

// SetConferenceConfig sets the value of ConferenceConfig.
func (s *CallRequest) SetConferenceConfig(val OptCallRequestConferenceConfig) {
	s.ConferenceConfig = val
}

// SetCustomHeaders sets the value of CustomHeaders.
func (s *CallRequest) SetCustomHeaders(val []CustomSipHeader) {
	s.CustomHeaders = val
}

// SetBillingGroupID sets the value of BillingGroupID.
func (s *CallRequest) SetBillingGroupID(val OptUUID) {
	s.BillingGroupID = val
}

// SetClientState sets the value of ClientState.
func (s *CallRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *CallRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// SetLinkTo sets the value of LinkTo.
func (s *CallRequest) SetLinkTo(val OptString) {
	s.LinkTo = val
}

// SetMediaEncryption sets the value of MediaEncryption.
func (s *CallRequest) SetMediaEncryption(val OptCallRequestMediaEncryption) {
	s.MediaEncryption = val
}

// SetSipAuthUsername sets the value of SipAuthUsername.
func (s *CallRequest) SetSipAuthUsername(val OptString) {
	s.SipAuthUsername = val
}

// SetSipAuthPassword sets the value of SipAuthPassword.
func (s *CallRequest) SetSipAuthPassword(val OptString) {
	s.SipAuthPassword = val
}

// SetSipHeaders sets the value of SipHeaders.
func (s *CallRequest) SetSipHeaders(val []SipHeader) {
	s.SipHeaders = val
}

// SetSipTransportProtocol sets the value of SipTransportProtocol.
func (s *CallRequest) SetSipTransportProtocol(val OptCallRequestSipTransportProtocol) {
	s.SipTransportProtocol = val
}

// SetSoundModifications sets the value of SoundModifications.
func (s *CallRequest) SetSoundModifications(val OptSoundModifications) {
	s.SoundModifications = val
}

// SetStreamURL sets the value of StreamURL.
func (s *CallRequest) SetStreamURL(val OptString) {
	s.StreamURL = val
}

// SetStreamTrack sets the value of StreamTrack.
func (s *CallRequest) SetStreamTrack(val OptCallRequestStreamTrack) {
	s.StreamTrack = val
}

// SetSendSilenceWhenIdle sets the value of SendSilenceWhenIdle.
func (s *CallRequest) SetSendSilenceWhenIdle(val OptBool) {
	s.SendSilenceWhenIdle = val
}

// SetWebhookURL sets the value of WebhookURL.
func (s *CallRequest) SetWebhookURL(val OptString) {
	s.WebhookURL = val
}

// SetWebhookURLMethod sets the value of WebhookURLMethod.
func (s *CallRequest) SetWebhookURLMethod(val OptCallRequestWebhookURLMethod) {
	s.WebhookURLMethod = val
}

// SetRecord sets the value of Record.
func (s *CallRequest) SetRecord(val OptCallRequestRecord) {
	s.Record = val
}

// SetRecordChannels sets the value of RecordChannels.
func (s *CallRequest) SetRecordChannels(val OptCallRequestRecordChannels) {
	s.RecordChannels = val
}

// SetRecordFormat sets the value of RecordFormat.
func (s *CallRequest) SetRecordFormat(val OptCallRequestRecordFormat) {
	s.RecordFormat = val
}

// SetRecordMaxLength sets the value of RecordMaxLength.
func (s *CallRequest) SetRecordMaxLength(val OptInt32) {
	s.RecordMaxLength = val
}

// SetRecordTimeoutSecs sets the value of RecordTimeoutSecs.
func (s *CallRequest) SetRecordTimeoutSecs(val OptInt32) {
	s.RecordTimeoutSecs = val
}

// SetRecordTrim sets the value of RecordTrim.
func (s *CallRequest) SetRecordTrim(val OptCallRequestRecordTrim) {
	s.RecordTrim = val
}

// SetRecordCustomFileName sets the value of RecordCustomFileName.
func (s *CallRequest) SetRecordCustomFileName(val OptString) {
	s.RecordCustomFileName = val
}

// SetEnableDialogflow sets the value of EnableDialogflow.
func (s *CallRequest) SetEnableDialogflow(val OptBool) {
	s.EnableDialogflow = val
}

// SetDialogflowConfig sets the value of DialogflowConfig.
func (s *CallRequest) SetDialogflowConfig(val OptDialogflowConfig) {
	s.DialogflowConfig = val
}

// Enables Answering Machine Detection. Telnyx offers Premium and Standard detections. With Premium
// detection, when a call is answered, Telnyx runs real-time detection and sends a `call.machine.
// premium.detection.ended` webhook with one of the following results: `human_residence`,
// `human_business`, `machine`, `silence` or `fax_detected`. If we detect a beep, we also send a
// `call.machine.premium.greeting.ended` webhook with the result of `beep_detected`. If we detect a
// beep before `call.machine.premium.detection.ended` we only send `call.machine.premium.greeting.
// ended`, and if we detect a beep after `call.machine.premium.detection.ended`, we send both
// webhooks. With Standard detection, when a call is answered, Telnyx runs real-time detection to
// determine if it was picked up by a human or a machine and sends an `call.machine.detection.ended`
// webhook with the analysis result. If `greeting_end` or `detect_words` is used and a `machine` is
// detected, you will receive another `call.machine.greeting.ended` webhook when the answering
// machine greeting ends with a beep or silence. If `detect_beep` is used, you will only receive
// `call.machine.greeting.ended` if a beep is detected.
type CallRequestAnsweringMachineDetection string

const (
	CallRequestAnsweringMachineDetectionPremium     CallRequestAnsweringMachineDetection = "premium"
	CallRequestAnsweringMachineDetectionDetect      CallRequestAnsweringMachineDetection = "detect"
	CallRequestAnsweringMachineDetectionDetectBeep  CallRequestAnsweringMachineDetection = "detect_beep"
	CallRequestAnsweringMachineDetectionDetectWords CallRequestAnsweringMachineDetection = "detect_words"
	CallRequestAnsweringMachineDetectionGreetingEnd CallRequestAnsweringMachineDetection = "greeting_end"
	CallRequestAnsweringMachineDetectionDisabled    CallRequestAnsweringMachineDetection = "disabled"
)

// AllValues returns all CallRequestAnsweringMachineDetection values.
func (CallRequestAnsweringMachineDetection) AllValues() []CallRequestAnsweringMachineDetection {
	return []CallRequestAnsweringMachineDetection{
		CallRequestAnsweringMachineDetectionPremium,
		CallRequestAnsweringMachineDetectionDetect,
		CallRequestAnsweringMachineDetectionDetectBeep,
		CallRequestAnsweringMachineDetectionDetectWords,
		CallRequestAnsweringMachineDetectionGreetingEnd,
		CallRequestAnsweringMachineDetectionDisabled,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRequestAnsweringMachineDetection) MarshalText() ([]byte, error) {
	switch s {
	case CallRequestAnsweringMachineDetectionPremium:
		return []byte(s), nil
	case CallRequestAnsweringMachineDetectionDetect:
		return []byte(s), nil
	case CallRequestAnsweringMachineDetectionDetectBeep:
		return []byte(s), nil
	case CallRequestAnsweringMachineDetectionDetectWords:
		return []byte(s), nil
	case CallRequestAnsweringMachineDetectionGreetingEnd:
		return []byte(s), nil
	case CallRequestAnsweringMachineDetectionDisabled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRequestAnsweringMachineDetection) UnmarshalText(data []byte) error {
	switch CallRequestAnsweringMachineDetection(data) {
	case CallRequestAnsweringMachineDetectionPremium:
		*s = CallRequestAnsweringMachineDetectionPremium
		return nil
	case CallRequestAnsweringMachineDetectionDetect:
		*s = CallRequestAnsweringMachineDetectionDetect
		return nil
	case CallRequestAnsweringMachineDetectionDetectBeep:
		*s = CallRequestAnsweringMachineDetectionDetectBeep
		return nil
	case CallRequestAnsweringMachineDetectionDetectWords:
		*s = CallRequestAnsweringMachineDetectionDetectWords
		return nil
	case CallRequestAnsweringMachineDetectionGreetingEnd:
		*s = CallRequestAnsweringMachineDetectionGreetingEnd
		return nil
	case CallRequestAnsweringMachineDetectionDisabled:
		*s = CallRequestAnsweringMachineDetectionDisabled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Optional configuration parameters to modify 'answering_machine_detection' performance.
type CallRequestAnsweringMachineDetectionConfig struct {
	// Maximum timeout threshold for overall detection.
	TotalAnalysisTimeMillis OptInt32 `json:"total_analysis_time_millis"`
	// Silence duration threshold after a greeting message or voice for it be considered human.
	AfterGreetingSilenceMillis OptInt32 `json:"after_greeting_silence_millis"`
	// Maximum threshold for silence between words.
	BetweenWordsSilenceMillis OptInt32 `json:"between_words_silence_millis"`
	// Maximum threshold of a human greeting. If greeting longer than this value, considered machine.
	GreetingDurationMillis OptInt32 `json:"greeting_duration_millis"`
	// If initial silence duration is greater than this value, consider it a machine.
	InitialSilenceMillis OptInt32 `json:"initial_silence_millis"`
	// If number of detected words is greater than this value, consder it a machine.
	MaximumNumberOfWords OptInt32 `json:"maximum_number_of_words"`
	// If a single word lasts longer than this threshold, consider it a machine.
	MaximumWordLengthMillis OptInt32 `json:"maximum_word_length_millis"`
	// Minimum noise threshold for any analysis.
	SilenceThreshold OptInt32 `json:"silence_threshold"`
	// If machine already detected, maximum timeout threshold to determine the end of the machine
	// greeting.
	GreetingTotalAnalysisTimeMillis OptInt32 `json:"greeting_total_analysis_time_millis"`
	// If machine already detected, maximum threshold for silence between words. If exceeded, the
	// greeting is considered ended.
	GreetingSilenceDurationMillis OptInt32 `json:"greeting_silence_duration_millis"`
}

// GetTotalAnalysisTimeMillis returns the value of TotalAnalysisTimeMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) GetTotalAnalysisTimeMillis() OptInt32 {
	return s.TotalAnalysisTimeMillis
}

// GetAfterGreetingSilenceMillis returns the value of AfterGreetingSilenceMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) GetAfterGreetingSilenceMillis() OptInt32 {
	return s.AfterGreetingSilenceMillis
}

// GetBetweenWordsSilenceMillis returns the value of BetweenWordsSilenceMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) GetBetweenWordsSilenceMillis() OptInt32 {
	return s.BetweenWordsSilenceMillis
}

// GetGreetingDurationMillis returns the value of GreetingDurationMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) GetGreetingDurationMillis() OptInt32 {
	return s.GreetingDurationMillis
}

// GetInitialSilenceMillis returns the value of InitialSilenceMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) GetInitialSilenceMillis() OptInt32 {
	return s.InitialSilenceMillis
}

// GetMaximumNumberOfWords returns the value of MaximumNumberOfWords.
func (s *CallRequestAnsweringMachineDetectionConfig) GetMaximumNumberOfWords() OptInt32 {
	return s.MaximumNumberOfWords
}

// GetMaximumWordLengthMillis returns the value of MaximumWordLengthMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) GetMaximumWordLengthMillis() OptInt32 {
	return s.MaximumWordLengthMillis
}

// GetSilenceThreshold returns the value of SilenceThreshold.
func (s *CallRequestAnsweringMachineDetectionConfig) GetSilenceThreshold() OptInt32 {
	return s.SilenceThreshold
}

// GetGreetingTotalAnalysisTimeMillis returns the value of GreetingTotalAnalysisTimeMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) GetGreetingTotalAnalysisTimeMillis() OptInt32 {
	return s.GreetingTotalAnalysisTimeMillis
}

// GetGreetingSilenceDurationMillis returns the value of GreetingSilenceDurationMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) GetGreetingSilenceDurationMillis() OptInt32 {
	return s.GreetingSilenceDurationMillis
}

// SetTotalAnalysisTimeMillis sets the value of TotalAnalysisTimeMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) SetTotalAnalysisTimeMillis(val OptInt32) {
	s.TotalAnalysisTimeMillis = val
}

// SetAfterGreetingSilenceMillis sets the value of AfterGreetingSilenceMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) SetAfterGreetingSilenceMillis(val OptInt32) {
	s.AfterGreetingSilenceMillis = val
}

// SetBetweenWordsSilenceMillis sets the value of BetweenWordsSilenceMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) SetBetweenWordsSilenceMillis(val OptInt32) {
	s.BetweenWordsSilenceMillis = val
}

// SetGreetingDurationMillis sets the value of GreetingDurationMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) SetGreetingDurationMillis(val OptInt32) {
	s.GreetingDurationMillis = val
}

// SetInitialSilenceMillis sets the value of InitialSilenceMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) SetInitialSilenceMillis(val OptInt32) {
	s.InitialSilenceMillis = val
}

// SetMaximumNumberOfWords sets the value of MaximumNumberOfWords.
func (s *CallRequestAnsweringMachineDetectionConfig) SetMaximumNumberOfWords(val OptInt32) {
	s.MaximumNumberOfWords = val
}

// SetMaximumWordLengthMillis sets the value of MaximumWordLengthMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) SetMaximumWordLengthMillis(val OptInt32) {
	s.MaximumWordLengthMillis = val
}

// SetSilenceThreshold sets the value of SilenceThreshold.
func (s *CallRequestAnsweringMachineDetectionConfig) SetSilenceThreshold(val OptInt32) {
	s.SilenceThreshold = val
}

// SetGreetingTotalAnalysisTimeMillis sets the value of GreetingTotalAnalysisTimeMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) SetGreetingTotalAnalysisTimeMillis(val OptInt32) {
	s.GreetingTotalAnalysisTimeMillis = val
}

// SetGreetingSilenceDurationMillis sets the value of GreetingSilenceDurationMillis.
func (s *CallRequestAnsweringMachineDetectionConfig) SetGreetingSilenceDurationMillis(val OptInt32) {
	s.GreetingSilenceDurationMillis = val
}

// Optional configuration parameters to dial new participant into a conference.
type CallRequestConferenceConfig struct {
	// Conference ID to be joined.
	ID OptUUID `json:"id"`
	// Conference name to be joined.
	ConferenceName OptString `json:"conference_name"`
	// Whether the conference should end and all remaining participants be hung up after the participant
	// leaves the conference. Defaults to "false".
	EndConferenceOnExit OptBool `json:"end_conference_on_exit"`
	// Whether the conference should end after the participant leaves the conference. NOTE this doesn't
	// hang up the other participants. Defaults to "false".
	SoftEndConferenceOnExit OptBool `json:"soft_end_conference_on_exit"`
	// Whether the participant should be put on hold immediately after joining the conference. Defaults
	// to "false".
	Hold OptBool `json:"hold"`
	// The URL of a file to be played to the participant when they are put on hold after joining the
	// conference. hold_media_name and hold_audio_url cannot be used together in one request. Takes
	// effect only when "start_conference_on_create" is set to "false". This property takes effect only
	// if "hold" is set to "true".
	HoldAudioURL OptString `json:"hold_audio_url"`
	// The media_name of a file to be played to the participant when they are put on hold after joining
	// the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media
	// by the same user/organization. The file must either be a WAV or MP3 file. Takes effect only when
	// "start_conference_on_create" is set to "false". This property takes effect only if "hold" is set
	// to "true".
	HoldMediaName OptString `json:"hold_media_name"`
	// Whether the participant should be muted immediately after joining the conference. Defaults to
	// "false".
	Mute OptBool `json:"mute"`
	// Whether the conference should be started after the participant joins the conference. Defaults to
	// "false".
	StartConferenceOnEnter OptBool `json:"start_conference_on_enter"`
	// Whether the conference should be started on creation. If the conference isn't started all
	// participants that join are automatically put on hold. Defaults to "true".
	StartConferenceOnCreate OptBool `json:"start_conference_on_create"`
	// Sets the joining participant as a supervisor for the conference. A conference can have multiple
	// supervisors. "barge" means the supervisor enters the conference as a normal participant. This is
	// the same as "none". "monitor" means the supervisor is muted but can hear all participants.
	// "whisper" means that only the specified "whisper_call_control_ids" can hear the supervisor.
	// Defaults to "none".
	SupervisorRole OptCallRequestConferenceConfigSupervisorRole `json:"supervisor_role"`
	// Array of unique call_control_ids the joining supervisor can whisper to. If none provided, the
	// supervisor will join the conference as a monitoring participant only.
	WhisperCallControlIds []string `json:"whisper_call_control_ids"`
	// Whether a beep sound should be played when the participant joins and/or leaves the conference. Can
	// be used to override the conference-level setting.
	BeepEnabled OptCallRequestConferenceConfigBeepEnabled `json:"beep_enabled"`
}

// GetID returns the value of ID.
func (s *CallRequestConferenceConfig) GetID() OptUUID {
	return s.ID
}

// GetConferenceName returns the value of ConferenceName.
func (s *CallRequestConferenceConfig) GetConferenceName() OptString {
	return s.ConferenceName
}

// GetEndConferenceOnExit returns the value of EndConferenceOnExit.
func (s *CallRequestConferenceConfig) GetEndConferenceOnExit() OptBool {
	return s.EndConferenceOnExit
}

// GetSoftEndConferenceOnExit returns the value of SoftEndConferenceOnExit.
func (s *CallRequestConferenceConfig) GetSoftEndConferenceOnExit() OptBool {
	return s.SoftEndConferenceOnExit
}

// GetHold returns the value of Hold.
func (s *CallRequestConferenceConfig) GetHold() OptBool {
	return s.Hold
}

// GetHoldAudioURL returns the value of HoldAudioURL.
func (s *CallRequestConferenceConfig) GetHoldAudioURL() OptString {
	return s.HoldAudioURL
}

// GetHoldMediaName returns the value of HoldMediaName.
func (s *CallRequestConferenceConfig) GetHoldMediaName() OptString {
	return s.HoldMediaName
}

// GetMute returns the value of Mute.
func (s *CallRequestConferenceConfig) GetMute() OptBool {
	return s.Mute
}

// GetStartConferenceOnEnter returns the value of StartConferenceOnEnter.
func (s *CallRequestConferenceConfig) GetStartConferenceOnEnter() OptBool {
	return s.StartConferenceOnEnter
}

// GetStartConferenceOnCreate returns the value of StartConferenceOnCreate.
func (s *CallRequestConferenceConfig) GetStartConferenceOnCreate() OptBool {
	return s.StartConferenceOnCreate
}

// GetSupervisorRole returns the value of SupervisorRole.
func (s *CallRequestConferenceConfig) GetSupervisorRole() OptCallRequestConferenceConfigSupervisorRole {
	return s.SupervisorRole
}

// GetWhisperCallControlIds returns the value of WhisperCallControlIds.
func (s *CallRequestConferenceConfig) GetWhisperCallControlIds() []string {
	return s.WhisperCallControlIds
}

// GetBeepEnabled returns the value of BeepEnabled.
func (s *CallRequestConferenceConfig) GetBeepEnabled() OptCallRequestConferenceConfigBeepEnabled {
	return s.BeepEnabled
}

// SetID sets the value of ID.
func (s *CallRequestConferenceConfig) SetID(val OptUUID) {
	s.ID = val
}

// SetConferenceName sets the value of ConferenceName.
func (s *CallRequestConferenceConfig) SetConferenceName(val OptString) {
	s.ConferenceName = val
}

// SetEndConferenceOnExit sets the value of EndConferenceOnExit.
func (s *CallRequestConferenceConfig) SetEndConferenceOnExit(val OptBool) {
	s.EndConferenceOnExit = val
}

// SetSoftEndConferenceOnExit sets the value of SoftEndConferenceOnExit.
func (s *CallRequestConferenceConfig) SetSoftEndConferenceOnExit(val OptBool) {
	s.SoftEndConferenceOnExit = val
}

// SetHold sets the value of Hold.
func (s *CallRequestConferenceConfig) SetHold(val OptBool) {
	s.Hold = val
}

// SetHoldAudioURL sets the value of HoldAudioURL.
func (s *CallRequestConferenceConfig) SetHoldAudioURL(val OptString) {
	s.HoldAudioURL = val
}

// SetHoldMediaName sets the value of HoldMediaName.
func (s *CallRequestConferenceConfig) SetHoldMediaName(val OptString) {
	s.HoldMediaName = val
}

// SetMute sets the value of Mute.
func (s *CallRequestConferenceConfig) SetMute(val OptBool) {
	s.Mute = val
}

// SetStartConferenceOnEnter sets the value of StartConferenceOnEnter.
func (s *CallRequestConferenceConfig) SetStartConferenceOnEnter(val OptBool) {
	s.StartConferenceOnEnter = val
}

// SetStartConferenceOnCreate sets the value of StartConferenceOnCreate.
func (s *CallRequestConferenceConfig) SetStartConferenceOnCreate(val OptBool) {
	s.StartConferenceOnCreate = val
}

// SetSupervisorRole sets the value of SupervisorRole.
func (s *CallRequestConferenceConfig) SetSupervisorRole(val OptCallRequestConferenceConfigSupervisorRole) {
	s.SupervisorRole = val
}

// SetWhisperCallControlIds sets the value of WhisperCallControlIds.
func (s *CallRequestConferenceConfig) SetWhisperCallControlIds(val []string) {
	s.WhisperCallControlIds = val
}

// SetBeepEnabled sets the value of BeepEnabled.
func (s *CallRequestConferenceConfig) SetBeepEnabled(val OptCallRequestConferenceConfigBeepEnabled) {
	s.BeepEnabled = val
}

// Whether a beep sound should be played when the participant joins and/or leaves the conference. Can
// be used to override the conference-level setting.
type CallRequestConferenceConfigBeepEnabled string

const (
	CallRequestConferenceConfigBeepEnabledAlways  CallRequestConferenceConfigBeepEnabled = "always"
	CallRequestConferenceConfigBeepEnabledNever   CallRequestConferenceConfigBeepEnabled = "never"
	CallRequestConferenceConfigBeepEnabledOnEnter CallRequestConferenceConfigBeepEnabled = "on_enter"
	CallRequestConferenceConfigBeepEnabledOnExit  CallRequestConferenceConfigBeepEnabled = "on_exit"
)

// AllValues returns all CallRequestConferenceConfigBeepEnabled values.
func (CallRequestConferenceConfigBeepEnabled) AllValues() []CallRequestConferenceConfigBeepEnabled {
	return []CallRequestConferenceConfigBeepEnabled{
		CallRequestConferenceConfigBeepEnabledAlways,
		CallRequestConferenceConfigBeepEnabledNever,
		CallRequestConferenceConfigBeepEnabledOnEnter,
		CallRequestConferenceConfigBeepEnabledOnExit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRequestConferenceConfigBeepEnabled) MarshalText() ([]byte, error) {
	switch s {
	case CallRequestConferenceConfigBeepEnabledAlways:
		return []byte(s), nil
	case CallRequestConferenceConfigBeepEnabledNever:
		return []byte(s), nil
	case CallRequestConferenceConfigBeepEnabledOnEnter:
		return []byte(s), nil
	case CallRequestConferenceConfigBeepEnabledOnExit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRequestConferenceConfigBeepEnabled) UnmarshalText(data []byte) error {
	switch CallRequestConferenceConfigBeepEnabled(data) {
	case CallRequestConferenceConfigBeepEnabledAlways:
		*s = CallRequestConferenceConfigBeepEnabledAlways
		return nil
	case CallRequestConferenceConfigBeepEnabledNever:
		*s = CallRequestConferenceConfigBeepEnabledNever
		return nil
	case CallRequestConferenceConfigBeepEnabledOnEnter:
		*s = CallRequestConferenceConfigBeepEnabledOnEnter
		return nil
	case CallRequestConferenceConfigBeepEnabledOnExit:
		*s = CallRequestConferenceConfigBeepEnabledOnExit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Sets the joining participant as a supervisor for the conference. A conference can have multiple
// supervisors. "barge" means the supervisor enters the conference as a normal participant. This is
// the same as "none". "monitor" means the supervisor is muted but can hear all participants.
// "whisper" means that only the specified "whisper_call_control_ids" can hear the supervisor.
// Defaults to "none".
type CallRequestConferenceConfigSupervisorRole string

const (
	CallRequestConferenceConfigSupervisorRoleBarge   CallRequestConferenceConfigSupervisorRole = "barge"
	CallRequestConferenceConfigSupervisorRoleMonitor CallRequestConferenceConfigSupervisorRole = "monitor"
	CallRequestConferenceConfigSupervisorRoleNone    CallRequestConferenceConfigSupervisorRole = "none"
	CallRequestConferenceConfigSupervisorRoleWhisper CallRequestConferenceConfigSupervisorRole = "whisper"
)

// AllValues returns all CallRequestConferenceConfigSupervisorRole values.
func (CallRequestConferenceConfigSupervisorRole) AllValues() []CallRequestConferenceConfigSupervisorRole {
	return []CallRequestConferenceConfigSupervisorRole{
		CallRequestConferenceConfigSupervisorRoleBarge,
		CallRequestConferenceConfigSupervisorRoleMonitor,
		CallRequestConferenceConfigSupervisorRoleNone,
		CallRequestConferenceConfigSupervisorRoleWhisper,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRequestConferenceConfigSupervisorRole) MarshalText() ([]byte, error) {
	switch s {
	case CallRequestConferenceConfigSupervisorRoleBarge:
		return []byte(s), nil
	case CallRequestConferenceConfigSupervisorRoleMonitor:
		return []byte(s), nil
	case CallRequestConferenceConfigSupervisorRoleNone:
		return []byte(s), nil
	case CallRequestConferenceConfigSupervisorRoleWhisper:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRequestConferenceConfigSupervisorRole) UnmarshalText(data []byte) error {
	switch CallRequestConferenceConfigSupervisorRole(data) {
	case CallRequestConferenceConfigSupervisorRoleBarge:
		*s = CallRequestConferenceConfigSupervisorRoleBarge
		return nil
	case CallRequestConferenceConfigSupervisorRoleMonitor:
		*s = CallRequestConferenceConfigSupervisorRoleMonitor
		return nil
	case CallRequestConferenceConfigSupervisorRoleNone:
		*s = CallRequestConferenceConfigSupervisorRoleNone
		return nil
	case CallRequestConferenceConfigSupervisorRoleWhisper:
		*s = CallRequestConferenceConfigSupervisorRoleWhisper
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Defines whether media should be encrypted on the call.
type CallRequestMediaEncryption string

const (
	CallRequestMediaEncryptionDisabled CallRequestMediaEncryption = "disabled"
	CallRequestMediaEncryptionSRTP     CallRequestMediaEncryption = "SRTP"
)

// AllValues returns all CallRequestMediaEncryption values.
func (CallRequestMediaEncryption) AllValues() []CallRequestMediaEncryption {
	return []CallRequestMediaEncryption{
		CallRequestMediaEncryptionDisabled,
		CallRequestMediaEncryptionSRTP,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRequestMediaEncryption) MarshalText() ([]byte, error) {
	switch s {
	case CallRequestMediaEncryptionDisabled:
		return []byte(s), nil
	case CallRequestMediaEncryptionSRTP:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRequestMediaEncryption) UnmarshalText(data []byte) error {
	switch CallRequestMediaEncryption(data) {
	case CallRequestMediaEncryptionDisabled:
		*s = CallRequestMediaEncryptionDisabled
		return nil
	case CallRequestMediaEncryptionSRTP:
		*s = CallRequestMediaEncryptionSRTP
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Start recording automatically after an event. Disabled by default.
type CallRequestRecord string

const (
	CallRequestRecordRecordFromAnswer CallRequestRecord = "record-from-answer"
)

// AllValues returns all CallRequestRecord values.
func (CallRequestRecord) AllValues() []CallRequestRecord {
	return []CallRequestRecord{
		CallRequestRecordRecordFromAnswer,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRequestRecord) MarshalText() ([]byte, error) {
	switch s {
	case CallRequestRecordRecordFromAnswer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRequestRecord) UnmarshalText(data []byte) error {
	switch CallRequestRecord(data) {
	case CallRequestRecordRecordFromAnswer:
		*s = CallRequestRecordRecordFromAnswer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Defines which channel should be recorded ('single' or 'dual') when `record` is specified.
type CallRequestRecordChannels string

const (
	CallRequestRecordChannelsSingle CallRequestRecordChannels = "single"
	CallRequestRecordChannelsDual   CallRequestRecordChannels = "dual"
)

// AllValues returns all CallRequestRecordChannels values.
func (CallRequestRecordChannels) AllValues() []CallRequestRecordChannels {
	return []CallRequestRecordChannels{
		CallRequestRecordChannelsSingle,
		CallRequestRecordChannelsDual,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRequestRecordChannels) MarshalText() ([]byte, error) {
	switch s {
	case CallRequestRecordChannelsSingle:
		return []byte(s), nil
	case CallRequestRecordChannelsDual:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRequestRecordChannels) UnmarshalText(data []byte) error {
	switch CallRequestRecordChannels(data) {
	case CallRequestRecordChannelsSingle:
		*s = CallRequestRecordChannelsSingle
		return nil
	case CallRequestRecordChannelsDual:
		*s = CallRequestRecordChannelsDual
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Defines the format of the recording ('wav' or 'mp3') when `record` is specified.
type CallRequestRecordFormat string

const (
	CallRequestRecordFormatWav CallRequestRecordFormat = "wav"
	CallRequestRecordFormatMp3 CallRequestRecordFormat = "mp3"
)

// AllValues returns all CallRequestRecordFormat values.
func (CallRequestRecordFormat) AllValues() []CallRequestRecordFormat {
	return []CallRequestRecordFormat{
		CallRequestRecordFormatWav,
		CallRequestRecordFormatMp3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRequestRecordFormat) MarshalText() ([]byte, error) {
	switch s {
	case CallRequestRecordFormatWav:
		return []byte(s), nil
	case CallRequestRecordFormatMp3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRequestRecordFormat) UnmarshalText(data []byte) error {
	switch CallRequestRecordFormat(data) {
	case CallRequestRecordFormatWav:
		*s = CallRequestRecordFormatWav
		return nil
	case CallRequestRecordFormatMp3:
		*s = CallRequestRecordFormatMp3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// When set to `trim-silence`, silence will be removed from the beginning and end of the recording.
type CallRequestRecordTrim string

const (
	CallRequestRecordTrimTrimSilence CallRequestRecordTrim = "trim-silence"
)

// AllValues returns all CallRequestRecordTrim values.
func (CallRequestRecordTrim) AllValues() []CallRequestRecordTrim {
	return []CallRequestRecordTrim{
		CallRequestRecordTrimTrimSilence,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRequestRecordTrim) MarshalText() ([]byte, error) {
	switch s {
	case CallRequestRecordTrimTrimSilence:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRequestRecordTrim) UnmarshalText(data []byte) error {
	switch CallRequestRecordTrim(data) {
	case CallRequestRecordTrimTrimSilence:
		*s = CallRequestRecordTrimTrimSilence
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Defines SIP transport protocol to be used on the call.
type CallRequestSipTransportProtocol string

const (
	CallRequestSipTransportProtocolUDP CallRequestSipTransportProtocol = "UDP"
	CallRequestSipTransportProtocolTCP CallRequestSipTransportProtocol = "TCP"
	CallRequestSipTransportProtocolTLS CallRequestSipTransportProtocol = "TLS"
)

// AllValues returns all CallRequestSipTransportProtocol values.
func (CallRequestSipTransportProtocol) AllValues() []CallRequestSipTransportProtocol {
	return []CallRequestSipTransportProtocol{
		CallRequestSipTransportProtocolUDP,
		CallRequestSipTransportProtocolTCP,
		CallRequestSipTransportProtocolTLS,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRequestSipTransportProtocol) MarshalText() ([]byte, error) {
	switch s {
	case CallRequestSipTransportProtocolUDP:
		return []byte(s), nil
	case CallRequestSipTransportProtocolTCP:
		return []byte(s), nil
	case CallRequestSipTransportProtocolTLS:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRequestSipTransportProtocol) UnmarshalText(data []byte) error {
	switch CallRequestSipTransportProtocol(data) {
	case CallRequestSipTransportProtocolUDP:
		*s = CallRequestSipTransportProtocolUDP
		return nil
	case CallRequestSipTransportProtocolTCP:
		*s = CallRequestSipTransportProtocolTCP
		return nil
	case CallRequestSipTransportProtocolTLS:
		*s = CallRequestSipTransportProtocolTLS
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Specifies which track should be streamed.
type CallRequestStreamTrack string

const (
	CallRequestStreamTrackInboundTrack  CallRequestStreamTrack = "inbound_track"
	CallRequestStreamTrackOutboundTrack CallRequestStreamTrack = "outbound_track"
	CallRequestStreamTrackBothTracks    CallRequestStreamTrack = "both_tracks"
)

// AllValues returns all CallRequestStreamTrack values.
func (CallRequestStreamTrack) AllValues() []CallRequestStreamTrack {
	return []CallRequestStreamTrack{
		CallRequestStreamTrackInboundTrack,
		CallRequestStreamTrackOutboundTrack,
		CallRequestStreamTrackBothTracks,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRequestStreamTrack) MarshalText() ([]byte, error) {
	switch s {
	case CallRequestStreamTrackInboundTrack:
		return []byte(s), nil
	case CallRequestStreamTrackOutboundTrack:
		return []byte(s), nil
	case CallRequestStreamTrackBothTracks:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRequestStreamTrack) UnmarshalText(data []byte) error {
	switch CallRequestStreamTrack(data) {
	case CallRequestStreamTrackInboundTrack:
		*s = CallRequestStreamTrackInboundTrack
		return nil
	case CallRequestStreamTrackOutboundTrack:
		*s = CallRequestStreamTrackOutboundTrack
		return nil
	case CallRequestStreamTrackBothTracks:
		*s = CallRequestStreamTrackBothTracks
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The DID or SIP URI to dial out to. Multiple DID or SIP URIs can be provided using an array of
// strings.
// CallRequestTo represents sum type.
type CallRequestTo struct {
	Type        CallRequestToType // switch on this field
	String      string
	StringArray []string
}

// CallRequestToType is oneOf type of CallRequestTo.
type CallRequestToType string

// Possible values for CallRequestToType.
const (
	StringCallRequestTo      CallRequestToType = "string"
	StringArrayCallRequestTo CallRequestToType = "[]string"
)

// IsString reports whether CallRequestTo is string.
func (s CallRequestTo) IsString() bool { return s.Type == StringCallRequestTo }

// IsStringArray reports whether CallRequestTo is []string.
func (s CallRequestTo) IsStringArray() bool { return s.Type == StringArrayCallRequestTo }

// SetString sets CallRequestTo to string.
func (s *CallRequestTo) SetString(v string) {
	s.Type = StringCallRequestTo
	s.String = v
}

// GetString returns string and true boolean if CallRequestTo is string.
func (s CallRequestTo) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringCallRequestTo returns new CallRequestTo from string.
func NewStringCallRequestTo(v string) CallRequestTo {
	var s CallRequestTo
	s.SetString(v)
	return s
}

// SetStringArray sets CallRequestTo to []string.
func (s *CallRequestTo) SetStringArray(v []string) {
	s.Type = StringArrayCallRequestTo
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if CallRequestTo is []string.
func (s CallRequestTo) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayCallRequestTo returns new CallRequestTo from []string.
func NewStringArrayCallRequestTo(v []string) CallRequestTo {
	var s CallRequestTo
	s.SetStringArray(v)
	return s
}

// HTTP request type used for `webhook_url`.
type CallRequestWebhookURLMethod string

const (
	CallRequestWebhookURLMethodPOST CallRequestWebhookURLMethod = "POST"
	CallRequestWebhookURLMethodGET  CallRequestWebhookURLMethod = "GET"
)

// AllValues returns all CallRequestWebhookURLMethod values.
func (CallRequestWebhookURLMethod) AllValues() []CallRequestWebhookURLMethod {
	return []CallRequestWebhookURLMethod{
		CallRequestWebhookURLMethodPOST,
		CallRequestWebhookURLMethodGET,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallRequestWebhookURLMethod) MarshalText() ([]byte, error) {
	switch s {
	case CallRequestWebhookURLMethodPOST:
		return []byte(s), nil
	case CallRequestWebhookURLMethodGET:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallRequestWebhookURLMethod) UnmarshalText(data []byte) error {
	switch CallRequestWebhookURLMethod(data) {
	case CallRequestWebhookURLMethodPOST:
		*s = CallRequestWebhookURLMethodPOST
		return nil
	case CallRequestWebhookURLMethodGET:
		*s = CallRequestWebhookURLMethodGET
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CallResource
type CallResource struct {
	// The id of the account the resource belongs to.
	AccountSid OptString `json:"account_sid"`
	// The value of the answering machine detection result, if this feature was enabled for the call.
	AnsweredBy OptCallResourceAnsweredBy `json:"answered_by"`
	// Caller ID, if present.
	CallerName OptString `json:"caller_name"`
	// The timestamp of when the resource was created.
	DateCreated OptString `json:"date_created"`
	// The timestamp of when the resource was last updated.
	DateUpdated OptString `json:"date_updated"`
	// The direction of this call.
	Direction OptCallResourceDirection `json:"direction"`
	// The duration of this call, given in seconds.
	Duration OptString `json:"duration"`
	// The end time of this call.
	EndTime OptString `json:"end_time"`
	// The phone number or SIP address that made this call.
	From OptString `json:"from"`
	// The from number formatted for display.
	FromFormatted OptString `json:"from_formatted"`
	// The price of this call, the currency is specified in the price_unit field. Only populated when the
	// call cost feature is enabled for the account.
	Price OptString `json:"price"`
	// The unit in which the price is given.
	PriceUnit OptString `json:"price_unit"`
	// The identifier of this call.
	Sid OptString `json:"sid"`
	// The start time of this call.
	StartTime OptString `json:"start_time"`
	// The status of this call.
	Status OptCallResourceStatus `json:"status"`
	// The phone number or SIP address that received this call.
	To OptString `json:"to"`
	// The to number formatted for display.
	ToFormatted OptString `json:"to_formatted"`
	// The relative URI for this call.
	URI OptString `json:"uri"`
}

// GetAccountSid returns the value of AccountSid.
func (s *CallResource) GetAccountSid() OptString {
	return s.AccountSid
}

// GetAnsweredBy returns the value of AnsweredBy.
func (s *CallResource) GetAnsweredBy() OptCallResourceAnsweredBy {
	return s.AnsweredBy
}

// GetCallerName returns the value of CallerName.
func (s *CallResource) GetCallerName() OptString {
	return s.CallerName
}

// GetDateCreated returns the value of DateCreated.
func (s *CallResource) GetDateCreated() OptString {
	return s.DateCreated
}

// GetDateUpdated returns the value of DateUpdated.
func (s *CallResource) GetDateUpdated() OptString {
	return s.DateUpdated
}

// GetDirection returns the value of Direction.
func (s *CallResource) GetDirection() OptCallResourceDirection {
	return s.Direction
}

// GetDuration returns the value of Duration.
func (s *CallResource) GetDuration() OptString {
	return s.Duration
}

// GetEndTime returns the value of EndTime.
func (s *CallResource) GetEndTime() OptString {
	return s.EndTime
}

// GetFrom returns the value of From.
func (s *CallResource) GetFrom() OptString {
	return s.From
}

// GetFromFormatted returns the value of FromFormatted.
func (s *CallResource) GetFromFormatted() OptString {
	return s.FromFormatted
}

// GetPrice returns the value of Price.
func (s *CallResource) GetPrice() OptString {
	return s.Price
}

// GetPriceUnit returns the value of PriceUnit.
func (s *CallResource) GetPriceUnit() OptString {
	return s.PriceUnit
}

// GetSid returns the value of Sid.
func (s *CallResource) GetSid() OptString {
	return s.Sid
}

// GetStartTime returns the value of StartTime.
func (s *CallResource) GetStartTime() OptString {
	return s.StartTime
}

// GetStatus returns the value of Status.
func (s *CallResource) GetStatus() OptCallResourceStatus {
	return s.Status
}

// GetTo returns the value of To.
func (s *CallResource) GetTo() OptString {
	return s.To
}

// GetToFormatted returns the value of ToFormatted.
func (s *CallResource) GetToFormatted() OptString {
	return s.ToFormatted
}

// GetURI returns the value of URI.
func (s *CallResource) GetURI() OptString {
	return s.URI
}

// SetAccountSid sets the value of AccountSid.
func (s *CallResource) SetAccountSid(val OptString) {
	s.AccountSid = val
}

// SetAnsweredBy sets the value of AnsweredBy.
func (s *CallResource) SetAnsweredBy(val OptCallResourceAnsweredBy) {
	s.AnsweredBy = val
}

// SetCallerName sets the value of CallerName.
func (s *CallResource) SetCallerName(val OptString) {
	s.CallerName = val
}

// SetDateCreated sets the value of DateCreated.
func (s *CallResource) SetDateCreated(val OptString) {
	s.DateCreated = val
}

// SetDateUpdated sets the value of DateUpdated.
func (s *CallResource) SetDateUpdated(val OptString) {
	s.DateUpdated = val
}

// SetDirection sets the value of Direction.
func (s *CallResource) SetDirection(val OptCallResourceDirection) {
	s.Direction = val
}

// SetDuration sets the value of Duration.
func (s *CallResource) SetDuration(val OptString) {
	s.Duration = val
}

// SetEndTime sets the value of EndTime.
func (s *CallResource) SetEndTime(val OptString) {
	s.EndTime = val
}

// SetFrom sets the value of From.
func (s *CallResource) SetFrom(val OptString) {
	s.From = val
}

// SetFromFormatted sets the value of FromFormatted.
func (s *CallResource) SetFromFormatted(val OptString) {
	s.FromFormatted = val
}

// SetPrice sets the value of Price.
func (s *CallResource) SetPrice(val OptString) {
	s.Price = val
}

// SetPriceUnit sets the value of PriceUnit.
func (s *CallResource) SetPriceUnit(val OptString) {
	s.PriceUnit = val
}

// SetSid sets the value of Sid.
func (s *CallResource) SetSid(val OptString) {
	s.Sid = val
}

// SetStartTime sets the value of StartTime.
func (s *CallResource) SetStartTime(val OptString) {
	s.StartTime = val
}

// SetStatus sets the value of Status.
func (s *CallResource) SetStatus(val OptCallResourceStatus) {
	s.Status = val
}

// SetTo sets the value of To.
func (s *CallResource) SetTo(val OptString) {
	s.To = val
}

// SetToFormatted sets the value of ToFormatted.
func (s *CallResource) SetToFormatted(val OptString) {
	s.ToFormatted = val
}

// SetURI sets the value of URI.
func (s *CallResource) SetURI(val OptString) {
	s.URI = val
}

// The value of the answering machine detection result, if this feature was enabled for the call.
type CallResourceAnsweredBy string

const (
	CallResourceAnsweredByHuman   CallResourceAnsweredBy = "human"
	CallResourceAnsweredByMachine CallResourceAnsweredBy = "machine"
	CallResourceAnsweredByNotSure CallResourceAnsweredBy = "not_sure"
)

// AllValues returns all CallResourceAnsweredBy values.
func (CallResourceAnsweredBy) AllValues() []CallResourceAnsweredBy {
	return []CallResourceAnsweredBy{
		CallResourceAnsweredByHuman,
		CallResourceAnsweredByMachine,
		CallResourceAnsweredByNotSure,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallResourceAnsweredBy) MarshalText() ([]byte, error) {
	switch s {
	case CallResourceAnsweredByHuman:
		return []byte(s), nil
	case CallResourceAnsweredByMachine:
		return []byte(s), nil
	case CallResourceAnsweredByNotSure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallResourceAnsweredBy) UnmarshalText(data []byte) error {
	switch CallResourceAnsweredBy(data) {
	case CallResourceAnsweredByHuman:
		*s = CallResourceAnsweredByHuman
		return nil
	case CallResourceAnsweredByMachine:
		*s = CallResourceAnsweredByMachine
		return nil
	case CallResourceAnsweredByNotSure:
		*s = CallResourceAnsweredByNotSure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The direction of this call.
type CallResourceDirection string

const (
	CallResourceDirectionInbound  CallResourceDirection = "inbound"
	CallResourceDirectionOutbound CallResourceDirection = "outbound"
)

// AllValues returns all CallResourceDirection values.
func (CallResourceDirection) AllValues() []CallResourceDirection {
	return []CallResourceDirection{
		CallResourceDirectionInbound,
		CallResourceDirectionOutbound,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallResourceDirection) MarshalText() ([]byte, error) {
	switch s {
	case CallResourceDirectionInbound:
		return []byte(s), nil
	case CallResourceDirectionOutbound:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallResourceDirection) UnmarshalText(data []byte) error {
	switch CallResourceDirection(data) {
	case CallResourceDirectionInbound:
		*s = CallResourceDirectionInbound
		return nil
	case CallResourceDirectionOutbound:
		*s = CallResourceDirectionOutbound
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CallResourceIndex
type CallResourceIndex struct {
	Calls []CallResource `json:"calls"`
	// The number of the last element on the page, zero-indexed.
	End OptInt `json:"end"`
	// /v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Calls.json?Page=0&PageSize=1.
	FirstPageURI OptString `json:"first_page_uri"`
	// /v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Calls.
	// json?Page=1&PageSize=1&PageToken=MTY4AjgyNDkwNzIxMQ.
	NextPageURI OptString `json:"next_page_uri"`
	// Current page number, zero-indexed.
	Page OptInt `json:"page"`
	// The number of items on the page.
	PageSize OptInt `json:"page_size"`
	// The number of the first element on the page, zero-indexed.
	Start OptInt `json:"start"`
	// The URI of the current page.
	URI OptString `json:"uri"`
}

// GetCalls returns the value of Calls.
func (s *CallResourceIndex) GetCalls() []CallResource {
	return s.Calls
}

// GetEnd returns the value of End.
func (s *CallResourceIndex) GetEnd() OptInt {
	return s.End
}

// GetFirstPageURI returns the value of FirstPageURI.
func (s *CallResourceIndex) GetFirstPageURI() OptString {
	return s.FirstPageURI
}

// GetNextPageURI returns the value of NextPageURI.
func (s *CallResourceIndex) GetNextPageURI() OptString {
	return s.NextPageURI
}

// GetPage returns the value of Page.
func (s *CallResourceIndex) GetPage() OptInt {
	return s.Page
}

// GetPageSize returns the value of PageSize.
func (s *CallResourceIndex) GetPageSize() OptInt {
	return s.PageSize
}

// GetStart returns the value of Start.
func (s *CallResourceIndex) GetStart() OptInt {
	return s.Start
}

// GetURI returns the value of URI.
func (s *CallResourceIndex) GetURI() OptString {
	return s.URI
}

// SetCalls sets the value of Calls.
func (s *CallResourceIndex) SetCalls(val []CallResource) {
	s.Calls = val
}

// SetEnd sets the value of End.
func (s *CallResourceIndex) SetEnd(val OptInt) {
	s.End = val
}

// SetFirstPageURI sets the value of FirstPageURI.
func (s *CallResourceIndex) SetFirstPageURI(val OptString) {
	s.FirstPageURI = val
}

// SetNextPageURI sets the value of NextPageURI.
func (s *CallResourceIndex) SetNextPageURI(val OptString) {
	s.NextPageURI = val
}

// SetPage sets the value of Page.
func (s *CallResourceIndex) SetPage(val OptInt) {
	s.Page = val
}

// SetPageSize sets the value of PageSize.
func (s *CallResourceIndex) SetPageSize(val OptInt) {
	s.PageSize = val
}

// SetStart sets the value of Start.
func (s *CallResourceIndex) SetStart(val OptInt) {
	s.Start = val
}

// SetURI sets the value of URI.
func (s *CallResourceIndex) SetURI(val OptString) {
	s.URI = val
}

// The status of this call.
type CallResourceStatus string

const (
	CallResourceStatusRinging    CallResourceStatus = "ringing"
	CallResourceStatusInProgress CallResourceStatus = "in-progress"
	CallResourceStatusCanceled   CallResourceStatus = "canceled"
	CallResourceStatusCompleted  CallResourceStatus = "completed"
	CallResourceStatusFailed     CallResourceStatus = "failed"
	CallResourceStatusBusy       CallResourceStatus = "busy"
	CallResourceStatusNoAnswer   CallResourceStatus = "no-answer"
)

// AllValues returns all CallResourceStatus values.
func (CallResourceStatus) AllValues() []CallResourceStatus {
	return []CallResourceStatus{
		CallResourceStatusRinging,
		CallResourceStatusInProgress,
		CallResourceStatusCanceled,
		CallResourceStatusCompleted,
		CallResourceStatusFailed,
		CallResourceStatusBusy,
		CallResourceStatusNoAnswer,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CallResourceStatus) MarshalText() ([]byte, error) {
	switch s {
	case CallResourceStatusRinging:
		return []byte(s), nil
	case CallResourceStatusInProgress:
		return []byte(s), nil
	case CallResourceStatusCanceled:
		return []byte(s), nil
	case CallResourceStatusCompleted:
		return []byte(s), nil
	case CallResourceStatusFailed:
		return []byte(s), nil
	case CallResourceStatusBusy:
		return []byte(s), nil
	case CallResourceStatusNoAnswer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CallResourceStatus) UnmarshalText(data []byte) error {
	switch CallResourceStatus(data) {
	case CallResourceStatusRinging:
		*s = CallResourceStatusRinging
		return nil
	case CallResourceStatusInProgress:
		*s = CallResourceStatusInProgress
		return nil
	case CallResourceStatusCanceled:
		*s = CallResourceStatusCanceled
		return nil
	case CallResourceStatusCompleted:
		*s = CallResourceStatusCompleted
		return nil
	case CallResourceStatusFailed:
		*s = CallResourceStatusFailed
		return nil
	case CallResourceStatusBusy:
		*s = CallResourceStatusBusy
		return nil
	case CallResourceStatusNoAnswer:
		*s = CallResourceStatusNoAnswer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CallerName
type CallerName struct {
	// The name of the requested phone number's owner as per the CNAM database.
	CallerName OptString `json:"caller_name"`
	// A caller-name lookup specific error code, expressed as a stringified 5-digit integer.
	ErrorCode OptString `json:"error_code"`
}

// GetCallerName returns the value of CallerName.
func (s *CallerName) GetCallerName() OptString {
	return s.CallerName
}

// GetErrorCode returns the value of ErrorCode.
func (s *CallerName) GetErrorCode() OptString {
	return s.ErrorCode
}

// SetCallerName sets the value of CallerName.
func (s *CallerName) SetCallerName(val OptString) {
	s.CallerName = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *CallerName) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

type CancelPortingOrderResponse struct {
	Data OptPortingOrder                   `json:"data"`
	Meta OptCancelPortingOrderResponseMeta `json:"meta"`
}

// GetData returns the value of Data.
func (s *CancelPortingOrderResponse) GetData() OptPortingOrder {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *CancelPortingOrderResponse) GetMeta() OptCancelPortingOrderResponseMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *CancelPortingOrderResponse) SetData(val OptPortingOrder) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *CancelPortingOrderResponse) SetMeta(val OptCancelPortingOrderResponseMeta) {
	s.Meta = val
}

func (*CancelPortingOrderResponse) cancelPortingOrderRes() {}

type CancelPortingOrderResponseMeta struct {
	// Link to list all phone numbers.
	PhoneNumbersURL OptString `json:"phone_numbers_url"`
}

// GetPhoneNumbersURL returns the value of PhoneNumbersURL.
func (s *CancelPortingOrderResponseMeta) GetPhoneNumbersURL() OptString {
	return s.PhoneNumbersURL
}

// SetPhoneNumbersURL sets the value of PhoneNumbersURL.
func (s *CancelPortingOrderResponseMeta) SetPhoneNumbersURL(val OptString) {
	s.PhoneNumbersURL = val
}

// CancelPortingOrderUnauthorized is response for CancelPortingOrder operation.
type CancelPortingOrderUnauthorized struct{}

func (*CancelPortingOrderUnauthorized) cancelPortingOrderRes() {}

// CancelPortingOrderUnprocessableEntity is response for CancelPortingOrder operation.
type CancelPortingOrderUnprocessableEntity struct{}

func (*CancelPortingOrderUnprocessableEntity) cancelPortingOrderRes() {}

// Ref: #/components/schemas/Carrier
type Carrier struct {
	// Region code that matches the specific country calling code if the requested phone number type is
	// mobile.
	MobileCountryCode OptString `json:"mobile_country_code"`
	// National destination code (NDC), with a 0 prefix, if an NDC is found and the requested phone
	// number type is mobile.
	MobileNetworkCode OptString `json:"mobile_network_code"`
	// SPID (Service Provider ID) name, if the requested phone number has been ported; otherwise, the
	// name of carrier who owns the phone number block.
	Name OptString `json:"name"`
	// A phone number type that identifies the type of service associated with the requested phone number.
	Type OptCarrierType `json:"type"`
	// Unused.
	ErrorCode OptString `json:"error_code"`
	// If known to Telnyx and applicable, the primary network carrier.
	NormalizedCarrier OptString `json:"normalized_carrier"`
}

// GetMobileCountryCode returns the value of MobileCountryCode.
func (s *Carrier) GetMobileCountryCode() OptString {
	return s.MobileCountryCode
}

// GetMobileNetworkCode returns the value of MobileNetworkCode.
func (s *Carrier) GetMobileNetworkCode() OptString {
	return s.MobileNetworkCode
}

// GetName returns the value of Name.
func (s *Carrier) GetName() OptString {
	return s.Name
}

// GetType returns the value of Type.
func (s *Carrier) GetType() OptCarrierType {
	return s.Type
}

// GetErrorCode returns the value of ErrorCode.
func (s *Carrier) GetErrorCode() OptString {
	return s.ErrorCode
}

// GetNormalizedCarrier returns the value of NormalizedCarrier.
func (s *Carrier) GetNormalizedCarrier() OptString {
	return s.NormalizedCarrier
}

// SetMobileCountryCode sets the value of MobileCountryCode.
func (s *Carrier) SetMobileCountryCode(val OptString) {
	s.MobileCountryCode = val
}

// SetMobileNetworkCode sets the value of MobileNetworkCode.
func (s *Carrier) SetMobileNetworkCode(val OptString) {
	s.MobileNetworkCode = val
}

// SetName sets the value of Name.
func (s *Carrier) SetName(val OptString) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *Carrier) SetType(val OptCarrierType) {
	s.Type = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *Carrier) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

// SetNormalizedCarrier sets the value of NormalizedCarrier.
func (s *Carrier) SetNormalizedCarrier(val OptString) {
	s.NormalizedCarrier = val
}

// A phone number type that identifies the type of service associated with the requested phone number.
type CarrierType string

const (
	CarrierTypeFixedLine         CarrierType = "fixed line"
	CarrierTypeMobile            CarrierType = "mobile"
	CarrierTypeVoip              CarrierType = "voip"
	CarrierTypeFixedLineOrMobile CarrierType = "fixed line or mobile"
	CarrierTypeTollFree          CarrierType = "toll free"
	CarrierTypePremiumRate       CarrierType = "premium rate"
	CarrierTypeSharedCost        CarrierType = "shared cost"
	CarrierTypePersonalNumber    CarrierType = "personal number"
	CarrierTypePager             CarrierType = "pager"
	CarrierTypeUan               CarrierType = "uan"
	CarrierTypeVoicemail         CarrierType = "voicemail"
	CarrierTypeUnknown           CarrierType = "unknown"
)

// AllValues returns all CarrierType values.
func (CarrierType) AllValues() []CarrierType {
	return []CarrierType{
		CarrierTypeFixedLine,
		CarrierTypeMobile,
		CarrierTypeVoip,
		CarrierTypeFixedLineOrMobile,
		CarrierTypeTollFree,
		CarrierTypePremiumRate,
		CarrierTypeSharedCost,
		CarrierTypePersonalNumber,
		CarrierTypePager,
		CarrierTypeUan,
		CarrierTypeVoicemail,
		CarrierTypeUnknown,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CarrierType) MarshalText() ([]byte, error) {
	switch s {
	case CarrierTypeFixedLine:
		return []byte(s), nil
	case CarrierTypeMobile:
		return []byte(s), nil
	case CarrierTypeVoip:
		return []byte(s), nil
	case CarrierTypeFixedLineOrMobile:
		return []byte(s), nil
	case CarrierTypeTollFree:
		return []byte(s), nil
	case CarrierTypePremiumRate:
		return []byte(s), nil
	case CarrierTypeSharedCost:
		return []byte(s), nil
	case CarrierTypePersonalNumber:
		return []byte(s), nil
	case CarrierTypePager:
		return []byte(s), nil
	case CarrierTypeUan:
		return []byte(s), nil
	case CarrierTypeVoicemail:
		return []byte(s), nil
	case CarrierTypeUnknown:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CarrierType) UnmarshalText(data []byte) error {
	switch CarrierType(data) {
	case CarrierTypeFixedLine:
		*s = CarrierTypeFixedLine
		return nil
	case CarrierTypeMobile:
		*s = CarrierTypeMobile
		return nil
	case CarrierTypeVoip:
		*s = CarrierTypeVoip
		return nil
	case CarrierTypeFixedLineOrMobile:
		*s = CarrierTypeFixedLineOrMobile
		return nil
	case CarrierTypeTollFree:
		*s = CarrierTypeTollFree
		return nil
	case CarrierTypePremiumRate:
		*s = CarrierTypePremiumRate
		return nil
	case CarrierTypeSharedCost:
		*s = CarrierTypeSharedCost
		return nil
	case CarrierTypePersonalNumber:
		*s = CarrierTypePersonalNumber
		return nil
	case CarrierTypePager:
		*s = CarrierTypePager
		return nil
	case CarrierTypeUan:
		*s = CarrierTypeUan
		return nil
	case CarrierTypeVoicemail:
		*s = CarrierTypeVoicemail
		return nil
	case CarrierTypeUnknown:
		*s = CarrierTypeUnknown
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ChannelTypeId string

const (
	ChannelTypeIdWebhook ChannelTypeId = "webhook"
	ChannelTypeIdSMS     ChannelTypeId = "sms"
	ChannelTypeIdEmail   ChannelTypeId = "email"
	ChannelTypeIdVoice   ChannelTypeId = "voice"
)

// AllValues returns all ChannelTypeId values.
func (ChannelTypeId) AllValues() []ChannelTypeId {
	return []ChannelTypeId{
		ChannelTypeIdWebhook,
		ChannelTypeIdSMS,
		ChannelTypeIdEmail,
		ChannelTypeIdVoice,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChannelTypeId) MarshalText() ([]byte, error) {
	switch s {
	case ChannelTypeIdWebhook:
		return []byte(s), nil
	case ChannelTypeIdSMS:
		return []byte(s), nil
	case ChannelTypeIdEmail:
		return []byte(s), nil
	case ChannelTypeIdVoice:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChannelTypeId) UnmarshalText(data []byte) error {
	switch ChannelTypeId(data) {
	case ChannelTypeIdWebhook:
		*s = ChannelTypeIdWebhook
		return nil
	case ChannelTypeIdSMS:
		*s = ChannelTypeIdSMS
		return nil
	case ChannelTypeIdEmail:
		*s = ChannelTypeIdEmail
		return nil
	case ChannelTypeIdVoice:
		*s = ChannelTypeIdVoice
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ClientStateUpdateRequest
type ClientStateUpdateRequest struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState string `json:"client_state"`
}

// GetClientState returns the value of ClientState.
func (s *ClientStateUpdateRequest) GetClientState() string {
	return s.ClientState
}

// SetClientState sets the value of ClientState.
func (s *ClientStateUpdateRequest) SetClientState(val string) {
	s.ClientState = val
}

// The CNAM listing settings for a phone number.
// Ref: #/components/schemas/CnamListing
type CnamListing struct {
	// Enables CNAM listings for this number. Requires cnam_listing_details to also be set.
	CnamListingEnabled OptBool `json:"cnam_listing_enabled"`
	// The CNAM listing details for this number. Must be alphanumeric characters or spaces with a maximum
	// length of 15. Requires cnam_listing_enabled to also be set to true.
	CnamListingDetails OptString `json:"cnam_listing_details"`
}

// GetCnamListingEnabled returns the value of CnamListingEnabled.
func (s *CnamListing) GetCnamListingEnabled() OptBool {
	return s.CnamListingEnabled
}

// GetCnamListingDetails returns the value of CnamListingDetails.
func (s *CnamListing) GetCnamListingDetails() OptString {
	return s.CnamListingDetails
}

// SetCnamListingEnabled sets the value of CnamListingEnabled.
func (s *CnamListing) SetCnamListingEnabled(val OptBool) {
	s.CnamListingEnabled = val
}

// SetCnamListingDetails sets the value of CnamListingDetails.
func (s *CnamListing) SetCnamListingDetails(val OptString) {
	s.CnamListingDetails = val
}

// Ref: #/components/schemas/Comment
type Comment struct {
	ID                OptUUID                     `json:"id"`
	Body              OptString                   `json:"body"`
	Commenter         OptString                   `json:"commenter"`
	CommenterType     OptCommentCommenterType     `json:"commenter_type"`
	CommentRecordType OptCommentCommentRecordType `json:"comment_record_type"`
	CommentRecordID   OptUUID                     `json:"comment_record_id"`
	// An ISO 8901 datetime string for when the comment was read.
	ReadAt OptString `json:"read_at"`
	// An ISO 8901 datetime string denoting when the comment was created.
	CreatedAt OptString `json:"created_at"`
	// An ISO 8901 datetime string for when the comment was updated.
	UpdatedAt OptString `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *Comment) GetID() OptUUID {
	return s.ID
}

// GetBody returns the value of Body.
func (s *Comment) GetBody() OptString {
	return s.Body
}

// GetCommenter returns the value of Commenter.
func (s *Comment) GetCommenter() OptString {
	return s.Commenter
}

// GetCommenterType returns the value of CommenterType.
func (s *Comment) GetCommenterType() OptCommentCommenterType {
	return s.CommenterType
}

// GetCommentRecordType returns the value of CommentRecordType.
func (s *Comment) GetCommentRecordType() OptCommentCommentRecordType {
	return s.CommentRecordType
}

// GetCommentRecordID returns the value of CommentRecordID.
func (s *Comment) GetCommentRecordID() OptUUID {
	return s.CommentRecordID
}

// GetReadAt returns the value of ReadAt.
func (s *Comment) GetReadAt() OptString {
	return s.ReadAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Comment) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Comment) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Comment) SetID(val OptUUID) {
	s.ID = val
}

// SetBody sets the value of Body.
func (s *Comment) SetBody(val OptString) {
	s.Body = val
}

// SetCommenter sets the value of Commenter.
func (s *Comment) SetCommenter(val OptString) {
	s.Commenter = val
}

// SetCommenterType sets the value of CommenterType.
func (s *Comment) SetCommenterType(val OptCommentCommenterType) {
	s.CommenterType = val
}

// SetCommentRecordType sets the value of CommentRecordType.
func (s *Comment) SetCommentRecordType(val OptCommentCommentRecordType) {
	s.CommentRecordType = val
}

// SetCommentRecordID sets the value of CommentRecordID.
func (s *Comment) SetCommentRecordID(val OptUUID) {
	s.CommentRecordID = val
}

// SetReadAt sets the value of ReadAt.
func (s *Comment) SetReadAt(val OptString) {
	s.ReadAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Comment) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Comment) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

type CommentCommentRecordType string

const (
	CommentCommentRecordTypeNumberOrder            CommentCommentRecordType = "number_order"
	CommentCommentRecordTypeSubNumberOrder         CommentCommentRecordType = "sub_number_order"
	CommentCommentRecordTypeNumberOrderPhoneNumber CommentCommentRecordType = "number_order_phone_number"
)

// AllValues returns all CommentCommentRecordType values.
func (CommentCommentRecordType) AllValues() []CommentCommentRecordType {
	return []CommentCommentRecordType{
		CommentCommentRecordTypeNumberOrder,
		CommentCommentRecordTypeSubNumberOrder,
		CommentCommentRecordTypeNumberOrderPhoneNumber,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CommentCommentRecordType) MarshalText() ([]byte, error) {
	switch s {
	case CommentCommentRecordTypeNumberOrder:
		return []byte(s), nil
	case CommentCommentRecordTypeSubNumberOrder:
		return []byte(s), nil
	case CommentCommentRecordTypeNumberOrderPhoneNumber:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CommentCommentRecordType) UnmarshalText(data []byte) error {
	switch CommentCommentRecordType(data) {
	case CommentCommentRecordTypeNumberOrder:
		*s = CommentCommentRecordTypeNumberOrder
		return nil
	case CommentCommentRecordTypeSubNumberOrder:
		*s = CommentCommentRecordTypeSubNumberOrder
		return nil
	case CommentCommentRecordTypeNumberOrderPhoneNumber:
		*s = CommentCommentRecordTypeNumberOrderPhoneNumber
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CommentCommenterType string

const (
	CommentCommenterTypeAdmin CommentCommenterType = "admin"
	CommentCommenterTypeUser  CommentCommenterType = "user"
)

// AllValues returns all CommentCommenterType values.
func (CommentCommenterType) AllValues() []CommentCommenterType {
	return []CommentCommenterType{
		CommentCommenterTypeAdmin,
		CommentCommenterTypeUser,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CommentCommenterType) MarshalText() ([]byte, error) {
	switch s {
	case CommentCommenterTypeAdmin:
		return []byte(s), nil
	case CommentCommenterTypeUser:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CommentCommenterType) UnmarshalText(data []byte) error {
	switch CommentCommenterType(data) {
	case CommentCommenterTypeAdmin:
		*s = CommentCommenterTypeAdmin
		return nil
	case CommentCommenterTypeUser:
		*s = CommentCommenterTypeUser
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CommentResponse struct {
	Data OptCommentResponseData `json:"data"`
}

// GetData returns the value of Data.
func (s *CommentResponse) GetData() OptCommentResponseData {
	return s.Data
}

// SetData sets the value of Data.
func (s *CommentResponse) SetData(val OptCommentResponseData) {
	s.Data = val
}

func (*CommentResponse) createCommentRes()   {}
func (*CommentResponse) retrieveCommentRes() {}

// Merged schema.
type CommentResponseData struct {
	ID                OptUUID                                 `json:"id"`
	Body              OptString                               `json:"body"`
	Commenter         OptString                               `json:"commenter"`
	CommenterType     OptCommentResponseDataCommenterType     `json:"commenter_type"`
	CommentRecordType OptCommentResponseDataCommentRecordType `json:"comment_record_type"`
	CommentRecordID   OptUUID                                 `json:"comment_record_id"`
	// An ISO 8901 datetime string for when the comment was read.
	ReadAt OptString `json:"read_at"`
	// An ISO 8901 datetime string denoting when the comment was created.
	CreatedAt OptString `json:"created_at"`
	// An ISO 8901 datetime string for when the comment was updated.
	UpdatedAt OptString `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *CommentResponseData) GetID() OptUUID {
	return s.ID
}

// GetBody returns the value of Body.
func (s *CommentResponseData) GetBody() OptString {
	return s.Body
}

// GetCommenter returns the value of Commenter.
func (s *CommentResponseData) GetCommenter() OptString {
	return s.Commenter
}

// GetCommenterType returns the value of CommenterType.
func (s *CommentResponseData) GetCommenterType() OptCommentResponseDataCommenterType {
	return s.CommenterType
}

// GetCommentRecordType returns the value of CommentRecordType.
func (s *CommentResponseData) GetCommentRecordType() OptCommentResponseDataCommentRecordType {
	return s.CommentRecordType
}

// GetCommentRecordID returns the value of CommentRecordID.
func (s *CommentResponseData) GetCommentRecordID() OptUUID {
	return s.CommentRecordID
}

// GetReadAt returns the value of ReadAt.
func (s *CommentResponseData) GetReadAt() OptString {
	return s.ReadAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CommentResponseData) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *CommentResponseData) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *CommentResponseData) SetID(val OptUUID) {
	s.ID = val
}

// SetBody sets the value of Body.
func (s *CommentResponseData) SetBody(val OptString) {
	s.Body = val
}

// SetCommenter sets the value of Commenter.
func (s *CommentResponseData) SetCommenter(val OptString) {
	s.Commenter = val
}

// SetCommenterType sets the value of CommenterType.
func (s *CommentResponseData) SetCommenterType(val OptCommentResponseDataCommenterType) {
	s.CommenterType = val
}

// SetCommentRecordType sets the value of CommentRecordType.
func (s *CommentResponseData) SetCommentRecordType(val OptCommentResponseDataCommentRecordType) {
	s.CommentRecordType = val
}

// SetCommentRecordID sets the value of CommentRecordID.
func (s *CommentResponseData) SetCommentRecordID(val OptUUID) {
	s.CommentRecordID = val
}

// SetReadAt sets the value of ReadAt.
func (s *CommentResponseData) SetReadAt(val OptString) {
	s.ReadAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CommentResponseData) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *CommentResponseData) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

type CommentResponseDataCommentRecordType string

const (
	CommentResponseDataCommentRecordTypeNumberOrder            CommentResponseDataCommentRecordType = "number_order"
	CommentResponseDataCommentRecordTypeSubNumberOrder         CommentResponseDataCommentRecordType = "sub_number_order"
	CommentResponseDataCommentRecordTypeNumberOrderPhoneNumber CommentResponseDataCommentRecordType = "number_order_phone_number"
)

// AllValues returns all CommentResponseDataCommentRecordType values.
func (CommentResponseDataCommentRecordType) AllValues() []CommentResponseDataCommentRecordType {
	return []CommentResponseDataCommentRecordType{
		CommentResponseDataCommentRecordTypeNumberOrder,
		CommentResponseDataCommentRecordTypeSubNumberOrder,
		CommentResponseDataCommentRecordTypeNumberOrderPhoneNumber,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CommentResponseDataCommentRecordType) MarshalText() ([]byte, error) {
	switch s {
	case CommentResponseDataCommentRecordTypeNumberOrder:
		return []byte(s), nil
	case CommentResponseDataCommentRecordTypeSubNumberOrder:
		return []byte(s), nil
	case CommentResponseDataCommentRecordTypeNumberOrderPhoneNumber:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CommentResponseDataCommentRecordType) UnmarshalText(data []byte) error {
	switch CommentResponseDataCommentRecordType(data) {
	case CommentResponseDataCommentRecordTypeNumberOrder:
		*s = CommentResponseDataCommentRecordTypeNumberOrder
		return nil
	case CommentResponseDataCommentRecordTypeSubNumberOrder:
		*s = CommentResponseDataCommentRecordTypeSubNumberOrder
		return nil
	case CommentResponseDataCommentRecordTypeNumberOrderPhoneNumber:
		*s = CommentResponseDataCommentRecordTypeNumberOrderPhoneNumber
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CommentResponseDataCommenterType string

const (
	CommentResponseDataCommenterTypeAdmin CommentResponseDataCommenterType = "admin"
	CommentResponseDataCommenterTypeUser  CommentResponseDataCommenterType = "user"
)

// AllValues returns all CommentResponseDataCommenterType values.
func (CommentResponseDataCommenterType) AllValues() []CommentResponseDataCommenterType {
	return []CommentResponseDataCommenterType{
		CommentResponseDataCommenterTypeAdmin,
		CommentResponseDataCommenterTypeUser,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CommentResponseDataCommenterType) MarshalText() ([]byte, error) {
	switch s {
	case CommentResponseDataCommenterTypeAdmin:
		return []byte(s), nil
	case CommentResponseDataCommenterTypeUser:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CommentResponseDataCommenterType) UnmarshalText(data []byte) error {
	switch CommentResponseDataCommenterType(data) {
	case CommentResponseDataCommenterTypeAdmin:
		*s = CommentResponseDataCommenterTypeAdmin
		return nil
	case CommentResponseDataCommenterTypeUser:
		*s = CommentResponseDataCommenterTypeUser
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// This object represents an Over the Air (OTA) update request. It allows tracking the current status
// of a operation that apply settings in a particular SIM card. <br/><br/>.
// Ref: #/components/schemas/CompleteOTAUpdate
type CompleteOTAUpdate struct {
	// Identifies the resource.
	ID         OptUUID   `json:"id"`
	RecordType OptString `json:"record_type"`
	// The identification UUID of the related SIM card resource.
	SimCardID OptUUID `json:"sim_card_id"`
	// Represents the type of the operation requested. This will relate directly to the source of the
	// request.
	Type   OptCompleteOTAUpdateType   `json:"type"`
	Status OptCompleteOTAUpdateStatus `json:"status"`
	// A JSON object representation of the operation. The information present here will relate directly
	// to the source of the OTA request.
	Settings OptCompleteOTAUpdateSettings `json:"settings"`
	// ISO 8601 formatted date-time indicating when the resource was created.
	CreatedAt OptString `json:"created_at"`
	// ISO 8601 formatted date-time indicating when the resource was updated.
	UpdatedAt OptString `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *CompleteOTAUpdate) GetID() OptUUID {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *CompleteOTAUpdate) GetRecordType() OptString {
	return s.RecordType
}

// GetSimCardID returns the value of SimCardID.
func (s *CompleteOTAUpdate) GetSimCardID() OptUUID {
	return s.SimCardID
}

// GetType returns the value of Type.
func (s *CompleteOTAUpdate) GetType() OptCompleteOTAUpdateType {
	return s.Type
}

// GetStatus returns the value of Status.
func (s *CompleteOTAUpdate) GetStatus() OptCompleteOTAUpdateStatus {
	return s.Status
}

// GetSettings returns the value of Settings.
func (s *CompleteOTAUpdate) GetSettings() OptCompleteOTAUpdateSettings {
	return s.Settings
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CompleteOTAUpdate) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *CompleteOTAUpdate) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *CompleteOTAUpdate) SetID(val OptUUID) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *CompleteOTAUpdate) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetSimCardID sets the value of SimCardID.
func (s *CompleteOTAUpdate) SetSimCardID(val OptUUID) {
	s.SimCardID = val
}

// SetType sets the value of Type.
func (s *CompleteOTAUpdate) SetType(val OptCompleteOTAUpdateType) {
	s.Type = val
}

// SetStatus sets the value of Status.
func (s *CompleteOTAUpdate) SetStatus(val OptCompleteOTAUpdateStatus) {
	s.Status = val
}

// SetSettings sets the value of Settings.
func (s *CompleteOTAUpdate) SetSettings(val OptCompleteOTAUpdateSettings) {
	s.Settings = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CompleteOTAUpdate) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *CompleteOTAUpdate) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// A JSON object representation of the operation. The information present here will relate directly
// to the source of the OTA request.
type CompleteOTAUpdateSettings struct {
	MobileNetworkOperatorsPreferences MobileNetworkOperatorsPreferencesResponse `json:"mobile_network_operators_preferences"`
}

// GetMobileNetworkOperatorsPreferences returns the value of MobileNetworkOperatorsPreferences.
func (s *CompleteOTAUpdateSettings) GetMobileNetworkOperatorsPreferences() MobileNetworkOperatorsPreferencesResponse {
	return s.MobileNetworkOperatorsPreferences
}

// SetMobileNetworkOperatorsPreferences sets the value of MobileNetworkOperatorsPreferences.
func (s *CompleteOTAUpdateSettings) SetMobileNetworkOperatorsPreferences(val MobileNetworkOperatorsPreferencesResponse) {
	s.MobileNetworkOperatorsPreferences = val
}

type CompleteOTAUpdateStatus string

const (
	CompleteOTAUpdateStatusInProgress CompleteOTAUpdateStatus = "in-progress"
	CompleteOTAUpdateStatusCompleted  CompleteOTAUpdateStatus = "completed"
	CompleteOTAUpdateStatusFailed     CompleteOTAUpdateStatus = "failed"
)

// AllValues returns all CompleteOTAUpdateStatus values.
func (CompleteOTAUpdateStatus) AllValues() []CompleteOTAUpdateStatus {
	return []CompleteOTAUpdateStatus{
		CompleteOTAUpdateStatusInProgress,
		CompleteOTAUpdateStatusCompleted,
		CompleteOTAUpdateStatusFailed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CompleteOTAUpdateStatus) MarshalText() ([]byte, error) {
	switch s {
	case CompleteOTAUpdateStatusInProgress:
		return []byte(s), nil
	case CompleteOTAUpdateStatusCompleted:
		return []byte(s), nil
	case CompleteOTAUpdateStatusFailed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CompleteOTAUpdateStatus) UnmarshalText(data []byte) error {
	switch CompleteOTAUpdateStatus(data) {
	case CompleteOTAUpdateStatusInProgress:
		*s = CompleteOTAUpdateStatusInProgress
		return nil
	case CompleteOTAUpdateStatusCompleted:
		*s = CompleteOTAUpdateStatusCompleted
		return nil
	case CompleteOTAUpdateStatusFailed:
		*s = CompleteOTAUpdateStatusFailed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Represents the type of the operation requested. This will relate directly to the source of the
// request.
type CompleteOTAUpdateType string

const (
	CompleteOTAUpdateTypeSimCardNetworkPreferences CompleteOTAUpdateType = "sim_card_network_preferences"
)

// AllValues returns all CompleteOTAUpdateType values.
func (CompleteOTAUpdateType) AllValues() []CompleteOTAUpdateType {
	return []CompleteOTAUpdateType{
		CompleteOTAUpdateTypeSimCardNetworkPreferences,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CompleteOTAUpdateType) MarshalText() ([]byte, error) {
	switch s {
	case CompleteOTAUpdateTypeSimCardNetworkPreferences:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CompleteOTAUpdateType) UnmarshalText(data []byte) error {
	switch CompleteOTAUpdateType(data) {
	case CompleteOTAUpdateTypeSimCardNetworkPreferences:
		*s = CompleteOTAUpdateTypeSimCardNetworkPreferences
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ConferenceRecordingResource
type ConferenceRecordingResource struct {
	// The id of the account the resource belongs to.
	AccountSid OptString `json:"account_sid"`
	// The identifier of the related participant's call.
	CallSid OptString `json:"call_sid"`
	// The number of channels in the recording.
	Channels OptInt `json:"channels"`
	// The identifier of the related conference.
	ConferenceSid OptString `json:"conference_sid"`
	// The timestamp of when the resource was created.
	DateCreated OptString `json:"date_created"`
	// The timestamp of when the resource was last updated.
	DateUpdated OptString `json:"date_updated"`
	// Duratin of the recording in seconds.
	Duration OptInt `json:"duration"`
	// The recording error, if any.
	ErrorCode OptString `json:"error_code"`
	// The URL to use to download the recording.
	MediaURL OptString `json:"media_url"`
	// The unique identifier of the recording.
	Sid OptString `json:"sid"`
	// How the recording was started.
	Source OptConferenceRecordingResourceSource `json:"source"`
	// The timestamp of when the recording was started.
	StartTime OptString `json:"start_time"`
	// The status of the recording.
	Status OptConferenceRecordingResourceStatus `json:"status"`
	// A list of related resources identified by their relative URIs.
	SubresourceUris OptConferenceRecordingResourceSubresourceUris `json:"subresource_uris"`
	// The relative URI for this recording.
	URI OptString `json:"uri"`
}

// GetAccountSid returns the value of AccountSid.
func (s *ConferenceRecordingResource) GetAccountSid() OptString {
	return s.AccountSid
}

// GetCallSid returns the value of CallSid.
func (s *ConferenceRecordingResource) GetCallSid() OptString {
	return s.CallSid
}

// GetChannels returns the value of Channels.
func (s *ConferenceRecordingResource) GetChannels() OptInt {
	return s.Channels
}

// GetConferenceSid returns the value of ConferenceSid.
func (s *ConferenceRecordingResource) GetConferenceSid() OptString {
	return s.ConferenceSid
}

// GetDateCreated returns the value of DateCreated.
func (s *ConferenceRecordingResource) GetDateCreated() OptString {
	return s.DateCreated
}

// GetDateUpdated returns the value of DateUpdated.
func (s *ConferenceRecordingResource) GetDateUpdated() OptString {
	return s.DateUpdated
}

// GetDuration returns the value of Duration.
func (s *ConferenceRecordingResource) GetDuration() OptInt {
	return s.Duration
}

// GetErrorCode returns the value of ErrorCode.
func (s *ConferenceRecordingResource) GetErrorCode() OptString {
	return s.ErrorCode
}

// GetMediaURL returns the value of MediaURL.
func (s *ConferenceRecordingResource) GetMediaURL() OptString {
	return s.MediaURL
}

// GetSid returns the value of Sid.
func (s *ConferenceRecordingResource) GetSid() OptString {
	return s.Sid
}

// GetSource returns the value of Source.
func (s *ConferenceRecordingResource) GetSource() OptConferenceRecordingResourceSource {
	return s.Source
}

// GetStartTime returns the value of StartTime.
func (s *ConferenceRecordingResource) GetStartTime() OptString {
	return s.StartTime
}

// GetStatus returns the value of Status.
func (s *ConferenceRecordingResource) GetStatus() OptConferenceRecordingResourceStatus {
	return s.Status
}

// GetSubresourceUris returns the value of SubresourceUris.
func (s *ConferenceRecordingResource) GetSubresourceUris() OptConferenceRecordingResourceSubresourceUris {
	return s.SubresourceUris
}

// GetURI returns the value of URI.
func (s *ConferenceRecordingResource) GetURI() OptString {
	return s.URI
}

// SetAccountSid sets the value of AccountSid.
func (s *ConferenceRecordingResource) SetAccountSid(val OptString) {
	s.AccountSid = val
}

// SetCallSid sets the value of CallSid.
func (s *ConferenceRecordingResource) SetCallSid(val OptString) {
	s.CallSid = val
}

// SetChannels sets the value of Channels.
func (s *ConferenceRecordingResource) SetChannels(val OptInt) {
	s.Channels = val
}

// SetConferenceSid sets the value of ConferenceSid.
func (s *ConferenceRecordingResource) SetConferenceSid(val OptString) {
	s.ConferenceSid = val
}

// SetDateCreated sets the value of DateCreated.
func (s *ConferenceRecordingResource) SetDateCreated(val OptString) {
	s.DateCreated = val
}

// SetDateUpdated sets the value of DateUpdated.
func (s *ConferenceRecordingResource) SetDateUpdated(val OptString) {
	s.DateUpdated = val
}

// SetDuration sets the value of Duration.
func (s *ConferenceRecordingResource) SetDuration(val OptInt) {
	s.Duration = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *ConferenceRecordingResource) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

// SetMediaURL sets the value of MediaURL.
func (s *ConferenceRecordingResource) SetMediaURL(val OptString) {
	s.MediaURL = val
}

// SetSid sets the value of Sid.
func (s *ConferenceRecordingResource) SetSid(val OptString) {
	s.Sid = val
}

// SetSource sets the value of Source.
func (s *ConferenceRecordingResource) SetSource(val OptConferenceRecordingResourceSource) {
	s.Source = val
}

// SetStartTime sets the value of StartTime.
func (s *ConferenceRecordingResource) SetStartTime(val OptString) {
	s.StartTime = val
}

// SetStatus sets the value of Status.
func (s *ConferenceRecordingResource) SetStatus(val OptConferenceRecordingResourceStatus) {
	s.Status = val
}

// SetSubresourceUris sets the value of SubresourceUris.
func (s *ConferenceRecordingResource) SetSubresourceUris(val OptConferenceRecordingResourceSubresourceUris) {
	s.SubresourceUris = val
}

// SetURI sets the value of URI.
func (s *ConferenceRecordingResource) SetURI(val OptString) {
	s.URI = val
}

// Ref: #/components/schemas/ConferenceRecordingResourceIndex
type ConferenceRecordingResourceIndex struct {
	Recordings []ConferenceRecordingResource `json:"recordings"`
	// The number of the last element on the page, zero-indexed.
	End OptInt `json:"end"`
	// /v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences/6dc6cc1a-1ba1-4351-86b8-4c22c95cd98f/Recordings.json?page=0&pagesize=20.
	FirstPageURI OptString `json:"first_page_uri"`
	// /v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences/6dc6cc1a-1ba1-4351-86b8-4c22c95cd98f/Recordings.json?Page=1&PageSize=1&PageToken=MTY4AjgyNDkwNzIxMQ.
	NextPageURI OptString `json:"next_page_uri"`
	// Current page number, zero-indexed.
	Page OptInt `json:"page"`
	// The number of items on the page.
	PageSize OptInt `json:"page_size"`
	// The number of the first element on the page, zero-indexed.
	Start OptInt `json:"start"`
	// The URI of the current page.
	URI OptString `json:"uri"`
}

// GetRecordings returns the value of Recordings.
func (s *ConferenceRecordingResourceIndex) GetRecordings() []ConferenceRecordingResource {
	return s.Recordings
}

// GetEnd returns the value of End.
func (s *ConferenceRecordingResourceIndex) GetEnd() OptInt {
	return s.End
}

// GetFirstPageURI returns the value of FirstPageURI.
func (s *ConferenceRecordingResourceIndex) GetFirstPageURI() OptString {
	return s.FirstPageURI
}

// GetNextPageURI returns the value of NextPageURI.
func (s *ConferenceRecordingResourceIndex) GetNextPageURI() OptString {
	return s.NextPageURI
}

// GetPage returns the value of Page.
func (s *ConferenceRecordingResourceIndex) GetPage() OptInt {
	return s.Page
}

// GetPageSize returns the value of PageSize.
func (s *ConferenceRecordingResourceIndex) GetPageSize() OptInt {
	return s.PageSize
}

// GetStart returns the value of Start.
func (s *ConferenceRecordingResourceIndex) GetStart() OptInt {
	return s.Start
}

// GetURI returns the value of URI.
func (s *ConferenceRecordingResourceIndex) GetURI() OptString {
	return s.URI
}

// SetRecordings sets the value of Recordings.
func (s *ConferenceRecordingResourceIndex) SetRecordings(val []ConferenceRecordingResource) {
	s.Recordings = val
}

// SetEnd sets the value of End.
func (s *ConferenceRecordingResourceIndex) SetEnd(val OptInt) {
	s.End = val
}

// SetFirstPageURI sets the value of FirstPageURI.
func (s *ConferenceRecordingResourceIndex) SetFirstPageURI(val OptString) {
	s.FirstPageURI = val
}

// SetNextPageURI sets the value of NextPageURI.
func (s *ConferenceRecordingResourceIndex) SetNextPageURI(val OptString) {
	s.NextPageURI = val
}

// SetPage sets the value of Page.
func (s *ConferenceRecordingResourceIndex) SetPage(val OptInt) {
	s.Page = val
}

// SetPageSize sets the value of PageSize.
func (s *ConferenceRecordingResourceIndex) SetPageSize(val OptInt) {
	s.PageSize = val
}

// SetStart sets the value of Start.
func (s *ConferenceRecordingResourceIndex) SetStart(val OptInt) {
	s.Start = val
}

// SetURI sets the value of URI.
func (s *ConferenceRecordingResourceIndex) SetURI(val OptString) {
	s.URI = val
}

// How the recording was started.
type ConferenceRecordingResourceSource string

const (
	ConferenceRecordingResourceSourceDialVerb                    ConferenceRecordingResourceSource = "DialVerb"
	ConferenceRecordingResourceSourceConference                  ConferenceRecordingResourceSource = "Conference"
	ConferenceRecordingResourceSourceOutboundAPI                 ConferenceRecordingResourceSource = "OutboundAPI"
	ConferenceRecordingResourceSourceTrunking                    ConferenceRecordingResourceSource = "Trunking"
	ConferenceRecordingResourceSourceRecordVerb                  ConferenceRecordingResourceSource = "RecordVerb"
	ConferenceRecordingResourceSourceStartCallRecordingAPI       ConferenceRecordingResourceSource = "StartCallRecordingAPI"
	ConferenceRecordingResourceSourceStartConferenceRecordingAPI ConferenceRecordingResourceSource = "StartConferenceRecordingAPI"
)

// AllValues returns all ConferenceRecordingResourceSource values.
func (ConferenceRecordingResourceSource) AllValues() []ConferenceRecordingResourceSource {
	return []ConferenceRecordingResourceSource{
		ConferenceRecordingResourceSourceDialVerb,
		ConferenceRecordingResourceSourceConference,
		ConferenceRecordingResourceSourceOutboundAPI,
		ConferenceRecordingResourceSourceTrunking,
		ConferenceRecordingResourceSourceRecordVerb,
		ConferenceRecordingResourceSourceStartCallRecordingAPI,
		ConferenceRecordingResourceSourceStartConferenceRecordingAPI,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ConferenceRecordingResourceSource) MarshalText() ([]byte, error) {
	switch s {
	case ConferenceRecordingResourceSourceDialVerb:
		return []byte(s), nil
	case ConferenceRecordingResourceSourceConference:
		return []byte(s), nil
	case ConferenceRecordingResourceSourceOutboundAPI:
		return []byte(s), nil
	case ConferenceRecordingResourceSourceTrunking:
		return []byte(s), nil
	case ConferenceRecordingResourceSourceRecordVerb:
		return []byte(s), nil
	case ConferenceRecordingResourceSourceStartCallRecordingAPI:
		return []byte(s), nil
	case ConferenceRecordingResourceSourceStartConferenceRecordingAPI:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConferenceRecordingResourceSource) UnmarshalText(data []byte) error {
	switch ConferenceRecordingResourceSource(data) {
	case ConferenceRecordingResourceSourceDialVerb:
		*s = ConferenceRecordingResourceSourceDialVerb
		return nil
	case ConferenceRecordingResourceSourceConference:
		*s = ConferenceRecordingResourceSourceConference
		return nil
	case ConferenceRecordingResourceSourceOutboundAPI:
		*s = ConferenceRecordingResourceSourceOutboundAPI
		return nil
	case ConferenceRecordingResourceSourceTrunking:
		*s = ConferenceRecordingResourceSourceTrunking
		return nil
	case ConferenceRecordingResourceSourceRecordVerb:
		*s = ConferenceRecordingResourceSourceRecordVerb
		return nil
	case ConferenceRecordingResourceSourceStartCallRecordingAPI:
		*s = ConferenceRecordingResourceSourceStartCallRecordingAPI
		return nil
	case ConferenceRecordingResourceSourceStartConferenceRecordingAPI:
		*s = ConferenceRecordingResourceSourceStartConferenceRecordingAPI
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The status of the recording.
type ConferenceRecordingResourceStatus string

const (
	ConferenceRecordingResourceStatusProcessing ConferenceRecordingResourceStatus = "processing"
	ConferenceRecordingResourceStatusAbsent     ConferenceRecordingResourceStatus = "absent"
	ConferenceRecordingResourceStatusCompleted  ConferenceRecordingResourceStatus = "completed"
	ConferenceRecordingResourceStatusDeleted    ConferenceRecordingResourceStatus = "deleted"
)

// AllValues returns all ConferenceRecordingResourceStatus values.
func (ConferenceRecordingResourceStatus) AllValues() []ConferenceRecordingResourceStatus {
	return []ConferenceRecordingResourceStatus{
		ConferenceRecordingResourceStatusProcessing,
		ConferenceRecordingResourceStatusAbsent,
		ConferenceRecordingResourceStatusCompleted,
		ConferenceRecordingResourceStatusDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ConferenceRecordingResourceStatus) MarshalText() ([]byte, error) {
	switch s {
	case ConferenceRecordingResourceStatusProcessing:
		return []byte(s), nil
	case ConferenceRecordingResourceStatusAbsent:
		return []byte(s), nil
	case ConferenceRecordingResourceStatusCompleted:
		return []byte(s), nil
	case ConferenceRecordingResourceStatusDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConferenceRecordingResourceStatus) UnmarshalText(data []byte) error {
	switch ConferenceRecordingResourceStatus(data) {
	case ConferenceRecordingResourceStatusProcessing:
		*s = ConferenceRecordingResourceStatusProcessing
		return nil
	case ConferenceRecordingResourceStatusAbsent:
		*s = ConferenceRecordingResourceStatusAbsent
		return nil
	case ConferenceRecordingResourceStatusCompleted:
		*s = ConferenceRecordingResourceStatusCompleted
		return nil
	case ConferenceRecordingResourceStatusDeleted:
		*s = ConferenceRecordingResourceStatusDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A list of related resources identified by their relative URIs.
type ConferenceRecordingResourceSubresourceUris map[string]jx.Raw

func (s *ConferenceRecordingResourceSubresourceUris) init() ConferenceRecordingResourceSubresourceUris {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/ConferenceResource
type ConferenceResource struct {
	// The id of the account the resource belongs to.
	AccountSid OptString `json:"account_sid"`
	// The version of the API that was used to make the request.
	APIVersion OptString `json:"api_version"`
	// Caller ID, if present.
	CallSidEndingConference OptString `json:"call_sid_ending_conference"`
	// The timestamp of when the resource was created.
	DateCreated OptString `json:"date_created"`
	// The timestamp of when the resource was last updated.
	DateUpdated OptString `json:"date_updated"`
	// A string that you assigned to describe this conference room.
	FriendlyName OptString `json:"friendly_name"`
	// The reason why a conference ended. When a conference is in progress, will be null.
	ReasonConferenceEnded OptConferenceResourceReasonConferenceEnded `json:"reason_conference_ended"`
	// A string representing the region where the conference is hosted.
	Region OptString `json:"region"`
	// The unique identifier of the conference.
	Sid OptString `json:"sid"`
	// The status of this conference.
	Status OptConferenceResourceStatus `json:"status"`
	// A list of related resources identified by their relative URIs.
	SubresourceUris OptConferenceResourceSubresourceUris `json:"subresource_uris"`
	// The relative URI for this conference.
	URI OptString `json:"uri"`
}

// GetAccountSid returns the value of AccountSid.
func (s *ConferenceResource) GetAccountSid() OptString {
	return s.AccountSid
}

// GetAPIVersion returns the value of APIVersion.
func (s *ConferenceResource) GetAPIVersion() OptString {
	return s.APIVersion
}

// GetCallSidEndingConference returns the value of CallSidEndingConference.
func (s *ConferenceResource) GetCallSidEndingConference() OptString {
	return s.CallSidEndingConference
}

// GetDateCreated returns the value of DateCreated.
func (s *ConferenceResource) GetDateCreated() OptString {
	return s.DateCreated
}

// GetDateUpdated returns the value of DateUpdated.
func (s *ConferenceResource) GetDateUpdated() OptString {
	return s.DateUpdated
}

// GetFriendlyName returns the value of FriendlyName.
func (s *ConferenceResource) GetFriendlyName() OptString {
	return s.FriendlyName
}

// GetReasonConferenceEnded returns the value of ReasonConferenceEnded.
func (s *ConferenceResource) GetReasonConferenceEnded() OptConferenceResourceReasonConferenceEnded {
	return s.ReasonConferenceEnded
}

// GetRegion returns the value of Region.
func (s *ConferenceResource) GetRegion() OptString {
	return s.Region
}

// GetSid returns the value of Sid.
func (s *ConferenceResource) GetSid() OptString {
	return s.Sid
}

// GetStatus returns the value of Status.
func (s *ConferenceResource) GetStatus() OptConferenceResourceStatus {
	return s.Status
}

// GetSubresourceUris returns the value of SubresourceUris.
func (s *ConferenceResource) GetSubresourceUris() OptConferenceResourceSubresourceUris {
	return s.SubresourceUris
}

// GetURI returns the value of URI.
func (s *ConferenceResource) GetURI() OptString {
	return s.URI
}

// SetAccountSid sets the value of AccountSid.
func (s *ConferenceResource) SetAccountSid(val OptString) {
	s.AccountSid = val
}

// SetAPIVersion sets the value of APIVersion.
func (s *ConferenceResource) SetAPIVersion(val OptString) {
	s.APIVersion = val
}

// SetCallSidEndingConference sets the value of CallSidEndingConference.
func (s *ConferenceResource) SetCallSidEndingConference(val OptString) {
	s.CallSidEndingConference = val
}

// SetDateCreated sets the value of DateCreated.
func (s *ConferenceResource) SetDateCreated(val OptString) {
	s.DateCreated = val
}

// SetDateUpdated sets the value of DateUpdated.
func (s *ConferenceResource) SetDateUpdated(val OptString) {
	s.DateUpdated = val
}

// SetFriendlyName sets the value of FriendlyName.
func (s *ConferenceResource) SetFriendlyName(val OptString) {
	s.FriendlyName = val
}

// SetReasonConferenceEnded sets the value of ReasonConferenceEnded.
func (s *ConferenceResource) SetReasonConferenceEnded(val OptConferenceResourceReasonConferenceEnded) {
	s.ReasonConferenceEnded = val
}

// SetRegion sets the value of Region.
func (s *ConferenceResource) SetRegion(val OptString) {
	s.Region = val
}

// SetSid sets the value of Sid.
func (s *ConferenceResource) SetSid(val OptString) {
	s.Sid = val
}

// SetStatus sets the value of Status.
func (s *ConferenceResource) SetStatus(val OptConferenceResourceStatus) {
	s.Status = val
}

// SetSubresourceUris sets the value of SubresourceUris.
func (s *ConferenceResource) SetSubresourceUris(val OptConferenceResourceSubresourceUris) {
	s.SubresourceUris = val
}

// SetURI sets the value of URI.
func (s *ConferenceResource) SetURI(val OptString) {
	s.URI = val
}

// Ref: #/components/schemas/ConferenceResourceIndex
type ConferenceResourceIndex struct {
	Conferences []ConferenceResource `json:"conferences"`
	// The number of the last element on the page, zero-indexed.
	End OptInt `json:"end"`
	// /v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences.json?Page=0&PageSize=1.
	FirstPageURI OptString `json:"first_page_uri"`
	// /v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences.
	// json?Page=1&PageSize=1&PageToken=MTY4AjgyNDkwNzIxMQ.
	NextPageURI OptString `json:"next_page_uri"`
	// Current page number, zero-indexed.
	Page OptInt `json:"page"`
	// The number of items on the page.
	PageSize OptInt `json:"page_size"`
	// The number of the first element on the page, zero-indexed.
	Start OptInt `json:"start"`
	// The URI of the current page.
	URI OptString `json:"uri"`
}

// GetConferences returns the value of Conferences.
func (s *ConferenceResourceIndex) GetConferences() []ConferenceResource {
	return s.Conferences
}

// GetEnd returns the value of End.
func (s *ConferenceResourceIndex) GetEnd() OptInt {
	return s.End
}

// GetFirstPageURI returns the value of FirstPageURI.
func (s *ConferenceResourceIndex) GetFirstPageURI() OptString {
	return s.FirstPageURI
}

// GetNextPageURI returns the value of NextPageURI.
func (s *ConferenceResourceIndex) GetNextPageURI() OptString {
	return s.NextPageURI
}

// GetPage returns the value of Page.
func (s *ConferenceResourceIndex) GetPage() OptInt {
	return s.Page
}

// GetPageSize returns the value of PageSize.
func (s *ConferenceResourceIndex) GetPageSize() OptInt {
	return s.PageSize
}

// GetStart returns the value of Start.
func (s *ConferenceResourceIndex) GetStart() OptInt {
	return s.Start
}

// GetURI returns the value of URI.
func (s *ConferenceResourceIndex) GetURI() OptString {
	return s.URI
}

// SetConferences sets the value of Conferences.
func (s *ConferenceResourceIndex) SetConferences(val []ConferenceResource) {
	s.Conferences = val
}

// SetEnd sets the value of End.
func (s *ConferenceResourceIndex) SetEnd(val OptInt) {
	s.End = val
}

// SetFirstPageURI sets the value of FirstPageURI.
func (s *ConferenceResourceIndex) SetFirstPageURI(val OptString) {
	s.FirstPageURI = val
}

// SetNextPageURI sets the value of NextPageURI.
func (s *ConferenceResourceIndex) SetNextPageURI(val OptString) {
	s.NextPageURI = val
}

// SetPage sets the value of Page.
func (s *ConferenceResourceIndex) SetPage(val OptInt) {
	s.Page = val
}

// SetPageSize sets the value of PageSize.
func (s *ConferenceResourceIndex) SetPageSize(val OptInt) {
	s.PageSize = val
}

// SetStart sets the value of Start.
func (s *ConferenceResourceIndex) SetStart(val OptInt) {
	s.Start = val
}

// SetURI sets the value of URI.
func (s *ConferenceResourceIndex) SetURI(val OptString) {
	s.URI = val
}

// The reason why a conference ended. When a conference is in progress, will be null.
type ConferenceResourceReasonConferenceEnded string

const (
	ConferenceResourceReasonConferenceEndedParticipantWithEndConferenceOnExitLeft ConferenceResourceReasonConferenceEnded = "participant-with-end-conference-on-exit-left"
	ConferenceResourceReasonConferenceEndedLastParticipantLeft                    ConferenceResourceReasonConferenceEnded = "last-participant-left"
	ConferenceResourceReasonConferenceEndedConferenceEndedViaAPI                  ConferenceResourceReasonConferenceEnded = "conference-ended-via-api"
	ConferenceResourceReasonConferenceEndedTimeExceeded                           ConferenceResourceReasonConferenceEnded = "time-exceeded"
)

// AllValues returns all ConferenceResourceReasonConferenceEnded values.
func (ConferenceResourceReasonConferenceEnded) AllValues() []ConferenceResourceReasonConferenceEnded {
	return []ConferenceResourceReasonConferenceEnded{
		ConferenceResourceReasonConferenceEndedParticipantWithEndConferenceOnExitLeft,
		ConferenceResourceReasonConferenceEndedLastParticipantLeft,
		ConferenceResourceReasonConferenceEndedConferenceEndedViaAPI,
		ConferenceResourceReasonConferenceEndedTimeExceeded,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ConferenceResourceReasonConferenceEnded) MarshalText() ([]byte, error) {
	switch s {
	case ConferenceResourceReasonConferenceEndedParticipantWithEndConferenceOnExitLeft:
		return []byte(s), nil
	case ConferenceResourceReasonConferenceEndedLastParticipantLeft:
		return []byte(s), nil
	case ConferenceResourceReasonConferenceEndedConferenceEndedViaAPI:
		return []byte(s), nil
	case ConferenceResourceReasonConferenceEndedTimeExceeded:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConferenceResourceReasonConferenceEnded) UnmarshalText(data []byte) error {
	switch ConferenceResourceReasonConferenceEnded(data) {
	case ConferenceResourceReasonConferenceEndedParticipantWithEndConferenceOnExitLeft:
		*s = ConferenceResourceReasonConferenceEndedParticipantWithEndConferenceOnExitLeft
		return nil
	case ConferenceResourceReasonConferenceEndedLastParticipantLeft:
		*s = ConferenceResourceReasonConferenceEndedLastParticipantLeft
		return nil
	case ConferenceResourceReasonConferenceEndedConferenceEndedViaAPI:
		*s = ConferenceResourceReasonConferenceEndedConferenceEndedViaAPI
		return nil
	case ConferenceResourceReasonConferenceEndedTimeExceeded:
		*s = ConferenceResourceReasonConferenceEndedTimeExceeded
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The status of this conference.
type ConferenceResourceStatus string

const (
	ConferenceResourceStatusInit       ConferenceResourceStatus = "init"
	ConferenceResourceStatusInProgress ConferenceResourceStatus = "in-progress"
	ConferenceResourceStatusCompleted  ConferenceResourceStatus = "completed"
)

// AllValues returns all ConferenceResourceStatus values.
func (ConferenceResourceStatus) AllValues() []ConferenceResourceStatus {
	return []ConferenceResourceStatus{
		ConferenceResourceStatusInit,
		ConferenceResourceStatusInProgress,
		ConferenceResourceStatusCompleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ConferenceResourceStatus) MarshalText() ([]byte, error) {
	switch s {
	case ConferenceResourceStatusInit:
		return []byte(s), nil
	case ConferenceResourceStatusInProgress:
		return []byte(s), nil
	case ConferenceResourceStatusCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConferenceResourceStatus) UnmarshalText(data []byte) error {
	switch ConferenceResourceStatus(data) {
	case ConferenceResourceStatusInit:
		*s = ConferenceResourceStatusInit
		return nil
	case ConferenceResourceStatusInProgress:
		*s = ConferenceResourceStatusInProgress
		return nil
	case ConferenceResourceStatusCompleted:
		*s = ConferenceResourceStatusCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A list of related resources identified by their relative URIs.
type ConferenceResourceSubresourceUris map[string]jx.Raw

func (s *ConferenceResourceSubresourceUris) init() ConferenceResourceSubresourceUris {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type ConferenceSid uuid.UUID

type ConferenceStatus string

const (
	ConferenceStatusInit       ConferenceStatus = "init"
	ConferenceStatusInProgress ConferenceStatus = "in-progress"
	ConferenceStatusCompleted  ConferenceStatus = "completed"
)

// AllValues returns all ConferenceStatus values.
func (ConferenceStatus) AllValues() []ConferenceStatus {
	return []ConferenceStatus{
		ConferenceStatusInit,
		ConferenceStatusInProgress,
		ConferenceStatusCompleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ConferenceStatus) MarshalText() ([]byte, error) {
	switch s {
	case ConferenceStatusInit:
		return []byte(s), nil
	case ConferenceStatusInProgress:
		return []byte(s), nil
	case ConferenceStatusCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConferenceStatus) UnmarshalText(data []byte) error {
	switch ConferenceStatus(data) {
	case ConferenceStatusInit:
		*s = ConferenceStatusInit
		return nil
	case ConferenceStatusInProgress:
		*s = ConferenceStatusInProgress
		return nil
	case ConferenceStatusCompleted:
		*s = ConferenceStatusCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ConfirmPortingOrderResponse struct {
	Data OptPortingOrder                    `json:"data"`
	Meta OptConfirmPortingOrderResponseMeta `json:"meta"`
}

// GetData returns the value of Data.
func (s *ConfirmPortingOrderResponse) GetData() OptPortingOrder {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ConfirmPortingOrderResponse) GetMeta() OptConfirmPortingOrderResponseMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ConfirmPortingOrderResponse) SetData(val OptPortingOrder) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ConfirmPortingOrderResponse) SetMeta(val OptConfirmPortingOrderResponseMeta) {
	s.Meta = val
}

func (*ConfirmPortingOrderResponse) confirmPortingOrderRes() {}

type ConfirmPortingOrderResponseMeta struct {
	// Link to list all phone numbers.
	PhoneNumbersURL OptString `json:"phone_numbers_url"`
}

// GetPhoneNumbersURL returns the value of PhoneNumbersURL.
func (s *ConfirmPortingOrderResponseMeta) GetPhoneNumbersURL() OptString {
	return s.PhoneNumbersURL
}

// SetPhoneNumbersURL sets the value of PhoneNumbersURL.
func (s *ConfirmPortingOrderResponseMeta) SetPhoneNumbersURL(val OptString) {
	s.PhoneNumbersURL = val
}

// ConfirmPortingOrderUnauthorized is response for ConfirmPortingOrder operation.
type ConfirmPortingOrderUnauthorized struct{}

func (*ConfirmPortingOrderUnauthorized) confirmPortingOrderRes() {}

// ConfirmPortingOrderUnprocessableEntity is response for ConfirmPortingOrder operation.
type ConfirmPortingOrderUnprocessableEntity struct{}

func (*ConfirmPortingOrderUnprocessableEntity) confirmPortingOrderRes() {}

type ConnectionActive bool

// Ref: #/components/schemas/CostInformation
type CostInformation struct {
	UpfrontCost OptString `json:"upfront_cost"`
	MonthlyCost OptString `json:"monthly_cost"`
	// The ISO 4217 code for the currency.
	Currency OptString `json:"currency"`
}

// GetUpfrontCost returns the value of UpfrontCost.
func (s *CostInformation) GetUpfrontCost() OptString {
	return s.UpfrontCost
}

// GetMonthlyCost returns the value of MonthlyCost.
func (s *CostInformation) GetMonthlyCost() OptString {
	return s.MonthlyCost
}

// GetCurrency returns the value of Currency.
func (s *CostInformation) GetCurrency() OptString {
	return s.Currency
}

// SetUpfrontCost sets the value of UpfrontCost.
func (s *CostInformation) SetUpfrontCost(val OptString) {
	s.UpfrontCost = val
}

// SetMonthlyCost sets the value of MonthlyCost.
func (s *CostInformation) SetMonthlyCost(val OptString) {
	s.MonthlyCost = val
}

// SetCurrency sets the value of Currency.
func (s *CostInformation) SetCurrency(val OptString) {
	s.Currency = val
}

// CreateAdditionalDocumentsNotFound is response for CreateAdditionalDocuments operation.
type CreateAdditionalDocumentsNotFound struct{}

func (*CreateAdditionalDocumentsNotFound) createAdditionalDocumentsRes() {}

type CreateAdditionalDocumentsReq struct {
	AdditionalDocuments []CreateAdditionalDocumentsReqAdditionalDocumentsItem `json:"additional_documents"`
}

// GetAdditionalDocuments returns the value of AdditionalDocuments.
func (s *CreateAdditionalDocumentsReq) GetAdditionalDocuments() []CreateAdditionalDocumentsReqAdditionalDocumentsItem {
	return s.AdditionalDocuments
}

// SetAdditionalDocuments sets the value of AdditionalDocuments.
func (s *CreateAdditionalDocumentsReq) SetAdditionalDocuments(val []CreateAdditionalDocumentsReqAdditionalDocumentsItem) {
	s.AdditionalDocuments = val
}

type CreateAdditionalDocumentsReqAdditionalDocumentsItem struct {
	// The type of document being created.
	DocumentType OptCreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType `json:"document_type"`
	// The document identification.
	DocumentID OptUUID `json:"document_id"`
}

// GetDocumentType returns the value of DocumentType.
func (s *CreateAdditionalDocumentsReqAdditionalDocumentsItem) GetDocumentType() OptCreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType {
	return s.DocumentType
}

// GetDocumentID returns the value of DocumentID.
func (s *CreateAdditionalDocumentsReqAdditionalDocumentsItem) GetDocumentID() OptUUID {
	return s.DocumentID
}

// SetDocumentType sets the value of DocumentType.
func (s *CreateAdditionalDocumentsReqAdditionalDocumentsItem) SetDocumentType(val OptCreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType) {
	s.DocumentType = val
}

// SetDocumentID sets the value of DocumentID.
func (s *CreateAdditionalDocumentsReqAdditionalDocumentsItem) SetDocumentID(val OptUUID) {
	s.DocumentID = val
}

// The type of document being created.
type CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType string

const (
	CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentTypeLoa     CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType = "loa"
	CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentTypeInvoice CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType = "invoice"
	CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentTypeCsr     CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType = "csr"
	CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentTypeOther   CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType = "other"
)

// AllValues returns all CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType values.
func (CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType) AllValues() []CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType {
	return []CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType{
		CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentTypeLoa,
		CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentTypeInvoice,
		CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentTypeCsr,
		CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentTypeOther,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType) MarshalText() ([]byte, error) {
	switch s {
	case CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentTypeLoa:
		return []byte(s), nil
	case CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentTypeInvoice:
		return []byte(s), nil
	case CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentTypeCsr:
		return []byte(s), nil
	case CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentTypeOther:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType) UnmarshalText(data []byte) error {
	switch CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType(data) {
	case CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentTypeLoa:
		*s = CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentTypeLoa
		return nil
	case CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentTypeInvoice:
		*s = CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentTypeInvoice
		return nil
	case CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentTypeCsr:
		*s = CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentTypeCsr
		return nil
	case CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentTypeOther:
		*s = CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentTypeOther
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// CreateAdditionalDocumentsUnauthorized is response for CreateAdditionalDocuments operation.
type CreateAdditionalDocumentsUnauthorized struct{}

func (*CreateAdditionalDocumentsUnauthorized) createAdditionalDocumentsRes() {}

// CreateAdditionalDocumentsUnprocessableEntity is response for CreateAdditionalDocuments operation.
type CreateAdditionalDocumentsUnprocessableEntity struct{}

func (*CreateAdditionalDocumentsUnprocessableEntity) createAdditionalDocumentsRes() {}

// CreateBulkTelephonyCredentialsUnprocessableEntity is response for CreateBulkTelephonyCredentials operation.
type CreateBulkTelephonyCredentialsUnprocessableEntity struct{}

func (*CreateBulkTelephonyCredentialsUnprocessableEntity) createBulkTelephonyCredentialsRes() {}

// Ref: #/components/schemas/CreateCallControlApplicationRequest
type CreateCallControlApplicationRequest struct {
	// A user-assigned name to help manage the application.
	ApplicationName string `json:"application_name"`
	// The URL where webhooks related to this connection will be sent. Must include a scheme, such as
	// 'https'.
	WebhookEventURL string `json:"webhook_event_url"`
	// Specifies whether the connection can be used.
	Active OptBool `json:"active"`
	// <code>Latency</code> directs Telnyx to route media through the site with the lowest round-trip
	// time to the user's connection. Telnyx calculates this time using ICMP ping messages. This can be
	// disabled by specifying a site to handle all media.
	AnchorsiteOverride OptCreateCallControlApplicationRequestAnchorsiteOverride `json:"anchorsite_override"`
	// Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to
	// Telnyx will be accepted in all formats.
	DtmfType OptCreateCallControlApplicationRequestDtmfType `json:"dtmf_type"`
	// Specifies whether calls to phone numbers associated with this connection should hangup after
	// timing out.
	FirstCommandTimeout OptBool `json:"first_command_timeout"`
	// Specifies how many seconds to wait before timing out a dial command.
	FirstCommandTimeoutSecs OptInt                            `json:"first_command_timeout_secs"`
	Inbound                 OptCallControlApplicationInbound  `json:"inbound"`
	Outbound                OptCallControlApplicationOutbound `json:"outbound"`
	// Determines which webhook format will be used, Telnyx API v1 or v2.
	WebhookAPIVersion OptCreateCallControlApplicationRequestWebhookAPIVersion `json:"webhook_api_version"`
	// The failover URL where webhooks related to this connection will be sent if sending to the primary
	// URL fails. Must include a scheme, such as 'https'.
	WebhookEventFailoverURL OptNilString `json:"webhook_event_failover_url"`
	// Specifies how many seconds to wait before timing out a webhook.
	WebhookTimeoutSecs OptNilInt `json:"webhook_timeout_secs"`
}

// GetApplicationName returns the value of ApplicationName.
func (s *CreateCallControlApplicationRequest) GetApplicationName() string {
	return s.ApplicationName
}

// GetWebhookEventURL returns the value of WebhookEventURL.
func (s *CreateCallControlApplicationRequest) GetWebhookEventURL() string {
	return s.WebhookEventURL
}

// GetActive returns the value of Active.
func (s *CreateCallControlApplicationRequest) GetActive() OptBool {
	return s.Active
}

// GetAnchorsiteOverride returns the value of AnchorsiteOverride.
func (s *CreateCallControlApplicationRequest) GetAnchorsiteOverride() OptCreateCallControlApplicationRequestAnchorsiteOverride {
	return s.AnchorsiteOverride
}

// GetDtmfType returns the value of DtmfType.
func (s *CreateCallControlApplicationRequest) GetDtmfType() OptCreateCallControlApplicationRequestDtmfType {
	return s.DtmfType
}

// GetFirstCommandTimeout returns the value of FirstCommandTimeout.
func (s *CreateCallControlApplicationRequest) GetFirstCommandTimeout() OptBool {
	return s.FirstCommandTimeout
}

// GetFirstCommandTimeoutSecs returns the value of FirstCommandTimeoutSecs.
func (s *CreateCallControlApplicationRequest) GetFirstCommandTimeoutSecs() OptInt {
	return s.FirstCommandTimeoutSecs
}

// GetInbound returns the value of Inbound.
func (s *CreateCallControlApplicationRequest) GetInbound() OptCallControlApplicationInbound {
	return s.Inbound
}

// GetOutbound returns the value of Outbound.
func (s *CreateCallControlApplicationRequest) GetOutbound() OptCallControlApplicationOutbound {
	return s.Outbound
}

// GetWebhookAPIVersion returns the value of WebhookAPIVersion.
func (s *CreateCallControlApplicationRequest) GetWebhookAPIVersion() OptCreateCallControlApplicationRequestWebhookAPIVersion {
	return s.WebhookAPIVersion
}

// GetWebhookEventFailoverURL returns the value of WebhookEventFailoverURL.
func (s *CreateCallControlApplicationRequest) GetWebhookEventFailoverURL() OptNilString {
	return s.WebhookEventFailoverURL
}

// GetWebhookTimeoutSecs returns the value of WebhookTimeoutSecs.
func (s *CreateCallControlApplicationRequest) GetWebhookTimeoutSecs() OptNilInt {
	return s.WebhookTimeoutSecs
}

// SetApplicationName sets the value of ApplicationName.
func (s *CreateCallControlApplicationRequest) SetApplicationName(val string) {
	s.ApplicationName = val
}

// SetWebhookEventURL sets the value of WebhookEventURL.
func (s *CreateCallControlApplicationRequest) SetWebhookEventURL(val string) {
	s.WebhookEventURL = val
}

// SetActive sets the value of Active.
func (s *CreateCallControlApplicationRequest) SetActive(val OptBool) {
	s.Active = val
}

// SetAnchorsiteOverride sets the value of AnchorsiteOverride.
func (s *CreateCallControlApplicationRequest) SetAnchorsiteOverride(val OptCreateCallControlApplicationRequestAnchorsiteOverride) {
	s.AnchorsiteOverride = val
}

// SetDtmfType sets the value of DtmfType.
func (s *CreateCallControlApplicationRequest) SetDtmfType(val OptCreateCallControlApplicationRequestDtmfType) {
	s.DtmfType = val
}

// SetFirstCommandTimeout sets the value of FirstCommandTimeout.
func (s *CreateCallControlApplicationRequest) SetFirstCommandTimeout(val OptBool) {
	s.FirstCommandTimeout = val
}

// SetFirstCommandTimeoutSecs sets the value of FirstCommandTimeoutSecs.
func (s *CreateCallControlApplicationRequest) SetFirstCommandTimeoutSecs(val OptInt) {
	s.FirstCommandTimeoutSecs = val
}

// SetInbound sets the value of Inbound.
func (s *CreateCallControlApplicationRequest) SetInbound(val OptCallControlApplicationInbound) {
	s.Inbound = val
}

// SetOutbound sets the value of Outbound.
func (s *CreateCallControlApplicationRequest) SetOutbound(val OptCallControlApplicationOutbound) {
	s.Outbound = val
}

// SetWebhookAPIVersion sets the value of WebhookAPIVersion.
func (s *CreateCallControlApplicationRequest) SetWebhookAPIVersion(val OptCreateCallControlApplicationRequestWebhookAPIVersion) {
	s.WebhookAPIVersion = val
}

// SetWebhookEventFailoverURL sets the value of WebhookEventFailoverURL.
func (s *CreateCallControlApplicationRequest) SetWebhookEventFailoverURL(val OptNilString) {
	s.WebhookEventFailoverURL = val
}

// SetWebhookTimeoutSecs sets the value of WebhookTimeoutSecs.
func (s *CreateCallControlApplicationRequest) SetWebhookTimeoutSecs(val OptNilInt) {
	s.WebhookTimeoutSecs = val
}

// <code>Latency</code> directs Telnyx to route media through the site with the lowest round-trip
// time to the user's connection. Telnyx calculates this time using ICMP ping messages. This can be
// disabled by specifying a site to handle all media.
type CreateCallControlApplicationRequestAnchorsiteOverride string

const (
	CreateCallControlApplicationRequestAnchorsiteOverrideLatency   CreateCallControlApplicationRequestAnchorsiteOverride = "\"Latency\""
	CreateCallControlApplicationRequestAnchorsiteOverrideChicagoIL CreateCallControlApplicationRequestAnchorsiteOverride = "\"Chicago, IL\""
	CreateCallControlApplicationRequestAnchorsiteOverrideAshburnVA CreateCallControlApplicationRequestAnchorsiteOverride = "\"Ashburn, VA\""
	CreateCallControlApplicationRequestAnchorsiteOverrideSanJoseCA CreateCallControlApplicationRequestAnchorsiteOverride = "\"San Jose, CA\""
)

// AllValues returns all CreateCallControlApplicationRequestAnchorsiteOverride values.
func (CreateCallControlApplicationRequestAnchorsiteOverride) AllValues() []CreateCallControlApplicationRequestAnchorsiteOverride {
	return []CreateCallControlApplicationRequestAnchorsiteOverride{
		CreateCallControlApplicationRequestAnchorsiteOverrideLatency,
		CreateCallControlApplicationRequestAnchorsiteOverrideChicagoIL,
		CreateCallControlApplicationRequestAnchorsiteOverrideAshburnVA,
		CreateCallControlApplicationRequestAnchorsiteOverrideSanJoseCA,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateCallControlApplicationRequestAnchorsiteOverride) MarshalText() ([]byte, error) {
	switch s {
	case CreateCallControlApplicationRequestAnchorsiteOverrideLatency:
		return []byte(s), nil
	case CreateCallControlApplicationRequestAnchorsiteOverrideChicagoIL:
		return []byte(s), nil
	case CreateCallControlApplicationRequestAnchorsiteOverrideAshburnVA:
		return []byte(s), nil
	case CreateCallControlApplicationRequestAnchorsiteOverrideSanJoseCA:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateCallControlApplicationRequestAnchorsiteOverride) UnmarshalText(data []byte) error {
	switch CreateCallControlApplicationRequestAnchorsiteOverride(data) {
	case CreateCallControlApplicationRequestAnchorsiteOverrideLatency:
		*s = CreateCallControlApplicationRequestAnchorsiteOverrideLatency
		return nil
	case CreateCallControlApplicationRequestAnchorsiteOverrideChicagoIL:
		*s = CreateCallControlApplicationRequestAnchorsiteOverrideChicagoIL
		return nil
	case CreateCallControlApplicationRequestAnchorsiteOverrideAshburnVA:
		*s = CreateCallControlApplicationRequestAnchorsiteOverrideAshburnVA
		return nil
	case CreateCallControlApplicationRequestAnchorsiteOverrideSanJoseCA:
		*s = CreateCallControlApplicationRequestAnchorsiteOverrideSanJoseCA
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to
// Telnyx will be accepted in all formats.
type CreateCallControlApplicationRequestDtmfType string

const (
	CreateCallControlApplicationRequestDtmfTypeRFC2833 CreateCallControlApplicationRequestDtmfType = "RFC 2833"
	CreateCallControlApplicationRequestDtmfTypeInband  CreateCallControlApplicationRequestDtmfType = "Inband"
	CreateCallControlApplicationRequestDtmfTypeSIPINFO CreateCallControlApplicationRequestDtmfType = "SIP INFO"
)

// AllValues returns all CreateCallControlApplicationRequestDtmfType values.
func (CreateCallControlApplicationRequestDtmfType) AllValues() []CreateCallControlApplicationRequestDtmfType {
	return []CreateCallControlApplicationRequestDtmfType{
		CreateCallControlApplicationRequestDtmfTypeRFC2833,
		CreateCallControlApplicationRequestDtmfTypeInband,
		CreateCallControlApplicationRequestDtmfTypeSIPINFO,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateCallControlApplicationRequestDtmfType) MarshalText() ([]byte, error) {
	switch s {
	case CreateCallControlApplicationRequestDtmfTypeRFC2833:
		return []byte(s), nil
	case CreateCallControlApplicationRequestDtmfTypeInband:
		return []byte(s), nil
	case CreateCallControlApplicationRequestDtmfTypeSIPINFO:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateCallControlApplicationRequestDtmfType) UnmarshalText(data []byte) error {
	switch CreateCallControlApplicationRequestDtmfType(data) {
	case CreateCallControlApplicationRequestDtmfTypeRFC2833:
		*s = CreateCallControlApplicationRequestDtmfTypeRFC2833
		return nil
	case CreateCallControlApplicationRequestDtmfTypeInband:
		*s = CreateCallControlApplicationRequestDtmfTypeInband
		return nil
	case CreateCallControlApplicationRequestDtmfTypeSIPINFO:
		*s = CreateCallControlApplicationRequestDtmfTypeSIPINFO
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Determines which webhook format will be used, Telnyx API v1 or v2.
type CreateCallControlApplicationRequestWebhookAPIVersion string

const (
	CreateCallControlApplicationRequestWebhookAPIVersion1 CreateCallControlApplicationRequestWebhookAPIVersion = "1"
	CreateCallControlApplicationRequestWebhookAPIVersion2 CreateCallControlApplicationRequestWebhookAPIVersion = "2"
)

// AllValues returns all CreateCallControlApplicationRequestWebhookAPIVersion values.
func (CreateCallControlApplicationRequestWebhookAPIVersion) AllValues() []CreateCallControlApplicationRequestWebhookAPIVersion {
	return []CreateCallControlApplicationRequestWebhookAPIVersion{
		CreateCallControlApplicationRequestWebhookAPIVersion1,
		CreateCallControlApplicationRequestWebhookAPIVersion2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateCallControlApplicationRequestWebhookAPIVersion) MarshalText() ([]byte, error) {
	switch s {
	case CreateCallControlApplicationRequestWebhookAPIVersion1:
		return []byte(s), nil
	case CreateCallControlApplicationRequestWebhookAPIVersion2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateCallControlApplicationRequestWebhookAPIVersion) UnmarshalText(data []byte) error {
	switch CreateCallControlApplicationRequestWebhookAPIVersion(data) {
	case CreateCallControlApplicationRequestWebhookAPIVersion1:
		*s = CreateCallControlApplicationRequestWebhookAPIVersion1
		return nil
	case CreateCallControlApplicationRequestWebhookAPIVersion2:
		*s = CreateCallControlApplicationRequestWebhookAPIVersion2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// CreateCallControlApplicationUnprocessableEntity is response for CreateCallControlApplication operation.
type CreateCallControlApplicationUnprocessableEntity struct{}

func (*CreateCallControlApplicationUnprocessableEntity) createCallControlApplicationRes() {}

type CreateDeletePhoneNumbersJobAccepted struct {
	Data OptPhoneNumbersJob `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateDeletePhoneNumbersJobAccepted) GetData() OptPhoneNumbersJob {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateDeletePhoneNumbersJobAccepted) SetData(val OptPhoneNumbersJob) {
	s.Data = val
}

func (*CreateDeletePhoneNumbersJobAccepted) createDeletePhoneNumbersJobRes() {}

// Ref: #/components/schemas/CreateGroupMMSMessageRequest
type CreateGroupMMSMessageRequest struct {
	// Phone number, in +E.164 format, used to send the message.
	From string `json:"from"`
	// A list of destinations. No more than 8 destinations are allowed.
	To []ToNumber `json:"to"`
	// Message body (i.e., content) as a non-empty string.
	Text OptString `json:"text"`
	// Subject of multimedia message.
	Subject OptString `json:"subject"`
	// A list of media URLs. The total media size must be less than 1 MB.
	MediaUrls []string `json:"media_urls"`
	// The URL where webhooks related to this message will be sent.
	WebhookURL OptString `json:"webhook_url"`
	// The failover URL where webhooks related to this message will be sent if sending to the primary URL
	// fails.
	WebhookFailoverURL OptString `json:"webhook_failover_url"`
	// If the profile this number is associated with has webhooks, use them for delivery notifications.
	// If webhooks are also specified on the message itself, they will be attempted first, then those on
	// the profile.
	UseProfileWebhooks OptBool `json:"use_profile_webhooks"`
}

// GetFrom returns the value of From.
func (s *CreateGroupMMSMessageRequest) GetFrom() string {
	return s.From
}

// GetTo returns the value of To.
func (s *CreateGroupMMSMessageRequest) GetTo() []ToNumber {
	return s.To
}

// GetText returns the value of Text.
func (s *CreateGroupMMSMessageRequest) GetText() OptString {
	return s.Text
}

// GetSubject returns the value of Subject.
func (s *CreateGroupMMSMessageRequest) GetSubject() OptString {
	return s.Subject
}

// GetMediaUrls returns the value of MediaUrls.
func (s *CreateGroupMMSMessageRequest) GetMediaUrls() []string {
	return s.MediaUrls
}

// GetWebhookURL returns the value of WebhookURL.
func (s *CreateGroupMMSMessageRequest) GetWebhookURL() OptString {
	return s.WebhookURL
}

// GetWebhookFailoverURL returns the value of WebhookFailoverURL.
func (s *CreateGroupMMSMessageRequest) GetWebhookFailoverURL() OptString {
	return s.WebhookFailoverURL
}

// GetUseProfileWebhooks returns the value of UseProfileWebhooks.
func (s *CreateGroupMMSMessageRequest) GetUseProfileWebhooks() OptBool {
	return s.UseProfileWebhooks
}

// SetFrom sets the value of From.
func (s *CreateGroupMMSMessageRequest) SetFrom(val string) {
	s.From = val
}

// SetTo sets the value of To.
func (s *CreateGroupMMSMessageRequest) SetTo(val []ToNumber) {
	s.To = val
}

// SetText sets the value of Text.
func (s *CreateGroupMMSMessageRequest) SetText(val OptString) {
	s.Text = val
}

// SetSubject sets the value of Subject.
func (s *CreateGroupMMSMessageRequest) SetSubject(val OptString) {
	s.Subject = val
}

// SetMediaUrls sets the value of MediaUrls.
func (s *CreateGroupMMSMessageRequest) SetMediaUrls(val []string) {
	s.MediaUrls = val
}

// SetWebhookURL sets the value of WebhookURL.
func (s *CreateGroupMMSMessageRequest) SetWebhookURL(val OptString) {
	s.WebhookURL = val
}

// SetWebhookFailoverURL sets the value of WebhookFailoverURL.
func (s *CreateGroupMMSMessageRequest) SetWebhookFailoverURL(val OptString) {
	s.WebhookFailoverURL = val
}

// SetUseProfileWebhooks sets the value of UseProfileWebhooks.
func (s *CreateGroupMMSMessageRequest) SetUseProfileWebhooks(val OptBool) {
	s.UseProfileWebhooks = val
}

// CreateLoaConfigurationInternalServerError is response for CreateLoaConfiguration operation.
type CreateLoaConfigurationInternalServerError struct{}

func (*CreateLoaConfigurationInternalServerError) createLoaConfigurationRes() {}

// The parameters for creating a new LOA configuration.
type CreateLoaConfigurationReq struct {
	// The name of the LOA configuration.
	Name string `json:"name"`
	// The logo of the LOA configuration.
	Logo CreateLoaConfigurationReqLogo `json:"logo"`
	// The name of the company.
	CompanyName string `json:"company_name"`
	// The address of the company.
	Address CreateLoaConfigurationReqAddress `json:"address"`
	// The contact information of the company.
	Contact CreateLoaConfigurationReqContact `json:"contact"`
}

// GetName returns the value of Name.
func (s *CreateLoaConfigurationReq) GetName() string {
	return s.Name
}

// GetLogo returns the value of Logo.
func (s *CreateLoaConfigurationReq) GetLogo() CreateLoaConfigurationReqLogo {
	return s.Logo
}

// GetCompanyName returns the value of CompanyName.
func (s *CreateLoaConfigurationReq) GetCompanyName() string {
	return s.CompanyName
}

// GetAddress returns the value of Address.
func (s *CreateLoaConfigurationReq) GetAddress() CreateLoaConfigurationReqAddress {
	return s.Address
}

// GetContact returns the value of Contact.
func (s *CreateLoaConfigurationReq) GetContact() CreateLoaConfigurationReqContact {
	return s.Contact
}

// SetName sets the value of Name.
func (s *CreateLoaConfigurationReq) SetName(val string) {
	s.Name = val
}

// SetLogo sets the value of Logo.
func (s *CreateLoaConfigurationReq) SetLogo(val CreateLoaConfigurationReqLogo) {
	s.Logo = val
}

// SetCompanyName sets the value of CompanyName.
func (s *CreateLoaConfigurationReq) SetCompanyName(val string) {
	s.CompanyName = val
}

// SetAddress sets the value of Address.
func (s *CreateLoaConfigurationReq) SetAddress(val CreateLoaConfigurationReqAddress) {
	s.Address = val
}

// SetContact sets the value of Contact.
func (s *CreateLoaConfigurationReq) SetContact(val CreateLoaConfigurationReqContact) {
	s.Contact = val
}

// The address of the company.
type CreateLoaConfigurationReqAddress struct {
	// The street address of the company.
	StreetAddress string `json:"street_address"`
	// The extended address of the company.
	ExtendedAddress OptString `json:"extended_address"`
	// The locality of the company.
	City OptString `json:"city"`
	// The administrative area of the company.
	State OptString `json:"state"`
	// The postal code of the company.
	ZipCode OptString `json:"zip_code"`
	// The country code of the company.
	CountryCode string `json:"country_code"`
}

// GetStreetAddress returns the value of StreetAddress.
func (s *CreateLoaConfigurationReqAddress) GetStreetAddress() string {
	return s.StreetAddress
}

// GetExtendedAddress returns the value of ExtendedAddress.
func (s *CreateLoaConfigurationReqAddress) GetExtendedAddress() OptString {
	return s.ExtendedAddress
}

// GetCity returns the value of City.
func (s *CreateLoaConfigurationReqAddress) GetCity() OptString {
	return s.City
}

// GetState returns the value of State.
func (s *CreateLoaConfigurationReqAddress) GetState() OptString {
	return s.State
}

// GetZipCode returns the value of ZipCode.
func (s *CreateLoaConfigurationReqAddress) GetZipCode() OptString {
	return s.ZipCode
}

// GetCountryCode returns the value of CountryCode.
func (s *CreateLoaConfigurationReqAddress) GetCountryCode() string {
	return s.CountryCode
}

// SetStreetAddress sets the value of StreetAddress.
func (s *CreateLoaConfigurationReqAddress) SetStreetAddress(val string) {
	s.StreetAddress = val
}

// SetExtendedAddress sets the value of ExtendedAddress.
func (s *CreateLoaConfigurationReqAddress) SetExtendedAddress(val OptString) {
	s.ExtendedAddress = val
}

// SetCity sets the value of City.
func (s *CreateLoaConfigurationReqAddress) SetCity(val OptString) {
	s.City = val
}

// SetState sets the value of State.
func (s *CreateLoaConfigurationReqAddress) SetState(val OptString) {
	s.State = val
}

// SetZipCode sets the value of ZipCode.
func (s *CreateLoaConfigurationReqAddress) SetZipCode(val OptString) {
	s.ZipCode = val
}

// SetCountryCode sets the value of CountryCode.
func (s *CreateLoaConfigurationReqAddress) SetCountryCode(val string) {
	s.CountryCode = val
}

// The contact information of the company.
type CreateLoaConfigurationReqContact struct {
	// The email address of the contact.
	Email string `json:"email"`
	// The phone number of the contact.
	PhoneNumber string `json:"phone_number"`
}

// GetEmail returns the value of Email.
func (s *CreateLoaConfigurationReqContact) GetEmail() string {
	return s.Email
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *CreateLoaConfigurationReqContact) GetPhoneNumber() string {
	return s.PhoneNumber
}

// SetEmail sets the value of Email.
func (s *CreateLoaConfigurationReqContact) SetEmail(val string) {
	s.Email = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *CreateLoaConfigurationReqContact) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// The logo of the LOA configuration.
type CreateLoaConfigurationReqLogo struct {
	// The document identification.
	DocumentID uuid.UUID `json:"document_id"`
}

// GetDocumentID returns the value of DocumentID.
func (s *CreateLoaConfigurationReqLogo) GetDocumentID() uuid.UUID {
	return s.DocumentID
}

// SetDocumentID sets the value of DocumentID.
func (s *CreateLoaConfigurationReqLogo) SetDocumentID(val uuid.UUID) {
	s.DocumentID = val
}

// CreateLoaConfigurationUnprocessableEntity is response for CreateLoaConfiguration operation.
type CreateLoaConfigurationUnprocessableEntity struct{}

func (*CreateLoaConfigurationUnprocessableEntity) createLoaConfigurationRes() {}

// Ref: #/components/schemas/CreateLongCodeMessageRequest
type CreateLongCodeMessageRequest struct {
	// Phone number, in +E.164 format, used to send the message.
	From string   `json:"from"`
	To   ToNumber `json:"to"`
	// Message body (i.e., content) as a non-empty string.
	// **Required for SMS**.
	Text OptString `json:"text"`
	// Subject of multimedia message.
	Subject OptString `json:"subject"`
	// A list of media URLs. The total media size must be less than 1 MB.
	// **Required for MMS**.
	MediaUrls []string `json:"media_urls"`
	// The URL where webhooks related to this message will be sent.
	WebhookURL OptString `json:"webhook_url"`
	// The failover URL where webhooks related to this message will be sent if sending to the primary URL
	// fails.
	WebhookFailoverURL OptString `json:"webhook_failover_url"`
	// If the profile this number is associated with has webhooks, use them for delivery notifications.
	// If webhooks are also specified on the message itself, they will be attempted first, then those on
	// the profile.
	UseProfileWebhooks OptBool `json:"use_profile_webhooks"`
	// The protocol for sending the message, either SMS or MMS.
	Type OptCreateLongCodeMessageRequestType `json:"type"`
	// Automatically detect if an SMS message is unusually long and exceeds a recommended limit of
	// message parts.
	AutoDetect OptBool `json:"auto_detect"`
}

// GetFrom returns the value of From.
func (s *CreateLongCodeMessageRequest) GetFrom() string {
	return s.From
}

// GetTo returns the value of To.
func (s *CreateLongCodeMessageRequest) GetTo() ToNumber {
	return s.To
}

// GetText returns the value of Text.
func (s *CreateLongCodeMessageRequest) GetText() OptString {
	return s.Text
}

// GetSubject returns the value of Subject.
func (s *CreateLongCodeMessageRequest) GetSubject() OptString {
	return s.Subject
}

// GetMediaUrls returns the value of MediaUrls.
func (s *CreateLongCodeMessageRequest) GetMediaUrls() []string {
	return s.MediaUrls
}

// GetWebhookURL returns the value of WebhookURL.
func (s *CreateLongCodeMessageRequest) GetWebhookURL() OptString {
	return s.WebhookURL
}

// GetWebhookFailoverURL returns the value of WebhookFailoverURL.
func (s *CreateLongCodeMessageRequest) GetWebhookFailoverURL() OptString {
	return s.WebhookFailoverURL
}

// GetUseProfileWebhooks returns the value of UseProfileWebhooks.
func (s *CreateLongCodeMessageRequest) GetUseProfileWebhooks() OptBool {
	return s.UseProfileWebhooks
}

// GetType returns the value of Type.
func (s *CreateLongCodeMessageRequest) GetType() OptCreateLongCodeMessageRequestType {
	return s.Type
}

// GetAutoDetect returns the value of AutoDetect.
func (s *CreateLongCodeMessageRequest) GetAutoDetect() OptBool {
	return s.AutoDetect
}

// SetFrom sets the value of From.
func (s *CreateLongCodeMessageRequest) SetFrom(val string) {
	s.From = val
}

// SetTo sets the value of To.
func (s *CreateLongCodeMessageRequest) SetTo(val ToNumber) {
	s.To = val
}

// SetText sets the value of Text.
func (s *CreateLongCodeMessageRequest) SetText(val OptString) {
	s.Text = val
}

// SetSubject sets the value of Subject.
func (s *CreateLongCodeMessageRequest) SetSubject(val OptString) {
	s.Subject = val
}

// SetMediaUrls sets the value of MediaUrls.
func (s *CreateLongCodeMessageRequest) SetMediaUrls(val []string) {
	s.MediaUrls = val
}

// SetWebhookURL sets the value of WebhookURL.
func (s *CreateLongCodeMessageRequest) SetWebhookURL(val OptString) {
	s.WebhookURL = val
}

// SetWebhookFailoverURL sets the value of WebhookFailoverURL.
func (s *CreateLongCodeMessageRequest) SetWebhookFailoverURL(val OptString) {
	s.WebhookFailoverURL = val
}

// SetUseProfileWebhooks sets the value of UseProfileWebhooks.
func (s *CreateLongCodeMessageRequest) SetUseProfileWebhooks(val OptBool) {
	s.UseProfileWebhooks = val
}

// SetType sets the value of Type.
func (s *CreateLongCodeMessageRequest) SetType(val OptCreateLongCodeMessageRequestType) {
	s.Type = val
}

// SetAutoDetect sets the value of AutoDetect.
func (s *CreateLongCodeMessageRequest) SetAutoDetect(val OptBool) {
	s.AutoDetect = val
}

// The protocol for sending the message, either SMS or MMS.
type CreateLongCodeMessageRequestType string

const (
	CreateLongCodeMessageRequestTypeSMS CreateLongCodeMessageRequestType = "SMS"
	CreateLongCodeMessageRequestTypeMMS CreateLongCodeMessageRequestType = "MMS"
)

// AllValues returns all CreateLongCodeMessageRequestType values.
func (CreateLongCodeMessageRequestType) AllValues() []CreateLongCodeMessageRequestType {
	return []CreateLongCodeMessageRequestType{
		CreateLongCodeMessageRequestTypeSMS,
		CreateLongCodeMessageRequestTypeMMS,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateLongCodeMessageRequestType) MarshalText() ([]byte, error) {
	switch s {
	case CreateLongCodeMessageRequestTypeSMS:
		return []byte(s), nil
	case CreateLongCodeMessageRequestTypeMMS:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateLongCodeMessageRequestType) UnmarshalText(data []byte) error {
	switch CreateLongCodeMessageRequestType(data) {
	case CreateLongCodeMessageRequestTypeSMS:
		*s = CreateLongCodeMessageRequestTypeSMS
		return nil
	case CreateLongCodeMessageRequestTypeMMS:
		*s = CreateLongCodeMessageRequestTypeMMS
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CreateMessageRequest
type CreateMessageRequest struct {
	// Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code).
	// **Required if sending with a phone number, short code, or alphanumeric sender ID.**.
	From OptString `json:"from"`
	// Unique identifier for a messaging profile.
	// **Required if sending via number pool or with an alphanumeric sender ID.**.
	MessagingProfileID OptString `json:"messaging_profile_id"`
	To                 ToNumber  `json:"to"`
	// Message body (i.e., content) as a non-empty string.
	// **Required for SMS**.
	Text OptString `json:"text"`
	// Subject of multimedia message.
	Subject OptString `json:"subject"`
	// A list of media URLs. The total media size must be less than 1 MB.
	// **Required for MMS**.
	MediaUrls []string `json:"media_urls"`
	// The URL where webhooks related to this message will be sent.
	WebhookURL OptString `json:"webhook_url"`
	// The failover URL where webhooks related to this message will be sent if sending to the primary URL
	// fails.
	WebhookFailoverURL OptString `json:"webhook_failover_url"`
	// If the profile this number is associated with has webhooks, use them for delivery notifications.
	// If webhooks are also specified on the message itself, they will be attempted first, then those on
	// the profile.
	UseProfileWebhooks OptBool `json:"use_profile_webhooks"`
	// The protocol for sending the message, either SMS or MMS.
	Type OptCreateMessageRequestType `json:"type"`
	// Automatically detect if an SMS message is unusually long and exceeds a recommended limit of
	// message parts.
	AutoDetect OptBool `json:"auto_detect"`
}

// GetFrom returns the value of From.
func (s *CreateMessageRequest) GetFrom() OptString {
	return s.From
}

// GetMessagingProfileID returns the value of MessagingProfileID.
func (s *CreateMessageRequest) GetMessagingProfileID() OptString {
	return s.MessagingProfileID
}

// GetTo returns the value of To.
func (s *CreateMessageRequest) GetTo() ToNumber {
	return s.To
}

// GetText returns the value of Text.
func (s *CreateMessageRequest) GetText() OptString {
	return s.Text
}

// GetSubject returns the value of Subject.
func (s *CreateMessageRequest) GetSubject() OptString {
	return s.Subject
}

// GetMediaUrls returns the value of MediaUrls.
func (s *CreateMessageRequest) GetMediaUrls() []string {
	return s.MediaUrls
}

// GetWebhookURL returns the value of WebhookURL.
func (s *CreateMessageRequest) GetWebhookURL() OptString {
	return s.WebhookURL
}

// GetWebhookFailoverURL returns the value of WebhookFailoverURL.
func (s *CreateMessageRequest) GetWebhookFailoverURL() OptString {
	return s.WebhookFailoverURL
}

// GetUseProfileWebhooks returns the value of UseProfileWebhooks.
func (s *CreateMessageRequest) GetUseProfileWebhooks() OptBool {
	return s.UseProfileWebhooks
}

// GetType returns the value of Type.
func (s *CreateMessageRequest) GetType() OptCreateMessageRequestType {
	return s.Type
}

// GetAutoDetect returns the value of AutoDetect.
func (s *CreateMessageRequest) GetAutoDetect() OptBool {
	return s.AutoDetect
}

// SetFrom sets the value of From.
func (s *CreateMessageRequest) SetFrom(val OptString) {
	s.From = val
}

// SetMessagingProfileID sets the value of MessagingProfileID.
func (s *CreateMessageRequest) SetMessagingProfileID(val OptString) {
	s.MessagingProfileID = val
}

// SetTo sets the value of To.
func (s *CreateMessageRequest) SetTo(val ToNumber) {
	s.To = val
}

// SetText sets the value of Text.
func (s *CreateMessageRequest) SetText(val OptString) {
	s.Text = val
}

// SetSubject sets the value of Subject.
func (s *CreateMessageRequest) SetSubject(val OptString) {
	s.Subject = val
}

// SetMediaUrls sets the value of MediaUrls.
func (s *CreateMessageRequest) SetMediaUrls(val []string) {
	s.MediaUrls = val
}

// SetWebhookURL sets the value of WebhookURL.
func (s *CreateMessageRequest) SetWebhookURL(val OptString) {
	s.WebhookURL = val
}

// SetWebhookFailoverURL sets the value of WebhookFailoverURL.
func (s *CreateMessageRequest) SetWebhookFailoverURL(val OptString) {
	s.WebhookFailoverURL = val
}

// SetUseProfileWebhooks sets the value of UseProfileWebhooks.
func (s *CreateMessageRequest) SetUseProfileWebhooks(val OptBool) {
	s.UseProfileWebhooks = val
}

// SetType sets the value of Type.
func (s *CreateMessageRequest) SetType(val OptCreateMessageRequestType) {
	s.Type = val
}

// SetAutoDetect sets the value of AutoDetect.
func (s *CreateMessageRequest) SetAutoDetect(val OptBool) {
	s.AutoDetect = val
}

// The protocol for sending the message, either SMS or MMS.
type CreateMessageRequestType string

const (
	CreateMessageRequestTypeSMS CreateMessageRequestType = "SMS"
	CreateMessageRequestTypeMMS CreateMessageRequestType = "MMS"
)

// AllValues returns all CreateMessageRequestType values.
func (CreateMessageRequestType) AllValues() []CreateMessageRequestType {
	return []CreateMessageRequestType{
		CreateMessageRequestTypeSMS,
		CreateMessageRequestTypeMMS,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateMessageRequestType) MarshalText() ([]byte, error) {
	switch s {
	case CreateMessageRequestTypeSMS:
		return []byte(s), nil
	case CreateMessageRequestTypeMMS:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateMessageRequestType) UnmarshalText(data []byte) error {
	switch CreateMessageRequestType(data) {
	case CreateMessageRequestTypeSMS:
		*s = CreateMessageRequestTypeSMS
		return nil
	case CreateMessageRequestTypeMMS:
		*s = CreateMessageRequestTypeMMS
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CreateMessagingHostedNumberOrderRequest
type CreateMessagingHostedNumberOrderRequest struct {
	// Phone numbers to be used for hosted messaging.
	PhoneNumbers []string `json:"phone_numbers"`
	// Automatically associate the number with this messaging profile ID when the order is complete.
	MessagingProfileID OptString `json:"messaging_profile_id"`
}

// GetPhoneNumbers returns the value of PhoneNumbers.
func (s *CreateMessagingHostedNumberOrderRequest) GetPhoneNumbers() []string {
	return s.PhoneNumbers
}

// GetMessagingProfileID returns the value of MessagingProfileID.
func (s *CreateMessagingHostedNumberOrderRequest) GetMessagingProfileID() OptString {
	return s.MessagingProfileID
}

// SetPhoneNumbers sets the value of PhoneNumbers.
func (s *CreateMessagingHostedNumberOrderRequest) SetPhoneNumbers(val []string) {
	s.PhoneNumbers = val
}

// SetMessagingProfileID sets the value of MessagingProfileID.
func (s *CreateMessagingHostedNumberOrderRequest) SetMessagingProfileID(val OptString) {
	s.MessagingProfileID = val
}

type CreateNotificationChannelsOK struct {
	Data OptNotificationChannel `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateNotificationChannelsOK) GetData() OptNotificationChannel {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateNotificationChannelsOK) SetData(val OptNotificationChannel) {
	s.Data = val
}

func (*CreateNotificationChannelsOK) createNotificationChannelsRes() {}

// Ref: #/components/schemas/CreateNumberOrderDocumentRequest
type CreateNumberOrderDocumentRequest struct {
	ID         OptUUID   `json:"id"`
	RecordType OptString `json:"record_type"`
	// The id of the file to associate as a number order document.
	FileID OptString `json:"file_id"`
	// Unique id for a requirement.
	RequirementsID OptString `json:"requirements_id"`
	// A customer reference string for customer look ups.
	CustomerReference OptString                                          `json:"customer_reference"`
	RequirementType   OptCreateNumberOrderDocumentRequestRequirementType `json:"requirement_type"`
	// An ISO 8901 datetime string denoting when the number order document was uploaded.
	CreatedAt OptString `json:"created_at"`
}

// GetID returns the value of ID.
func (s *CreateNumberOrderDocumentRequest) GetID() OptUUID {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *CreateNumberOrderDocumentRequest) GetRecordType() OptString {
	return s.RecordType
}

// GetFileID returns the value of FileID.
func (s *CreateNumberOrderDocumentRequest) GetFileID() OptString {
	return s.FileID
}

// GetRequirementsID returns the value of RequirementsID.
func (s *CreateNumberOrderDocumentRequest) GetRequirementsID() OptString {
	return s.RequirementsID
}

// GetCustomerReference returns the value of CustomerReference.
func (s *CreateNumberOrderDocumentRequest) GetCustomerReference() OptString {
	return s.CustomerReference
}

// GetRequirementType returns the value of RequirementType.
func (s *CreateNumberOrderDocumentRequest) GetRequirementType() OptCreateNumberOrderDocumentRequestRequirementType {
	return s.RequirementType
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CreateNumberOrderDocumentRequest) GetCreatedAt() OptString {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *CreateNumberOrderDocumentRequest) SetID(val OptUUID) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *CreateNumberOrderDocumentRequest) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetFileID sets the value of FileID.
func (s *CreateNumberOrderDocumentRequest) SetFileID(val OptString) {
	s.FileID = val
}

// SetRequirementsID sets the value of RequirementsID.
func (s *CreateNumberOrderDocumentRequest) SetRequirementsID(val OptString) {
	s.RequirementsID = val
}

// SetCustomerReference sets the value of CustomerReference.
func (s *CreateNumberOrderDocumentRequest) SetCustomerReference(val OptString) {
	s.CustomerReference = val
}

// SetRequirementType sets the value of RequirementType.
func (s *CreateNumberOrderDocumentRequest) SetRequirementType(val OptCreateNumberOrderDocumentRequestRequirementType) {
	s.RequirementType = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CreateNumberOrderDocumentRequest) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

type CreateNumberOrderDocumentRequestRequirementType string

const (
	CreateNumberOrderDocumentRequestRequirementTypeAddressProof   CreateNumberOrderDocumentRequestRequirementType = "address_proof"
	CreateNumberOrderDocumentRequestRequirementTypeIdentification CreateNumberOrderDocumentRequestRequirementType = "identification"
	CreateNumberOrderDocumentRequestRequirementTypeRegForm        CreateNumberOrderDocumentRequestRequirementType = "reg_form"
)

// AllValues returns all CreateNumberOrderDocumentRequestRequirementType values.
func (CreateNumberOrderDocumentRequestRequirementType) AllValues() []CreateNumberOrderDocumentRequestRequirementType {
	return []CreateNumberOrderDocumentRequestRequirementType{
		CreateNumberOrderDocumentRequestRequirementTypeAddressProof,
		CreateNumberOrderDocumentRequestRequirementTypeIdentification,
		CreateNumberOrderDocumentRequestRequirementTypeRegForm,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateNumberOrderDocumentRequestRequirementType) MarshalText() ([]byte, error) {
	switch s {
	case CreateNumberOrderDocumentRequestRequirementTypeAddressProof:
		return []byte(s), nil
	case CreateNumberOrderDocumentRequestRequirementTypeIdentification:
		return []byte(s), nil
	case CreateNumberOrderDocumentRequestRequirementTypeRegForm:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateNumberOrderDocumentRequestRequirementType) UnmarshalText(data []byte) error {
	switch CreateNumberOrderDocumentRequestRequirementType(data) {
	case CreateNumberOrderDocumentRequestRequirementTypeAddressProof:
		*s = CreateNumberOrderDocumentRequestRequirementTypeAddressProof
		return nil
	case CreateNumberOrderDocumentRequestRequirementTypeIdentification:
		*s = CreateNumberOrderDocumentRequestRequirementTypeIdentification
		return nil
	case CreateNumberOrderDocumentRequestRequirementTypeRegForm:
		*s = CreateNumberOrderDocumentRequestRequirementTypeRegForm
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CreateNumberPoolMessageRequest
type CreateNumberPoolMessageRequest struct {
	// Unique identifier for a messaging profile.
	MessagingProfileID string   `json:"messaging_profile_id"`
	To                 ToNumber `json:"to"`
	// Message body (i.e., content) as a non-empty string.
	// **Required for SMS**.
	Text OptString `json:"text"`
	// Subject of multimedia message.
	Subject OptString `json:"subject"`
	// A list of media URLs. The total media size must be less than 1 MB.
	// **Required for MMS**.
	MediaUrls []string `json:"media_urls"`
	// The URL where webhooks related to this message will be sent.
	WebhookURL OptString `json:"webhook_url"`
	// The failover URL where webhooks related to this message will be sent if sending to the primary URL
	// fails.
	WebhookFailoverURL OptString `json:"webhook_failover_url"`
	// If the profile this number is associated with has webhooks, use them for delivery notifications.
	// If webhooks are also specified on the message itself, they will be attempted first, then those on
	// the profile.
	UseProfileWebhooks OptBool `json:"use_profile_webhooks"`
	// The protocol for sending the message, either SMS or MMS.
	Type OptCreateNumberPoolMessageRequestType `json:"type"`
	// Automatically detect if an SMS message is unusually long and exceeds a recommended limit of
	// message parts.
	AutoDetect OptBool `json:"auto_detect"`
}

// GetMessagingProfileID returns the value of MessagingProfileID.
func (s *CreateNumberPoolMessageRequest) GetMessagingProfileID() string {
	return s.MessagingProfileID
}

// GetTo returns the value of To.
func (s *CreateNumberPoolMessageRequest) GetTo() ToNumber {
	return s.To
}

// GetText returns the value of Text.
func (s *CreateNumberPoolMessageRequest) GetText() OptString {
	return s.Text
}

// GetSubject returns the value of Subject.
func (s *CreateNumberPoolMessageRequest) GetSubject() OptString {
	return s.Subject
}

// GetMediaUrls returns the value of MediaUrls.
func (s *CreateNumberPoolMessageRequest) GetMediaUrls() []string {
	return s.MediaUrls
}

// GetWebhookURL returns the value of WebhookURL.
func (s *CreateNumberPoolMessageRequest) GetWebhookURL() OptString {
	return s.WebhookURL
}

// GetWebhookFailoverURL returns the value of WebhookFailoverURL.
func (s *CreateNumberPoolMessageRequest) GetWebhookFailoverURL() OptString {
	return s.WebhookFailoverURL
}

// GetUseProfileWebhooks returns the value of UseProfileWebhooks.
func (s *CreateNumberPoolMessageRequest) GetUseProfileWebhooks() OptBool {
	return s.UseProfileWebhooks
}

// GetType returns the value of Type.
func (s *CreateNumberPoolMessageRequest) GetType() OptCreateNumberPoolMessageRequestType {
	return s.Type
}

// GetAutoDetect returns the value of AutoDetect.
func (s *CreateNumberPoolMessageRequest) GetAutoDetect() OptBool {
	return s.AutoDetect
}

// SetMessagingProfileID sets the value of MessagingProfileID.
func (s *CreateNumberPoolMessageRequest) SetMessagingProfileID(val string) {
	s.MessagingProfileID = val
}

// SetTo sets the value of To.
func (s *CreateNumberPoolMessageRequest) SetTo(val ToNumber) {
	s.To = val
}

// SetText sets the value of Text.
func (s *CreateNumberPoolMessageRequest) SetText(val OptString) {
	s.Text = val
}

// SetSubject sets the value of Subject.
func (s *CreateNumberPoolMessageRequest) SetSubject(val OptString) {
	s.Subject = val
}

// SetMediaUrls sets the value of MediaUrls.
func (s *CreateNumberPoolMessageRequest) SetMediaUrls(val []string) {
	s.MediaUrls = val
}

// SetWebhookURL sets the value of WebhookURL.
func (s *CreateNumberPoolMessageRequest) SetWebhookURL(val OptString) {
	s.WebhookURL = val
}

// SetWebhookFailoverURL sets the value of WebhookFailoverURL.
func (s *CreateNumberPoolMessageRequest) SetWebhookFailoverURL(val OptString) {
	s.WebhookFailoverURL = val
}

// SetUseProfileWebhooks sets the value of UseProfileWebhooks.
func (s *CreateNumberPoolMessageRequest) SetUseProfileWebhooks(val OptBool) {
	s.UseProfileWebhooks = val
}

// SetType sets the value of Type.
func (s *CreateNumberPoolMessageRequest) SetType(val OptCreateNumberPoolMessageRequestType) {
	s.Type = val
}

// SetAutoDetect sets the value of AutoDetect.
func (s *CreateNumberPoolMessageRequest) SetAutoDetect(val OptBool) {
	s.AutoDetect = val
}

// The protocol for sending the message, either SMS or MMS.
type CreateNumberPoolMessageRequestType string

const (
	CreateNumberPoolMessageRequestTypeSMS CreateNumberPoolMessageRequestType = "SMS"
	CreateNumberPoolMessageRequestTypeMMS CreateNumberPoolMessageRequestType = "MMS"
)

// AllValues returns all CreateNumberPoolMessageRequestType values.
func (CreateNumberPoolMessageRequestType) AllValues() []CreateNumberPoolMessageRequestType {
	return []CreateNumberPoolMessageRequestType{
		CreateNumberPoolMessageRequestTypeSMS,
		CreateNumberPoolMessageRequestTypeMMS,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateNumberPoolMessageRequestType) MarshalText() ([]byte, error) {
	switch s {
	case CreateNumberPoolMessageRequestTypeSMS:
		return []byte(s), nil
	case CreateNumberPoolMessageRequestTypeMMS:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateNumberPoolMessageRequestType) UnmarshalText(data []byte) error {
	switch CreateNumberPoolMessageRequestType(data) {
	case CreateNumberPoolMessageRequestTypeSMS:
		*s = CreateNumberPoolMessageRequestTypeSMS
		return nil
	case CreateNumberPoolMessageRequestTypeMMS:
		*s = CreateNumberPoolMessageRequestTypeMMS
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CreateNumberReservationRequest
type CreateNumberReservationRequest struct {
	ID           OptUUID               `json:"id"`
	RecordType   OptString             `json:"record_type"`
	PhoneNumbers []ReservedPhoneNumber `json:"phone_numbers"`
	// The status of the entire reservation.
	Status OptCreateNumberReservationRequestStatus `json:"status"`
	// A customer reference string for customer look ups.
	CustomerReference OptString `json:"customer_reference"`
	// An ISO 8901 datetime string denoting when the numbers reservation was created.
	CreatedAt OptString `json:"created_at"`
	// An ISO 8901 datetime string for when the number reservation was updated.
	UpdatedAt OptString `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *CreateNumberReservationRequest) GetID() OptUUID {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *CreateNumberReservationRequest) GetRecordType() OptString {
	return s.RecordType
}

// GetPhoneNumbers returns the value of PhoneNumbers.
func (s *CreateNumberReservationRequest) GetPhoneNumbers() []ReservedPhoneNumber {
	return s.PhoneNumbers
}

// GetStatus returns the value of Status.
func (s *CreateNumberReservationRequest) GetStatus() OptCreateNumberReservationRequestStatus {
	return s.Status
}

// GetCustomerReference returns the value of CustomerReference.
func (s *CreateNumberReservationRequest) GetCustomerReference() OptString {
	return s.CustomerReference
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CreateNumberReservationRequest) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *CreateNumberReservationRequest) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *CreateNumberReservationRequest) SetID(val OptUUID) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *CreateNumberReservationRequest) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetPhoneNumbers sets the value of PhoneNumbers.
func (s *CreateNumberReservationRequest) SetPhoneNumbers(val []ReservedPhoneNumber) {
	s.PhoneNumbers = val
}

// SetStatus sets the value of Status.
func (s *CreateNumberReservationRequest) SetStatus(val OptCreateNumberReservationRequestStatus) {
	s.Status = val
}

// SetCustomerReference sets the value of CustomerReference.
func (s *CreateNumberReservationRequest) SetCustomerReference(val OptString) {
	s.CustomerReference = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CreateNumberReservationRequest) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *CreateNumberReservationRequest) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// The status of the entire reservation.
type CreateNumberReservationRequestStatus string

const (
	CreateNumberReservationRequestStatusPending CreateNumberReservationRequestStatus = "pending"
	CreateNumberReservationRequestStatusSuccess CreateNumberReservationRequestStatus = "success"
	CreateNumberReservationRequestStatusFailure CreateNumberReservationRequestStatus = "failure"
)

// AllValues returns all CreateNumberReservationRequestStatus values.
func (CreateNumberReservationRequestStatus) AllValues() []CreateNumberReservationRequestStatus {
	return []CreateNumberReservationRequestStatus{
		CreateNumberReservationRequestStatusPending,
		CreateNumberReservationRequestStatusSuccess,
		CreateNumberReservationRequestStatusFailure,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateNumberReservationRequestStatus) MarshalText() ([]byte, error) {
	switch s {
	case CreateNumberReservationRequestStatusPending:
		return []byte(s), nil
	case CreateNumberReservationRequestStatusSuccess:
		return []byte(s), nil
	case CreateNumberReservationRequestStatusFailure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateNumberReservationRequestStatus) UnmarshalText(data []byte) error {
	switch CreateNumberReservationRequestStatus(data) {
	case CreateNumberReservationRequestStatusPending:
		*s = CreateNumberReservationRequestStatusPending
		return nil
	case CreateNumberReservationRequestStatusSuccess:
		*s = CreateNumberReservationRequestStatusSuccess
		return nil
	case CreateNumberReservationRequestStatusFailure:
		*s = CreateNumberReservationRequestStatusFailure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CreateOutboundVoiceProfileRequest
type CreateOutboundVoiceProfileRequest struct {
	// A user-supplied name to help with organization.
	Name        string         `json:"name"`
	TrafficType OptTrafficType `json:"traffic_type"`
	ServicePlan OptServicePlan `json:"service_plan"`
	// Must be no more than your global concurrent call limit. Null means no limit.
	ConcurrentCallLimit OptNilInt `json:"concurrent_call_limit"`
	// Specifies whether the outbound voice profile can be used. Disabled profiles will result in
	// outbound calls being blocked for the associated Connections.
	Enabled            OptBool               `json:"enabled"`
	Tags               []string              `json:"tags"`
	UsagePaymentMethod OptUsagePaymentMethod `json:"usage_payment_method"`
	// The list of destinations you want to be able to call using this outbound voice profile formatted
	// in alpha2.
	WhitelistedDestinations []string `json:"whitelisted_destinations"`
	// Maximum rate (price per minute) for a Destination to be allowed when making outbound calls.
	MaxDestinationRate OptFloat64 `json:"max_destination_rate"`
	// The maximum amount of usage charges, in USD, you want Telnyx to allow on this outbound voice
	// profile in a day before disallowing new calls.
	DailySpendLimit OptString `json:"daily_spend_limit"`
	// Specifies whether to enforce the daily_spend_limit on this outbound voice profile.
	DailySpendLimitEnabled OptBool                  `json:"daily_spend_limit_enabled"`
	CallRecording          OptOutboundCallRecording `json:"call_recording"`
	// The ID of the billing group associated with the outbound proflile. Defaults to null (for no group
	// assigned).
	BillingGroupID OptNilUUID `json:"billing_group_id"`
}

// GetName returns the value of Name.
func (s *CreateOutboundVoiceProfileRequest) GetName() string {
	return s.Name
}

// GetTrafficType returns the value of TrafficType.
func (s *CreateOutboundVoiceProfileRequest) GetTrafficType() OptTrafficType {
	return s.TrafficType
}

// GetServicePlan returns the value of ServicePlan.
func (s *CreateOutboundVoiceProfileRequest) GetServicePlan() OptServicePlan {
	return s.ServicePlan
}

// GetConcurrentCallLimit returns the value of ConcurrentCallLimit.
func (s *CreateOutboundVoiceProfileRequest) GetConcurrentCallLimit() OptNilInt {
	return s.ConcurrentCallLimit
}

// GetEnabled returns the value of Enabled.
func (s *CreateOutboundVoiceProfileRequest) GetEnabled() OptBool {
	return s.Enabled
}

// GetTags returns the value of Tags.
func (s *CreateOutboundVoiceProfileRequest) GetTags() []string {
	return s.Tags
}

// GetUsagePaymentMethod returns the value of UsagePaymentMethod.
func (s *CreateOutboundVoiceProfileRequest) GetUsagePaymentMethod() OptUsagePaymentMethod {
	return s.UsagePaymentMethod
}

// GetWhitelistedDestinations returns the value of WhitelistedDestinations.
func (s *CreateOutboundVoiceProfileRequest) GetWhitelistedDestinations() []string {
	return s.WhitelistedDestinations
}

// GetMaxDestinationRate returns the value of MaxDestinationRate.
func (s *CreateOutboundVoiceProfileRequest) GetMaxDestinationRate() OptFloat64 {
	return s.MaxDestinationRate
}

// GetDailySpendLimit returns the value of DailySpendLimit.
func (s *CreateOutboundVoiceProfileRequest) GetDailySpendLimit() OptString {
	return s.DailySpendLimit
}

// GetDailySpendLimitEnabled returns the value of DailySpendLimitEnabled.
func (s *CreateOutboundVoiceProfileRequest) GetDailySpendLimitEnabled() OptBool {
	return s.DailySpendLimitEnabled
}

// GetCallRecording returns the value of CallRecording.
func (s *CreateOutboundVoiceProfileRequest) GetCallRecording() OptOutboundCallRecording {
	return s.CallRecording
}

// GetBillingGroupID returns the value of BillingGroupID.
func (s *CreateOutboundVoiceProfileRequest) GetBillingGroupID() OptNilUUID {
	return s.BillingGroupID
}

// SetName sets the value of Name.
func (s *CreateOutboundVoiceProfileRequest) SetName(val string) {
	s.Name = val
}

// SetTrafficType sets the value of TrafficType.
func (s *CreateOutboundVoiceProfileRequest) SetTrafficType(val OptTrafficType) {
	s.TrafficType = val
}

// SetServicePlan sets the value of ServicePlan.
func (s *CreateOutboundVoiceProfileRequest) SetServicePlan(val OptServicePlan) {
	s.ServicePlan = val
}

// SetConcurrentCallLimit sets the value of ConcurrentCallLimit.
func (s *CreateOutboundVoiceProfileRequest) SetConcurrentCallLimit(val OptNilInt) {
	s.ConcurrentCallLimit = val
}

// SetEnabled sets the value of Enabled.
func (s *CreateOutboundVoiceProfileRequest) SetEnabled(val OptBool) {
	s.Enabled = val
}

// SetTags sets the value of Tags.
func (s *CreateOutboundVoiceProfileRequest) SetTags(val []string) {
	s.Tags = val
}

// SetUsagePaymentMethod sets the value of UsagePaymentMethod.
func (s *CreateOutboundVoiceProfileRequest) SetUsagePaymentMethod(val OptUsagePaymentMethod) {
	s.UsagePaymentMethod = val
}

// SetWhitelistedDestinations sets the value of WhitelistedDestinations.
func (s *CreateOutboundVoiceProfileRequest) SetWhitelistedDestinations(val []string) {
	s.WhitelistedDestinations = val
}

// SetMaxDestinationRate sets the value of MaxDestinationRate.
func (s *CreateOutboundVoiceProfileRequest) SetMaxDestinationRate(val OptFloat64) {
	s.MaxDestinationRate = val
}

// SetDailySpendLimit sets the value of DailySpendLimit.
func (s *CreateOutboundVoiceProfileRequest) SetDailySpendLimit(val OptString) {
	s.DailySpendLimit = val
}

// SetDailySpendLimitEnabled sets the value of DailySpendLimitEnabled.
func (s *CreateOutboundVoiceProfileRequest) SetDailySpendLimitEnabled(val OptBool) {
	s.DailySpendLimitEnabled = val
}

// SetCallRecording sets the value of CallRecording.
func (s *CreateOutboundVoiceProfileRequest) SetCallRecording(val OptOutboundCallRecording) {
	s.CallRecording = val
}

// SetBillingGroupID sets the value of BillingGroupID.
func (s *CreateOutboundVoiceProfileRequest) SetBillingGroupID(val OptNilUUID) {
	s.BillingGroupID = val
}

type CreatePhoneNumberConfigurationsReq struct {
	PhoneNumberConfigurations []CreatePhoneNumberConfigurationsReqPhoneNumberConfigurationsItem `json:"phone_number_configurations"`
}

// GetPhoneNumberConfigurations returns the value of PhoneNumberConfigurations.
func (s *CreatePhoneNumberConfigurationsReq) GetPhoneNumberConfigurations() []CreatePhoneNumberConfigurationsReqPhoneNumberConfigurationsItem {
	return s.PhoneNumberConfigurations
}

// SetPhoneNumberConfigurations sets the value of PhoneNumberConfigurations.
func (s *CreatePhoneNumberConfigurationsReq) SetPhoneNumberConfigurations(val []CreatePhoneNumberConfigurationsReqPhoneNumberConfigurationsItem) {
	s.PhoneNumberConfigurations = val
}

type CreatePhoneNumberConfigurationsReqPhoneNumberConfigurationsItem struct {
	// Identifies the porting phone number to be configured.
	PortingPhoneNumberID uuid.UUID `json:"porting_phone_number_id"`
	// Identifies the user bundle to be associated with the porting phone number.
	UserBundleID uuid.UUID `json:"user_bundle_id"`
}

// GetPortingPhoneNumberID returns the value of PortingPhoneNumberID.
func (s *CreatePhoneNumberConfigurationsReqPhoneNumberConfigurationsItem) GetPortingPhoneNumberID() uuid.UUID {
	return s.PortingPhoneNumberID
}

// GetUserBundleID returns the value of UserBundleID.
func (s *CreatePhoneNumberConfigurationsReqPhoneNumberConfigurationsItem) GetUserBundleID() uuid.UUID {
	return s.UserBundleID
}

// SetPortingPhoneNumberID sets the value of PortingPhoneNumberID.
func (s *CreatePhoneNumberConfigurationsReqPhoneNumberConfigurationsItem) SetPortingPhoneNumberID(val uuid.UUID) {
	s.PortingPhoneNumberID = val
}

// SetUserBundleID sets the value of UserBundleID.
func (s *CreatePhoneNumberConfigurationsReqPhoneNumberConfigurationsItem) SetUserBundleID(val uuid.UUID) {
	s.UserBundleID = val
}

// CreatePhoneNumberConfigurationsUnauthorized is response for CreatePhoneNumberConfigurations operation.
type CreatePhoneNumberConfigurationsUnauthorized struct{}

func (*CreatePhoneNumberConfigurationsUnauthorized) createPhoneNumberConfigurationsRes() {}

// CreatePhoneNumberConfigurationsUnprocessableEntity is response for CreatePhoneNumberConfigurations operation.
type CreatePhoneNumberConfigurationsUnprocessableEntity struct{}

func (*CreatePhoneNumberConfigurationsUnprocessableEntity) createPhoneNumberConfigurationsRes() {}

type CreatePhoneNumbersJobUpdateEmergencySettingsAccepted struct {
	Data OptPhoneNumbersJob `json:"data"`
}

// GetData returns the value of Data.
func (s *CreatePhoneNumbersJobUpdateEmergencySettingsAccepted) GetData() OptPhoneNumbersJob {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreatePhoneNumbersJobUpdateEmergencySettingsAccepted) SetData(val OptPhoneNumbersJob) {
	s.Data = val
}

func (*CreatePhoneNumbersJobUpdateEmergencySettingsAccepted) createPhoneNumbersJobUpdateEmergencySettingsRes() {
}

type CreatePortOutSupportingDocumentsResponse struct {
	Data []PortOutSupportingDocument `json:"data"`
}

// GetData returns the value of Data.
func (s *CreatePortOutSupportingDocumentsResponse) GetData() []PortOutSupportingDocument {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreatePortOutSupportingDocumentsResponse) SetData(val []PortOutSupportingDocument) {
	s.Data = val
}

func (*CreatePortOutSupportingDocumentsResponse) postPortRequestSupportingDocumentsRes() {}

type CreatePortingAdditionalDocuments struct {
	Data []PortingAdditionalDocument `json:"data"`
}

// GetData returns the value of Data.
func (s *CreatePortingAdditionalDocuments) GetData() []PortingAdditionalDocument {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreatePortingAdditionalDocuments) SetData(val []PortingAdditionalDocument) {
	s.Data = val
}

func (*CreatePortingAdditionalDocuments) createAdditionalDocumentsRes() {}

type CreatePortingLOAConfiguration struct {
	Data OptPortingLOAConfiguration `json:"data"`
}

// GetData returns the value of Data.
func (s *CreatePortingLOAConfiguration) GetData() OptPortingLOAConfiguration {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreatePortingLOAConfiguration) SetData(val OptPortingLOAConfiguration) {
	s.Data = val
}

func (*CreatePortingLOAConfiguration) createLoaConfigurationRes() {}

// Ref: #/components/schemas/CreatePortingOrder
type CreatePortingOrder struct {
	// The list of +E.164 formatted phone numbers.
	PhoneNumbers []string `json:"phone_numbers"`
	// A customer-specified reference number for customer bookkeeping purposes.
	CustomerReference OptString `json:"customer_reference"`
}

// GetPhoneNumbers returns the value of PhoneNumbers.
func (s *CreatePortingOrder) GetPhoneNumbers() []string {
	return s.PhoneNumbers
}

// GetCustomerReference returns the value of CustomerReference.
func (s *CreatePortingOrder) GetCustomerReference() OptString {
	return s.CustomerReference
}

// SetPhoneNumbers sets the value of PhoneNumbers.
func (s *CreatePortingOrder) SetPhoneNumbers(val []string) {
	s.PhoneNumbers = val
}

// SetCustomerReference sets the value of CustomerReference.
func (s *CreatePortingOrder) SetCustomerReference(val OptString) {
	s.CustomerReference = val
}

// Ref: #/components/schemas/CreatePortingOrderComment
type CreatePortingOrderComment struct {
	Body OptString `json:"body"`
}

// GetBody returns the value of Body.
func (s *CreatePortingOrderComment) GetBody() OptString {
	return s.Body
}

// SetBody sets the value of Body.
func (s *CreatePortingOrderComment) SetBody(val OptString) {
	s.Body = val
}

// CreatePortingOrderUnauthorized is response for CreatePortingOrder operation.
type CreatePortingOrderUnauthorized struct{}

func (*CreatePortingOrderUnauthorized) createPortingOrderRes() {}

// CreatePortingOrderUnprocessableEntity is response for CreatePortingOrder operation.
type CreatePortingOrderUnprocessableEntity struct{}

func (*CreatePortingOrderUnprocessableEntity) createPortingOrderRes() {}

type CreatePortingPhoneNumberConfigurations struct {
	Data []PortingPhoneNumberConfiguration `json:"data"`
}

// GetData returns the value of Data.
func (s *CreatePortingPhoneNumberConfigurations) GetData() []PortingPhoneNumberConfiguration {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreatePortingPhoneNumberConfigurations) SetData(val []PortingPhoneNumberConfiguration) {
	s.Data = val
}

func (*CreatePortingPhoneNumberConfigurations) createPhoneNumberConfigurationsRes() {}

type CreatePortingReport struct {
	Data OptPortingReport `json:"data"`
}

// GetData returns the value of Data.
func (s *CreatePortingReport) GetData() OptPortingReport {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreatePortingReport) SetData(val OptPortingReport) {
	s.Data = val
}

func (*CreatePortingReport) createPortingReportRes() {}

// CreatePortingReportInternalServerError is response for CreatePortingReport operation.
type CreatePortingReportInternalServerError struct{}

func (*CreatePortingReportInternalServerError) createPortingReportRes() {}

// The parameters for generating a new porting related report.
type CreatePortingReportReq struct {
	// Identifies the type of report.
	ReportType CreatePortingReportReqReportType `json:"report_type"`
	Params     CreatePortingReportReqParams     `json:"params"`
}

// GetReportType returns the value of ReportType.
func (s *CreatePortingReportReq) GetReportType() CreatePortingReportReqReportType {
	return s.ReportType
}

// GetParams returns the value of Params.
func (s *CreatePortingReportReq) GetParams() CreatePortingReportReqParams {
	return s.Params
}

// SetReportType sets the value of ReportType.
func (s *CreatePortingReportReq) SetReportType(val CreatePortingReportReqReportType) {
	s.ReportType = val
}

// SetParams sets the value of Params.
func (s *CreatePortingReportReq) SetParams(val CreatePortingReportReqParams) {
	s.Params = val
}

// CreatePortingReportReqParams represents sum type.
type CreatePortingReportReqParams struct {
	Type                         CreatePortingReportReqParamsType // switch on this field
	ExportPortingOrdersCSVReport ExportPortingOrdersCSVReport
}

// CreatePortingReportReqParamsType is oneOf type of CreatePortingReportReqParams.
type CreatePortingReportReqParamsType string

// Possible values for CreatePortingReportReqParamsType.
const (
	ExportPortingOrdersCSVReportCreatePortingReportReqParams CreatePortingReportReqParamsType = "ExportPortingOrdersCSVReport"
)

// IsExportPortingOrdersCSVReport reports whether CreatePortingReportReqParams is ExportPortingOrdersCSVReport.
func (s CreatePortingReportReqParams) IsExportPortingOrdersCSVReport() bool {
	return s.Type == ExportPortingOrdersCSVReportCreatePortingReportReqParams
}

// SetExportPortingOrdersCSVReport sets CreatePortingReportReqParams to ExportPortingOrdersCSVReport.
func (s *CreatePortingReportReqParams) SetExportPortingOrdersCSVReport(v ExportPortingOrdersCSVReport) {
	s.Type = ExportPortingOrdersCSVReportCreatePortingReportReqParams
	s.ExportPortingOrdersCSVReport = v
}

// GetExportPortingOrdersCSVReport returns ExportPortingOrdersCSVReport and true boolean if CreatePortingReportReqParams is ExportPortingOrdersCSVReport.
func (s CreatePortingReportReqParams) GetExportPortingOrdersCSVReport() (v ExportPortingOrdersCSVReport, ok bool) {
	if !s.IsExportPortingOrdersCSVReport() {
		return v, false
	}
	return s.ExportPortingOrdersCSVReport, true
}

// NewExportPortingOrdersCSVReportCreatePortingReportReqParams returns new CreatePortingReportReqParams from ExportPortingOrdersCSVReport.
func NewExportPortingOrdersCSVReportCreatePortingReportReqParams(v ExportPortingOrdersCSVReport) CreatePortingReportReqParams {
	var s CreatePortingReportReqParams
	s.SetExportPortingOrdersCSVReport(v)
	return s
}

// Identifies the type of report.
type CreatePortingReportReqReportType string

const (
	CreatePortingReportReqReportTypeExportPortingOrdersCsv CreatePortingReportReqReportType = "export_porting_orders_csv"
)

// AllValues returns all CreatePortingReportReqReportType values.
func (CreatePortingReportReqReportType) AllValues() []CreatePortingReportReqReportType {
	return []CreatePortingReportReqReportType{
		CreatePortingReportReqReportTypeExportPortingOrdersCsv,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePortingReportReqReportType) MarshalText() ([]byte, error) {
	switch s {
	case CreatePortingReportReqReportTypeExportPortingOrdersCsv:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePortingReportReqReportType) UnmarshalText(data []byte) error {
	switch CreatePortingReportReqReportType(data) {
	case CreatePortingReportReqReportTypeExportPortingOrdersCsv:
		*s = CreatePortingReportReqReportTypeExportPortingOrdersCsv
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// CreatePortingReportUnprocessableEntity is response for CreatePortingReport operation.
type CreatePortingReportUnprocessableEntity struct{}

func (*CreatePortingReportUnprocessableEntity) createPortingReportRes() {}

type CreatePrivateWirelessGatewayReq struct {
	// The identification of the related network resource.
	NetworkID uuid.UUID `json:"network_id"`
	// The private wireless gateway name.
	Name string `json:"name"`
}

// GetNetworkID returns the value of NetworkID.
func (s *CreatePrivateWirelessGatewayReq) GetNetworkID() uuid.UUID {
	return s.NetworkID
}

// GetName returns the value of Name.
func (s *CreatePrivateWirelessGatewayReq) GetName() string {
	return s.Name
}

// SetNetworkID sets the value of NetworkID.
func (s *CreatePrivateWirelessGatewayReq) SetNetworkID(val uuid.UUID) {
	s.NetworkID = val
}

// SetName sets the value of Name.
func (s *CreatePrivateWirelessGatewayReq) SetName(val string) {
	s.Name = val
}

type CreatePrivateWirelessGatewayResponse struct {
	Data OptPrivateWirelessGateway `json:"data"`
}

// GetData returns the value of Data.
func (s *CreatePrivateWirelessGatewayResponse) GetData() OptPrivateWirelessGateway {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreatePrivateWirelessGatewayResponse) SetData(val OptPrivateWirelessGateway) {
	s.Data = val
}

func (*CreatePrivateWirelessGatewayResponse) createPrivateWirelessGatewayRes() {}

// CreateProfileVerificationRequestCreated is response for CreateProfileVerificationRequest operation.
type CreateProfileVerificationRequestCreated struct{}

func (*CreateProfileVerificationRequestCreated) createProfileVerificationRequestRes() {}

// Ref: #/components/schemas/CreateShortCodeMessageRequest
type CreateShortCodeMessageRequest struct {
	// Phone number, in +E.164 format, used to send the message.
	From string   `json:"from"`
	To   ToNumber `json:"to"`
	// Message body (i.e., content) as a non-empty string.
	// **Required for SMS**.
	Text OptString `json:"text"`
	// Subject of multimedia message.
	Subject OptString `json:"subject"`
	// A list of media URLs. The total media size must be less than 1 MB.
	// **Required for MMS**.
	MediaUrls []string `json:"media_urls"`
	// The URL where webhooks related to this message will be sent.
	WebhookURL OptString `json:"webhook_url"`
	// The failover URL where webhooks related to this message will be sent if sending to the primary URL
	// fails.
	WebhookFailoverURL OptString `json:"webhook_failover_url"`
	// If the profile this number is associated with has webhooks, use them for delivery notifications.
	// If webhooks are also specified on the message itself, they will be attempted first, then those on
	// the profile.
	UseProfileWebhooks OptBool `json:"use_profile_webhooks"`
	// The protocol for sending the message, either SMS or MMS.
	Type OptCreateShortCodeMessageRequestType `json:"type"`
	// Automatically detect if an SMS message is unusually long and exceeds a recommended limit of
	// message parts.
	AutoDetect OptBool `json:"auto_detect"`
}

// GetFrom returns the value of From.
func (s *CreateShortCodeMessageRequest) GetFrom() string {
	return s.From
}

// GetTo returns the value of To.
func (s *CreateShortCodeMessageRequest) GetTo() ToNumber {
	return s.To
}

// GetText returns the value of Text.
func (s *CreateShortCodeMessageRequest) GetText() OptString {
	return s.Text
}

// GetSubject returns the value of Subject.
func (s *CreateShortCodeMessageRequest) GetSubject() OptString {
	return s.Subject
}

// GetMediaUrls returns the value of MediaUrls.
func (s *CreateShortCodeMessageRequest) GetMediaUrls() []string {
	return s.MediaUrls
}

// GetWebhookURL returns the value of WebhookURL.
func (s *CreateShortCodeMessageRequest) GetWebhookURL() OptString {
	return s.WebhookURL
}

// GetWebhookFailoverURL returns the value of WebhookFailoverURL.
func (s *CreateShortCodeMessageRequest) GetWebhookFailoverURL() OptString {
	return s.WebhookFailoverURL
}

// GetUseProfileWebhooks returns the value of UseProfileWebhooks.
func (s *CreateShortCodeMessageRequest) GetUseProfileWebhooks() OptBool {
	return s.UseProfileWebhooks
}

// GetType returns the value of Type.
func (s *CreateShortCodeMessageRequest) GetType() OptCreateShortCodeMessageRequestType {
	return s.Type
}

// GetAutoDetect returns the value of AutoDetect.
func (s *CreateShortCodeMessageRequest) GetAutoDetect() OptBool {
	return s.AutoDetect
}

// SetFrom sets the value of From.
func (s *CreateShortCodeMessageRequest) SetFrom(val string) {
	s.From = val
}

// SetTo sets the value of To.
func (s *CreateShortCodeMessageRequest) SetTo(val ToNumber) {
	s.To = val
}

// SetText sets the value of Text.
func (s *CreateShortCodeMessageRequest) SetText(val OptString) {
	s.Text = val
}

// SetSubject sets the value of Subject.
func (s *CreateShortCodeMessageRequest) SetSubject(val OptString) {
	s.Subject = val
}

// SetMediaUrls sets the value of MediaUrls.
func (s *CreateShortCodeMessageRequest) SetMediaUrls(val []string) {
	s.MediaUrls = val
}

// SetWebhookURL sets the value of WebhookURL.
func (s *CreateShortCodeMessageRequest) SetWebhookURL(val OptString) {
	s.WebhookURL = val
}

// SetWebhookFailoverURL sets the value of WebhookFailoverURL.
func (s *CreateShortCodeMessageRequest) SetWebhookFailoverURL(val OptString) {
	s.WebhookFailoverURL = val
}

// SetUseProfileWebhooks sets the value of UseProfileWebhooks.
func (s *CreateShortCodeMessageRequest) SetUseProfileWebhooks(val OptBool) {
	s.UseProfileWebhooks = val
}

// SetType sets the value of Type.
func (s *CreateShortCodeMessageRequest) SetType(val OptCreateShortCodeMessageRequestType) {
	s.Type = val
}

// SetAutoDetect sets the value of AutoDetect.
func (s *CreateShortCodeMessageRequest) SetAutoDetect(val OptBool) {
	s.AutoDetect = val
}

// The protocol for sending the message, either SMS or MMS.
type CreateShortCodeMessageRequestType string

const (
	CreateShortCodeMessageRequestTypeSMS CreateShortCodeMessageRequestType = "SMS"
	CreateShortCodeMessageRequestTypeMMS CreateShortCodeMessageRequestType = "MMS"
)

// AllValues returns all CreateShortCodeMessageRequestType values.
func (CreateShortCodeMessageRequestType) AllValues() []CreateShortCodeMessageRequestType {
	return []CreateShortCodeMessageRequestType{
		CreateShortCodeMessageRequestTypeSMS,
		CreateShortCodeMessageRequestTypeMMS,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateShortCodeMessageRequestType) MarshalText() ([]byte, error) {
	switch s {
	case CreateShortCodeMessageRequestTypeSMS:
		return []byte(s), nil
	case CreateShortCodeMessageRequestTypeMMS:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateShortCodeMessageRequestType) UnmarshalText(data []byte) error {
	switch CreateShortCodeMessageRequestType(data) {
	case CreateShortCodeMessageRequestTypeSMS:
		*s = CreateShortCodeMessageRequestTypeSMS
		return nil
	case CreateShortCodeMessageRequestTypeMMS:
		*s = CreateShortCodeMessageRequestTypeMMS
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CreateTeXMLSecretRequest
type CreateTeXMLSecretRequest struct {
	// Name used as a reference for the secret, if the name already exists within the account its value
	// will be replaced.
	Name string `json:"name"`
	// Secret value which will be used when rendering the TeXML template.
	Value string `json:"value"`
}

// GetName returns the value of Name.
func (s *CreateTeXMLSecretRequest) GetName() string {
	return s.Name
}

// GetValue returns the value of Value.
func (s *CreateTeXMLSecretRequest) GetValue() string {
	return s.Value
}

// SetName sets the value of Name.
func (s *CreateTeXMLSecretRequest) SetName(val string) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *CreateTeXMLSecretRequest) SetValue(val string) {
	s.Value = val
}

type CreateTeXMLSecretResponse struct {
	Data OptCreateTeXMLSecretResult `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateTeXMLSecretResponse) GetData() OptCreateTeXMLSecretResult {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateTeXMLSecretResponse) SetData(val OptCreateTeXMLSecretResult) {
	s.Data = val
}

func (*CreateTeXMLSecretResponse) createTexmlSecretRes() {}

// Ref: #/components/schemas/CreateTeXMLSecretResult
type CreateTeXMLSecretResult struct {
	Name  OptString                       `json:"name"`
	Value OptCreateTeXMLSecretResultValue `json:"value"`
}

// GetName returns the value of Name.
func (s *CreateTeXMLSecretResult) GetName() OptString {
	return s.Name
}

// GetValue returns the value of Value.
func (s *CreateTeXMLSecretResult) GetValue() OptCreateTeXMLSecretResultValue {
	return s.Value
}

// SetName sets the value of Name.
func (s *CreateTeXMLSecretResult) SetName(val OptString) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *CreateTeXMLSecretResult) SetValue(val OptCreateTeXMLSecretResultValue) {
	s.Value = val
}

type CreateTeXMLSecretResultValue string

const (
	CreateTeXMLSecretResultValue_ CreateTeXMLSecretResultValue = "*****"
)

// AllValues returns all CreateTeXMLSecretResultValue values.
func (CreateTeXMLSecretResultValue) AllValues() []CreateTeXMLSecretResultValue {
	return []CreateTeXMLSecretResultValue{
		CreateTeXMLSecretResultValue_,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateTeXMLSecretResultValue) MarshalText() ([]byte, error) {
	switch s {
	case CreateTeXMLSecretResultValue_:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateTeXMLSecretResultValue) UnmarshalText(data []byte) error {
	switch CreateTeXMLSecretResultValue(data) {
	case CreateTeXMLSecretResultValue_:
		*s = CreateTeXMLSecretResultValue_
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateTelephonyCredentialTokenCreated struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s CreateTelephonyCredentialTokenCreated) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*CreateTelephonyCredentialTokenCreated) createTelephonyCredentialTokenRes() {}

// CreateTelephonyCredentialTokenNotFound is response for CreateTelephonyCredentialToken operation.
type CreateTelephonyCredentialTokenNotFound struct{}

func (*CreateTelephonyCredentialTokenNotFound) createTelephonyCredentialTokenRes() {}

// CreateTelephonyCredentialUnprocessableEntity is response for CreateTelephonyCredential operation.
type CreateTelephonyCredentialUnprocessableEntity struct{}

func (*CreateTelephonyCredentialUnprocessableEntity) createTelephonyCredentialRes() {}

type CreateTexmlApplicationNotFound ErrorResponse

func (*CreateTexmlApplicationNotFound) createTexmlApplicationRes() {}

// Ref: #/components/schemas/CreateTexmlApplicationRequest
type CreateTexmlApplicationRequest struct {
	FriendlyName            ApplicationName            `json:"friendly_name"`
	Active                  OptConnectionActive        `json:"active"`
	AnchorsiteOverride      OptAnchorsiteOverride      `json:"anchorsite_override"`
	DtmfType                OptDtmfType                `json:"dtmf_type"`
	FirstCommandTimeout     OptFirstCommandTimeout     `json:"first_command_timeout"`
	FirstCommandTimeoutSecs OptFirstCommandTimeoutSecs `json:"first_command_timeout_secs"`
	// URL to which Telnyx will deliver your XML Translator webhooks.
	VoiceURL string `json:"voice_url"`
	// URL to which Telnyx will deliver your XML Translator webhooks if we get an error response from
	// your voice_url.
	VoiceFallbackURL OptString `json:"voice_fallback_url"`
	// HTTP request method Telnyx will use to interact with your XML Translator webhooks. Either 'get' or
	// 'post'.
	VoiceMethod OptCreateTexmlApplicationRequestVoiceMethod `json:"voice_method"`
	// URL for Telnyx to send requests to containing information about call progress events.
	StatusCallback OptString `json:"status_callback"`
	// HTTP request method Telnyx should use when requesting the status_callback URL.
	StatusCallbackMethod OptCreateTexmlApplicationRequestStatusCallbackMethod `json:"status_callback_method"`
	Inbound              OptCreateTexmlApplicationRequestInbound              `json:"inbound"`
	Outbound             OptCreateTexmlApplicationRequestOutbound             `json:"outbound"`
}

// GetFriendlyName returns the value of FriendlyName.
func (s *CreateTexmlApplicationRequest) GetFriendlyName() ApplicationName {
	return s.FriendlyName
}

// GetActive returns the value of Active.
func (s *CreateTexmlApplicationRequest) GetActive() OptConnectionActive {
	return s.Active
}

// GetAnchorsiteOverride returns the value of AnchorsiteOverride.
func (s *CreateTexmlApplicationRequest) GetAnchorsiteOverride() OptAnchorsiteOverride {
	return s.AnchorsiteOverride
}

// GetDtmfType returns the value of DtmfType.
func (s *CreateTexmlApplicationRequest) GetDtmfType() OptDtmfType {
	return s.DtmfType
}

// GetFirstCommandTimeout returns the value of FirstCommandTimeout.
func (s *CreateTexmlApplicationRequest) GetFirstCommandTimeout() OptFirstCommandTimeout {
	return s.FirstCommandTimeout
}

// GetFirstCommandTimeoutSecs returns the value of FirstCommandTimeoutSecs.
func (s *CreateTexmlApplicationRequest) GetFirstCommandTimeoutSecs() OptFirstCommandTimeoutSecs {
	return s.FirstCommandTimeoutSecs
}

// GetVoiceURL returns the value of VoiceURL.
func (s *CreateTexmlApplicationRequest) GetVoiceURL() string {
	return s.VoiceURL
}

// GetVoiceFallbackURL returns the value of VoiceFallbackURL.
func (s *CreateTexmlApplicationRequest) GetVoiceFallbackURL() OptString {
	return s.VoiceFallbackURL
}

// GetVoiceMethod returns the value of VoiceMethod.
func (s *CreateTexmlApplicationRequest) GetVoiceMethod() OptCreateTexmlApplicationRequestVoiceMethod {
	return s.VoiceMethod
}

// GetStatusCallback returns the value of StatusCallback.
func (s *CreateTexmlApplicationRequest) GetStatusCallback() OptString {
	return s.StatusCallback
}

// GetStatusCallbackMethod returns the value of StatusCallbackMethod.
func (s *CreateTexmlApplicationRequest) GetStatusCallbackMethod() OptCreateTexmlApplicationRequestStatusCallbackMethod {
	return s.StatusCallbackMethod
}

// GetInbound returns the value of Inbound.
func (s *CreateTexmlApplicationRequest) GetInbound() OptCreateTexmlApplicationRequestInbound {
	return s.Inbound
}

// GetOutbound returns the value of Outbound.
func (s *CreateTexmlApplicationRequest) GetOutbound() OptCreateTexmlApplicationRequestOutbound {
	return s.Outbound
}

// SetFriendlyName sets the value of FriendlyName.
func (s *CreateTexmlApplicationRequest) SetFriendlyName(val ApplicationName) {
	s.FriendlyName = val
}

// SetActive sets the value of Active.
func (s *CreateTexmlApplicationRequest) SetActive(val OptConnectionActive) {
	s.Active = val
}

// SetAnchorsiteOverride sets the value of AnchorsiteOverride.
func (s *CreateTexmlApplicationRequest) SetAnchorsiteOverride(val OptAnchorsiteOverride) {
	s.AnchorsiteOverride = val
}

// SetDtmfType sets the value of DtmfType.
func (s *CreateTexmlApplicationRequest) SetDtmfType(val OptDtmfType) {
	s.DtmfType = val
}

// SetFirstCommandTimeout sets the value of FirstCommandTimeout.
func (s *CreateTexmlApplicationRequest) SetFirstCommandTimeout(val OptFirstCommandTimeout) {
	s.FirstCommandTimeout = val
}

// SetFirstCommandTimeoutSecs sets the value of FirstCommandTimeoutSecs.
func (s *CreateTexmlApplicationRequest) SetFirstCommandTimeoutSecs(val OptFirstCommandTimeoutSecs) {
	s.FirstCommandTimeoutSecs = val
}

// SetVoiceURL sets the value of VoiceURL.
func (s *CreateTexmlApplicationRequest) SetVoiceURL(val string) {
	s.VoiceURL = val
}

// SetVoiceFallbackURL sets the value of VoiceFallbackURL.
func (s *CreateTexmlApplicationRequest) SetVoiceFallbackURL(val OptString) {
	s.VoiceFallbackURL = val
}

// SetVoiceMethod sets the value of VoiceMethod.
func (s *CreateTexmlApplicationRequest) SetVoiceMethod(val OptCreateTexmlApplicationRequestVoiceMethod) {
	s.VoiceMethod = val
}

// SetStatusCallback sets the value of StatusCallback.
func (s *CreateTexmlApplicationRequest) SetStatusCallback(val OptString) {
	s.StatusCallback = val
}

// SetStatusCallbackMethod sets the value of StatusCallbackMethod.
func (s *CreateTexmlApplicationRequest) SetStatusCallbackMethod(val OptCreateTexmlApplicationRequestStatusCallbackMethod) {
	s.StatusCallbackMethod = val
}

// SetInbound sets the value of Inbound.
func (s *CreateTexmlApplicationRequest) SetInbound(val OptCreateTexmlApplicationRequestInbound) {
	s.Inbound = val
}

// SetOutbound sets the value of Outbound.
func (s *CreateTexmlApplicationRequest) SetOutbound(val OptCreateTexmlApplicationRequestOutbound) {
	s.Outbound = val
}

type CreateTexmlApplicationRequestInbound struct {
	// When set, this will limit the total number of inbound calls to phone numbers associated with this
	// connection.
	ChannelLimit OptInt `json:"channel_limit"`
	// When enabled Telnyx will include Shaken/Stir data in the Webhook for new inbound calls.
	ShakenStirEnabled OptBool `json:"shaken_stir_enabled"`
	// Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a
	// phone number is used, from a SIP endpoint. Example: the subdomain "example.sip.telnyx.com" can be
	// called from any SIP endpoint by using the SIP URI "sip:@example.sip.telnyx.com" where the user
	// part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain
	// calls.
	SipSubdomain OptNilString `json:"sip_subdomain"`
	// This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public
	// Internet) or "Only my connections" (any connection assigned to the same Telnyx user).
	SipSubdomainReceiveSettings OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings `json:"sip_subdomain_receive_settings"`
}

// GetChannelLimit returns the value of ChannelLimit.
func (s *CreateTexmlApplicationRequestInbound) GetChannelLimit() OptInt {
	return s.ChannelLimit
}

// GetShakenStirEnabled returns the value of ShakenStirEnabled.
func (s *CreateTexmlApplicationRequestInbound) GetShakenStirEnabled() OptBool {
	return s.ShakenStirEnabled
}

// GetSipSubdomain returns the value of SipSubdomain.
func (s *CreateTexmlApplicationRequestInbound) GetSipSubdomain() OptNilString {
	return s.SipSubdomain
}

// GetSipSubdomainReceiveSettings returns the value of SipSubdomainReceiveSettings.
func (s *CreateTexmlApplicationRequestInbound) GetSipSubdomainReceiveSettings() OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings {
	return s.SipSubdomainReceiveSettings
}

// SetChannelLimit sets the value of ChannelLimit.
func (s *CreateTexmlApplicationRequestInbound) SetChannelLimit(val OptInt) {
	s.ChannelLimit = val
}

// SetShakenStirEnabled sets the value of ShakenStirEnabled.
func (s *CreateTexmlApplicationRequestInbound) SetShakenStirEnabled(val OptBool) {
	s.ShakenStirEnabled = val
}

// SetSipSubdomain sets the value of SipSubdomain.
func (s *CreateTexmlApplicationRequestInbound) SetSipSubdomain(val OptNilString) {
	s.SipSubdomain = val
}

// SetSipSubdomainReceiveSettings sets the value of SipSubdomainReceiveSettings.
func (s *CreateTexmlApplicationRequestInbound) SetSipSubdomainReceiveSettings(val OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) {
	s.SipSubdomainReceiveSettings = val
}

// This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public
// Internet) or "Only my connections" (any connection assigned to the same Telnyx user).
type CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings string

const (
	CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsOnlyMyConnections CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings = "only_my_connections"
	CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsFromAnyone        CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings = "from_anyone"
)

// AllValues returns all CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings values.
func (CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) AllValues() []CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings {
	return []CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings{
		CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsOnlyMyConnections,
		CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsFromAnyone,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) MarshalText() ([]byte, error) {
	switch s {
	case CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsOnlyMyConnections:
		return []byte(s), nil
	case CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsFromAnyone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) UnmarshalText(data []byte) error {
	switch CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings(data) {
	case CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsOnlyMyConnections:
		*s = CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsOnlyMyConnections
		return nil
	case CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsFromAnyone:
		*s = CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsFromAnyone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateTexmlApplicationRequestOutbound struct {
	// When set, this will limit the total number of outbound calls to phone numbers associated with this
	// connection.
	ChannelLimit           OptInt                    `json:"channel_limit"`
	OutboundVoiceProfileID OptOutboundVoiceProfileId `json:"outbound_voice_profile_id"`
}

// GetChannelLimit returns the value of ChannelLimit.
func (s *CreateTexmlApplicationRequestOutbound) GetChannelLimit() OptInt {
	return s.ChannelLimit
}

// GetOutboundVoiceProfileID returns the value of OutboundVoiceProfileID.
func (s *CreateTexmlApplicationRequestOutbound) GetOutboundVoiceProfileID() OptOutboundVoiceProfileId {
	return s.OutboundVoiceProfileID
}

// SetChannelLimit sets the value of ChannelLimit.
func (s *CreateTexmlApplicationRequestOutbound) SetChannelLimit(val OptInt) {
	s.ChannelLimit = val
}

// SetOutboundVoiceProfileID sets the value of OutboundVoiceProfileID.
func (s *CreateTexmlApplicationRequestOutbound) SetOutboundVoiceProfileID(val OptOutboundVoiceProfileId) {
	s.OutboundVoiceProfileID = val
}

// HTTP request method Telnyx should use when requesting the status_callback URL.
type CreateTexmlApplicationRequestStatusCallbackMethod string

const (
	CreateTexmlApplicationRequestStatusCallbackMethodGet  CreateTexmlApplicationRequestStatusCallbackMethod = "get"
	CreateTexmlApplicationRequestStatusCallbackMethodPost CreateTexmlApplicationRequestStatusCallbackMethod = "post"
)

// AllValues returns all CreateTexmlApplicationRequestStatusCallbackMethod values.
func (CreateTexmlApplicationRequestStatusCallbackMethod) AllValues() []CreateTexmlApplicationRequestStatusCallbackMethod {
	return []CreateTexmlApplicationRequestStatusCallbackMethod{
		CreateTexmlApplicationRequestStatusCallbackMethodGet,
		CreateTexmlApplicationRequestStatusCallbackMethodPost,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateTexmlApplicationRequestStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case CreateTexmlApplicationRequestStatusCallbackMethodGet:
		return []byte(s), nil
	case CreateTexmlApplicationRequestStatusCallbackMethodPost:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateTexmlApplicationRequestStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch CreateTexmlApplicationRequestStatusCallbackMethod(data) {
	case CreateTexmlApplicationRequestStatusCallbackMethodGet:
		*s = CreateTexmlApplicationRequestStatusCallbackMethodGet
		return nil
	case CreateTexmlApplicationRequestStatusCallbackMethodPost:
		*s = CreateTexmlApplicationRequestStatusCallbackMethodPost
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request method Telnyx will use to interact with your XML Translator webhooks. Either 'get' or
// 'post'.
type CreateTexmlApplicationRequestVoiceMethod string

const (
	CreateTexmlApplicationRequestVoiceMethodGet  CreateTexmlApplicationRequestVoiceMethod = "get"
	CreateTexmlApplicationRequestVoiceMethodPost CreateTexmlApplicationRequestVoiceMethod = "post"
)

// AllValues returns all CreateTexmlApplicationRequestVoiceMethod values.
func (CreateTexmlApplicationRequestVoiceMethod) AllValues() []CreateTexmlApplicationRequestVoiceMethod {
	return []CreateTexmlApplicationRequestVoiceMethod{
		CreateTexmlApplicationRequestVoiceMethodGet,
		CreateTexmlApplicationRequestVoiceMethodPost,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateTexmlApplicationRequestVoiceMethod) MarshalText() ([]byte, error) {
	switch s {
	case CreateTexmlApplicationRequestVoiceMethodGet:
		return []byte(s), nil
	case CreateTexmlApplicationRequestVoiceMethodPost:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateTexmlApplicationRequestVoiceMethod) UnmarshalText(data []byte) error {
	switch CreateTexmlApplicationRequestVoiceMethod(data) {
	case CreateTexmlApplicationRequestVoiceMethodGet:
		*s = CreateTexmlApplicationRequestVoiceMethodGet
		return nil
	case CreateTexmlApplicationRequestVoiceMethodPost:
		*s = CreateTexmlApplicationRequestVoiceMethodPost
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateTexmlApplicationUnauthorized ErrorResponse

func (*CreateTexmlApplicationUnauthorized) createTexmlApplicationRes() {}

type CreateTexmlApplicationUnprocessableEntity ErrorResponse

func (*CreateTexmlApplicationUnprocessableEntity) createTexmlApplicationRes() {}

type CreateUpdatePhoneNumbersJobAccepted struct {
	Data OptPhoneNumbersJob `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateUpdatePhoneNumbersJobAccepted) GetData() OptPhoneNumbersJob {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateUpdatePhoneNumbersJobAccepted) SetData(val OptPhoneNumbersJob) {
	s.Data = val
}

func (*CreateUpdatePhoneNumbersJobAccepted) createUpdatePhoneNumbersJobRes() {}

type CreateUpdatePhoneNumbersJobForbidden Errors

func (*CreateUpdatePhoneNumbersJobForbidden) createUpdatePhoneNumbersJobRes() {}

type CreateUpdatePhoneNumbersJobUnprocessableEntity Errors

func (*CreateUpdatePhoneNumbersJobUnprocessableEntity) createUpdatePhoneNumbersJobRes() {}

// The request body when creating a verification.
// Ref: #/components/schemas/CreateVerificationRequestCall
type CreateVerificationRequestCall struct {
	// +E164 formatted phone number.
	PhoneNumber string `json:"phone_number"`
	// The identifier of the associated Verify profile.
	VerifyProfileID uuid.UUID `json:"verify_profile_id"`
	// The number of seconds the verification code is valid for.
	TimeoutSecs OptInt `json:"timeout_secs"`
	// Must be less than the profile's default_verification_timeout_secs or timeout_secs, whichever is
	// lesser.
	CallTimeoutSecs OptInt `json:"call_timeout_secs"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *CreateVerificationRequestCall) GetPhoneNumber() string {
	return s.PhoneNumber
}

// GetVerifyProfileID returns the value of VerifyProfileID.
func (s *CreateVerificationRequestCall) GetVerifyProfileID() uuid.UUID {
	return s.VerifyProfileID
}

// GetTimeoutSecs returns the value of TimeoutSecs.
func (s *CreateVerificationRequestCall) GetTimeoutSecs() OptInt {
	return s.TimeoutSecs
}

// GetCallTimeoutSecs returns the value of CallTimeoutSecs.
func (s *CreateVerificationRequestCall) GetCallTimeoutSecs() OptInt {
	return s.CallTimeoutSecs
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *CreateVerificationRequestCall) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// SetVerifyProfileID sets the value of VerifyProfileID.
func (s *CreateVerificationRequestCall) SetVerifyProfileID(val uuid.UUID) {
	s.VerifyProfileID = val
}

// SetTimeoutSecs sets the value of TimeoutSecs.
func (s *CreateVerificationRequestCall) SetTimeoutSecs(val OptInt) {
	s.TimeoutSecs = val
}

// SetCallTimeoutSecs sets the value of CallTimeoutSecs.
func (s *CreateVerificationRequestCall) SetCallTimeoutSecs(val OptInt) {
	s.CallTimeoutSecs = val
}

// The request body when creating a verification.
// Ref: #/components/schemas/CreateVerificationRequestFlashcall
type CreateVerificationRequestFlashcall struct {
	// +E164 formatted phone number.
	PhoneNumber string `json:"phone_number"`
	// The identifier of the associated Verify profile.
	VerifyProfileID uuid.UUID `json:"verify_profile_id"`
	// The number of seconds the verification code is valid for.
	TimeoutSecs OptInt `json:"timeout_secs"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *CreateVerificationRequestFlashcall) GetPhoneNumber() string {
	return s.PhoneNumber
}

// GetVerifyProfileID returns the value of VerifyProfileID.
func (s *CreateVerificationRequestFlashcall) GetVerifyProfileID() uuid.UUID {
	return s.VerifyProfileID
}

// GetTimeoutSecs returns the value of TimeoutSecs.
func (s *CreateVerificationRequestFlashcall) GetTimeoutSecs() OptInt {
	return s.TimeoutSecs
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *CreateVerificationRequestFlashcall) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// SetVerifyProfileID sets the value of VerifyProfileID.
func (s *CreateVerificationRequestFlashcall) SetVerifyProfileID(val uuid.UUID) {
	s.VerifyProfileID = val
}

// SetTimeoutSecs sets the value of TimeoutSecs.
func (s *CreateVerificationRequestFlashcall) SetTimeoutSecs(val OptInt) {
	s.TimeoutSecs = val
}

// The request body when creating a verification.
// Ref: #/components/schemas/CreateVerificationRequestSMS
type CreateVerificationRequestSMS struct {
	// +E164 formatted phone number.
	PhoneNumber string `json:"phone_number"`
	// The identifier of the associated Verify profile.
	VerifyProfileID uuid.UUID `json:"verify_profile_id"`
	// The number of seconds the verification code is valid for.
	TimeoutSecs OptInt `json:"timeout_secs"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *CreateVerificationRequestSMS) GetPhoneNumber() string {
	return s.PhoneNumber
}

// GetVerifyProfileID returns the value of VerifyProfileID.
func (s *CreateVerificationRequestSMS) GetVerifyProfileID() uuid.UUID {
	return s.VerifyProfileID
}

// GetTimeoutSecs returns the value of TimeoutSecs.
func (s *CreateVerificationRequestSMS) GetTimeoutSecs() OptInt {
	return s.TimeoutSecs
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *CreateVerificationRequestSMS) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// SetVerifyProfileID sets the value of VerifyProfileID.
func (s *CreateVerificationRequestSMS) SetVerifyProfileID(val uuid.UUID) {
	s.VerifyProfileID = val
}

// SetTimeoutSecs sets the value of TimeoutSecs.
func (s *CreateVerificationRequestSMS) SetTimeoutSecs(val OptInt) {
	s.TimeoutSecs = val
}

// Ref: #/components/schemas/CreateVerificationResponse
type CreateVerificationResponse struct {
	Data Verification `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateVerificationResponse) GetData() Verification {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateVerificationResponse) SetData(val Verification) {
	s.Data = val
}

func (*CreateVerificationResponse) createFlashcallVerificationRes() {}
func (*CreateVerificationResponse) createVerificationCallRes()      {}
func (*CreateVerificationResponse) createVerificationSmsRes()       {}

// Ref: #/components/schemas/CreateVerifiedCallsDisplayProfileRequest
type CreateVerifiedCallsDisplayProfileRequest struct {
	// The ID of the business identity that owns the record.
	BusinessIdentityID uuid.UUID      `json:"business_identity_id"`
	Name               Name           `json:"name"`
	DisplayName        OptDisplayName `json:"display_name"`
	LogoURL            OptLogoURL     `json:"logo_url"`
	CallReasons        CallReasons    `json:"call_reasons"`
	PhoneNumbers       PhoneNumbers   `json:"phone_numbers"`
}

// GetBusinessIdentityID returns the value of BusinessIdentityID.
func (s *CreateVerifiedCallsDisplayProfileRequest) GetBusinessIdentityID() uuid.UUID {
	return s.BusinessIdentityID
}

// GetName returns the value of Name.
func (s *CreateVerifiedCallsDisplayProfileRequest) GetName() Name {
	return s.Name
}

// GetDisplayName returns the value of DisplayName.
func (s *CreateVerifiedCallsDisplayProfileRequest) GetDisplayName() OptDisplayName {
	return s.DisplayName
}

// GetLogoURL returns the value of LogoURL.
func (s *CreateVerifiedCallsDisplayProfileRequest) GetLogoURL() OptLogoURL {
	return s.LogoURL
}

// GetCallReasons returns the value of CallReasons.
func (s *CreateVerifiedCallsDisplayProfileRequest) GetCallReasons() CallReasons {
	return s.CallReasons
}

// GetPhoneNumbers returns the value of PhoneNumbers.
func (s *CreateVerifiedCallsDisplayProfileRequest) GetPhoneNumbers() PhoneNumbers {
	return s.PhoneNumbers
}

// SetBusinessIdentityID sets the value of BusinessIdentityID.
func (s *CreateVerifiedCallsDisplayProfileRequest) SetBusinessIdentityID(val uuid.UUID) {
	s.BusinessIdentityID = val
}

// SetName sets the value of Name.
func (s *CreateVerifiedCallsDisplayProfileRequest) SetName(val Name) {
	s.Name = val
}

// SetDisplayName sets the value of DisplayName.
func (s *CreateVerifiedCallsDisplayProfileRequest) SetDisplayName(val OptDisplayName) {
	s.DisplayName = val
}

// SetLogoURL sets the value of LogoURL.
func (s *CreateVerifiedCallsDisplayProfileRequest) SetLogoURL(val OptLogoURL) {
	s.LogoURL = val
}

// SetCallReasons sets the value of CallReasons.
func (s *CreateVerifiedCallsDisplayProfileRequest) SetCallReasons(val CallReasons) {
	s.CallReasons = val
}

// SetPhoneNumbers sets the value of PhoneNumbers.
func (s *CreateVerifiedCallsDisplayProfileRequest) SetPhoneNumbers(val PhoneNumbers) {
	s.PhoneNumbers = val
}

type CreateVerifiedNumberReq struct {
	PhoneNumber string `json:"phone_number"`
	// Verification method.
	VerificationMethod CreateVerifiedNumberReqVerificationMethod `json:"verification_method"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *CreateVerifiedNumberReq) GetPhoneNumber() string {
	return s.PhoneNumber
}

// GetVerificationMethod returns the value of VerificationMethod.
func (s *CreateVerifiedNumberReq) GetVerificationMethod() CreateVerifiedNumberReqVerificationMethod {
	return s.VerificationMethod
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *CreateVerifiedNumberReq) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// SetVerificationMethod sets the value of VerificationMethod.
func (s *CreateVerifiedNumberReq) SetVerificationMethod(val CreateVerifiedNumberReqVerificationMethod) {
	s.VerificationMethod = val
}

// Verification method.
type CreateVerifiedNumberReqVerificationMethod string

const (
	CreateVerifiedNumberReqVerificationMethodSMS  CreateVerifiedNumberReqVerificationMethod = "sms"
	CreateVerifiedNumberReqVerificationMethodCall CreateVerifiedNumberReqVerificationMethod = "call"
)

// AllValues returns all CreateVerifiedNumberReqVerificationMethod values.
func (CreateVerifiedNumberReqVerificationMethod) AllValues() []CreateVerifiedNumberReqVerificationMethod {
	return []CreateVerifiedNumberReqVerificationMethod{
		CreateVerifiedNumberReqVerificationMethodSMS,
		CreateVerifiedNumberReqVerificationMethodCall,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateVerifiedNumberReqVerificationMethod) MarshalText() ([]byte, error) {
	switch s {
	case CreateVerifiedNumberReqVerificationMethodSMS:
		return []byte(s), nil
	case CreateVerifiedNumberReqVerificationMethodCall:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateVerifiedNumberReqVerificationMethod) UnmarshalText(data []byte) error {
	switch CreateVerifiedNumberReqVerificationMethod(data) {
	case CreateVerifiedNumberReqVerificationMethodSMS:
		*s = CreateVerifiedNumberReqVerificationMethodSMS
		return nil
	case CreateVerifiedNumberReqVerificationMethodCall:
		*s = CreateVerifiedNumberReqVerificationMethodCall
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CreateVerifiedNumberResponse
type CreateVerifiedNumberResponse struct {
	PhoneNumber        OptString `json:"phone_number"`
	VerificationMethod OptString `json:"verification_method"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *CreateVerifiedNumberResponse) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetVerificationMethod returns the value of VerificationMethod.
func (s *CreateVerifiedNumberResponse) GetVerificationMethod() OptString {
	return s.VerificationMethod
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *CreateVerifiedNumberResponse) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetVerificationMethod sets the value of VerificationMethod.
func (s *CreateVerifiedNumberResponse) SetVerificationMethod(val OptString) {
	s.VerificationMethod = val
}

func (*CreateVerifiedNumberResponse) createVerifiedNumberRes() {}

// Ref: #/components/schemas/CreateVerifyProfileCallRequest
type CreateVerifyProfileCallRequest struct {
	// The message template identifier selected from /verify_profiles/templates.
	MessagingTemplateID OptUUID `json:"messaging_template_id"`
	// The name that identifies the application requesting 2fa in the verification message.
	AppName OptString `json:"app_name"`
	// Enabled country destinations to send verification codes. The elements in the list must be valid
	// ISO 3166-1 alpha-2 country codes. If set to `["*"]`, all destinations will be allowed.
	WhitelistedDestinations []string `json:"whitelisted_destinations"`
	// For every request that is initiated via this Verify profile, this sets the number of seconds
	// before a verification request code expires. Once the verification request expires, the user cannot
	// use the code to verify their identity.
	DefaultVerificationTimeoutSecs OptInt `json:"default_verification_timeout_secs"`
}

// GetMessagingTemplateID returns the value of MessagingTemplateID.
func (s *CreateVerifyProfileCallRequest) GetMessagingTemplateID() OptUUID {
	return s.MessagingTemplateID
}

// GetAppName returns the value of AppName.
func (s *CreateVerifyProfileCallRequest) GetAppName() OptString {
	return s.AppName
}

// GetWhitelistedDestinations returns the value of WhitelistedDestinations.
func (s *CreateVerifyProfileCallRequest) GetWhitelistedDestinations() []string {
	return s.WhitelistedDestinations
}

// GetDefaultVerificationTimeoutSecs returns the value of DefaultVerificationTimeoutSecs.
func (s *CreateVerifyProfileCallRequest) GetDefaultVerificationTimeoutSecs() OptInt {
	return s.DefaultVerificationTimeoutSecs
}

// SetMessagingTemplateID sets the value of MessagingTemplateID.
func (s *CreateVerifyProfileCallRequest) SetMessagingTemplateID(val OptUUID) {
	s.MessagingTemplateID = val
}

// SetAppName sets the value of AppName.
func (s *CreateVerifyProfileCallRequest) SetAppName(val OptString) {
	s.AppName = val
}

// SetWhitelistedDestinations sets the value of WhitelistedDestinations.
func (s *CreateVerifyProfileCallRequest) SetWhitelistedDestinations(val []string) {
	s.WhitelistedDestinations = val
}

// SetDefaultVerificationTimeoutSecs sets the value of DefaultVerificationTimeoutSecs.
func (s *CreateVerifyProfileCallRequest) SetDefaultVerificationTimeoutSecs(val OptInt) {
	s.DefaultVerificationTimeoutSecs = val
}

// Ref: #/components/schemas/CreateVerifyProfileFlashcallRequest
type CreateVerifyProfileFlashcallRequest struct {
	// Enabled country destinations to send verification codes. The elements in the list must be valid
	// ISO 3166-1 alpha-2 country codes. If set to `["*"]`, all destinations will be allowed.
	WhitelistedDestinations []string `json:"whitelisted_destinations"`
	// For every request that is initiated via this Verify profile, this sets the number of seconds
	// before a verification request code expires. Once the verification request expires, the user cannot
	// use the code to verify their identity.
	DefaultVerificationTimeoutSecs OptInt `json:"default_verification_timeout_secs"`
}

// GetWhitelistedDestinations returns the value of WhitelistedDestinations.
func (s *CreateVerifyProfileFlashcallRequest) GetWhitelistedDestinations() []string {
	return s.WhitelistedDestinations
}

// GetDefaultVerificationTimeoutSecs returns the value of DefaultVerificationTimeoutSecs.
func (s *CreateVerifyProfileFlashcallRequest) GetDefaultVerificationTimeoutSecs() OptInt {
	return s.DefaultVerificationTimeoutSecs
}

// SetWhitelistedDestinations sets the value of WhitelistedDestinations.
func (s *CreateVerifyProfileFlashcallRequest) SetWhitelistedDestinations(val []string) {
	s.WhitelistedDestinations = val
}

// SetDefaultVerificationTimeoutSecs sets the value of DefaultVerificationTimeoutSecs.
func (s *CreateVerifyProfileFlashcallRequest) SetDefaultVerificationTimeoutSecs(val OptInt) {
	s.DefaultVerificationTimeoutSecs = val
}

type CreateVerifyProfileReq struct {
	Name               string                                 `json:"name"`
	WebhookURL         OptString                              `json:"webhook_url"`
	WebhookFailoverURL OptString                              `json:"webhook_failover_url"`
	SMS                OptCreateVerifyProfileSMSRequest       `json:"sms"`
	Call               OptCreateVerifyProfileCallRequest      `json:"call"`
	Flashcall          OptCreateVerifyProfileFlashcallRequest `json:"flashcall"`
	Language           OptString                              `json:"language"`
}

// GetName returns the value of Name.
func (s *CreateVerifyProfileReq) GetName() string {
	return s.Name
}

// GetWebhookURL returns the value of WebhookURL.
func (s *CreateVerifyProfileReq) GetWebhookURL() OptString {
	return s.WebhookURL
}

// GetWebhookFailoverURL returns the value of WebhookFailoverURL.
func (s *CreateVerifyProfileReq) GetWebhookFailoverURL() OptString {
	return s.WebhookFailoverURL
}

// GetSMS returns the value of SMS.
func (s *CreateVerifyProfileReq) GetSMS() OptCreateVerifyProfileSMSRequest {
	return s.SMS
}

// GetCall returns the value of Call.
func (s *CreateVerifyProfileReq) GetCall() OptCreateVerifyProfileCallRequest {
	return s.Call
}

// GetFlashcall returns the value of Flashcall.
func (s *CreateVerifyProfileReq) GetFlashcall() OptCreateVerifyProfileFlashcallRequest {
	return s.Flashcall
}

// GetLanguage returns the value of Language.
func (s *CreateVerifyProfileReq) GetLanguage() OptString {
	return s.Language
}

// SetName sets the value of Name.
func (s *CreateVerifyProfileReq) SetName(val string) {
	s.Name = val
}

// SetWebhookURL sets the value of WebhookURL.
func (s *CreateVerifyProfileReq) SetWebhookURL(val OptString) {
	s.WebhookURL = val
}

// SetWebhookFailoverURL sets the value of WebhookFailoverURL.
func (s *CreateVerifyProfileReq) SetWebhookFailoverURL(val OptString) {
	s.WebhookFailoverURL = val
}

// SetSMS sets the value of SMS.
func (s *CreateVerifyProfileReq) SetSMS(val OptCreateVerifyProfileSMSRequest) {
	s.SMS = val
}

// SetCall sets the value of Call.
func (s *CreateVerifyProfileReq) SetCall(val OptCreateVerifyProfileCallRequest) {
	s.Call = val
}

// SetFlashcall sets the value of Flashcall.
func (s *CreateVerifyProfileReq) SetFlashcall(val OptCreateVerifyProfileFlashcallRequest) {
	s.Flashcall = val
}

// SetLanguage sets the value of Language.
func (s *CreateVerifyProfileReq) SetLanguage(val OptString) {
	s.Language = val
}

// Ref: #/components/schemas/CreateVerifyProfileSMSRequest
type CreateVerifyProfileSMSRequest struct {
	// The message template identifier selected from /verify_profiles/templates.
	MessagingTemplateID OptUUID `json:"messaging_template_id"`
	// The name that identifies the application requesting 2fa in the verification message.
	AppName OptString `json:"app_name"`
	// The alphanumeric sender ID to use when sending to destinations that require an alphanumeric sender
	// ID.
	AlphaSender OptNilString `json:"alpha_sender"`
	// Enabled country destinations to send verification codes. The elements in the list must be valid
	// ISO 3166-1 alpha-2 country codes. If set to `["*"]`, all destinations will be allowed.
	WhitelistedDestinations []string `json:"whitelisted_destinations"`
	// For every request that is initiated via this Verify profile, this sets the number of seconds
	// before a verification request code expires. Once the verification request expires, the user cannot
	// use the code to verify their identity.
	DefaultVerificationTimeoutSecs OptInt `json:"default_verification_timeout_secs"`
}

// GetMessagingTemplateID returns the value of MessagingTemplateID.
func (s *CreateVerifyProfileSMSRequest) GetMessagingTemplateID() OptUUID {
	return s.MessagingTemplateID
}

// GetAppName returns the value of AppName.
func (s *CreateVerifyProfileSMSRequest) GetAppName() OptString {
	return s.AppName
}

// GetAlphaSender returns the value of AlphaSender.
func (s *CreateVerifyProfileSMSRequest) GetAlphaSender() OptNilString {
	return s.AlphaSender
}

// GetWhitelistedDestinations returns the value of WhitelistedDestinations.
func (s *CreateVerifyProfileSMSRequest) GetWhitelistedDestinations() []string {
	return s.WhitelistedDestinations
}

// GetDefaultVerificationTimeoutSecs returns the value of DefaultVerificationTimeoutSecs.
func (s *CreateVerifyProfileSMSRequest) GetDefaultVerificationTimeoutSecs() OptInt {
	return s.DefaultVerificationTimeoutSecs
}

// SetMessagingTemplateID sets the value of MessagingTemplateID.
func (s *CreateVerifyProfileSMSRequest) SetMessagingTemplateID(val OptUUID) {
	s.MessagingTemplateID = val
}

// SetAppName sets the value of AppName.
func (s *CreateVerifyProfileSMSRequest) SetAppName(val OptString) {
	s.AppName = val
}

// SetAlphaSender sets the value of AlphaSender.
func (s *CreateVerifyProfileSMSRequest) SetAlphaSender(val OptNilString) {
	s.AlphaSender = val
}

// SetWhitelistedDestinations sets the value of WhitelistedDestinations.
func (s *CreateVerifyProfileSMSRequest) SetWhitelistedDestinations(val []string) {
	s.WhitelistedDestinations = val
}

// SetDefaultVerificationTimeoutSecs sets the value of DefaultVerificationTimeoutSecs.
func (s *CreateVerifyProfileSMSRequest) SetDefaultVerificationTimeoutSecs(val OptInt) {
	s.DefaultVerificationTimeoutSecs = val
}

// CreateVoiceProfileNotFound is response for CreateVoiceProfile operation.
type CreateVoiceProfileNotFound struct{}

func (*CreateVoiceProfileNotFound) createVoiceProfileRes() {}

// CreateVoiceProfileUnauthorized is response for CreateVoiceProfile operation.
type CreateVoiceProfileUnauthorized struct{}

func (*CreateVoiceProfileUnauthorized) createVoiceProfileRes() {}

// CreateVoiceProfileUnprocessableEntity is response for CreateVoiceProfile operation.
type CreateVoiceProfileUnprocessableEntity struct{}

func (*CreateVoiceProfileUnprocessableEntity) createVoiceProfileRes() {}

type CreatedAt string

type Credentials string

// Ref: #/components/schemas/CredentialsResponse
type CredentialsResponse struct {
	Data CustomStorageConfiguration `json:"data"`
	// Uniquely identifies a Telnyx application (Call Control, TeXML) or Sip connection resource.
	ConnectionID string     `json:"connection_id"`
	RecordType   RecordType `json:"record_type"`
}

// GetData returns the value of Data.
func (s *CredentialsResponse) GetData() CustomStorageConfiguration {
	return s.Data
}

// GetConnectionID returns the value of ConnectionID.
func (s *CredentialsResponse) GetConnectionID() string {
	return s.ConnectionID
}

// GetRecordType returns the value of RecordType.
func (s *CredentialsResponse) GetRecordType() RecordType {
	return s.RecordType
}

// SetData sets the value of Data.
func (s *CredentialsResponse) SetData(val CustomStorageConfiguration) {
	s.Data = val
}

// SetConnectionID sets the value of ConnectionID.
func (s *CredentialsResponse) SetConnectionID(val string) {
	s.ConnectionID = val
}

// SetRecordType sets the value of RecordType.
func (s *CredentialsResponse) SetRecordType(val RecordType) {
	s.RecordType = val
}

func (*CredentialsResponse) createCustomStorageCredentialsRes() {}
func (*CredentialsResponse) getCustomStorageCredentialsRes()    {}
func (*CredentialsResponse) updateCustomStorageCredentialsRes() {}

// Ref: #/components/schemas/CsvDownload
type CsvDownload struct {
	// Identifies the resource.
	ID OptString `json:"id"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	// The URL at which the CSV file can be retrieved.
	URL OptString `json:"url"`
	// Indicates the completion level of the CSV report. Only complete CSV download requests will be able
	// to be retrieved.
	Status OptCsvDownloadStatus `json:"status"`
}

// GetID returns the value of ID.
func (s *CsvDownload) GetID() OptString {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *CsvDownload) GetRecordType() OptString {
	return s.RecordType
}

// GetURL returns the value of URL.
func (s *CsvDownload) GetURL() OptString {
	return s.URL
}

// GetStatus returns the value of Status.
func (s *CsvDownload) GetStatus() OptCsvDownloadStatus {
	return s.Status
}

// SetID sets the value of ID.
func (s *CsvDownload) SetID(val OptString) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *CsvDownload) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetURL sets the value of URL.
func (s *CsvDownload) SetURL(val OptString) {
	s.URL = val
}

// SetStatus sets the value of Status.
func (s *CsvDownload) SetStatus(val OptCsvDownloadStatus) {
	s.Status = val
}

type CsvDownloadResponse struct {
	Data []CsvDownload `json:"data"`
}

// GetData returns the value of Data.
func (s *CsvDownloadResponse) GetData() []CsvDownload {
	return s.Data
}

// SetData sets the value of Data.
func (s *CsvDownloadResponse) SetData(val []CsvDownload) {
	s.Data = val
}

func (*CsvDownloadResponse) createCsvDownloadRes() {}
func (*CsvDownloadResponse) getCsvDownloadRes()    {}

// Indicates the completion level of the CSV report. Only complete CSV download requests will be able
// to be retrieved.
type CsvDownloadStatus string

const (
	CsvDownloadStatusPending  CsvDownloadStatus = "pending"
	CsvDownloadStatusComplete CsvDownloadStatus = "complete"
	CsvDownloadStatusFailed   CsvDownloadStatus = "failed"
	CsvDownloadStatusExpired  CsvDownloadStatus = "expired"
)

// AllValues returns all CsvDownloadStatus values.
func (CsvDownloadStatus) AllValues() []CsvDownloadStatus {
	return []CsvDownloadStatus{
		CsvDownloadStatusPending,
		CsvDownloadStatusComplete,
		CsvDownloadStatusFailed,
		CsvDownloadStatusExpired,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CsvDownloadStatus) MarshalText() ([]byte, error) {
	switch s {
	case CsvDownloadStatusPending:
		return []byte(s), nil
	case CsvDownloadStatusComplete:
		return []byte(s), nil
	case CsvDownloadStatusFailed:
		return []byte(s), nil
	case CsvDownloadStatusExpired:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CsvDownloadStatus) UnmarshalText(data []byte) error {
	switch CsvDownloadStatus(data) {
	case CsvDownloadStatusPending:
		*s = CsvDownloadStatusPending
		return nil
	case CsvDownloadStatusComplete:
		*s = CsvDownloadStatusComplete
		return nil
	case CsvDownloadStatusFailed:
		*s = CsvDownloadStatusFailed
		return nil
	case CsvDownloadStatusExpired:
		*s = CsvDownloadStatusExpired
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Cursor
type Cursor struct {
	// Opaque identifier of next page.
	After OptString `json:"after"`
	// Opaque identifier of previous page.
	Before OptString `json:"before"`
}

// GetAfter returns the value of After.
func (s *Cursor) GetAfter() OptString {
	return s.After
}

// GetBefore returns the value of Before.
func (s *Cursor) GetBefore() OptString {
	return s.Before
}

// SetAfter sets the value of After.
func (s *Cursor) SetAfter(val OptString) {
	s.After = val
}

// SetBefore sets the value of Before.
func (s *Cursor) SetBefore(val OptString) {
	s.Before = val
}

// Ref: #/components/schemas/CursorPaginationMeta
type CursorPaginationMeta struct {
	Cursors OptCursor `json:"cursors"`
	// Path to next page.
	Next OptString `json:"next"`
	// Path to previous page.
	Previous OptString `json:"previous"`
}

// GetCursors returns the value of Cursors.
func (s *CursorPaginationMeta) GetCursors() OptCursor {
	return s.Cursors
}

// GetNext returns the value of Next.
func (s *CursorPaginationMeta) GetNext() OptString {
	return s.Next
}

// GetPrevious returns the value of Previous.
func (s *CursorPaginationMeta) GetPrevious() OptString {
	return s.Previous
}

// SetCursors sets the value of Cursors.
func (s *CursorPaginationMeta) SetCursors(val OptCursor) {
	s.Cursors = val
}

// SetNext sets the value of Next.
func (s *CursorPaginationMeta) SetNext(val OptString) {
	s.Next = val
}

// SetPrevious sets the value of Previous.
func (s *CursorPaginationMeta) SetPrevious(val OptString) {
	s.Previous = val
}

// Ref: #/components/schemas/CustomSipHeader
type CustomSipHeader struct {
	// The name of the header to add.
	Name string `json:"name"`
	// The value of the header.
	Value string `json:"value"`
}

// GetName returns the value of Name.
func (s *CustomSipHeader) GetName() string {
	return s.Name
}

// GetValue returns the value of Value.
func (s *CustomSipHeader) GetValue() string {
	return s.Value
}

// SetName sets the value of Name.
func (s *CustomSipHeader) SetName(val string) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *CustomSipHeader) SetValue(val string) {
	s.Value = val
}

// Ref: #/components/schemas/CustomStorageConfiguration
type CustomStorageConfiguration struct {
	Backend       CustomStorageConfigurationBackend       `json:"backend"`
	Configuration CustomStorageConfigurationConfiguration `json:"configuration"`
}

// GetBackend returns the value of Backend.
func (s *CustomStorageConfiguration) GetBackend() CustomStorageConfigurationBackend {
	return s.Backend
}

// GetConfiguration returns the value of Configuration.
func (s *CustomStorageConfiguration) GetConfiguration() CustomStorageConfigurationConfiguration {
	return s.Configuration
}

// SetBackend sets the value of Backend.
func (s *CustomStorageConfiguration) SetBackend(val CustomStorageConfigurationBackend) {
	s.Backend = val
}

// SetConfiguration sets the value of Configuration.
func (s *CustomStorageConfiguration) SetConfiguration(val CustomStorageConfigurationConfiguration) {
	s.Configuration = val
}

type CustomStorageConfigurationBackend string

const (
	CustomStorageConfigurationBackendGcs   CustomStorageConfigurationBackend = "gcs"
	CustomStorageConfigurationBackendS3    CustomStorageConfigurationBackend = "s3"
	CustomStorageConfigurationBackendAzure CustomStorageConfigurationBackend = "azure"
)

// AllValues returns all CustomStorageConfigurationBackend values.
func (CustomStorageConfigurationBackend) AllValues() []CustomStorageConfigurationBackend {
	return []CustomStorageConfigurationBackend{
		CustomStorageConfigurationBackendGcs,
		CustomStorageConfigurationBackendS3,
		CustomStorageConfigurationBackendAzure,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomStorageConfigurationBackend) MarshalText() ([]byte, error) {
	switch s {
	case CustomStorageConfigurationBackendGcs:
		return []byte(s), nil
	case CustomStorageConfigurationBackendS3:
		return []byte(s), nil
	case CustomStorageConfigurationBackendAzure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomStorageConfigurationBackend) UnmarshalText(data []byte) error {
	switch CustomStorageConfigurationBackend(data) {
	case CustomStorageConfigurationBackendGcs:
		*s = CustomStorageConfigurationBackendGcs
		return nil
	case CustomStorageConfigurationBackendS3:
		*s = CustomStorageConfigurationBackendS3
		return nil
	case CustomStorageConfigurationBackendAzure:
		*s = CustomStorageConfigurationBackendAzure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// CustomStorageConfigurationConfiguration represents sum type.
type CustomStorageConfigurationConfiguration struct {
	Type                   CustomStorageConfigurationConfigurationType // switch on this field
	GCSConfigurationData   GCSConfigurationData
	S3ConfigurationData    S3ConfigurationData
	AzureConfigurationData AzureConfigurationData
}

// CustomStorageConfigurationConfigurationType is oneOf type of CustomStorageConfigurationConfiguration.
type CustomStorageConfigurationConfigurationType string

// Possible values for CustomStorageConfigurationConfigurationType.
const (
	GCSConfigurationDataCustomStorageConfigurationConfiguration   CustomStorageConfigurationConfigurationType = "GCSConfigurationData"
	S3ConfigurationDataCustomStorageConfigurationConfiguration    CustomStorageConfigurationConfigurationType = "S3ConfigurationData"
	AzureConfigurationDataCustomStorageConfigurationConfiguration CustomStorageConfigurationConfigurationType = "AzureConfigurationData"
)

// IsGCSConfigurationData reports whether CustomStorageConfigurationConfiguration is GCSConfigurationData.
func (s CustomStorageConfigurationConfiguration) IsGCSConfigurationData() bool {
	return s.Type == GCSConfigurationDataCustomStorageConfigurationConfiguration
}

// IsS3ConfigurationData reports whether CustomStorageConfigurationConfiguration is S3ConfigurationData.
func (s CustomStorageConfigurationConfiguration) IsS3ConfigurationData() bool {
	return s.Type == S3ConfigurationDataCustomStorageConfigurationConfiguration
}

// IsAzureConfigurationData reports whether CustomStorageConfigurationConfiguration is AzureConfigurationData.
func (s CustomStorageConfigurationConfiguration) IsAzureConfigurationData() bool {
	return s.Type == AzureConfigurationDataCustomStorageConfigurationConfiguration
}

// SetGCSConfigurationData sets CustomStorageConfigurationConfiguration to GCSConfigurationData.
func (s *CustomStorageConfigurationConfiguration) SetGCSConfigurationData(v GCSConfigurationData) {
	s.Type = GCSConfigurationDataCustomStorageConfigurationConfiguration
	s.GCSConfigurationData = v
}

// GetGCSConfigurationData returns GCSConfigurationData and true boolean if CustomStorageConfigurationConfiguration is GCSConfigurationData.
func (s CustomStorageConfigurationConfiguration) GetGCSConfigurationData() (v GCSConfigurationData, ok bool) {
	if !s.IsGCSConfigurationData() {
		return v, false
	}
	return s.GCSConfigurationData, true
}

// NewGCSConfigurationDataCustomStorageConfigurationConfiguration returns new CustomStorageConfigurationConfiguration from GCSConfigurationData.
func NewGCSConfigurationDataCustomStorageConfigurationConfiguration(v GCSConfigurationData) CustomStorageConfigurationConfiguration {
	var s CustomStorageConfigurationConfiguration
	s.SetGCSConfigurationData(v)
	return s
}

// SetS3ConfigurationData sets CustomStorageConfigurationConfiguration to S3ConfigurationData.
func (s *CustomStorageConfigurationConfiguration) SetS3ConfigurationData(v S3ConfigurationData) {
	s.Type = S3ConfigurationDataCustomStorageConfigurationConfiguration
	s.S3ConfigurationData = v
}

// GetS3ConfigurationData returns S3ConfigurationData and true boolean if CustomStorageConfigurationConfiguration is S3ConfigurationData.
func (s CustomStorageConfigurationConfiguration) GetS3ConfigurationData() (v S3ConfigurationData, ok bool) {
	if !s.IsS3ConfigurationData() {
		return v, false
	}
	return s.S3ConfigurationData, true
}

// NewS3ConfigurationDataCustomStorageConfigurationConfiguration returns new CustomStorageConfigurationConfiguration from S3ConfigurationData.
func NewS3ConfigurationDataCustomStorageConfigurationConfiguration(v S3ConfigurationData) CustomStorageConfigurationConfiguration {
	var s CustomStorageConfigurationConfiguration
	s.SetS3ConfigurationData(v)
	return s
}

// SetAzureConfigurationData sets CustomStorageConfigurationConfiguration to AzureConfigurationData.
func (s *CustomStorageConfigurationConfiguration) SetAzureConfigurationData(v AzureConfigurationData) {
	s.Type = AzureConfigurationDataCustomStorageConfigurationConfiguration
	s.AzureConfigurationData = v
}

// GetAzureConfigurationData returns AzureConfigurationData and true boolean if CustomStorageConfigurationConfiguration is AzureConfigurationData.
func (s CustomStorageConfigurationConfiguration) GetAzureConfigurationData() (v AzureConfigurationData, ok bool) {
	if !s.IsAzureConfigurationData() {
		return v, false
	}
	return s.AzureConfigurationData, true
}

// NewAzureConfigurationDataCustomStorageConfigurationConfiguration returns new CustomStorageConfigurationConfiguration from AzureConfigurationData.
func NewAzureConfigurationDataCustomStorageConfigurationConfiguration(v AzureConfigurationData) CustomStorageConfigurationConfiguration {
	var s CustomStorageConfigurationConfiguration
	s.SetAzureConfigurationData(v)
	return s
}

type DateTimeRFC2822 string

// Merged schema.
// Ref: #/components/schemas/DefaultGateway
type DefaultGateway struct {
	// Identifies the resource.
	ID OptUUID `json:"id"`
	// Merged property.
	RecordType OptString `json:"record_type"`
	// ISO 8601 formatted date-time indicating when the resource was created.
	CreatedAt OptString `json:"created_at"`
	// ISO 8601 formatted date-time indicating when the resource was updated.
	UpdatedAt OptString `json:"updated_at"`
	// Network ID.
	NetworkID OptUUID `json:"network_id"`
	// Wireguard peer ID.
	WireguardPeerID OptUUID            `json:"wireguard_peer_id"`
	Status          OptInterfaceStatus `json:"status"`
}

// GetID returns the value of ID.
func (s *DefaultGateway) GetID() OptUUID {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *DefaultGateway) GetRecordType() OptString {
	return s.RecordType
}

// GetCreatedAt returns the value of CreatedAt.
func (s *DefaultGateway) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *DefaultGateway) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetNetworkID returns the value of NetworkID.
func (s *DefaultGateway) GetNetworkID() OptUUID {
	return s.NetworkID
}

// GetWireguardPeerID returns the value of WireguardPeerID.
func (s *DefaultGateway) GetWireguardPeerID() OptUUID {
	return s.WireguardPeerID
}

// GetStatus returns the value of Status.
func (s *DefaultGateway) GetStatus() OptInterfaceStatus {
	return s.Status
}

// SetID sets the value of ID.
func (s *DefaultGateway) SetID(val OptUUID) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *DefaultGateway) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *DefaultGateway) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *DefaultGateway) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetNetworkID sets the value of NetworkID.
func (s *DefaultGateway) SetNetworkID(val OptUUID) {
	s.NetworkID = val
}

// SetWireguardPeerID sets the value of WireguardPeerID.
func (s *DefaultGateway) SetWireguardPeerID(val OptUUID) {
	s.WireguardPeerID = val
}

// SetStatus sets the value of Status.
func (s *DefaultGateway) SetStatus(val OptInterfaceStatus) {
	s.Status = val
}

type DefaultGatewayResponse struct {
	Data []DefaultGateway  `json:"data"`
	Meta OptPaginationMeta `json:"meta"`
}

// GetData returns the value of Data.
func (s *DefaultGatewayResponse) GetData() []DefaultGateway {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *DefaultGatewayResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *DefaultGatewayResponse) SetData(val []DefaultGateway) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *DefaultGatewayResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*DefaultGatewayResponse) createDefaultGatewayRes() {}
func (*DefaultGatewayResponse) deleteDefaultGatewayRes() {}
func (*DefaultGatewayResponse) getDefaultGatewayRes()    {}

// DeleteAdditionalDocumentNoContent is response for DeleteAdditionalDocument operation.
type DeleteAdditionalDocumentNoContent struct{}

func (*DeleteAdditionalDocumentNoContent) deleteAdditionalDocumentRes() {}

// DeleteAdditionalDocumentNotFound is response for DeleteAdditionalDocument operation.
type DeleteAdditionalDocumentNotFound struct{}

func (*DeleteAdditionalDocumentNotFound) deleteAdditionalDocumentRes() {}

// DeleteAdditionalDocumentUnauthorized is response for DeleteAdditionalDocument operation.
type DeleteAdditionalDocumentUnauthorized struct{}

func (*DeleteAdditionalDocumentUnauthorized) deleteAdditionalDocumentRes() {}

// DeleteCallControlApplicationNotFound is response for DeleteCallControlApplication operation.
type DeleteCallControlApplicationNotFound struct{}

func (*DeleteCallControlApplicationNotFound) deleteCallControlApplicationRes() {}

// DeleteCallControlApplicationUnprocessableEntity is response for DeleteCallControlApplication operation.
type DeleteCallControlApplicationUnprocessableEntity struct{}

func (*DeleteCallControlApplicationUnprocessableEntity) deleteCallControlApplicationRes() {}

// DeleteCustomStorageCredentialsNoContent is response for DeleteCustomStorageCredentials operation.
type DeleteCustomStorageCredentialsNoContent struct{}

func (*DeleteCustomStorageCredentialsNoContent) deleteCustomStorageCredentialsRes() {}

// DeleteExternalConnectionLogMessageNotFound is response for DeleteExternalConnectionLogMessage operation.
type DeleteExternalConnectionLogMessageNotFound struct{}

func (*DeleteExternalConnectionLogMessageNotFound) deleteExternalConnectionLogMessageRes() {}

type DeleteExternalConnectionLogMessageOK struct {
	// Describes wether or not the operation was successful.
	Success OptBool `json:"success"`
}

// GetSuccess returns the value of Success.
func (s *DeleteExternalConnectionLogMessageOK) GetSuccess() OptBool {
	return s.Success
}

// SetSuccess sets the value of Success.
func (s *DeleteExternalConnectionLogMessageOK) SetSuccess(val OptBool) {
	s.Success = val
}

func (*DeleteExternalConnectionLogMessageOK) deleteExternalConnectionLogMessageRes() {}

// DeleteExternalConnectionLogMessageUnauthorized is response for DeleteExternalConnectionLogMessage operation.
type DeleteExternalConnectionLogMessageUnauthorized struct{}

func (*DeleteExternalConnectionLogMessageUnauthorized) deleteExternalConnectionLogMessageRes() {}

// DeleteLoaConfigurationInternalServerError is response for DeleteLoaConfiguration operation.
type DeleteLoaConfigurationInternalServerError struct{}

func (*DeleteLoaConfigurationInternalServerError) deleteLoaConfigurationRes() {}

// DeleteLoaConfigurationNoContent is response for DeleteLoaConfiguration operation.
type DeleteLoaConfigurationNoContent struct{}

func (*DeleteLoaConfigurationNoContent) deleteLoaConfigurationRes() {}

// DeleteLoaConfigurationNotFound is response for DeleteLoaConfiguration operation.
type DeleteLoaConfigurationNotFound struct{}

func (*DeleteLoaConfigurationNotFound) deleteLoaConfigurationRes() {}

type DeleteNotificationChannelOK struct {
	Data OptNotificationChannel `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteNotificationChannelOK) GetData() OptNotificationChannel {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteNotificationChannelOK) SetData(val OptNotificationChannel) {
	s.Data = val
}

func (*DeleteNotificationChannelOK) deleteNotificationChannelRes() {}

// DeleteOutboundVoiceProfileNotFound is response for DeleteOutboundVoiceProfile operation.
type DeleteOutboundVoiceProfileNotFound struct{}

func (*DeleteOutboundVoiceProfileNotFound) deleteOutboundVoiceProfileRes() {}

// DeleteOutboundVoiceProfileUnauthorized is response for DeleteOutboundVoiceProfile operation.
type DeleteOutboundVoiceProfileUnauthorized struct{}

func (*DeleteOutboundVoiceProfileUnauthorized) deleteOutboundVoiceProfileRes() {}

// DeleteOutboundVoiceProfileUnprocessableEntity is response for DeleteOutboundVoiceProfile operation.
type DeleteOutboundVoiceProfileUnprocessableEntity struct{}

func (*DeleteOutboundVoiceProfileUnprocessableEntity) deleteOutboundVoiceProfileRes() {}

type DeletePhoneNumberResponse struct {
	Data OptPhoneNumberDeletedDetailed `json:"data"`
}

// GetData returns the value of Data.
func (s *DeletePhoneNumberResponse) GetData() OptPhoneNumberDeletedDetailed {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeletePhoneNumberResponse) SetData(val OptPhoneNumberDeletedDetailed) {
	s.Data = val
}

func (*DeletePhoneNumberResponse) deletePhoneNumberRes() {}

// DeletePortingOrderNoContent is response for DeletePortingOrder operation.
type DeletePortingOrderNoContent struct{}

func (*DeletePortingOrderNoContent) deletePortingOrderRes() {}

// DeletePortingOrderUnauthorized is response for DeletePortingOrder operation.
type DeletePortingOrderUnauthorized struct{}

func (*DeletePortingOrderUnauthorized) deletePortingOrderRes() {}

// DeletePortingOrderUnprocessableEntity is response for DeletePortingOrder operation.
type DeletePortingOrderUnprocessableEntity struct{}

func (*DeletePortingOrderUnprocessableEntity) deletePortingOrderRes() {}

type DeletePrivateWirelessGatewayResponse struct {
	Data OptPrivateWirelessGateway `json:"data"`
}

// GetData returns the value of Data.
func (s *DeletePrivateWirelessGatewayResponse) GetData() OptPrivateWirelessGateway {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeletePrivateWirelessGatewayResponse) SetData(val OptPrivateWirelessGateway) {
	s.Data = val
}

func (*DeletePrivateWirelessGatewayResponse) deleteWirelessGatewayRes() {}

// DeleteRecordingsNoContent is response for DeleteRecordings operation.
type DeleteRecordingsNoContent struct{}

func (*DeleteRecordingsNoContent) deleteRecordingsRes() {}

// DeleteRoomRecordingNoContent is response for DeleteRoomRecording operation.
type DeleteRoomRecordingNoContent struct{}

func (*DeleteRoomRecordingNoContent) deleteRoomRecordingRes() {}

// DeleteTeXMLCallRecordingNoContent is response for DeleteTeXMLCallRecording operation.
type DeleteTeXMLCallRecordingNoContent struct{}

func (*DeleteTeXMLCallRecordingNoContent) deleteTeXMLCallRecordingRes() {}

// DeleteTeXMLRecordingTranscriptionNoContent is response for DeleteTeXMLRecordingTranscription operation.
type DeleteTeXMLRecordingTranscriptionNoContent struct{}

func (*DeleteTeXMLRecordingTranscriptionNoContent) deleteTeXMLRecordingTranscriptionRes() {}

// DeleteTelephonyCredentialNotFound is response for DeleteTelephonyCredential operation.
type DeleteTelephonyCredentialNotFound struct{}

func (*DeleteTelephonyCredentialNotFound) deleteTelephonyCredentialRes() {}

// DeleteTelephonyCredentialUnauthorized is response for DeleteTelephonyCredential operation.
type DeleteTelephonyCredentialUnauthorized struct{}

func (*DeleteTelephonyCredentialUnauthorized) deleteTelephonyCredentialRes() {}

// DeleteTelephonyCredentialUnprocessableEntity is response for DeleteTelephonyCredential operation.
type DeleteTelephonyCredentialUnprocessableEntity struct{}

func (*DeleteTelephonyCredentialUnprocessableEntity) deleteTelephonyCredentialRes() {}

// DeleteTelephonyCredentialsUnprocessableEntity is response for DeleteTelephonyCredentials operation.
type DeleteTelephonyCredentialsUnprocessableEntity struct{}

func (*DeleteTelephonyCredentialsUnprocessableEntity) deleteTelephonyCredentialsRes() {}

type DeleteTexmlApplicationBadRequest ErrorResponse

func (*DeleteTexmlApplicationBadRequest) deleteTexmlApplicationRes() {}

type DeleteTexmlApplicationNotFound ErrorResponse

func (*DeleteTexmlApplicationNotFound) deleteTexmlApplicationRes() {}

type DeleteTexmlApplicationUnauthorized ErrorResponse

func (*DeleteTexmlApplicationUnauthorized) deleteTexmlApplicationRes() {}

// DeleteTexmlConferenceParticipantNoContent is response for DeleteTexmlConferenceParticipant operation.
type DeleteTexmlConferenceParticipantNoContent struct{}

func (*DeleteTexmlConferenceParticipantNoContent) deleteTexmlConferenceParticipantRes() {}

type DeleteVerifiedNumberNotFound Errors

func (*DeleteVerifiedNumberNotFound) deleteVerifiedNumberRes() {}

type DeleteVerifiedNumberUnauthorized Errors

func (*DeleteVerifiedNumberUnauthorized) deleteVerifiedNumberRes() {}

// Ref: #/components/schemas/DialConferenceParticipantRequest
type DialConferenceParticipantRequest struct {
	// Whether to play a notification beep to the conference when the participant enters and exits.
	Beep OptDialConferenceParticipantRequestBeep `json:"Beep"`
	// URL destination for Telnyx to send status callback events to for the call.
	StatusCallback OptString `json:"StatusCallback"`
	// HTTP request type used for `StatusCallback`.
	StatusCallbackMethod OptDialConferenceParticipantRequestStatusCallbackMethod `json:"StatusCallbackMethod"`
	// The changes to the call's state that should generate a call to `StatusCallback`. Can be:
	// `initiated`, `ringing`, `answered`, and `completed`. Separate multiple values with a space. The
	// default value is `completed`.
	StatusCallbackEvent OptString `json:"StatusCallbackEvent"`
	// The phone number of the called party. Phone numbers are formatted with a `+` and country code.
	To OptString `json:"To"`
	// The phone number of the party that initiated the call. Phone numbers are formatted with a `+` and
	// country code.
	From OptString `json:"From"`
	// The number of seconds that we should allow the phone to ring before assuming there is no answer.
	// Can be an integer between 5 and 120, inclusive. The default value is 30.
	Timeout OptInt `json:"Timeout"`
	// Whether the participant should be muted.
	Muted OptBool `json:"Muted"`
	// Whether to start the conference when the participant enters. Defaults to `true`.
	StartConferenceOnEnter OptBool `json:"StartConferenceOnEnter"`
	// Whether to end the conference when the participant leaves. Defaults to `false`.
	EndConferenceOnExit OptBool `json:"EndConferenceOnExit"`
	// Whether participant shall be bridged to conference before the participant answers (from early
	// media if available). Defaults to `false`.
	EarlyMedia OptBool `json:"EarlyMedia"`
	// The URL the conference callbacks will be sent to.
	ConferenceStatusCallback OptString `json:"ConferenceStatusCallback"`
	// HTTP request type used for `ConferenceStatusCallback`. Defaults to `POST`.
	ConferenceStatusCallbackMethod OptDialConferenceParticipantRequestConferenceStatusCallbackMethod `json:"ConferenceStatusCallbackMethod"`
	// The changes to the conference's state that should generate a call to `ConferenceStatusCallback`.
	// Can be: `start`, `end`, `join` and `leave`. Separate multiple values with a space. By default no
	// callbacks are sent.
	ConferenceStatusCallbackEvent OptString `json:"ConferenceStatusCallbackEvent"`
	// The URL to call for an audio file to play while the participant is waiting for the conference to
	// start.
	WaitUrl OptString `json:"WaitUrl"`
	// The maximum number of participants in the conference. Can be a positive integer from 2 to 800. The
	// default value is 250.
	MaxParticipants OptInt `json:"MaxParticipants"`
	// Whether the participant is coaching another call. When `true`, `CallSidToCoach` has to be given.
	Coaching OptBool `json:"Coaching"`
	// The SID of the participant who is being coached. The participant being coached is the only
	// participant who can hear the participant who is coaching.
	CallSidToCoach OptString `json:"CallSidToCoach"`
	// To be used as the caller id name (SIP From Display Name) presented to the destination (`To`
	// number). The string should have a maximum of 128 characters, containing only letters, numbers,
	// spaces, and `-_~!.+` special characters. If ommited, the display name will be the same as the
	// number in the `From` field.
	CallerId OptString `json:"CallerId"`
	// The maximum duration of the call in seconds.
	TimeLimit OptInt `json:"TimeLimit"`
	// Whether to detect if a human or an answering machine picked up the call. Use `Enable` if you would
	// like to ne notified as soon as the called party is identified. Use `DetectMessageEnd`, if you
	// would like to leave a message on an answering machine.
	MachineDetection OptDialConferenceParticipantRequestMachineDetection `json:"MachineDetection"`
	// How long answering machine detection should go on for before sending an `Unknown` result. Given in
	// milliseconds.
	MachineDetectionTimeout OptInt `json:"MachineDetectionTimeout"`
	// Maximum threshold of a human greeting. If greeting longer than this value, considered machine.
	// Ignored when `premium` detection is used.
	MachineDetectionSpeechThreshold OptInt `json:"MachineDetectionSpeechThreshold"`
	// Silence duration threshold after a greeting message or voice for it be considered human. Ignored
	// when `premium` detection is used.
	MachineDetectionSpeechEndThreshold OptInt `json:"MachineDetectionSpeechEndThreshold"`
	// If initial silence duration is greater than this value, consider it a machine. Ignored when
	// `premium` detection is used.
	MachineDetectionSilenceTimeout OptInt `json:"MachineDetectionSilenceTimeout"`
	// The URL the result of answering machine detection will be sent to.
	AmdStatusCallback OptString `json:"AmdStatusCallback"`
	// HTTP request type used for `AmdStatusCallback`. Defaults to `POST`.
	AmdStatusCallbackMethod OptDialConferenceParticipantRequestAmdStatusCallbackMethod `json:"AmdStatusCallbackMethod"`
	// Whether to cancel ongoing playback on `machine` detection. Defaults to `true`.
	CancelPlaybackOnMachineDetection OptBool `json:"CancelPlaybackOnMachineDetection"`
	// Whether to cancel ongoing playback on `greeting ended` detection. Defaults to `true`.
	CancelPlaybackOnDetectMessageEnd OptBool `json:"CancelPlaybackOnDetectMessageEnd"`
	// The list of comma-separated codecs to be offered on a call.
	PreferredCodecs OptString `json:"PreferredCodecs"`
	// Whether to record the entire participant's call leg. Defaults to `false`.
	Record OptBool `json:"Record"`
	// The number of channels in the final recording. Defaults to `mono`.
	RecordingChannels OptDialConferenceParticipantRequestRecordingChannels `json:"RecordingChannels"`
	// The URL the recording callbacks will be sent to.
	RecordingStatusCallback OptString `json:"RecordingStatusCallback"`
	// HTTP request type used for `RecordingStatusCallback`. Defaults to `POST`.
	RecordingStatusCallbackMethod OptDialConferenceParticipantRequestRecordingStatusCallbackMethod `json:"RecordingStatusCallbackMethod"`
	// The changes to the recording's state that should generate a call to `RecoridngStatusCallback`. Can
	// be: `in-progress`, `completed` and `absent`. Separate multiple values with a space. Defaults to
	// `completed`.
	RecordingStatusCallbackEvent OptString `json:"RecordingStatusCallbackEvent"`
	// The audio track to record for the call. The default is `both`.
	RecordingTrack OptDialConferenceParticipantRequestRecordingTrack `json:"RecordingTrack"`
	// The password to use for SIP authentication.
	SipAuthPassword OptString `json:"SipAuthPassword"`
	// The username to use for SIP authentication.
	SipAuthUsername OptString `json:"SipAuthUsername"`
	// Whether to trim any leading and trailing silence from the recording. Defaults to `trim-silence`.
	Trim OptDialConferenceParticipantRequestTrim `json:"Trim"`
	// Whether to record the conference the participant is joining. Defualts to `do-not-record`. The
	// boolean values `true` and `false` are synonymous with `record-from-start` and `do-not-record`
	// respectively.
	ConferenceRecord OptDialConferenceParticipantRequestConferenceRecord `json:"ConferenceRecord"`
	// The URL the conference recording callbacks will be sent to.
	ConferenceRecordingStatusCallback OptString `json:"ConferenceRecordingStatusCallback"`
	// HTTP request type used for `ConferenceRecordingStatusCallback`. Defaults to `POST`.
	ConferenceRecordingStatusCallbackMethod OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod `json:"ConferenceRecordingStatusCallbackMethod"`
	// The changes to the conference recording's state that should generate a call to
	// `RecoridngStatusCallback`. Can be: `in-progress`, `completed` and `absent`. Separate multiple
	// values with a space. Defaults to `completed`. `failed` and `absent` are synonymous.
	ConferenceRecordingStatusCallbackEvent OptString `json:"ConferenceRecordingStatusCallbackEvent"`
	// The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected.
	//  The timer only starts when the speech is detected. Please note that the transcription is used to
	// detect silence and the related charge will be applied. The minimum value is 0. The default value
	// is 0 (infinite).
	ConferenceRecordingTimeout OptInt `json:"ConferenceRecordingTimeout"`
	// Whether to trim any leading and trailing silence from the conference recording. Defaults to
	// `trim-silence`.
	ConferenceTrim OptDialConferenceParticipantRequestConferenceTrim `json:"ConferenceTrim"`
}

// GetBeep returns the value of Beep.
func (s *DialConferenceParticipantRequest) GetBeep() OptDialConferenceParticipantRequestBeep {
	return s.Beep
}

// GetStatusCallback returns the value of StatusCallback.
func (s *DialConferenceParticipantRequest) GetStatusCallback() OptString {
	return s.StatusCallback
}

// GetStatusCallbackMethod returns the value of StatusCallbackMethod.
func (s *DialConferenceParticipantRequest) GetStatusCallbackMethod() OptDialConferenceParticipantRequestStatusCallbackMethod {
	return s.StatusCallbackMethod
}

// GetStatusCallbackEvent returns the value of StatusCallbackEvent.
func (s *DialConferenceParticipantRequest) GetStatusCallbackEvent() OptString {
	return s.StatusCallbackEvent
}

// GetTo returns the value of To.
func (s *DialConferenceParticipantRequest) GetTo() OptString {
	return s.To
}

// GetFrom returns the value of From.
func (s *DialConferenceParticipantRequest) GetFrom() OptString {
	return s.From
}

// GetTimeout returns the value of Timeout.
func (s *DialConferenceParticipantRequest) GetTimeout() OptInt {
	return s.Timeout
}

// GetMuted returns the value of Muted.
func (s *DialConferenceParticipantRequest) GetMuted() OptBool {
	return s.Muted
}

// GetStartConferenceOnEnter returns the value of StartConferenceOnEnter.
func (s *DialConferenceParticipantRequest) GetStartConferenceOnEnter() OptBool {
	return s.StartConferenceOnEnter
}

// GetEndConferenceOnExit returns the value of EndConferenceOnExit.
func (s *DialConferenceParticipantRequest) GetEndConferenceOnExit() OptBool {
	return s.EndConferenceOnExit
}

// GetEarlyMedia returns the value of EarlyMedia.
func (s *DialConferenceParticipantRequest) GetEarlyMedia() OptBool {
	return s.EarlyMedia
}

// GetConferenceStatusCallback returns the value of ConferenceStatusCallback.
func (s *DialConferenceParticipantRequest) GetConferenceStatusCallback() OptString {
	return s.ConferenceStatusCallback
}

// GetConferenceStatusCallbackMethod returns the value of ConferenceStatusCallbackMethod.
func (s *DialConferenceParticipantRequest) GetConferenceStatusCallbackMethod() OptDialConferenceParticipantRequestConferenceStatusCallbackMethod {
	return s.ConferenceStatusCallbackMethod
}

// GetConferenceStatusCallbackEvent returns the value of ConferenceStatusCallbackEvent.
func (s *DialConferenceParticipantRequest) GetConferenceStatusCallbackEvent() OptString {
	return s.ConferenceStatusCallbackEvent
}

// GetWaitUrl returns the value of WaitUrl.
func (s *DialConferenceParticipantRequest) GetWaitUrl() OptString {
	return s.WaitUrl
}

// GetMaxParticipants returns the value of MaxParticipants.
func (s *DialConferenceParticipantRequest) GetMaxParticipants() OptInt {
	return s.MaxParticipants
}

// GetCoaching returns the value of Coaching.
func (s *DialConferenceParticipantRequest) GetCoaching() OptBool {
	return s.Coaching
}

// GetCallSidToCoach returns the value of CallSidToCoach.
func (s *DialConferenceParticipantRequest) GetCallSidToCoach() OptString {
	return s.CallSidToCoach
}

// GetCallerId returns the value of CallerId.
func (s *DialConferenceParticipantRequest) GetCallerId() OptString {
	return s.CallerId
}

// GetTimeLimit returns the value of TimeLimit.
func (s *DialConferenceParticipantRequest) GetTimeLimit() OptInt {
	return s.TimeLimit
}

// GetMachineDetection returns the value of MachineDetection.
func (s *DialConferenceParticipantRequest) GetMachineDetection() OptDialConferenceParticipantRequestMachineDetection {
	return s.MachineDetection
}

// GetMachineDetectionTimeout returns the value of MachineDetectionTimeout.
func (s *DialConferenceParticipantRequest) GetMachineDetectionTimeout() OptInt {
	return s.MachineDetectionTimeout
}

// GetMachineDetectionSpeechThreshold returns the value of MachineDetectionSpeechThreshold.
func (s *DialConferenceParticipantRequest) GetMachineDetectionSpeechThreshold() OptInt {
	return s.MachineDetectionSpeechThreshold
}

// GetMachineDetectionSpeechEndThreshold returns the value of MachineDetectionSpeechEndThreshold.
func (s *DialConferenceParticipantRequest) GetMachineDetectionSpeechEndThreshold() OptInt {
	return s.MachineDetectionSpeechEndThreshold
}

// GetMachineDetectionSilenceTimeout returns the value of MachineDetectionSilenceTimeout.
func (s *DialConferenceParticipantRequest) GetMachineDetectionSilenceTimeout() OptInt {
	return s.MachineDetectionSilenceTimeout
}

// GetAmdStatusCallback returns the value of AmdStatusCallback.
func (s *DialConferenceParticipantRequest) GetAmdStatusCallback() OptString {
	return s.AmdStatusCallback
}

// GetAmdStatusCallbackMethod returns the value of AmdStatusCallbackMethod.
func (s *DialConferenceParticipantRequest) GetAmdStatusCallbackMethod() OptDialConferenceParticipantRequestAmdStatusCallbackMethod {
	return s.AmdStatusCallbackMethod
}

// GetCancelPlaybackOnMachineDetection returns the value of CancelPlaybackOnMachineDetection.
func (s *DialConferenceParticipantRequest) GetCancelPlaybackOnMachineDetection() OptBool {
	return s.CancelPlaybackOnMachineDetection
}

// GetCancelPlaybackOnDetectMessageEnd returns the value of CancelPlaybackOnDetectMessageEnd.
func (s *DialConferenceParticipantRequest) GetCancelPlaybackOnDetectMessageEnd() OptBool {
	return s.CancelPlaybackOnDetectMessageEnd
}

// GetPreferredCodecs returns the value of PreferredCodecs.
func (s *DialConferenceParticipantRequest) GetPreferredCodecs() OptString {
	return s.PreferredCodecs
}

// GetRecord returns the value of Record.
func (s *DialConferenceParticipantRequest) GetRecord() OptBool {
	return s.Record
}

// GetRecordingChannels returns the value of RecordingChannels.
func (s *DialConferenceParticipantRequest) GetRecordingChannels() OptDialConferenceParticipantRequestRecordingChannels {
	return s.RecordingChannels
}

// GetRecordingStatusCallback returns the value of RecordingStatusCallback.
func (s *DialConferenceParticipantRequest) GetRecordingStatusCallback() OptString {
	return s.RecordingStatusCallback
}

// GetRecordingStatusCallbackMethod returns the value of RecordingStatusCallbackMethod.
func (s *DialConferenceParticipantRequest) GetRecordingStatusCallbackMethod() OptDialConferenceParticipantRequestRecordingStatusCallbackMethod {
	return s.RecordingStatusCallbackMethod
}

// GetRecordingStatusCallbackEvent returns the value of RecordingStatusCallbackEvent.
func (s *DialConferenceParticipantRequest) GetRecordingStatusCallbackEvent() OptString {
	return s.RecordingStatusCallbackEvent
}

// GetRecordingTrack returns the value of RecordingTrack.
func (s *DialConferenceParticipantRequest) GetRecordingTrack() OptDialConferenceParticipantRequestRecordingTrack {
	return s.RecordingTrack
}

// GetSipAuthPassword returns the value of SipAuthPassword.
func (s *DialConferenceParticipantRequest) GetSipAuthPassword() OptString {
	return s.SipAuthPassword
}

// GetSipAuthUsername returns the value of SipAuthUsername.
func (s *DialConferenceParticipantRequest) GetSipAuthUsername() OptString {
	return s.SipAuthUsername
}

// GetTrim returns the value of Trim.
func (s *DialConferenceParticipantRequest) GetTrim() OptDialConferenceParticipantRequestTrim {
	return s.Trim
}

// GetConferenceRecord returns the value of ConferenceRecord.
func (s *DialConferenceParticipantRequest) GetConferenceRecord() OptDialConferenceParticipantRequestConferenceRecord {
	return s.ConferenceRecord
}

// GetConferenceRecordingStatusCallback returns the value of ConferenceRecordingStatusCallback.
func (s *DialConferenceParticipantRequest) GetConferenceRecordingStatusCallback() OptString {
	return s.ConferenceRecordingStatusCallback
}

// GetConferenceRecordingStatusCallbackMethod returns the value of ConferenceRecordingStatusCallbackMethod.
func (s *DialConferenceParticipantRequest) GetConferenceRecordingStatusCallbackMethod() OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod {
	return s.ConferenceRecordingStatusCallbackMethod
}

// GetConferenceRecordingStatusCallbackEvent returns the value of ConferenceRecordingStatusCallbackEvent.
func (s *DialConferenceParticipantRequest) GetConferenceRecordingStatusCallbackEvent() OptString {
	return s.ConferenceRecordingStatusCallbackEvent
}

// GetConferenceRecordingTimeout returns the value of ConferenceRecordingTimeout.
func (s *DialConferenceParticipantRequest) GetConferenceRecordingTimeout() OptInt {
	return s.ConferenceRecordingTimeout
}

// GetConferenceTrim returns the value of ConferenceTrim.
func (s *DialConferenceParticipantRequest) GetConferenceTrim() OptDialConferenceParticipantRequestConferenceTrim {
	return s.ConferenceTrim
}

// SetBeep sets the value of Beep.
func (s *DialConferenceParticipantRequest) SetBeep(val OptDialConferenceParticipantRequestBeep) {
	s.Beep = val
}

// SetStatusCallback sets the value of StatusCallback.
func (s *DialConferenceParticipantRequest) SetStatusCallback(val OptString) {
	s.StatusCallback = val
}

// SetStatusCallbackMethod sets the value of StatusCallbackMethod.
func (s *DialConferenceParticipantRequest) SetStatusCallbackMethod(val OptDialConferenceParticipantRequestStatusCallbackMethod) {
	s.StatusCallbackMethod = val
}

// SetStatusCallbackEvent sets the value of StatusCallbackEvent.
func (s *DialConferenceParticipantRequest) SetStatusCallbackEvent(val OptString) {
	s.StatusCallbackEvent = val
}

// SetTo sets the value of To.
func (s *DialConferenceParticipantRequest) SetTo(val OptString) {
	s.To = val
}

// SetFrom sets the value of From.
func (s *DialConferenceParticipantRequest) SetFrom(val OptString) {
	s.From = val
}

// SetTimeout sets the value of Timeout.
func (s *DialConferenceParticipantRequest) SetTimeout(val OptInt) {
	s.Timeout = val
}

// SetMuted sets the value of Muted.
func (s *DialConferenceParticipantRequest) SetMuted(val OptBool) {
	s.Muted = val
}

// SetStartConferenceOnEnter sets the value of StartConferenceOnEnter.
func (s *DialConferenceParticipantRequest) SetStartConferenceOnEnter(val OptBool) {
	s.StartConferenceOnEnter = val
}

// SetEndConferenceOnExit sets the value of EndConferenceOnExit.
func (s *DialConferenceParticipantRequest) SetEndConferenceOnExit(val OptBool) {
	s.EndConferenceOnExit = val
}

// SetEarlyMedia sets the value of EarlyMedia.
func (s *DialConferenceParticipantRequest) SetEarlyMedia(val OptBool) {
	s.EarlyMedia = val
}

// SetConferenceStatusCallback sets the value of ConferenceStatusCallback.
func (s *DialConferenceParticipantRequest) SetConferenceStatusCallback(val OptString) {
	s.ConferenceStatusCallback = val
}

// SetConferenceStatusCallbackMethod sets the value of ConferenceStatusCallbackMethod.
func (s *DialConferenceParticipantRequest) SetConferenceStatusCallbackMethod(val OptDialConferenceParticipantRequestConferenceStatusCallbackMethod) {
	s.ConferenceStatusCallbackMethod = val
}

// SetConferenceStatusCallbackEvent sets the value of ConferenceStatusCallbackEvent.
func (s *DialConferenceParticipantRequest) SetConferenceStatusCallbackEvent(val OptString) {
	s.ConferenceStatusCallbackEvent = val
}

// SetWaitUrl sets the value of WaitUrl.
func (s *DialConferenceParticipantRequest) SetWaitUrl(val OptString) {
	s.WaitUrl = val
}

// SetMaxParticipants sets the value of MaxParticipants.
func (s *DialConferenceParticipantRequest) SetMaxParticipants(val OptInt) {
	s.MaxParticipants = val
}

// SetCoaching sets the value of Coaching.
func (s *DialConferenceParticipantRequest) SetCoaching(val OptBool) {
	s.Coaching = val
}

// SetCallSidToCoach sets the value of CallSidToCoach.
func (s *DialConferenceParticipantRequest) SetCallSidToCoach(val OptString) {
	s.CallSidToCoach = val
}

// SetCallerId sets the value of CallerId.
func (s *DialConferenceParticipantRequest) SetCallerId(val OptString) {
	s.CallerId = val
}

// SetTimeLimit sets the value of TimeLimit.
func (s *DialConferenceParticipantRequest) SetTimeLimit(val OptInt) {
	s.TimeLimit = val
}

// SetMachineDetection sets the value of MachineDetection.
func (s *DialConferenceParticipantRequest) SetMachineDetection(val OptDialConferenceParticipantRequestMachineDetection) {
	s.MachineDetection = val
}

// SetMachineDetectionTimeout sets the value of MachineDetectionTimeout.
func (s *DialConferenceParticipantRequest) SetMachineDetectionTimeout(val OptInt) {
	s.MachineDetectionTimeout = val
}

// SetMachineDetectionSpeechThreshold sets the value of MachineDetectionSpeechThreshold.
func (s *DialConferenceParticipantRequest) SetMachineDetectionSpeechThreshold(val OptInt) {
	s.MachineDetectionSpeechThreshold = val
}

// SetMachineDetectionSpeechEndThreshold sets the value of MachineDetectionSpeechEndThreshold.
func (s *DialConferenceParticipantRequest) SetMachineDetectionSpeechEndThreshold(val OptInt) {
	s.MachineDetectionSpeechEndThreshold = val
}

// SetMachineDetectionSilenceTimeout sets the value of MachineDetectionSilenceTimeout.
func (s *DialConferenceParticipantRequest) SetMachineDetectionSilenceTimeout(val OptInt) {
	s.MachineDetectionSilenceTimeout = val
}

// SetAmdStatusCallback sets the value of AmdStatusCallback.
func (s *DialConferenceParticipantRequest) SetAmdStatusCallback(val OptString) {
	s.AmdStatusCallback = val
}

// SetAmdStatusCallbackMethod sets the value of AmdStatusCallbackMethod.
func (s *DialConferenceParticipantRequest) SetAmdStatusCallbackMethod(val OptDialConferenceParticipantRequestAmdStatusCallbackMethod) {
	s.AmdStatusCallbackMethod = val
}

// SetCancelPlaybackOnMachineDetection sets the value of CancelPlaybackOnMachineDetection.
func (s *DialConferenceParticipantRequest) SetCancelPlaybackOnMachineDetection(val OptBool) {
	s.CancelPlaybackOnMachineDetection = val
}

// SetCancelPlaybackOnDetectMessageEnd sets the value of CancelPlaybackOnDetectMessageEnd.
func (s *DialConferenceParticipantRequest) SetCancelPlaybackOnDetectMessageEnd(val OptBool) {
	s.CancelPlaybackOnDetectMessageEnd = val
}

// SetPreferredCodecs sets the value of PreferredCodecs.
func (s *DialConferenceParticipantRequest) SetPreferredCodecs(val OptString) {
	s.PreferredCodecs = val
}

// SetRecord sets the value of Record.
func (s *DialConferenceParticipantRequest) SetRecord(val OptBool) {
	s.Record = val
}

// SetRecordingChannels sets the value of RecordingChannels.
func (s *DialConferenceParticipantRequest) SetRecordingChannels(val OptDialConferenceParticipantRequestRecordingChannels) {
	s.RecordingChannels = val
}

// SetRecordingStatusCallback sets the value of RecordingStatusCallback.
func (s *DialConferenceParticipantRequest) SetRecordingStatusCallback(val OptString) {
	s.RecordingStatusCallback = val
}

// SetRecordingStatusCallbackMethod sets the value of RecordingStatusCallbackMethod.
func (s *DialConferenceParticipantRequest) SetRecordingStatusCallbackMethod(val OptDialConferenceParticipantRequestRecordingStatusCallbackMethod) {
	s.RecordingStatusCallbackMethod = val
}

// SetRecordingStatusCallbackEvent sets the value of RecordingStatusCallbackEvent.
func (s *DialConferenceParticipantRequest) SetRecordingStatusCallbackEvent(val OptString) {
	s.RecordingStatusCallbackEvent = val
}

// SetRecordingTrack sets the value of RecordingTrack.
func (s *DialConferenceParticipantRequest) SetRecordingTrack(val OptDialConferenceParticipantRequestRecordingTrack) {
	s.RecordingTrack = val
}

// SetSipAuthPassword sets the value of SipAuthPassword.
func (s *DialConferenceParticipantRequest) SetSipAuthPassword(val OptString) {
	s.SipAuthPassword = val
}

// SetSipAuthUsername sets the value of SipAuthUsername.
func (s *DialConferenceParticipantRequest) SetSipAuthUsername(val OptString) {
	s.SipAuthUsername = val
}

// SetTrim sets the value of Trim.
func (s *DialConferenceParticipantRequest) SetTrim(val OptDialConferenceParticipantRequestTrim) {
	s.Trim = val
}

// SetConferenceRecord sets the value of ConferenceRecord.
func (s *DialConferenceParticipantRequest) SetConferenceRecord(val OptDialConferenceParticipantRequestConferenceRecord) {
	s.ConferenceRecord = val
}

// SetConferenceRecordingStatusCallback sets the value of ConferenceRecordingStatusCallback.
func (s *DialConferenceParticipantRequest) SetConferenceRecordingStatusCallback(val OptString) {
	s.ConferenceRecordingStatusCallback = val
}

// SetConferenceRecordingStatusCallbackMethod sets the value of ConferenceRecordingStatusCallbackMethod.
func (s *DialConferenceParticipantRequest) SetConferenceRecordingStatusCallbackMethod(val OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod) {
	s.ConferenceRecordingStatusCallbackMethod = val
}

// SetConferenceRecordingStatusCallbackEvent sets the value of ConferenceRecordingStatusCallbackEvent.
func (s *DialConferenceParticipantRequest) SetConferenceRecordingStatusCallbackEvent(val OptString) {
	s.ConferenceRecordingStatusCallbackEvent = val
}

// SetConferenceRecordingTimeout sets the value of ConferenceRecordingTimeout.
func (s *DialConferenceParticipantRequest) SetConferenceRecordingTimeout(val OptInt) {
	s.ConferenceRecordingTimeout = val
}

// SetConferenceTrim sets the value of ConferenceTrim.
func (s *DialConferenceParticipantRequest) SetConferenceTrim(val OptDialConferenceParticipantRequestConferenceTrim) {
	s.ConferenceTrim = val
}

// HTTP request type used for `AmdStatusCallback`. Defaults to `POST`.
type DialConferenceParticipantRequestAmdStatusCallbackMethod string

const (
	DialConferenceParticipantRequestAmdStatusCallbackMethodGET  DialConferenceParticipantRequestAmdStatusCallbackMethod = "GET"
	DialConferenceParticipantRequestAmdStatusCallbackMethodPOST DialConferenceParticipantRequestAmdStatusCallbackMethod = "POST"
)

// AllValues returns all DialConferenceParticipantRequestAmdStatusCallbackMethod values.
func (DialConferenceParticipantRequestAmdStatusCallbackMethod) AllValues() []DialConferenceParticipantRequestAmdStatusCallbackMethod {
	return []DialConferenceParticipantRequestAmdStatusCallbackMethod{
		DialConferenceParticipantRequestAmdStatusCallbackMethodGET,
		DialConferenceParticipantRequestAmdStatusCallbackMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DialConferenceParticipantRequestAmdStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case DialConferenceParticipantRequestAmdStatusCallbackMethodGET:
		return []byte(s), nil
	case DialConferenceParticipantRequestAmdStatusCallbackMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DialConferenceParticipantRequestAmdStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch DialConferenceParticipantRequestAmdStatusCallbackMethod(data) {
	case DialConferenceParticipantRequestAmdStatusCallbackMethodGET:
		*s = DialConferenceParticipantRequestAmdStatusCallbackMethodGET
		return nil
	case DialConferenceParticipantRequestAmdStatusCallbackMethodPOST:
		*s = DialConferenceParticipantRequestAmdStatusCallbackMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Whether to play a notification beep to the conference when the participant enters and exits.
type DialConferenceParticipantRequestBeep string

const (
	DialConferenceParticipantRequestBeepTrue    DialConferenceParticipantRequestBeep = "true"
	DialConferenceParticipantRequestBeepFalse   DialConferenceParticipantRequestBeep = "false"
	DialConferenceParticipantRequestBeepOnEnter DialConferenceParticipantRequestBeep = "onEnter"
	DialConferenceParticipantRequestBeepOnExit  DialConferenceParticipantRequestBeep = "onExit"
)

// AllValues returns all DialConferenceParticipantRequestBeep values.
func (DialConferenceParticipantRequestBeep) AllValues() []DialConferenceParticipantRequestBeep {
	return []DialConferenceParticipantRequestBeep{
		DialConferenceParticipantRequestBeepTrue,
		DialConferenceParticipantRequestBeepFalse,
		DialConferenceParticipantRequestBeepOnEnter,
		DialConferenceParticipantRequestBeepOnExit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DialConferenceParticipantRequestBeep) MarshalText() ([]byte, error) {
	switch s {
	case DialConferenceParticipantRequestBeepTrue:
		return []byte(s), nil
	case DialConferenceParticipantRequestBeepFalse:
		return []byte(s), nil
	case DialConferenceParticipantRequestBeepOnEnter:
		return []byte(s), nil
	case DialConferenceParticipantRequestBeepOnExit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DialConferenceParticipantRequestBeep) UnmarshalText(data []byte) error {
	switch DialConferenceParticipantRequestBeep(data) {
	case DialConferenceParticipantRequestBeepTrue:
		*s = DialConferenceParticipantRequestBeepTrue
		return nil
	case DialConferenceParticipantRequestBeepFalse:
		*s = DialConferenceParticipantRequestBeepFalse
		return nil
	case DialConferenceParticipantRequestBeepOnEnter:
		*s = DialConferenceParticipantRequestBeepOnEnter
		return nil
	case DialConferenceParticipantRequestBeepOnExit:
		*s = DialConferenceParticipantRequestBeepOnExit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Whether to record the conference the participant is joining. Defualts to `do-not-record`. The
// boolean values `true` and `false` are synonymous with `record-from-start` and `do-not-record`
// respectively.
type DialConferenceParticipantRequestConferenceRecord string

const (
	DialConferenceParticipantRequestConferenceRecordTrue            DialConferenceParticipantRequestConferenceRecord = "true"
	DialConferenceParticipantRequestConferenceRecordFalse           DialConferenceParticipantRequestConferenceRecord = "false"
	DialConferenceParticipantRequestConferenceRecordRecordFromStart DialConferenceParticipantRequestConferenceRecord = "record-from-start"
	DialConferenceParticipantRequestConferenceRecordDoNotRecord     DialConferenceParticipantRequestConferenceRecord = "do-not-record"
)

// AllValues returns all DialConferenceParticipantRequestConferenceRecord values.
func (DialConferenceParticipantRequestConferenceRecord) AllValues() []DialConferenceParticipantRequestConferenceRecord {
	return []DialConferenceParticipantRequestConferenceRecord{
		DialConferenceParticipantRequestConferenceRecordTrue,
		DialConferenceParticipantRequestConferenceRecordFalse,
		DialConferenceParticipantRequestConferenceRecordRecordFromStart,
		DialConferenceParticipantRequestConferenceRecordDoNotRecord,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DialConferenceParticipantRequestConferenceRecord) MarshalText() ([]byte, error) {
	switch s {
	case DialConferenceParticipantRequestConferenceRecordTrue:
		return []byte(s), nil
	case DialConferenceParticipantRequestConferenceRecordFalse:
		return []byte(s), nil
	case DialConferenceParticipantRequestConferenceRecordRecordFromStart:
		return []byte(s), nil
	case DialConferenceParticipantRequestConferenceRecordDoNotRecord:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DialConferenceParticipantRequestConferenceRecord) UnmarshalText(data []byte) error {
	switch DialConferenceParticipantRequestConferenceRecord(data) {
	case DialConferenceParticipantRequestConferenceRecordTrue:
		*s = DialConferenceParticipantRequestConferenceRecordTrue
		return nil
	case DialConferenceParticipantRequestConferenceRecordFalse:
		*s = DialConferenceParticipantRequestConferenceRecordFalse
		return nil
	case DialConferenceParticipantRequestConferenceRecordRecordFromStart:
		*s = DialConferenceParticipantRequestConferenceRecordRecordFromStart
		return nil
	case DialConferenceParticipantRequestConferenceRecordDoNotRecord:
		*s = DialConferenceParticipantRequestConferenceRecordDoNotRecord
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request type used for `ConferenceRecordingStatusCallback`. Defaults to `POST`.
type DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod string

const (
	DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethodGET  DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod = "GET"
	DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethodPOST DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod = "POST"
)

// AllValues returns all DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod values.
func (DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod) AllValues() []DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod {
	return []DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod{
		DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethodGET,
		DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethodGET:
		return []byte(s), nil
	case DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod(data) {
	case DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethodGET:
		*s = DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethodGET
		return nil
	case DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethodPOST:
		*s = DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request type used for `ConferenceStatusCallback`. Defaults to `POST`.
type DialConferenceParticipantRequestConferenceStatusCallbackMethod string

const (
	DialConferenceParticipantRequestConferenceStatusCallbackMethodGET  DialConferenceParticipantRequestConferenceStatusCallbackMethod = "GET"
	DialConferenceParticipantRequestConferenceStatusCallbackMethodPOST DialConferenceParticipantRequestConferenceStatusCallbackMethod = "POST"
)

// AllValues returns all DialConferenceParticipantRequestConferenceStatusCallbackMethod values.
func (DialConferenceParticipantRequestConferenceStatusCallbackMethod) AllValues() []DialConferenceParticipantRequestConferenceStatusCallbackMethod {
	return []DialConferenceParticipantRequestConferenceStatusCallbackMethod{
		DialConferenceParticipantRequestConferenceStatusCallbackMethodGET,
		DialConferenceParticipantRequestConferenceStatusCallbackMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DialConferenceParticipantRequestConferenceStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case DialConferenceParticipantRequestConferenceStatusCallbackMethodGET:
		return []byte(s), nil
	case DialConferenceParticipantRequestConferenceStatusCallbackMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DialConferenceParticipantRequestConferenceStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch DialConferenceParticipantRequestConferenceStatusCallbackMethod(data) {
	case DialConferenceParticipantRequestConferenceStatusCallbackMethodGET:
		*s = DialConferenceParticipantRequestConferenceStatusCallbackMethodGET
		return nil
	case DialConferenceParticipantRequestConferenceStatusCallbackMethodPOST:
		*s = DialConferenceParticipantRequestConferenceStatusCallbackMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Whether to trim any leading and trailing silence from the conference recording. Defaults to
// `trim-silence`.
type DialConferenceParticipantRequestConferenceTrim string

const (
	DialConferenceParticipantRequestConferenceTrimTrimSilence DialConferenceParticipantRequestConferenceTrim = "trim-silence"
	DialConferenceParticipantRequestConferenceTrimDoNotTrim   DialConferenceParticipantRequestConferenceTrim = "do-not-trim"
)

// AllValues returns all DialConferenceParticipantRequestConferenceTrim values.
func (DialConferenceParticipantRequestConferenceTrim) AllValues() []DialConferenceParticipantRequestConferenceTrim {
	return []DialConferenceParticipantRequestConferenceTrim{
		DialConferenceParticipantRequestConferenceTrimTrimSilence,
		DialConferenceParticipantRequestConferenceTrimDoNotTrim,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DialConferenceParticipantRequestConferenceTrim) MarshalText() ([]byte, error) {
	switch s {
	case DialConferenceParticipantRequestConferenceTrimTrimSilence:
		return []byte(s), nil
	case DialConferenceParticipantRequestConferenceTrimDoNotTrim:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DialConferenceParticipantRequestConferenceTrim) UnmarshalText(data []byte) error {
	switch DialConferenceParticipantRequestConferenceTrim(data) {
	case DialConferenceParticipantRequestConferenceTrimTrimSilence:
		*s = DialConferenceParticipantRequestConferenceTrimTrimSilence
		return nil
	case DialConferenceParticipantRequestConferenceTrimDoNotTrim:
		*s = DialConferenceParticipantRequestConferenceTrimDoNotTrim
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Whether to detect if a human or an answering machine picked up the call. Use `Enable` if you would
// like to ne notified as soon as the called party is identified. Use `DetectMessageEnd`, if you
// would like to leave a message on an answering machine.
type DialConferenceParticipantRequestMachineDetection string

const (
	DialConferenceParticipantRequestMachineDetectionEnable           DialConferenceParticipantRequestMachineDetection = "Enable"
	DialConferenceParticipantRequestMachineDetectionDetectMessageEnd DialConferenceParticipantRequestMachineDetection = "DetectMessageEnd"
)

// AllValues returns all DialConferenceParticipantRequestMachineDetection values.
func (DialConferenceParticipantRequestMachineDetection) AllValues() []DialConferenceParticipantRequestMachineDetection {
	return []DialConferenceParticipantRequestMachineDetection{
		DialConferenceParticipantRequestMachineDetectionEnable,
		DialConferenceParticipantRequestMachineDetectionDetectMessageEnd,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DialConferenceParticipantRequestMachineDetection) MarshalText() ([]byte, error) {
	switch s {
	case DialConferenceParticipantRequestMachineDetectionEnable:
		return []byte(s), nil
	case DialConferenceParticipantRequestMachineDetectionDetectMessageEnd:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DialConferenceParticipantRequestMachineDetection) UnmarshalText(data []byte) error {
	switch DialConferenceParticipantRequestMachineDetection(data) {
	case DialConferenceParticipantRequestMachineDetectionEnable:
		*s = DialConferenceParticipantRequestMachineDetectionEnable
		return nil
	case DialConferenceParticipantRequestMachineDetectionDetectMessageEnd:
		*s = DialConferenceParticipantRequestMachineDetectionDetectMessageEnd
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The number of channels in the final recording. Defaults to `mono`.
type DialConferenceParticipantRequestRecordingChannels string

const (
	DialConferenceParticipantRequestRecordingChannelsMono DialConferenceParticipantRequestRecordingChannels = "mono"
	DialConferenceParticipantRequestRecordingChannelsDual DialConferenceParticipantRequestRecordingChannels = "dual"
)

// AllValues returns all DialConferenceParticipantRequestRecordingChannels values.
func (DialConferenceParticipantRequestRecordingChannels) AllValues() []DialConferenceParticipantRequestRecordingChannels {
	return []DialConferenceParticipantRequestRecordingChannels{
		DialConferenceParticipantRequestRecordingChannelsMono,
		DialConferenceParticipantRequestRecordingChannelsDual,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DialConferenceParticipantRequestRecordingChannels) MarshalText() ([]byte, error) {
	switch s {
	case DialConferenceParticipantRequestRecordingChannelsMono:
		return []byte(s), nil
	case DialConferenceParticipantRequestRecordingChannelsDual:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DialConferenceParticipantRequestRecordingChannels) UnmarshalText(data []byte) error {
	switch DialConferenceParticipantRequestRecordingChannels(data) {
	case DialConferenceParticipantRequestRecordingChannelsMono:
		*s = DialConferenceParticipantRequestRecordingChannelsMono
		return nil
	case DialConferenceParticipantRequestRecordingChannelsDual:
		*s = DialConferenceParticipantRequestRecordingChannelsDual
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request type used for `RecordingStatusCallback`. Defaults to `POST`.
type DialConferenceParticipantRequestRecordingStatusCallbackMethod string

const (
	DialConferenceParticipantRequestRecordingStatusCallbackMethodGET  DialConferenceParticipantRequestRecordingStatusCallbackMethod = "GET"
	DialConferenceParticipantRequestRecordingStatusCallbackMethodPOST DialConferenceParticipantRequestRecordingStatusCallbackMethod = "POST"
)

// AllValues returns all DialConferenceParticipantRequestRecordingStatusCallbackMethod values.
func (DialConferenceParticipantRequestRecordingStatusCallbackMethod) AllValues() []DialConferenceParticipantRequestRecordingStatusCallbackMethod {
	return []DialConferenceParticipantRequestRecordingStatusCallbackMethod{
		DialConferenceParticipantRequestRecordingStatusCallbackMethodGET,
		DialConferenceParticipantRequestRecordingStatusCallbackMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DialConferenceParticipantRequestRecordingStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case DialConferenceParticipantRequestRecordingStatusCallbackMethodGET:
		return []byte(s), nil
	case DialConferenceParticipantRequestRecordingStatusCallbackMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DialConferenceParticipantRequestRecordingStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch DialConferenceParticipantRequestRecordingStatusCallbackMethod(data) {
	case DialConferenceParticipantRequestRecordingStatusCallbackMethodGET:
		*s = DialConferenceParticipantRequestRecordingStatusCallbackMethodGET
		return nil
	case DialConferenceParticipantRequestRecordingStatusCallbackMethodPOST:
		*s = DialConferenceParticipantRequestRecordingStatusCallbackMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The audio track to record for the call. The default is `both`.
type DialConferenceParticipantRequestRecordingTrack string

const (
	DialConferenceParticipantRequestRecordingTrackInbound  DialConferenceParticipantRequestRecordingTrack = "inbound"
	DialConferenceParticipantRequestRecordingTrackOutbound DialConferenceParticipantRequestRecordingTrack = "outbound"
	DialConferenceParticipantRequestRecordingTrackBoth     DialConferenceParticipantRequestRecordingTrack = "both"
)

// AllValues returns all DialConferenceParticipantRequestRecordingTrack values.
func (DialConferenceParticipantRequestRecordingTrack) AllValues() []DialConferenceParticipantRequestRecordingTrack {
	return []DialConferenceParticipantRequestRecordingTrack{
		DialConferenceParticipantRequestRecordingTrackInbound,
		DialConferenceParticipantRequestRecordingTrackOutbound,
		DialConferenceParticipantRequestRecordingTrackBoth,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DialConferenceParticipantRequestRecordingTrack) MarshalText() ([]byte, error) {
	switch s {
	case DialConferenceParticipantRequestRecordingTrackInbound:
		return []byte(s), nil
	case DialConferenceParticipantRequestRecordingTrackOutbound:
		return []byte(s), nil
	case DialConferenceParticipantRequestRecordingTrackBoth:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DialConferenceParticipantRequestRecordingTrack) UnmarshalText(data []byte) error {
	switch DialConferenceParticipantRequestRecordingTrack(data) {
	case DialConferenceParticipantRequestRecordingTrackInbound:
		*s = DialConferenceParticipantRequestRecordingTrackInbound
		return nil
	case DialConferenceParticipantRequestRecordingTrackOutbound:
		*s = DialConferenceParticipantRequestRecordingTrackOutbound
		return nil
	case DialConferenceParticipantRequestRecordingTrackBoth:
		*s = DialConferenceParticipantRequestRecordingTrackBoth
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request type used for `StatusCallback`.
type DialConferenceParticipantRequestStatusCallbackMethod string

const (
	DialConferenceParticipantRequestStatusCallbackMethodGET  DialConferenceParticipantRequestStatusCallbackMethod = "GET"
	DialConferenceParticipantRequestStatusCallbackMethodPOST DialConferenceParticipantRequestStatusCallbackMethod = "POST"
)

// AllValues returns all DialConferenceParticipantRequestStatusCallbackMethod values.
func (DialConferenceParticipantRequestStatusCallbackMethod) AllValues() []DialConferenceParticipantRequestStatusCallbackMethod {
	return []DialConferenceParticipantRequestStatusCallbackMethod{
		DialConferenceParticipantRequestStatusCallbackMethodGET,
		DialConferenceParticipantRequestStatusCallbackMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DialConferenceParticipantRequestStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case DialConferenceParticipantRequestStatusCallbackMethodGET:
		return []byte(s), nil
	case DialConferenceParticipantRequestStatusCallbackMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DialConferenceParticipantRequestStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch DialConferenceParticipantRequestStatusCallbackMethod(data) {
	case DialConferenceParticipantRequestStatusCallbackMethodGET:
		*s = DialConferenceParticipantRequestStatusCallbackMethodGET
		return nil
	case DialConferenceParticipantRequestStatusCallbackMethodPOST:
		*s = DialConferenceParticipantRequestStatusCallbackMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Whether to trim any leading and trailing silence from the recording. Defaults to `trim-silence`.
type DialConferenceParticipantRequestTrim string

const (
	DialConferenceParticipantRequestTrimTrimSilence DialConferenceParticipantRequestTrim = "trim-silence"
	DialConferenceParticipantRequestTrimDoNotTrim   DialConferenceParticipantRequestTrim = "do-not-trim"
)

// AllValues returns all DialConferenceParticipantRequestTrim values.
func (DialConferenceParticipantRequestTrim) AllValues() []DialConferenceParticipantRequestTrim {
	return []DialConferenceParticipantRequestTrim{
		DialConferenceParticipantRequestTrimTrimSilence,
		DialConferenceParticipantRequestTrimDoNotTrim,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DialConferenceParticipantRequestTrim) MarshalText() ([]byte, error) {
	switch s {
	case DialConferenceParticipantRequestTrimTrimSilence:
		return []byte(s), nil
	case DialConferenceParticipantRequestTrimDoNotTrim:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DialConferenceParticipantRequestTrim) UnmarshalText(data []byte) error {
	switch DialConferenceParticipantRequestTrim(data) {
	case DialConferenceParticipantRequestTrimTrimSilence:
		*s = DialConferenceParticipantRequestTrimTrimSilence
		return nil
	case DialConferenceParticipantRequestTrimDoNotTrim:
		*s = DialConferenceParticipantRequestTrimDoNotTrim
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DialParticipantResponse struct {
	Data OptNewParticipantResource `json:"data"`
}

// GetData returns the value of Data.
func (s *DialParticipantResponse) GetData() OptNewParticipantResource {
	return s.Data
}

// SetData sets the value of Data.
func (s *DialParticipantResponse) SetData(val OptNewParticipantResource) {
	s.Data = val
}

func (*DialParticipantResponse) dialTexmlConferenceParticipantRes() {}

// Ref: #/components/schemas/DialogflowConfig
type DialogflowConfig struct {
	// Enable sentiment analysis from Dialogflow.
	AnalyzeSentiment OptBool `json:"analyze_sentiment"`
	// Enable partial automated agent reply from Dialogflow.
	PartialAutomatedAgentReply OptBool `json:"partial_automated_agent_reply"`
}

// GetAnalyzeSentiment returns the value of AnalyzeSentiment.
func (s *DialogflowConfig) GetAnalyzeSentiment() OptBool {
	return s.AnalyzeSentiment
}

// GetPartialAutomatedAgentReply returns the value of PartialAutomatedAgentReply.
func (s *DialogflowConfig) GetPartialAutomatedAgentReply() OptBool {
	return s.PartialAutomatedAgentReply
}

// SetAnalyzeSentiment sets the value of AnalyzeSentiment.
func (s *DialogflowConfig) SetAnalyzeSentiment(val OptBool) {
	s.AnalyzeSentiment = val
}

// SetPartialAutomatedAgentReply sets the value of PartialAutomatedAgentReply.
func (s *DialogflowConfig) SetPartialAutomatedAgentReply(val OptBool) {
	s.PartialAutomatedAgentReply = val
}

type DisplayName string

type DisplayVerifiedCallsDisplayProfileResponse struct {
	Data OptVerifiedCallsDisplayProfile `json:"data"`
}

// GetData returns the value of Data.
func (s *DisplayVerifiedCallsDisplayProfileResponse) GetData() OptVerifiedCallsDisplayProfile {
	return s.Data
}

// SetData sets the value of Data.
func (s *DisplayVerifiedCallsDisplayProfileResponse) SetData(val OptVerifiedCallsDisplayProfile) {
	s.Data = val
}

func (*DisplayVerifiedCallsDisplayProfileResponse) createProfileRes()                    {}
func (*DisplayVerifiedCallsDisplayProfileResponse) deleteVerifiedCallDisplayProfileRes() {}
func (*DisplayVerifiedCallsDisplayProfileResponse) displayProfileRes()                   {}

type DocReqsActionFilter string

const (
	DocReqsActionFilterOrdering DocReqsActionFilter = "ordering"
	DocReqsActionFilterPorting  DocReqsActionFilter = "porting"
)

// AllValues returns all DocReqsActionFilter values.
func (DocReqsActionFilter) AllValues() []DocReqsActionFilter {
	return []DocReqsActionFilter{
		DocReqsActionFilterOrdering,
		DocReqsActionFilterPorting,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DocReqsActionFilter) MarshalText() ([]byte, error) {
	switch s {
	case DocReqsActionFilterOrdering:
		return []byte(s), nil
	case DocReqsActionFilterPorting:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DocReqsActionFilter) UnmarshalText(data []byte) error {
	switch DocReqsActionFilter(data) {
	case DocReqsActionFilterOrdering:
		*s = DocReqsActionFilterOrdering
		return nil
	case DocReqsActionFilterPorting:
		*s = DocReqsActionFilterPorting
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DocReqsPhoneNumberTypeFilter string

const (
	DocReqsPhoneNumberTypeFilterLocal    DocReqsPhoneNumberTypeFilter = "local"
	DocReqsPhoneNumberTypeFilterNational DocReqsPhoneNumberTypeFilter = "national"
	DocReqsPhoneNumberTypeFilterTollFree DocReqsPhoneNumberTypeFilter = "toll-free"
)

// AllValues returns all DocReqsPhoneNumberTypeFilter values.
func (DocReqsPhoneNumberTypeFilter) AllValues() []DocReqsPhoneNumberTypeFilter {
	return []DocReqsPhoneNumberTypeFilter{
		DocReqsPhoneNumberTypeFilterLocal,
		DocReqsPhoneNumberTypeFilterNational,
		DocReqsPhoneNumberTypeFilterTollFree,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DocReqsPhoneNumberTypeFilter) MarshalText() ([]byte, error) {
	switch s {
	case DocReqsPhoneNumberTypeFilterLocal:
		return []byte(s), nil
	case DocReqsPhoneNumberTypeFilterNational:
		return []byte(s), nil
	case DocReqsPhoneNumberTypeFilterTollFree:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DocReqsPhoneNumberTypeFilter) UnmarshalText(data []byte) error {
	switch DocReqsPhoneNumberTypeFilter(data) {
	case DocReqsPhoneNumberTypeFilterLocal:
		*s = DocReqsPhoneNumberTypeFilterLocal
		return nil
	case DocReqsPhoneNumberTypeFilterNational:
		*s = DocReqsPhoneNumberTypeFilterNational
		return nil
	case DocReqsPhoneNumberTypeFilterTollFree:
		*s = DocReqsPhoneNumberTypeFilterTollFree
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/DocReqsRequirement
type DocReqsRequirement struct {
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	// The 2-character (ISO 3166-1 alpha-2) country code where this requirement applies.
	CountryCode OptString `json:"country_code"`
	// The locality where this requirement applies.
	Locality OptString `json:"locality"`
	// Indicates the phone_number_type this requirement applies to. Leave blank if this requirement
	// applies to all number_types.
	PhoneNumberType OptDocReqsRequirementPhoneNumberType `json:"phone_number_type"`
	// Indicates whether this requirement applies to ordering, porting, or both.
	Action OptDocReqsRequirementAction `json:"action"`
	// Lists the requirement types necessary to fulfill this requirement.
	RequirementsTypes []DocReqsRequirementType `json:"requirements_types"`
	// Identifies the associated document.
	ID OptUUID `json:"id"`
	// ISO 8601 formatted date-time indicating when the resource was created.
	CreatedAt OptString `json:"created_at"`
	// ISO 8601 formatted date-time indicating when the resource was last updated.
	UpdatedAt OptString `json:"updated_at"`
}

// GetRecordType returns the value of RecordType.
func (s *DocReqsRequirement) GetRecordType() OptString {
	return s.RecordType
}

// GetCountryCode returns the value of CountryCode.
func (s *DocReqsRequirement) GetCountryCode() OptString {
	return s.CountryCode
}

// GetLocality returns the value of Locality.
func (s *DocReqsRequirement) GetLocality() OptString {
	return s.Locality
}

// GetPhoneNumberType returns the value of PhoneNumberType.
func (s *DocReqsRequirement) GetPhoneNumberType() OptDocReqsRequirementPhoneNumberType {
	return s.PhoneNumberType
}

// GetAction returns the value of Action.
func (s *DocReqsRequirement) GetAction() OptDocReqsRequirementAction {
	return s.Action
}

// GetRequirementsTypes returns the value of RequirementsTypes.
func (s *DocReqsRequirement) GetRequirementsTypes() []DocReqsRequirementType {
	return s.RequirementsTypes
}

// GetID returns the value of ID.
func (s *DocReqsRequirement) GetID() OptUUID {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *DocReqsRequirement) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *DocReqsRequirement) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// SetRecordType sets the value of RecordType.
func (s *DocReqsRequirement) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetCountryCode sets the value of CountryCode.
func (s *DocReqsRequirement) SetCountryCode(val OptString) {
	s.CountryCode = val
}

// SetLocality sets the value of Locality.
func (s *DocReqsRequirement) SetLocality(val OptString) {
	s.Locality = val
}

// SetPhoneNumberType sets the value of PhoneNumberType.
func (s *DocReqsRequirement) SetPhoneNumberType(val OptDocReqsRequirementPhoneNumberType) {
	s.PhoneNumberType = val
}

// SetAction sets the value of Action.
func (s *DocReqsRequirement) SetAction(val OptDocReqsRequirementAction) {
	s.Action = val
}

// SetRequirementsTypes sets the value of RequirementsTypes.
func (s *DocReqsRequirement) SetRequirementsTypes(val []DocReqsRequirementType) {
	s.RequirementsTypes = val
}

// SetID sets the value of ID.
func (s *DocReqsRequirement) SetID(val OptUUID) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *DocReqsRequirement) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *DocReqsRequirement) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// Indicates whether this requirement applies to ordering, porting, or both.
type DocReqsRequirementAction string

const (
	DocReqsRequirementActionBoth     DocReqsRequirementAction = "both"
	DocReqsRequirementActionOrdering DocReqsRequirementAction = "ordering"
	DocReqsRequirementActionPorting  DocReqsRequirementAction = "porting"
)

// AllValues returns all DocReqsRequirementAction values.
func (DocReqsRequirementAction) AllValues() []DocReqsRequirementAction {
	return []DocReqsRequirementAction{
		DocReqsRequirementActionBoth,
		DocReqsRequirementActionOrdering,
		DocReqsRequirementActionPorting,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DocReqsRequirementAction) MarshalText() ([]byte, error) {
	switch s {
	case DocReqsRequirementActionBoth:
		return []byte(s), nil
	case DocReqsRequirementActionOrdering:
		return []byte(s), nil
	case DocReqsRequirementActionPorting:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DocReqsRequirementAction) UnmarshalText(data []byte) error {
	switch DocReqsRequirementAction(data) {
	case DocReqsRequirementActionBoth:
		*s = DocReqsRequirementActionBoth
		return nil
	case DocReqsRequirementActionOrdering:
		*s = DocReqsRequirementActionOrdering
		return nil
	case DocReqsRequirementActionPorting:
		*s = DocReqsRequirementActionPorting
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DocReqsRequirementList []DocReqsRequirement

// Indicates the phone_number_type this requirement applies to. Leave blank if this requirement
// applies to all number_types.
type DocReqsRequirementPhoneNumberType string

const (
	DocReqsRequirementPhoneNumberTypeLocal    DocReqsRequirementPhoneNumberType = "local"
	DocReqsRequirementPhoneNumberTypeNational DocReqsRequirementPhoneNumberType = "national"
	DocReqsRequirementPhoneNumberTypeTollFree DocReqsRequirementPhoneNumberType = "toll_free"
)

// AllValues returns all DocReqsRequirementPhoneNumberType values.
func (DocReqsRequirementPhoneNumberType) AllValues() []DocReqsRequirementPhoneNumberType {
	return []DocReqsRequirementPhoneNumberType{
		DocReqsRequirementPhoneNumberTypeLocal,
		DocReqsRequirementPhoneNumberTypeNational,
		DocReqsRequirementPhoneNumberTypeTollFree,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DocReqsRequirementPhoneNumberType) MarshalText() ([]byte, error) {
	switch s {
	case DocReqsRequirementPhoneNumberTypeLocal:
		return []byte(s), nil
	case DocReqsRequirementPhoneNumberTypeNational:
		return []byte(s), nil
	case DocReqsRequirementPhoneNumberTypeTollFree:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DocReqsRequirementPhoneNumberType) UnmarshalText(data []byte) error {
	switch DocReqsRequirementPhoneNumberType(data) {
	case DocReqsRequirementPhoneNumberTypeLocal:
		*s = DocReqsRequirementPhoneNumberTypeLocal
		return nil
	case DocReqsRequirementPhoneNumberTypeNational:
		*s = DocReqsRequirementPhoneNumberTypeNational
		return nil
	case DocReqsRequirementPhoneNumberTypeTollFree:
		*s = DocReqsRequirementPhoneNumberTypeTollFree
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DocReqsRequirementResponse struct {
	Data OptDocReqsRequirement `json:"data"`
}

// GetData returns the value of Data.
func (s *DocReqsRequirementResponse) GetData() OptDocReqsRequirement {
	return s.Data
}

// SetData sets the value of Data.
func (s *DocReqsRequirementResponse) SetData(val OptDocReqsRequirement) {
	s.Data = val
}

func (*DocReqsRequirementResponse) retrieveDocumentRequirementsRes() {}

// Ref: #/components/schemas/DocReqsRequirementType
type DocReqsRequirementType struct {
	// Specifies objective criteria for acceptance.
	AcceptanceCriteria OptDocReqsRequirementTypeAcceptanceCriteria `json:"acceptance_criteria"`
	// Describes the requirement type.
	Description OptString `json:"description"`
	// Provides one or more examples of acceptable documents.
	Example OptString `json:"example"`
	// Defines the type of this requirement type.
	Type OptDocReqsRequirementTypeType `json:"type"`
	// A short descriptive name for this requirement_type.
	Name OptString `json:"name"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	// Identifies the associated document.
	ID OptUUID `json:"id"`
	// ISO 8601 formatted date-time indicating when the resource was created.
	CreatedAt OptString `json:"created_at"`
	// ISO 8601 formatted date-time indicating when the resource was last updated.
	UpdatedAt OptString `json:"updated_at"`
}

// GetAcceptanceCriteria returns the value of AcceptanceCriteria.
func (s *DocReqsRequirementType) GetAcceptanceCriteria() OptDocReqsRequirementTypeAcceptanceCriteria {
	return s.AcceptanceCriteria
}

// GetDescription returns the value of Description.
func (s *DocReqsRequirementType) GetDescription() OptString {
	return s.Description
}

// GetExample returns the value of Example.
func (s *DocReqsRequirementType) GetExample() OptString {
	return s.Example
}

// GetType returns the value of Type.
func (s *DocReqsRequirementType) GetType() OptDocReqsRequirementTypeType {
	return s.Type
}

// GetName returns the value of Name.
func (s *DocReqsRequirementType) GetName() OptString {
	return s.Name
}

// GetRecordType returns the value of RecordType.
func (s *DocReqsRequirementType) GetRecordType() OptString {
	return s.RecordType
}

// GetID returns the value of ID.
func (s *DocReqsRequirementType) GetID() OptUUID {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *DocReqsRequirementType) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *DocReqsRequirementType) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// SetAcceptanceCriteria sets the value of AcceptanceCriteria.
func (s *DocReqsRequirementType) SetAcceptanceCriteria(val OptDocReqsRequirementTypeAcceptanceCriteria) {
	s.AcceptanceCriteria = val
}

// SetDescription sets the value of Description.
func (s *DocReqsRequirementType) SetDescription(val OptString) {
	s.Description = val
}

// SetExample sets the value of Example.
func (s *DocReqsRequirementType) SetExample(val OptString) {
	s.Example = val
}

// SetType sets the value of Type.
func (s *DocReqsRequirementType) SetType(val OptDocReqsRequirementTypeType) {
	s.Type = val
}

// SetName sets the value of Name.
func (s *DocReqsRequirementType) SetName(val OptString) {
	s.Name = val
}

// SetRecordType sets the value of RecordType.
func (s *DocReqsRequirementType) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetID sets the value of ID.
func (s *DocReqsRequirementType) SetID(val OptUUID) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *DocReqsRequirementType) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *DocReqsRequirementType) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// Specifies objective criteria for acceptance.
type DocReqsRequirementTypeAcceptanceCriteria struct {
	// Specifies time-based acceptance criteria.
	TimeLimit OptString `json:"time_limit"`
	// Specifies geography-based acceptance criteria.
	LocalityLimit OptString `json:"locality_limit"`
	// Specifies the list of strictly possible values for the requirement. Ignored when empty.
	AcceptableValues []string `json:"acceptable_values"`
}

// GetTimeLimit returns the value of TimeLimit.
func (s *DocReqsRequirementTypeAcceptanceCriteria) GetTimeLimit() OptString {
	return s.TimeLimit
}

// GetLocalityLimit returns the value of LocalityLimit.
func (s *DocReqsRequirementTypeAcceptanceCriteria) GetLocalityLimit() OptString {
	return s.LocalityLimit
}

// GetAcceptableValues returns the value of AcceptableValues.
func (s *DocReqsRequirementTypeAcceptanceCriteria) GetAcceptableValues() []string {
	return s.AcceptableValues
}

// SetTimeLimit sets the value of TimeLimit.
func (s *DocReqsRequirementTypeAcceptanceCriteria) SetTimeLimit(val OptString) {
	s.TimeLimit = val
}

// SetLocalityLimit sets the value of LocalityLimit.
func (s *DocReqsRequirementTypeAcceptanceCriteria) SetLocalityLimit(val OptString) {
	s.LocalityLimit = val
}

// SetAcceptableValues sets the value of AcceptableValues.
func (s *DocReqsRequirementTypeAcceptanceCriteria) SetAcceptableValues(val []string) {
	s.AcceptableValues = val
}

// Defines the type of this requirement type.
type DocReqsRequirementTypeType string

const (
	DocReqsRequirementTypeTypeDocument DocReqsRequirementTypeType = "document"
	DocReqsRequirementTypeTypeAddress  DocReqsRequirementTypeType = "address"
	DocReqsRequirementTypeTypeTextual  DocReqsRequirementTypeType = "textual"
)

// AllValues returns all DocReqsRequirementTypeType values.
func (DocReqsRequirementTypeType) AllValues() []DocReqsRequirementTypeType {
	return []DocReqsRequirementTypeType{
		DocReqsRequirementTypeTypeDocument,
		DocReqsRequirementTypeTypeAddress,
		DocReqsRequirementTypeTypeTextual,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DocReqsRequirementTypeType) MarshalText() ([]byte, error) {
	switch s {
	case DocReqsRequirementTypeTypeDocument:
		return []byte(s), nil
	case DocReqsRequirementTypeTypeAddress:
		return []byte(s), nil
	case DocReqsRequirementTypeTypeTextual:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DocReqsRequirementTypeType) UnmarshalText(data []byte) error {
	switch DocReqsRequirementTypeType(data) {
	case DocReqsRequirementTypeTypeDocument:
		*s = DocReqsRequirementTypeTypeDocument
		return nil
	case DocReqsRequirementTypeTypeAddress:
		*s = DocReqsRequirementTypeTypeAddress
		return nil
	case DocReqsRequirementTypeTypeTextual:
		*s = DocReqsRequirementTypeTypeTextual
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DocReqsRequirementsSort string

const (
	DocReqsRequirementsSortAction          DocReqsRequirementsSort = "action"
	DocReqsRequirementsSortCountryCode     DocReqsRequirementsSort = "country_code"
	DocReqsRequirementsSortLocality        DocReqsRequirementsSort = "locality"
	DocReqsRequirementsSortPhoneNumberType DocReqsRequirementsSort = "phone_number_type"
)

// AllValues returns all DocReqsRequirementsSort values.
func (DocReqsRequirementsSort) AllValues() []DocReqsRequirementsSort {
	return []DocReqsRequirementsSort{
		DocReqsRequirementsSortAction,
		DocReqsRequirementsSortCountryCode,
		DocReqsRequirementsSortLocality,
		DocReqsRequirementsSortPhoneNumberType,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DocReqsRequirementsSort) MarshalText() ([]byte, error) {
	switch s {
	case DocReqsRequirementsSortAction:
		return []byte(s), nil
	case DocReqsRequirementsSortCountryCode:
		return []byte(s), nil
	case DocReqsRequirementsSortLocality:
		return []byte(s), nil
	case DocReqsRequirementsSortPhoneNumberType:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DocReqsRequirementsSort) UnmarshalText(data []byte) error {
	switch DocReqsRequirementsSort(data) {
	case DocReqsRequirementsSortAction:
		*s = DocReqsRequirementsSortAction
		return nil
	case DocReqsRequirementsSortCountryCode:
		*s = DocReqsRequirementsSortCountryCode
		return nil
	case DocReqsRequirementsSortLocality:
		*s = DocReqsRequirementsSortLocality
		return nil
	case DocReqsRequirementsSortPhoneNumberType:
		*s = DocReqsRequirementsSortPhoneNumberType
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DownloadLOATemplate struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s DownloadLOATemplate) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*DownloadLOATemplate) getPortingOrderLoaTemplateRes()    {}
func (*DownloadLOATemplate) previewLoaConfigurationParamsRes() {}
func (*DownloadLOATemplate) previewLoaConfigurationRes()       {}

// Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to
// Telnyx will be accepted in all formats.
// Ref: #/components/schemas/DtmfType
type DtmfType string

const (
	DtmfTypeRFC2833 DtmfType = "RFC 2833"
	DtmfTypeInband  DtmfType = "Inband"
	DtmfTypeSIPINFO DtmfType = "SIP INFO"
)

// AllValues returns all DtmfType values.
func (DtmfType) AllValues() []DtmfType {
	return []DtmfType{
		DtmfTypeRFC2833,
		DtmfTypeInband,
		DtmfTypeSIPINFO,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DtmfType) MarshalText() ([]byte, error) {
	switch s {
	case DtmfTypeRFC2833:
		return []byte(s), nil
	case DtmfTypeInband:
		return []byte(s), nil
	case DtmfTypeSIPINFO:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DtmfType) UnmarshalText(data []byte) error {
	switch DtmfType(data) {
	case DtmfTypeRFC2833:
		*s = DtmfTypeRFC2833
		return nil
	case DtmfTypeInband:
		*s = DtmfTypeInband
		return nil
	case DtmfTypeSIPINFO:
		*s = DtmfTypeSIPINFO
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The emergency services settings for a phone number.
// Ref: #/components/schemas/EmergencySettings
type EmergencySettings struct {
	// Allows you to enable or disable emergency services on the phone number. In order to enable
	// emergency services, you must also set an emergency_address_id.
	EmergencyEnabled OptBool `json:"emergency_enabled"`
	// Identifies the address to be used with emergency services.
	EmergencyAddressID OptStringInt64 `json:"emergency_address_id"`
	// Represents the state of the number regarding emergency activation.
	EmergencyStatus OptEmergencySettingsEmergencyStatus `json:"emergency_status"`
}

// GetEmergencyEnabled returns the value of EmergencyEnabled.
func (s *EmergencySettings) GetEmergencyEnabled() OptBool {
	return s.EmergencyEnabled
}

// GetEmergencyAddressID returns the value of EmergencyAddressID.
func (s *EmergencySettings) GetEmergencyAddressID() OptStringInt64 {
	return s.EmergencyAddressID
}

// GetEmergencyStatus returns the value of EmergencyStatus.
func (s *EmergencySettings) GetEmergencyStatus() OptEmergencySettingsEmergencyStatus {
	return s.EmergencyStatus
}

// SetEmergencyEnabled sets the value of EmergencyEnabled.
func (s *EmergencySettings) SetEmergencyEnabled(val OptBool) {
	s.EmergencyEnabled = val
}

// SetEmergencyAddressID sets the value of EmergencyAddressID.
func (s *EmergencySettings) SetEmergencyAddressID(val OptStringInt64) {
	s.EmergencyAddressID = val
}

// SetEmergencyStatus sets the value of EmergencyStatus.
func (s *EmergencySettings) SetEmergencyStatus(val OptEmergencySettingsEmergencyStatus) {
	s.EmergencyStatus = val
}

// Represents the state of the number regarding emergency activation.
type EmergencySettingsEmergencyStatus string

const (
	EmergencySettingsEmergencyStatusDisabled       EmergencySettingsEmergencyStatus = "disabled"
	EmergencySettingsEmergencyStatusActive         EmergencySettingsEmergencyStatus = "active"
	EmergencySettingsEmergencyStatusProvisioning   EmergencySettingsEmergencyStatus = "provisioning"
	EmergencySettingsEmergencyStatusDeprovisioning EmergencySettingsEmergencyStatus = "deprovisioning"
)

// AllValues returns all EmergencySettingsEmergencyStatus values.
func (EmergencySettingsEmergencyStatus) AllValues() []EmergencySettingsEmergencyStatus {
	return []EmergencySettingsEmergencyStatus{
		EmergencySettingsEmergencyStatusDisabled,
		EmergencySettingsEmergencyStatusActive,
		EmergencySettingsEmergencyStatusProvisioning,
		EmergencySettingsEmergencyStatusDeprovisioning,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EmergencySettingsEmergencyStatus) MarshalText() ([]byte, error) {
	switch s {
	case EmergencySettingsEmergencyStatusDisabled:
		return []byte(s), nil
	case EmergencySettingsEmergencyStatusActive:
		return []byte(s), nil
	case EmergencySettingsEmergencyStatusProvisioning:
		return []byte(s), nil
	case EmergencySettingsEmergencyStatusDeprovisioning:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EmergencySettingsEmergencyStatus) UnmarshalText(data []byte) error {
	switch EmergencySettingsEmergencyStatus(data) {
	case EmergencySettingsEmergencyStatusDisabled:
		*s = EmergencySettingsEmergencyStatusDisabled
		return nil
	case EmergencySettingsEmergencyStatusActive:
		*s = EmergencySettingsEmergencyStatusActive
		return nil
	case EmergencySettingsEmergencyStatusProvisioning:
		*s = EmergencySettingsEmergencyStatusProvisioning
		return nil
	case EmergencySettingsEmergencyStatusDeprovisioning:
		*s = EmergencySettingsEmergencyStatusDeprovisioning
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type EnablePhoneNumberEmergencyAccepted struct {
	Data OptPhoneNumberWithVoiceSettings `json:"data"`
}

// GetData returns the value of Data.
func (s *EnablePhoneNumberEmergencyAccepted) GetData() OptPhoneNumberWithVoiceSettings {
	return s.Data
}

// SetData sets the value of Data.
func (s *EnablePhoneNumberEmergencyAccepted) SetData(val OptPhoneNumberWithVoiceSettings) {
	s.Data = val
}

func (*EnablePhoneNumberEmergencyAccepted) enablePhoneNumberEmergencyRes() {}

type EnablePhoneNumberEmergencyOK struct {
	Data OptPhoneNumberWithVoiceSettings `json:"data"`
}

// GetData returns the value of Data.
func (s *EnablePhoneNumberEmergencyOK) GetData() OptPhoneNumberWithVoiceSettings {
	return s.Data
}

// SetData sets the value of Data.
func (s *EnablePhoneNumberEmergencyOK) SetData(val OptPhoneNumberWithVoiceSettings) {
	s.Data = val
}

func (*EnablePhoneNumberEmergencyOK) enablePhoneNumberEmergencyRes() {}

// Ref: #/components/schemas/EnqueueRequest
type EnqueueRequest struct {
	// The name of the queue the call should be put in. If a queue with a given name doesn't exist yet it
	// will be created.
	QueueName string `json:"queue_name"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
	// The number of seconds after which the call will be removed from the queue.
	MaxWaitTimeSecs OptInt `json:"max_wait_time_secs"`
	// The maximum number of calls allowed in the queue at a given time. Can't be modified for an
	// existing queue.
	MaxSize OptInt `json:"max_size"`
}

// GetQueueName returns the value of QueueName.
func (s *EnqueueRequest) GetQueueName() string {
	return s.QueueName
}

// GetClientState returns the value of ClientState.
func (s *EnqueueRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *EnqueueRequest) GetCommandID() OptString {
	return s.CommandID
}

// GetMaxWaitTimeSecs returns the value of MaxWaitTimeSecs.
func (s *EnqueueRequest) GetMaxWaitTimeSecs() OptInt {
	return s.MaxWaitTimeSecs
}

// GetMaxSize returns the value of MaxSize.
func (s *EnqueueRequest) GetMaxSize() OptInt {
	return s.MaxSize
}

// SetQueueName sets the value of QueueName.
func (s *EnqueueRequest) SetQueueName(val string) {
	s.QueueName = val
}

// SetClientState sets the value of ClientState.
func (s *EnqueueRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *EnqueueRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// SetMaxWaitTimeSecs sets the value of MaxWaitTimeSecs.
func (s *EnqueueRequest) SetMaxWaitTimeSecs(val OptInt) {
	s.MaxWaitTimeSecs = val
}

// SetMaxSize sets the value of MaxSize.
func (s *EnqueueRequest) SetMaxSize(val OptInt) {
	s.MaxSize = val
}

// Ref: #/components/schemas/Error
type Error struct {
	Code   int            `json:"code"`
	Title  string         `json:"title"`
	Detail OptString      `json:"detail"`
	Source OptErrorSource `json:"source"`
	Meta   OptErrorMeta   `json:"meta"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() int {
	return s.Code
}

// GetTitle returns the value of Title.
func (s *Error) GetTitle() string {
	return s.Title
}

// GetDetail returns the value of Detail.
func (s *Error) GetDetail() OptString {
	return s.Detail
}

// GetSource returns the value of Source.
func (s *Error) GetSource() OptErrorSource {
	return s.Source
}

// GetMeta returns the value of Meta.
func (s *Error) GetMeta() OptErrorMeta {
	return s.Meta
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val int) {
	s.Code = val
}

// SetTitle sets the value of Title.
func (s *Error) SetTitle(val string) {
	s.Title = val
}

// SetDetail sets the value of Detail.
func (s *Error) SetDetail(val OptString) {
	s.Detail = val
}

// SetSource sets the value of Source.
func (s *Error) SetSource(val OptErrorSource) {
	s.Source = val
}

// SetMeta sets the value of Meta.
func (s *Error) SetMeta(val OptErrorMeta) {
	s.Meta = val
}

func (*Error) deleteRoomRecordingRes()       {}
func (*Error) deleteWirelessGatewayRes()     {}
func (*Error) getPrivateWirelessGatewayRes() {}
func (*Error) viewRoomRecordingRes()         {}

type ErrorMeta map[string]jx.Raw

func (s *ErrorMeta) init() ErrorMeta {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/ErrorRecord
type ErrorRecord struct {
	// An application-specific error code, expressed as a stringified 5-digit integer.
	Code OptString `json:"code"`
	// A short, human-readable summary of the problem, with NO punctuation, that SHOULD NOT CHANGE from
	// occurrence to occurrence of the problem, except for purposes of localization.
	Title OptString `json:"title"`
	// A human-readable explanation specific to this occurrence of the problem. Like title, this
	// field’s value can be localized.
	Detail OptString         `json:"detail"`
	Source OptSourceResponse `json:"source"`
	Meta   OptMetaResponse   `json:"meta"`
}

// GetCode returns the value of Code.
func (s *ErrorRecord) GetCode() OptString {
	return s.Code
}

// GetTitle returns the value of Title.
func (s *ErrorRecord) GetTitle() OptString {
	return s.Title
}

// GetDetail returns the value of Detail.
func (s *ErrorRecord) GetDetail() OptString {
	return s.Detail
}

// GetSource returns the value of Source.
func (s *ErrorRecord) GetSource() OptSourceResponse {
	return s.Source
}

// GetMeta returns the value of Meta.
func (s *ErrorRecord) GetMeta() OptMetaResponse {
	return s.Meta
}

// SetCode sets the value of Code.
func (s *ErrorRecord) SetCode(val OptString) {
	s.Code = val
}

// SetTitle sets the value of Title.
func (s *ErrorRecord) SetTitle(val OptString) {
	s.Title = val
}

// SetDetail sets the value of Detail.
func (s *ErrorRecord) SetDetail(val OptString) {
	s.Detail = val
}

// SetSource sets the value of Source.
func (s *ErrorRecord) SetSource(val OptSourceResponse) {
	s.Source = val
}

// SetMeta sets the value of Meta.
func (s *ErrorRecord) SetMeta(val OptMetaResponse) {
	s.Meta = val
}

// Ref: #/components/schemas/ErrorResponse
type ErrorResponse struct {
	Errors []ErrorRecord `json:"errors"`
}

// GetErrors returns the value of Errors.
func (s *ErrorResponse) GetErrors() []ErrorRecord {
	return s.Errors
}

// SetErrors sets the value of Errors.
func (s *ErrorResponse) SetErrors(val []ErrorRecord) {
	s.Errors = val
}

func (*ErrorResponse) createTexmlSecretRes()                 {}
func (*ErrorResponse) deleteTeXMLCallRecordingRes()          {}
func (*ErrorResponse) deleteTeXMLRecordingTranscriptionRes() {}
func (*ErrorResponse) deleteTexmlConferenceParticipantRes()  {}
func (*ErrorResponse) dialTexmlConferenceParticipantRes()    {}
func (*ErrorResponse) fetchTeXMLCallRecordingsRes()          {}
func (*ErrorResponse) fetchTeXMLConferenceRecordingsRes()    {}
func (*ErrorResponse) getTeXMLCallRecordingRes()             {}
func (*ErrorResponse) getTeXMLCallRecordingsRes()            {}
func (*ErrorResponse) getTeXMLRecordingTranscriptionRes()    {}
func (*ErrorResponse) getTeXMLRecordingTranscriptionsRes()   {}
func (*ErrorResponse) getTexmlCallRes()                      {}
func (*ErrorResponse) getTexmlCallsRes()                     {}
func (*ErrorResponse) getTexmlConferenceParticipantRes()     {}
func (*ErrorResponse) getTexmlConferenceParticipantsRes()    {}
func (*ErrorResponse) getTexmlConferenceRecordingsRes()      {}
func (*ErrorResponse) getTexmlConferenceRes()                {}
func (*ErrorResponse) getTexmlConferencesRes()               {}
func (*ErrorResponse) listQueueCallsRes()                    {}
func (*ErrorResponse) retrieveCallFromQueueRes()             {}
func (*ErrorResponse) startTeXMLCallRecordingRes()           {}
func (*ErrorResponse) updateTeXMLCallRecordingRes()          {}
func (*ErrorResponse) updateTexmlConferenceParticipantRes()  {}
func (*ErrorResponse) updateTexmlConferenceRes()             {}

type ErrorSource struct {
	// JSON pointer (RFC6901) to the offending entity.
	Pointer OptString `json:"pointer"`
	// Indicates which query parameter caused the error.
	Parameter OptString `json:"parameter"`
}

// GetPointer returns the value of Pointer.
func (s *ErrorSource) GetPointer() OptString {
	return s.Pointer
}

// GetParameter returns the value of Parameter.
func (s *ErrorSource) GetParameter() OptString {
	return s.Parameter
}

// SetPointer sets the value of Pointer.
func (s *ErrorSource) SetPointer(val OptString) {
	s.Pointer = val
}

// SetParameter sets the value of Parameter.
func (s *ErrorSource) SetParameter(val OptString) {
	s.Parameter = val
}

// Ref: #/components/schemas/Errors
type Errors struct {
	Errors []Error `json:"errors"`
}

// GetErrors returns the value of Errors.
func (s *Errors) GetErrors() []Error {
	return s.Errors
}

// SetErrors sets the value of Errors.
func (s *Errors) SetErrors(val []Error) {
	s.Errors = val
}

func (*Errors) createDeletePhoneNumbersJobRes()                  {}
func (*Errors) createNetworkRes()                                {}
func (*Errors) createPhoneNumbersJobUpdateEmergencySettingsRes() {}
func (*Errors) createPrivateWirelessGatewayRes()                 {}
func (*Errors) createVerifiedNumberRes()                         {}
func (*Errors) deleteRoomRecordingsRes()                         {}
func (*Errors) listPhoneNumbersJobsRes()                         {}
func (*Errors) listVerifiedNumbersRes()                          {}
func (*Errors) lookupNumberRes()                                 {}
func (*Errors) retrievePhoneNumbersJobRes()                      {}

// The parameters for generating a porting orders CSV report.
// Ref: #/components/schemas/ExportPortingOrdersCSVReport
type ExportPortingOrdersCSVReport struct {
	// The filters to apply to the export porting order CSV report.
	Filters ExportPortingOrdersCSVReportFilters `json:"filters"`
}

// GetFilters returns the value of Filters.
func (s *ExportPortingOrdersCSVReport) GetFilters() ExportPortingOrdersCSVReportFilters {
	return s.Filters
}

// SetFilters sets the value of Filters.
func (s *ExportPortingOrdersCSVReport) SetFilters(val ExportPortingOrdersCSVReportFilters) {
	s.Filters = val
}

// The filters to apply to the export porting order CSV report.
type ExportPortingOrdersCSVReportFilters struct {
	// The status of the porting orders to include in the report.
	StatusIn []ExportPortingOrdersCSVReportFiltersStatusInItem `json:"status__in"`
	// The customer reference of the porting orders to include in the report.
	CustomerReferenceIn []string `json:"customer_reference__in"`
	// The date and time the porting order was created before.
	CreatedAtLt OptDateTime `json:"created_at__lt"`
	// The date and time the porting order was created after.
	CreatedAtGt OptDateTime `json:"created_at__gt"`
}

// GetStatusIn returns the value of StatusIn.
func (s *ExportPortingOrdersCSVReportFilters) GetStatusIn() []ExportPortingOrdersCSVReportFiltersStatusInItem {
	return s.StatusIn
}

// GetCustomerReferenceIn returns the value of CustomerReferenceIn.
func (s *ExportPortingOrdersCSVReportFilters) GetCustomerReferenceIn() []string {
	return s.CustomerReferenceIn
}

// GetCreatedAtLt returns the value of CreatedAtLt.
func (s *ExportPortingOrdersCSVReportFilters) GetCreatedAtLt() OptDateTime {
	return s.CreatedAtLt
}

// GetCreatedAtGt returns the value of CreatedAtGt.
func (s *ExportPortingOrdersCSVReportFilters) GetCreatedAtGt() OptDateTime {
	return s.CreatedAtGt
}

// SetStatusIn sets the value of StatusIn.
func (s *ExportPortingOrdersCSVReportFilters) SetStatusIn(val []ExportPortingOrdersCSVReportFiltersStatusInItem) {
	s.StatusIn = val
}

// SetCustomerReferenceIn sets the value of CustomerReferenceIn.
func (s *ExportPortingOrdersCSVReportFilters) SetCustomerReferenceIn(val []string) {
	s.CustomerReferenceIn = val
}

// SetCreatedAtLt sets the value of CreatedAtLt.
func (s *ExportPortingOrdersCSVReportFilters) SetCreatedAtLt(val OptDateTime) {
	s.CreatedAtLt = val
}

// SetCreatedAtGt sets the value of CreatedAtGt.
func (s *ExportPortingOrdersCSVReportFilters) SetCreatedAtGt(val OptDateTime) {
	s.CreatedAtGt = val
}

type ExportPortingOrdersCSVReportFiltersStatusInItem string

const (
	ExportPortingOrdersCSVReportFiltersStatusInItemDraft            ExportPortingOrdersCSVReportFiltersStatusInItem = "draft"
	ExportPortingOrdersCSVReportFiltersStatusInItemInProcess        ExportPortingOrdersCSVReportFiltersStatusInItem = "in-process"
	ExportPortingOrdersCSVReportFiltersStatusInItemSubmitted        ExportPortingOrdersCSVReportFiltersStatusInItem = "submitted"
	ExportPortingOrdersCSVReportFiltersStatusInItemException        ExportPortingOrdersCSVReportFiltersStatusInItem = "exception"
	ExportPortingOrdersCSVReportFiltersStatusInItemFocDateConfirmed ExportPortingOrdersCSVReportFiltersStatusInItem = "foc-date-confirmed"
	ExportPortingOrdersCSVReportFiltersStatusInItemCancelPending    ExportPortingOrdersCSVReportFiltersStatusInItem = "cancel-pending"
	ExportPortingOrdersCSVReportFiltersStatusInItemPorted           ExportPortingOrdersCSVReportFiltersStatusInItem = "ported"
	ExportPortingOrdersCSVReportFiltersStatusInItemCancelled        ExportPortingOrdersCSVReportFiltersStatusInItem = "cancelled"
)

// AllValues returns all ExportPortingOrdersCSVReportFiltersStatusInItem values.
func (ExportPortingOrdersCSVReportFiltersStatusInItem) AllValues() []ExportPortingOrdersCSVReportFiltersStatusInItem {
	return []ExportPortingOrdersCSVReportFiltersStatusInItem{
		ExportPortingOrdersCSVReportFiltersStatusInItemDraft,
		ExportPortingOrdersCSVReportFiltersStatusInItemInProcess,
		ExportPortingOrdersCSVReportFiltersStatusInItemSubmitted,
		ExportPortingOrdersCSVReportFiltersStatusInItemException,
		ExportPortingOrdersCSVReportFiltersStatusInItemFocDateConfirmed,
		ExportPortingOrdersCSVReportFiltersStatusInItemCancelPending,
		ExportPortingOrdersCSVReportFiltersStatusInItemPorted,
		ExportPortingOrdersCSVReportFiltersStatusInItemCancelled,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExportPortingOrdersCSVReportFiltersStatusInItem) MarshalText() ([]byte, error) {
	switch s {
	case ExportPortingOrdersCSVReportFiltersStatusInItemDraft:
		return []byte(s), nil
	case ExportPortingOrdersCSVReportFiltersStatusInItemInProcess:
		return []byte(s), nil
	case ExportPortingOrdersCSVReportFiltersStatusInItemSubmitted:
		return []byte(s), nil
	case ExportPortingOrdersCSVReportFiltersStatusInItemException:
		return []byte(s), nil
	case ExportPortingOrdersCSVReportFiltersStatusInItemFocDateConfirmed:
		return []byte(s), nil
	case ExportPortingOrdersCSVReportFiltersStatusInItemCancelPending:
		return []byte(s), nil
	case ExportPortingOrdersCSVReportFiltersStatusInItemPorted:
		return []byte(s), nil
	case ExportPortingOrdersCSVReportFiltersStatusInItemCancelled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExportPortingOrdersCSVReportFiltersStatusInItem) UnmarshalText(data []byte) error {
	switch ExportPortingOrdersCSVReportFiltersStatusInItem(data) {
	case ExportPortingOrdersCSVReportFiltersStatusInItemDraft:
		*s = ExportPortingOrdersCSVReportFiltersStatusInItemDraft
		return nil
	case ExportPortingOrdersCSVReportFiltersStatusInItemInProcess:
		*s = ExportPortingOrdersCSVReportFiltersStatusInItemInProcess
		return nil
	case ExportPortingOrdersCSVReportFiltersStatusInItemSubmitted:
		*s = ExportPortingOrdersCSVReportFiltersStatusInItemSubmitted
		return nil
	case ExportPortingOrdersCSVReportFiltersStatusInItemException:
		*s = ExportPortingOrdersCSVReportFiltersStatusInItemException
		return nil
	case ExportPortingOrdersCSVReportFiltersStatusInItemFocDateConfirmed:
		*s = ExportPortingOrdersCSVReportFiltersStatusInItemFocDateConfirmed
		return nil
	case ExportPortingOrdersCSVReportFiltersStatusInItemCancelPending:
		*s = ExportPortingOrdersCSVReportFiltersStatusInItemCancelPending
		return nil
	case ExportPortingOrdersCSVReportFiltersStatusInItemPorted:
		*s = ExportPortingOrdersCSVReportFiltersStatusInItemPorted
		return nil
	case ExportPortingOrdersCSVReportFiltersStatusInItemCancelled:
		*s = ExportPortingOrdersCSVReportFiltersStatusInItemCancelled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ExternalConnectionPhoneNumber
type ExternalConnectionPhoneNumber struct {
	TicketID OptUUID `json:"ticket_id"`
	// Phone number in E164 format.
	TelephoneNumber OptString `json:"telephone_number"`
	// Phone number ID from the Telnyx API.
	NumberID OptString `json:"number_id"`
	// Identifies the civic address assigned to the phone number.
	CivicAddressID OptUUID `json:"civic_address_id"`
	// Identifies the location assigned to the phone number.
	LocationID OptUUID `json:"location_id"`
	// The iso country code that will be displayed to the user when they receive a call from this phone
	// number.
	DisplayedCountryCode OptString                                               `json:"displayed_country_code"`
	AcquiredCapabilities []ExternalConnectionPhoneNumberAcquiredCapabilitiesItem `json:"acquired_capabilities"`
}

// GetTicketID returns the value of TicketID.
func (s *ExternalConnectionPhoneNumber) GetTicketID() OptUUID {
	return s.TicketID
}

// GetTelephoneNumber returns the value of TelephoneNumber.
func (s *ExternalConnectionPhoneNumber) GetTelephoneNumber() OptString {
	return s.TelephoneNumber
}

// GetNumberID returns the value of NumberID.
func (s *ExternalConnectionPhoneNumber) GetNumberID() OptString {
	return s.NumberID
}

// GetCivicAddressID returns the value of CivicAddressID.
func (s *ExternalConnectionPhoneNumber) GetCivicAddressID() OptUUID {
	return s.CivicAddressID
}

// GetLocationID returns the value of LocationID.
func (s *ExternalConnectionPhoneNumber) GetLocationID() OptUUID {
	return s.LocationID
}

// GetDisplayedCountryCode returns the value of DisplayedCountryCode.
func (s *ExternalConnectionPhoneNumber) GetDisplayedCountryCode() OptString {
	return s.DisplayedCountryCode
}

// GetAcquiredCapabilities returns the value of AcquiredCapabilities.
func (s *ExternalConnectionPhoneNumber) GetAcquiredCapabilities() []ExternalConnectionPhoneNumberAcquiredCapabilitiesItem {
	return s.AcquiredCapabilities
}

// SetTicketID sets the value of TicketID.
func (s *ExternalConnectionPhoneNumber) SetTicketID(val OptUUID) {
	s.TicketID = val
}

// SetTelephoneNumber sets the value of TelephoneNumber.
func (s *ExternalConnectionPhoneNumber) SetTelephoneNumber(val OptString) {
	s.TelephoneNumber = val
}

// SetNumberID sets the value of NumberID.
func (s *ExternalConnectionPhoneNumber) SetNumberID(val OptString) {
	s.NumberID = val
}

// SetCivicAddressID sets the value of CivicAddressID.
func (s *ExternalConnectionPhoneNumber) SetCivicAddressID(val OptUUID) {
	s.CivicAddressID = val
}

// SetLocationID sets the value of LocationID.
func (s *ExternalConnectionPhoneNumber) SetLocationID(val OptUUID) {
	s.LocationID = val
}

// SetDisplayedCountryCode sets the value of DisplayedCountryCode.
func (s *ExternalConnectionPhoneNumber) SetDisplayedCountryCode(val OptString) {
	s.DisplayedCountryCode = val
}

// SetAcquiredCapabilities sets the value of AcquiredCapabilities.
func (s *ExternalConnectionPhoneNumber) SetAcquiredCapabilities(val []ExternalConnectionPhoneNumberAcquiredCapabilitiesItem) {
	s.AcquiredCapabilities = val
}

// The capabilities that are available for this phone number on Microsoft Teams.
type ExternalConnectionPhoneNumberAcquiredCapabilitiesItem string

const (
	ExternalConnectionPhoneNumberAcquiredCapabilitiesItemFirstPartyAppAssignment ExternalConnectionPhoneNumberAcquiredCapabilitiesItem = "FirstPartyAppAssignment"
	ExternalConnectionPhoneNumberAcquiredCapabilitiesItemInboundCalling          ExternalConnectionPhoneNumberAcquiredCapabilitiesItem = "InboundCalling"
	ExternalConnectionPhoneNumberAcquiredCapabilitiesItemOffice365               ExternalConnectionPhoneNumberAcquiredCapabilitiesItem = "Office365"
	ExternalConnectionPhoneNumberAcquiredCapabilitiesItemOutboundCalling         ExternalConnectionPhoneNumberAcquiredCapabilitiesItem = "OutboundCalling"
	ExternalConnectionPhoneNumberAcquiredCapabilitiesItemUserAssignment          ExternalConnectionPhoneNumberAcquiredCapabilitiesItem = "UserAssignment"
)

// AllValues returns all ExternalConnectionPhoneNumberAcquiredCapabilitiesItem values.
func (ExternalConnectionPhoneNumberAcquiredCapabilitiesItem) AllValues() []ExternalConnectionPhoneNumberAcquiredCapabilitiesItem {
	return []ExternalConnectionPhoneNumberAcquiredCapabilitiesItem{
		ExternalConnectionPhoneNumberAcquiredCapabilitiesItemFirstPartyAppAssignment,
		ExternalConnectionPhoneNumberAcquiredCapabilitiesItemInboundCalling,
		ExternalConnectionPhoneNumberAcquiredCapabilitiesItemOffice365,
		ExternalConnectionPhoneNumberAcquiredCapabilitiesItemOutboundCalling,
		ExternalConnectionPhoneNumberAcquiredCapabilitiesItemUserAssignment,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExternalConnectionPhoneNumberAcquiredCapabilitiesItem) MarshalText() ([]byte, error) {
	switch s {
	case ExternalConnectionPhoneNumberAcquiredCapabilitiesItemFirstPartyAppAssignment:
		return []byte(s), nil
	case ExternalConnectionPhoneNumberAcquiredCapabilitiesItemInboundCalling:
		return []byte(s), nil
	case ExternalConnectionPhoneNumberAcquiredCapabilitiesItemOffice365:
		return []byte(s), nil
	case ExternalConnectionPhoneNumberAcquiredCapabilitiesItemOutboundCalling:
		return []byte(s), nil
	case ExternalConnectionPhoneNumberAcquiredCapabilitiesItemUserAssignment:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExternalConnectionPhoneNumberAcquiredCapabilitiesItem) UnmarshalText(data []byte) error {
	switch ExternalConnectionPhoneNumberAcquiredCapabilitiesItem(data) {
	case ExternalConnectionPhoneNumberAcquiredCapabilitiesItemFirstPartyAppAssignment:
		*s = ExternalConnectionPhoneNumberAcquiredCapabilitiesItemFirstPartyAppAssignment
		return nil
	case ExternalConnectionPhoneNumberAcquiredCapabilitiesItemInboundCalling:
		*s = ExternalConnectionPhoneNumberAcquiredCapabilitiesItemInboundCalling
		return nil
	case ExternalConnectionPhoneNumberAcquiredCapabilitiesItemOffice365:
		*s = ExternalConnectionPhoneNumberAcquiredCapabilitiesItemOffice365
		return nil
	case ExternalConnectionPhoneNumberAcquiredCapabilitiesItemOutboundCalling:
		*s = ExternalConnectionPhoneNumberAcquiredCapabilitiesItemOutboundCalling
		return nil
	case ExternalConnectionPhoneNumberAcquiredCapabilitiesItemUserAssignment:
		*s = ExternalConnectionPhoneNumberAcquiredCapabilitiesItemUserAssignment
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Feature
type Feature struct {
	Name OptString `json:"name"`
}

// GetName returns the value of Name.
func (s *Feature) GetName() OptString {
	return s.Name
}

// SetName sets the value of Name.
func (s *Feature) SetName(val OptString) {
	s.Name = val
}

type FilterBasicStatusLifecycle string

const (
	FilterBasicStatusLifecycleInProgress FilterBasicStatusLifecycle = "in-progress"
	FilterBasicStatusLifecycleCompleted  FilterBasicStatusLifecycle = "completed"
	FilterBasicStatusLifecycleFailed     FilterBasicStatusLifecycle = "failed"
)

// AllValues returns all FilterBasicStatusLifecycle values.
func (FilterBasicStatusLifecycle) AllValues() []FilterBasicStatusLifecycle {
	return []FilterBasicStatusLifecycle{
		FilterBasicStatusLifecycleInProgress,
		FilterBasicStatusLifecycleCompleted,
		FilterBasicStatusLifecycleFailed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FilterBasicStatusLifecycle) MarshalText() ([]byte, error) {
	switch s {
	case FilterBasicStatusLifecycleInProgress:
		return []byte(s), nil
	case FilterBasicStatusLifecycleCompleted:
		return []byte(s), nil
	case FilterBasicStatusLifecycleFailed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FilterBasicStatusLifecycle) UnmarshalText(data []byte) error {
	switch FilterBasicStatusLifecycle(data) {
	case FilterBasicStatusLifecycleInProgress:
		*s = FilterBasicStatusLifecycleInProgress
		return nil
	case FilterBasicStatusLifecycleCompleted:
		*s = FilterBasicStatusLifecycleCompleted
		return nil
	case FilterBasicStatusLifecycleFailed:
		*s = FilterBasicStatusLifecycleFailed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type FilterByPortingOrderStatus string

const (
	FilterByPortingOrderStatusDraft            FilterByPortingOrderStatus = "draft"
	FilterByPortingOrderStatusInProcess        FilterByPortingOrderStatus = "in-process"
	FilterByPortingOrderStatusSubmitted        FilterByPortingOrderStatus = "submitted"
	FilterByPortingOrderStatusException        FilterByPortingOrderStatus = "exception"
	FilterByPortingOrderStatusFocDateConfirmed FilterByPortingOrderStatus = "foc-date-confirmed"
	FilterByPortingOrderStatusCancelPending    FilterByPortingOrderStatus = "cancel-pending"
	FilterByPortingOrderStatusPorted           FilterByPortingOrderStatus = "ported"
	FilterByPortingOrderStatusCancelled        FilterByPortingOrderStatus = "cancelled"
)

// AllValues returns all FilterByPortingOrderStatus values.
func (FilterByPortingOrderStatus) AllValues() []FilterByPortingOrderStatus {
	return []FilterByPortingOrderStatus{
		FilterByPortingOrderStatusDraft,
		FilterByPortingOrderStatusInProcess,
		FilterByPortingOrderStatusSubmitted,
		FilterByPortingOrderStatusException,
		FilterByPortingOrderStatusFocDateConfirmed,
		FilterByPortingOrderStatusCancelPending,
		FilterByPortingOrderStatusPorted,
		FilterByPortingOrderStatusCancelled,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FilterByPortingOrderStatus) MarshalText() ([]byte, error) {
	switch s {
	case FilterByPortingOrderStatusDraft:
		return []byte(s), nil
	case FilterByPortingOrderStatusInProcess:
		return []byte(s), nil
	case FilterByPortingOrderStatusSubmitted:
		return []byte(s), nil
	case FilterByPortingOrderStatusException:
		return []byte(s), nil
	case FilterByPortingOrderStatusFocDateConfirmed:
		return []byte(s), nil
	case FilterByPortingOrderStatusCancelPending:
		return []byte(s), nil
	case FilterByPortingOrderStatusPorted:
		return []byte(s), nil
	case FilterByPortingOrderStatusCancelled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FilterByPortingOrderStatus) UnmarshalText(data []byte) error {
	switch FilterByPortingOrderStatus(data) {
	case FilterByPortingOrderStatusDraft:
		*s = FilterByPortingOrderStatusDraft
		return nil
	case FilterByPortingOrderStatusInProcess:
		*s = FilterByPortingOrderStatusInProcess
		return nil
	case FilterByPortingOrderStatusSubmitted:
		*s = FilterByPortingOrderStatusSubmitted
		return nil
	case FilterByPortingOrderStatusException:
		*s = FilterByPortingOrderStatusException
		return nil
	case FilterByPortingOrderStatusFocDateConfirmed:
		*s = FilterByPortingOrderStatusFocDateConfirmed
		return nil
	case FilterByPortingOrderStatusCancelPending:
		*s = FilterByPortingOrderStatusCancelPending
		return nil
	case FilterByPortingOrderStatusPorted:
		*s = FilterByPortingOrderStatusPorted
		return nil
	case FilterByPortingOrderStatusCancelled:
		*s = FilterByPortingOrderStatusCancelled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type FilterByPortingOrderStatusIn string

const (
	FilterByPortingOrderStatusInDraft            FilterByPortingOrderStatusIn = "draft"
	FilterByPortingOrderStatusInInProcess        FilterByPortingOrderStatusIn = "in-process"
	FilterByPortingOrderStatusInSubmitted        FilterByPortingOrderStatusIn = "submitted"
	FilterByPortingOrderStatusInException        FilterByPortingOrderStatusIn = "exception"
	FilterByPortingOrderStatusInFocDateConfirmed FilterByPortingOrderStatusIn = "foc-date-confirmed"
	FilterByPortingOrderStatusInCancelPending    FilterByPortingOrderStatusIn = "cancel-pending"
	FilterByPortingOrderStatusInPorted           FilterByPortingOrderStatusIn = "ported"
	FilterByPortingOrderStatusInCancelled        FilterByPortingOrderStatusIn = "cancelled"
)

// AllValues returns all FilterByPortingOrderStatusIn values.
func (FilterByPortingOrderStatusIn) AllValues() []FilterByPortingOrderStatusIn {
	return []FilterByPortingOrderStatusIn{
		FilterByPortingOrderStatusInDraft,
		FilterByPortingOrderStatusInInProcess,
		FilterByPortingOrderStatusInSubmitted,
		FilterByPortingOrderStatusInException,
		FilterByPortingOrderStatusInFocDateConfirmed,
		FilterByPortingOrderStatusInCancelPending,
		FilterByPortingOrderStatusInPorted,
		FilterByPortingOrderStatusInCancelled,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FilterByPortingOrderStatusIn) MarshalText() ([]byte, error) {
	switch s {
	case FilterByPortingOrderStatusInDraft:
		return []byte(s), nil
	case FilterByPortingOrderStatusInInProcess:
		return []byte(s), nil
	case FilterByPortingOrderStatusInSubmitted:
		return []byte(s), nil
	case FilterByPortingOrderStatusInException:
		return []byte(s), nil
	case FilterByPortingOrderStatusInFocDateConfirmed:
		return []byte(s), nil
	case FilterByPortingOrderStatusInCancelPending:
		return []byte(s), nil
	case FilterByPortingOrderStatusInPorted:
		return []byte(s), nil
	case FilterByPortingOrderStatusInCancelled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FilterByPortingOrderStatusIn) UnmarshalText(data []byte) error {
	switch FilterByPortingOrderStatusIn(data) {
	case FilterByPortingOrderStatusInDraft:
		*s = FilterByPortingOrderStatusInDraft
		return nil
	case FilterByPortingOrderStatusInInProcess:
		*s = FilterByPortingOrderStatusInInProcess
		return nil
	case FilterByPortingOrderStatusInSubmitted:
		*s = FilterByPortingOrderStatusInSubmitted
		return nil
	case FilterByPortingOrderStatusInException:
		*s = FilterByPortingOrderStatusInException
		return nil
	case FilterByPortingOrderStatusInFocDateConfirmed:
		*s = FilterByPortingOrderStatusInFocDateConfirmed
		return nil
	case FilterByPortingOrderStatusInCancelPending:
		*s = FilterByPortingOrderStatusInCancelPending
		return nil
	case FilterByPortingOrderStatusInPorted:
		*s = FilterByPortingOrderStatusInPorted
		return nil
	case FilterByPortingOrderStatusInCancelled:
		*s = FilterByPortingOrderStatusInCancelled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// FindPortoutCommentsNotFound is response for FindPortoutComments operation.
type FindPortoutCommentsNotFound struct{}

func (*FindPortoutCommentsNotFound) findPortoutCommentsRes() {}

// FindPortoutCommentsUnauthorized is response for FindPortoutComments operation.
type FindPortoutCommentsUnauthorized struct{}

func (*FindPortoutCommentsUnauthorized) findPortoutCommentsRes() {}

// FindPortoutCommentsUnprocessableEntity is response for FindPortoutComments operation.
type FindPortoutCommentsUnprocessableEntity struct{}

func (*FindPortoutCommentsUnprocessableEntity) findPortoutCommentsRes() {}

// FindPortoutRequestNotFound is response for FindPortoutRequest operation.
type FindPortoutRequestNotFound struct{}

func (*FindPortoutRequestNotFound) findPortoutRequestRes() {}

// FindPortoutRequestUnauthorized is response for FindPortoutRequest operation.
type FindPortoutRequestUnauthorized struct{}

func (*FindPortoutRequestUnauthorized) findPortoutRequestRes() {}

// FindPortoutRequestUnprocessableEntity is response for FindPortoutRequest operation.
type FindPortoutRequestUnprocessableEntity struct{}

func (*FindPortoutRequestUnprocessableEntity) findPortoutRequestRes() {}

// FindTelephonyCredentialsBadRequest is response for FindTelephonyCredentials operation.
type FindTelephonyCredentialsBadRequest struct{}

func (*FindTelephonyCredentialsBadRequest) findTelephonyCredentialsRes() {}

// FindTelephonyCredentialsNotFound is response for FindTelephonyCredentials operation.
type FindTelephonyCredentialsNotFound struct{}

func (*FindTelephonyCredentialsNotFound) findTelephonyCredentialsRes() {}

// FindTelephonyCredentialsUnauthorized is response for FindTelephonyCredentials operation.
type FindTelephonyCredentialsUnauthorized struct{}

func (*FindTelephonyCredentialsUnauthorized) findTelephonyCredentialsRes() {}

type FindTexmlApplicationsBadRequest ErrorResponse

func (*FindTexmlApplicationsBadRequest) findTexmlApplicationsRes() {}

type FindTexmlApplicationsUnauthorized ErrorResponse

func (*FindTexmlApplicationsUnauthorized) findTexmlApplicationsRes() {}

type FirstCommandTimeout bool

type FirstCommandTimeoutSecs int

// Ref: #/components/responses/ForbiddenResponse
type ForbiddenResponse struct{}

func (*ForbiddenResponse) createDeletePhoneNumbersJobRes()                  {}
func (*ForbiddenResponse) createPhoneNumbersJobUpdateEmergencySettingsRes() {}

// Ref: #/components/schemas/GCSConfigurationData
type GCSConfigurationData struct {
	Credentials OptCredentials `json:"credentials"`
	Bucket      OptBucket      `json:"bucket"`
}

// GetCredentials returns the value of Credentials.
func (s *GCSConfigurationData) GetCredentials() OptCredentials {
	return s.Credentials
}

// GetBucket returns the value of Bucket.
func (s *GCSConfigurationData) GetBucket() OptBucket {
	return s.Bucket
}

// SetCredentials sets the value of Credentials.
func (s *GCSConfigurationData) SetCredentials(val OptCredentials) {
	s.Credentials = val
}

// SetBucket sets the value of Bucket.
func (s *GCSConfigurationData) SetBucket(val OptBucket) {
	s.Bucket = val
}

// Ref: #/components/schemas/GatherRequest
type GatherRequest struct {
	// The minimum number of digits to fetch. This parameter has a minimum value of 1.
	MinimumDigits OptInt32 `json:"minimum_digits"`
	// The maximum number of digits to fetch. This parameter has a maximum value of 128.
	MaximumDigits OptInt32 `json:"maximum_digits"`
	// The number of milliseconds to wait to complete the request.
	TimeoutMillis OptInt32 `json:"timeout_millis"`
	// The number of milliseconds to wait for input between digits.
	InterDigitTimeoutMillis OptInt32 `json:"inter_digit_timeout_millis"`
	// The number of milliseconds to wait for the first DTMF.
	InitialTimeoutMillis OptInt32 `json:"initial_timeout_millis"`
	// The digit used to terminate input if fewer than `maximum_digits` digits have been gathered.
	TerminatingDigit OptString `json:"terminating_digit"`
	// A list of all digits accepted as valid.
	ValidDigits OptString `json:"valid_digits"`
	// An id that will be sent back in the corresponding `call.gather.ended` webhook. Will be randomly
	// generated if not specified.
	GatherID OptString `json:"gather_id"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetMinimumDigits returns the value of MinimumDigits.
func (s *GatherRequest) GetMinimumDigits() OptInt32 {
	return s.MinimumDigits
}

// GetMaximumDigits returns the value of MaximumDigits.
func (s *GatherRequest) GetMaximumDigits() OptInt32 {
	return s.MaximumDigits
}

// GetTimeoutMillis returns the value of TimeoutMillis.
func (s *GatherRequest) GetTimeoutMillis() OptInt32 {
	return s.TimeoutMillis
}

// GetInterDigitTimeoutMillis returns the value of InterDigitTimeoutMillis.
func (s *GatherRequest) GetInterDigitTimeoutMillis() OptInt32 {
	return s.InterDigitTimeoutMillis
}

// GetInitialTimeoutMillis returns the value of InitialTimeoutMillis.
func (s *GatherRequest) GetInitialTimeoutMillis() OptInt32 {
	return s.InitialTimeoutMillis
}

// GetTerminatingDigit returns the value of TerminatingDigit.
func (s *GatherRequest) GetTerminatingDigit() OptString {
	return s.TerminatingDigit
}

// GetValidDigits returns the value of ValidDigits.
func (s *GatherRequest) GetValidDigits() OptString {
	return s.ValidDigits
}

// GetGatherID returns the value of GatherID.
func (s *GatherRequest) GetGatherID() OptString {
	return s.GatherID
}

// GetClientState returns the value of ClientState.
func (s *GatherRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *GatherRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetMinimumDigits sets the value of MinimumDigits.
func (s *GatherRequest) SetMinimumDigits(val OptInt32) {
	s.MinimumDigits = val
}

// SetMaximumDigits sets the value of MaximumDigits.
func (s *GatherRequest) SetMaximumDigits(val OptInt32) {
	s.MaximumDigits = val
}

// SetTimeoutMillis sets the value of TimeoutMillis.
func (s *GatherRequest) SetTimeoutMillis(val OptInt32) {
	s.TimeoutMillis = val
}

// SetInterDigitTimeoutMillis sets the value of InterDigitTimeoutMillis.
func (s *GatherRequest) SetInterDigitTimeoutMillis(val OptInt32) {
	s.InterDigitTimeoutMillis = val
}

// SetInitialTimeoutMillis sets the value of InitialTimeoutMillis.
func (s *GatherRequest) SetInitialTimeoutMillis(val OptInt32) {
	s.InitialTimeoutMillis = val
}

// SetTerminatingDigit sets the value of TerminatingDigit.
func (s *GatherRequest) SetTerminatingDigit(val OptString) {
	s.TerminatingDigit = val
}

// SetValidDigits sets the value of ValidDigits.
func (s *GatherRequest) SetValidDigits(val OptString) {
	s.ValidDigits = val
}

// SetGatherID sets the value of GatherID.
func (s *GatherRequest) SetGatherID(val OptString) {
	s.GatherID = val
}

// SetClientState sets the value of ClientState.
func (s *GatherRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *GatherRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// Ref: #/components/schemas/GatherUsingAudioRequest
type GatherUsingAudioRequest struct {
	// The URL of a file to be played back at the beginning of each prompt. The URL can point to either a
	// WAV or MP3 file. media_name and audio_url cannot be used together in one request.
	AudioURL OptString `json:"audio_url"`
	// The media_name of a file to be played back at the beginning of each prompt. The media_name must
	// point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The
	// file must either be a WAV or MP3 file.
	MediaName OptString `json:"media_name"`
	// The URL of a file to play when digits don't match the `valid_digits` parameter or the number of
	// digits is not between `min` and `max`. The URL can point to either a WAV or MP3 file.
	// invalid_media_name and invalid_audio_url cannot be used together in one request.
	InvalidAudioURL OptString `json:"invalid_audio_url"`
	// The media_name of a file to be played back when digits don't match the `valid_digits` parameter or
	// the number of digits is not between `min` and `max`. The media_name must point to a file
	// previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either
	// be a WAV or MP3 file.
	InvalidMediaName OptString `json:"invalid_media_name"`
	// The minimum number of digits to fetch. This parameter has a minimum value of 1.
	MinimumDigits OptInt32 `json:"minimum_digits"`
	// The maximum number of digits to fetch. This parameter has a maximum value of 128.
	MaximumDigits OptInt32 `json:"maximum_digits"`
	// The maximum number of times the file should be played if there is no input from the user on the
	// call.
	MaximumTries OptInt32 `json:"maximum_tries"`
	// The number of milliseconds to wait for a DTMF response after file playback ends before a replaying
	// the sound file.
	TimeoutMillis OptInt32 `json:"timeout_millis"`
	// The digit used to terminate input if fewer than `maximum_digits` digits have been gathered.
	TerminatingDigit OptString `json:"terminating_digit"`
	// A list of all digits accepted as valid.
	ValidDigits OptString `json:"valid_digits"`
	// The number of milliseconds to wait for input between digits.
	InterDigitTimeoutMillis OptInt32 `json:"inter_digit_timeout_millis"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetAudioURL returns the value of AudioURL.
func (s *GatherUsingAudioRequest) GetAudioURL() OptString {
	return s.AudioURL
}

// GetMediaName returns the value of MediaName.
func (s *GatherUsingAudioRequest) GetMediaName() OptString {
	return s.MediaName
}

// GetInvalidAudioURL returns the value of InvalidAudioURL.
func (s *GatherUsingAudioRequest) GetInvalidAudioURL() OptString {
	return s.InvalidAudioURL
}

// GetInvalidMediaName returns the value of InvalidMediaName.
func (s *GatherUsingAudioRequest) GetInvalidMediaName() OptString {
	return s.InvalidMediaName
}

// GetMinimumDigits returns the value of MinimumDigits.
func (s *GatherUsingAudioRequest) GetMinimumDigits() OptInt32 {
	return s.MinimumDigits
}

// GetMaximumDigits returns the value of MaximumDigits.
func (s *GatherUsingAudioRequest) GetMaximumDigits() OptInt32 {
	return s.MaximumDigits
}

// GetMaximumTries returns the value of MaximumTries.
func (s *GatherUsingAudioRequest) GetMaximumTries() OptInt32 {
	return s.MaximumTries
}

// GetTimeoutMillis returns the value of TimeoutMillis.
func (s *GatherUsingAudioRequest) GetTimeoutMillis() OptInt32 {
	return s.TimeoutMillis
}

// GetTerminatingDigit returns the value of TerminatingDigit.
func (s *GatherUsingAudioRequest) GetTerminatingDigit() OptString {
	return s.TerminatingDigit
}

// GetValidDigits returns the value of ValidDigits.
func (s *GatherUsingAudioRequest) GetValidDigits() OptString {
	return s.ValidDigits
}

// GetInterDigitTimeoutMillis returns the value of InterDigitTimeoutMillis.
func (s *GatherUsingAudioRequest) GetInterDigitTimeoutMillis() OptInt32 {
	return s.InterDigitTimeoutMillis
}

// GetClientState returns the value of ClientState.
func (s *GatherUsingAudioRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *GatherUsingAudioRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetAudioURL sets the value of AudioURL.
func (s *GatherUsingAudioRequest) SetAudioURL(val OptString) {
	s.AudioURL = val
}

// SetMediaName sets the value of MediaName.
func (s *GatherUsingAudioRequest) SetMediaName(val OptString) {
	s.MediaName = val
}

// SetInvalidAudioURL sets the value of InvalidAudioURL.
func (s *GatherUsingAudioRequest) SetInvalidAudioURL(val OptString) {
	s.InvalidAudioURL = val
}

// SetInvalidMediaName sets the value of InvalidMediaName.
func (s *GatherUsingAudioRequest) SetInvalidMediaName(val OptString) {
	s.InvalidMediaName = val
}

// SetMinimumDigits sets the value of MinimumDigits.
func (s *GatherUsingAudioRequest) SetMinimumDigits(val OptInt32) {
	s.MinimumDigits = val
}

// SetMaximumDigits sets the value of MaximumDigits.
func (s *GatherUsingAudioRequest) SetMaximumDigits(val OptInt32) {
	s.MaximumDigits = val
}

// SetMaximumTries sets the value of MaximumTries.
func (s *GatherUsingAudioRequest) SetMaximumTries(val OptInt32) {
	s.MaximumTries = val
}

// SetTimeoutMillis sets the value of TimeoutMillis.
func (s *GatherUsingAudioRequest) SetTimeoutMillis(val OptInt32) {
	s.TimeoutMillis = val
}

// SetTerminatingDigit sets the value of TerminatingDigit.
func (s *GatherUsingAudioRequest) SetTerminatingDigit(val OptString) {
	s.TerminatingDigit = val
}

// SetValidDigits sets the value of ValidDigits.
func (s *GatherUsingAudioRequest) SetValidDigits(val OptString) {
	s.ValidDigits = val
}

// SetInterDigitTimeoutMillis sets the value of InterDigitTimeoutMillis.
func (s *GatherUsingAudioRequest) SetInterDigitTimeoutMillis(val OptInt32) {
	s.InterDigitTimeoutMillis = val
}

// SetClientState sets the value of ClientState.
func (s *GatherUsingAudioRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *GatherUsingAudioRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// Ref: #/components/schemas/GatherUsingSpeakRequest
type GatherUsingSpeakRequest struct {
	// The text or SSML to be converted into speech. There is a 3,000 character limit.
	Payload string `json:"payload"`
	// The text or SSML to be converted into speech when digits don't match the `valid_digits` parameter
	// or the number of digits is not between `min` and `max`. There is a 3,000 character limit.
	InvalidPayload OptString `json:"invalid_payload"`
	// The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup
	// Language (SSML).
	PayloadType OptGatherUsingSpeakRequestPayloadType `json:"payload_type"`
	// This parameter impacts speech quality, language options and payload types. When using `basic`,
	// only the `en-US` language and payload type `text` are allowed.
	ServiceLevel OptGatherUsingSpeakRequestServiceLevel `json:"service_level"`
	// The gender of the voice used to speak back the text or the specific Amazon Polly voice to be used
	// in the form of `Polly.<voice>`, e.g. `Polly.Brian`. All standard Amazon Polly voices are supported.
	Voice GatherUsingSpeakRequestVoice `json:"voice"`
	// The language you want spoken. This parameter is ignored when a `Polly.*` voice is specified.
	Language OptGatherUsingSpeakRequestLanguage `json:"language"`
	// The minimum number of digits to fetch. This parameter has a minimum value of 1.
	MinimumDigits OptInt32 `json:"minimum_digits"`
	// The maximum number of digits to fetch. This parameter has a maximum value of 128.
	MaximumDigits OptInt32 `json:"maximum_digits"`
	// The maximum number of times that a file should be played back if there is no input from the user
	// on the call.
	MaximumTries OptInt32 `json:"maximum_tries"`
	// The number of milliseconds to wait for a DTMF response after speak ends before a replaying the
	// sound file.
	TimeoutMillis OptInt32 `json:"timeout_millis"`
	// The digit used to terminate input if fewer than `maximum_digits` digits have been gathered.
	TerminatingDigit OptString `json:"terminating_digit"`
	// A list of all digits accepted as valid.
	ValidDigits OptString `json:"valid_digits"`
	// The number of milliseconds to wait for input between digits.
	InterDigitTimeoutMillis OptInt32 `json:"inter_digit_timeout_millis"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetPayload returns the value of Payload.
func (s *GatherUsingSpeakRequest) GetPayload() string {
	return s.Payload
}

// GetInvalidPayload returns the value of InvalidPayload.
func (s *GatherUsingSpeakRequest) GetInvalidPayload() OptString {
	return s.InvalidPayload
}

// GetPayloadType returns the value of PayloadType.
func (s *GatherUsingSpeakRequest) GetPayloadType() OptGatherUsingSpeakRequestPayloadType {
	return s.PayloadType
}

// GetServiceLevel returns the value of ServiceLevel.
func (s *GatherUsingSpeakRequest) GetServiceLevel() OptGatherUsingSpeakRequestServiceLevel {
	return s.ServiceLevel
}

// GetVoice returns the value of Voice.
func (s *GatherUsingSpeakRequest) GetVoice() GatherUsingSpeakRequestVoice {
	return s.Voice
}

// GetLanguage returns the value of Language.
func (s *GatherUsingSpeakRequest) GetLanguage() OptGatherUsingSpeakRequestLanguage {
	return s.Language
}

// GetMinimumDigits returns the value of MinimumDigits.
func (s *GatherUsingSpeakRequest) GetMinimumDigits() OptInt32 {
	return s.MinimumDigits
}

// GetMaximumDigits returns the value of MaximumDigits.
func (s *GatherUsingSpeakRequest) GetMaximumDigits() OptInt32 {
	return s.MaximumDigits
}

// GetMaximumTries returns the value of MaximumTries.
func (s *GatherUsingSpeakRequest) GetMaximumTries() OptInt32 {
	return s.MaximumTries
}

// GetTimeoutMillis returns the value of TimeoutMillis.
func (s *GatherUsingSpeakRequest) GetTimeoutMillis() OptInt32 {
	return s.TimeoutMillis
}

// GetTerminatingDigit returns the value of TerminatingDigit.
func (s *GatherUsingSpeakRequest) GetTerminatingDigit() OptString {
	return s.TerminatingDigit
}

// GetValidDigits returns the value of ValidDigits.
func (s *GatherUsingSpeakRequest) GetValidDigits() OptString {
	return s.ValidDigits
}

// GetInterDigitTimeoutMillis returns the value of InterDigitTimeoutMillis.
func (s *GatherUsingSpeakRequest) GetInterDigitTimeoutMillis() OptInt32 {
	return s.InterDigitTimeoutMillis
}

// GetClientState returns the value of ClientState.
func (s *GatherUsingSpeakRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *GatherUsingSpeakRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetPayload sets the value of Payload.
func (s *GatherUsingSpeakRequest) SetPayload(val string) {
	s.Payload = val
}

// SetInvalidPayload sets the value of InvalidPayload.
func (s *GatherUsingSpeakRequest) SetInvalidPayload(val OptString) {
	s.InvalidPayload = val
}

// SetPayloadType sets the value of PayloadType.
func (s *GatherUsingSpeakRequest) SetPayloadType(val OptGatherUsingSpeakRequestPayloadType) {
	s.PayloadType = val
}

// SetServiceLevel sets the value of ServiceLevel.
func (s *GatherUsingSpeakRequest) SetServiceLevel(val OptGatherUsingSpeakRequestServiceLevel) {
	s.ServiceLevel = val
}

// SetVoice sets the value of Voice.
func (s *GatherUsingSpeakRequest) SetVoice(val GatherUsingSpeakRequestVoice) {
	s.Voice = val
}

// SetLanguage sets the value of Language.
func (s *GatherUsingSpeakRequest) SetLanguage(val OptGatherUsingSpeakRequestLanguage) {
	s.Language = val
}

// SetMinimumDigits sets the value of MinimumDigits.
func (s *GatherUsingSpeakRequest) SetMinimumDigits(val OptInt32) {
	s.MinimumDigits = val
}

// SetMaximumDigits sets the value of MaximumDigits.
func (s *GatherUsingSpeakRequest) SetMaximumDigits(val OptInt32) {
	s.MaximumDigits = val
}

// SetMaximumTries sets the value of MaximumTries.
func (s *GatherUsingSpeakRequest) SetMaximumTries(val OptInt32) {
	s.MaximumTries = val
}

// SetTimeoutMillis sets the value of TimeoutMillis.
func (s *GatherUsingSpeakRequest) SetTimeoutMillis(val OptInt32) {
	s.TimeoutMillis = val
}

// SetTerminatingDigit sets the value of TerminatingDigit.
func (s *GatherUsingSpeakRequest) SetTerminatingDigit(val OptString) {
	s.TerminatingDigit = val
}

// SetValidDigits sets the value of ValidDigits.
func (s *GatherUsingSpeakRequest) SetValidDigits(val OptString) {
	s.ValidDigits = val
}

// SetInterDigitTimeoutMillis sets the value of InterDigitTimeoutMillis.
func (s *GatherUsingSpeakRequest) SetInterDigitTimeoutMillis(val OptInt32) {
	s.InterDigitTimeoutMillis = val
}

// SetClientState sets the value of ClientState.
func (s *GatherUsingSpeakRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *GatherUsingSpeakRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// The language you want spoken. This parameter is ignored when a `Polly.*` voice is specified.
type GatherUsingSpeakRequestLanguage string

const (
	GatherUsingSpeakRequestLanguageArb     GatherUsingSpeakRequestLanguage = "arb"
	GatherUsingSpeakRequestLanguageCmnCN   GatherUsingSpeakRequestLanguage = "cmn-CN"
	GatherUsingSpeakRequestLanguageCyGB    GatherUsingSpeakRequestLanguage = "cy-GB"
	GatherUsingSpeakRequestLanguageDaDK    GatherUsingSpeakRequestLanguage = "da-DK"
	GatherUsingSpeakRequestLanguageDeDE    GatherUsingSpeakRequestLanguage = "de-DE"
	GatherUsingSpeakRequestLanguageEnAU    GatherUsingSpeakRequestLanguage = "en-AU"
	GatherUsingSpeakRequestLanguageEnGB    GatherUsingSpeakRequestLanguage = "en-GB"
	GatherUsingSpeakRequestLanguageEnGBWLS GatherUsingSpeakRequestLanguage = "en-GB-WLS"
	GatherUsingSpeakRequestLanguageEnIN    GatherUsingSpeakRequestLanguage = "en-IN"
	GatherUsingSpeakRequestLanguageEnUS    GatherUsingSpeakRequestLanguage = "en-US"
	GatherUsingSpeakRequestLanguageEsES    GatherUsingSpeakRequestLanguage = "es-ES"
	GatherUsingSpeakRequestLanguageEsMX    GatherUsingSpeakRequestLanguage = "es-MX"
	GatherUsingSpeakRequestLanguageEsUS    GatherUsingSpeakRequestLanguage = "es-US"
	GatherUsingSpeakRequestLanguageFrCA    GatherUsingSpeakRequestLanguage = "fr-CA"
	GatherUsingSpeakRequestLanguageFrFR    GatherUsingSpeakRequestLanguage = "fr-FR"
	GatherUsingSpeakRequestLanguageHiIN    GatherUsingSpeakRequestLanguage = "hi-IN"
	GatherUsingSpeakRequestLanguageIsIS    GatherUsingSpeakRequestLanguage = "is-IS"
	GatherUsingSpeakRequestLanguageItIT    GatherUsingSpeakRequestLanguage = "it-IT"
	GatherUsingSpeakRequestLanguageJaJP    GatherUsingSpeakRequestLanguage = "ja-JP"
	GatherUsingSpeakRequestLanguageKoKR    GatherUsingSpeakRequestLanguage = "ko-KR"
	GatherUsingSpeakRequestLanguageNbNO    GatherUsingSpeakRequestLanguage = "nb-NO"
	GatherUsingSpeakRequestLanguageNlNL    GatherUsingSpeakRequestLanguage = "nl-NL"
	GatherUsingSpeakRequestLanguagePlPL    GatherUsingSpeakRequestLanguage = "pl-PL"
	GatherUsingSpeakRequestLanguagePtBR    GatherUsingSpeakRequestLanguage = "pt-BR"
	GatherUsingSpeakRequestLanguagePtPT    GatherUsingSpeakRequestLanguage = "pt-PT"
	GatherUsingSpeakRequestLanguageRoRO    GatherUsingSpeakRequestLanguage = "ro-RO"
	GatherUsingSpeakRequestLanguageRuRU    GatherUsingSpeakRequestLanguage = "ru-RU"
	GatherUsingSpeakRequestLanguageSvSE    GatherUsingSpeakRequestLanguage = "sv-SE"
	GatherUsingSpeakRequestLanguageTrTR    GatherUsingSpeakRequestLanguage = "tr-TR"
)

// AllValues returns all GatherUsingSpeakRequestLanguage values.
func (GatherUsingSpeakRequestLanguage) AllValues() []GatherUsingSpeakRequestLanguage {
	return []GatherUsingSpeakRequestLanguage{
		GatherUsingSpeakRequestLanguageArb,
		GatherUsingSpeakRequestLanguageCmnCN,
		GatherUsingSpeakRequestLanguageCyGB,
		GatherUsingSpeakRequestLanguageDaDK,
		GatherUsingSpeakRequestLanguageDeDE,
		GatherUsingSpeakRequestLanguageEnAU,
		GatherUsingSpeakRequestLanguageEnGB,
		GatherUsingSpeakRequestLanguageEnGBWLS,
		GatherUsingSpeakRequestLanguageEnIN,
		GatherUsingSpeakRequestLanguageEnUS,
		GatherUsingSpeakRequestLanguageEsES,
		GatherUsingSpeakRequestLanguageEsMX,
		GatherUsingSpeakRequestLanguageEsUS,
		GatherUsingSpeakRequestLanguageFrCA,
		GatherUsingSpeakRequestLanguageFrFR,
		GatherUsingSpeakRequestLanguageHiIN,
		GatherUsingSpeakRequestLanguageIsIS,
		GatherUsingSpeakRequestLanguageItIT,
		GatherUsingSpeakRequestLanguageJaJP,
		GatherUsingSpeakRequestLanguageKoKR,
		GatherUsingSpeakRequestLanguageNbNO,
		GatherUsingSpeakRequestLanguageNlNL,
		GatherUsingSpeakRequestLanguagePlPL,
		GatherUsingSpeakRequestLanguagePtBR,
		GatherUsingSpeakRequestLanguagePtPT,
		GatherUsingSpeakRequestLanguageRoRO,
		GatherUsingSpeakRequestLanguageRuRU,
		GatherUsingSpeakRequestLanguageSvSE,
		GatherUsingSpeakRequestLanguageTrTR,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GatherUsingSpeakRequestLanguage) MarshalText() ([]byte, error) {
	switch s {
	case GatherUsingSpeakRequestLanguageArb:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageCmnCN:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageCyGB:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageDaDK:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageDeDE:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageEnAU:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageEnGB:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageEnGBWLS:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageEnIN:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageEnUS:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageEsES:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageEsMX:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageEsUS:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageFrCA:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageFrFR:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageHiIN:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageIsIS:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageItIT:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageJaJP:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageKoKR:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageNbNO:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageNlNL:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguagePlPL:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguagePtBR:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguagePtPT:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageRoRO:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageRuRU:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageSvSE:
		return []byte(s), nil
	case GatherUsingSpeakRequestLanguageTrTR:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GatherUsingSpeakRequestLanguage) UnmarshalText(data []byte) error {
	switch GatherUsingSpeakRequestLanguage(data) {
	case GatherUsingSpeakRequestLanguageArb:
		*s = GatherUsingSpeakRequestLanguageArb
		return nil
	case GatherUsingSpeakRequestLanguageCmnCN:
		*s = GatherUsingSpeakRequestLanguageCmnCN
		return nil
	case GatherUsingSpeakRequestLanguageCyGB:
		*s = GatherUsingSpeakRequestLanguageCyGB
		return nil
	case GatherUsingSpeakRequestLanguageDaDK:
		*s = GatherUsingSpeakRequestLanguageDaDK
		return nil
	case GatherUsingSpeakRequestLanguageDeDE:
		*s = GatherUsingSpeakRequestLanguageDeDE
		return nil
	case GatherUsingSpeakRequestLanguageEnAU:
		*s = GatherUsingSpeakRequestLanguageEnAU
		return nil
	case GatherUsingSpeakRequestLanguageEnGB:
		*s = GatherUsingSpeakRequestLanguageEnGB
		return nil
	case GatherUsingSpeakRequestLanguageEnGBWLS:
		*s = GatherUsingSpeakRequestLanguageEnGBWLS
		return nil
	case GatherUsingSpeakRequestLanguageEnIN:
		*s = GatherUsingSpeakRequestLanguageEnIN
		return nil
	case GatherUsingSpeakRequestLanguageEnUS:
		*s = GatherUsingSpeakRequestLanguageEnUS
		return nil
	case GatherUsingSpeakRequestLanguageEsES:
		*s = GatherUsingSpeakRequestLanguageEsES
		return nil
	case GatherUsingSpeakRequestLanguageEsMX:
		*s = GatherUsingSpeakRequestLanguageEsMX
		return nil
	case GatherUsingSpeakRequestLanguageEsUS:
		*s = GatherUsingSpeakRequestLanguageEsUS
		return nil
	case GatherUsingSpeakRequestLanguageFrCA:
		*s = GatherUsingSpeakRequestLanguageFrCA
		return nil
	case GatherUsingSpeakRequestLanguageFrFR:
		*s = GatherUsingSpeakRequestLanguageFrFR
		return nil
	case GatherUsingSpeakRequestLanguageHiIN:
		*s = GatherUsingSpeakRequestLanguageHiIN
		return nil
	case GatherUsingSpeakRequestLanguageIsIS:
		*s = GatherUsingSpeakRequestLanguageIsIS
		return nil
	case GatherUsingSpeakRequestLanguageItIT:
		*s = GatherUsingSpeakRequestLanguageItIT
		return nil
	case GatherUsingSpeakRequestLanguageJaJP:
		*s = GatherUsingSpeakRequestLanguageJaJP
		return nil
	case GatherUsingSpeakRequestLanguageKoKR:
		*s = GatherUsingSpeakRequestLanguageKoKR
		return nil
	case GatherUsingSpeakRequestLanguageNbNO:
		*s = GatherUsingSpeakRequestLanguageNbNO
		return nil
	case GatherUsingSpeakRequestLanguageNlNL:
		*s = GatherUsingSpeakRequestLanguageNlNL
		return nil
	case GatherUsingSpeakRequestLanguagePlPL:
		*s = GatherUsingSpeakRequestLanguagePlPL
		return nil
	case GatherUsingSpeakRequestLanguagePtBR:
		*s = GatherUsingSpeakRequestLanguagePtBR
		return nil
	case GatherUsingSpeakRequestLanguagePtPT:
		*s = GatherUsingSpeakRequestLanguagePtPT
		return nil
	case GatherUsingSpeakRequestLanguageRoRO:
		*s = GatherUsingSpeakRequestLanguageRoRO
		return nil
	case GatherUsingSpeakRequestLanguageRuRU:
		*s = GatherUsingSpeakRequestLanguageRuRU
		return nil
	case GatherUsingSpeakRequestLanguageSvSE:
		*s = GatherUsingSpeakRequestLanguageSvSE
		return nil
	case GatherUsingSpeakRequestLanguageTrTR:
		*s = GatherUsingSpeakRequestLanguageTrTR
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup
// Language (SSML).
type GatherUsingSpeakRequestPayloadType string

const (
	GatherUsingSpeakRequestPayloadTypeText GatherUsingSpeakRequestPayloadType = "text"
	GatherUsingSpeakRequestPayloadTypeSsml GatherUsingSpeakRequestPayloadType = "ssml"
)

// AllValues returns all GatherUsingSpeakRequestPayloadType values.
func (GatherUsingSpeakRequestPayloadType) AllValues() []GatherUsingSpeakRequestPayloadType {
	return []GatherUsingSpeakRequestPayloadType{
		GatherUsingSpeakRequestPayloadTypeText,
		GatherUsingSpeakRequestPayloadTypeSsml,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GatherUsingSpeakRequestPayloadType) MarshalText() ([]byte, error) {
	switch s {
	case GatherUsingSpeakRequestPayloadTypeText:
		return []byte(s), nil
	case GatherUsingSpeakRequestPayloadTypeSsml:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GatherUsingSpeakRequestPayloadType) UnmarshalText(data []byte) error {
	switch GatherUsingSpeakRequestPayloadType(data) {
	case GatherUsingSpeakRequestPayloadTypeText:
		*s = GatherUsingSpeakRequestPayloadTypeText
		return nil
	case GatherUsingSpeakRequestPayloadTypeSsml:
		*s = GatherUsingSpeakRequestPayloadTypeSsml
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// This parameter impacts speech quality, language options and payload types. When using `basic`,
// only the `en-US` language and payload type `text` are allowed.
type GatherUsingSpeakRequestServiceLevel string

const (
	GatherUsingSpeakRequestServiceLevelBasic   GatherUsingSpeakRequestServiceLevel = "basic"
	GatherUsingSpeakRequestServiceLevelPremium GatherUsingSpeakRequestServiceLevel = "premium"
)

// AllValues returns all GatherUsingSpeakRequestServiceLevel values.
func (GatherUsingSpeakRequestServiceLevel) AllValues() []GatherUsingSpeakRequestServiceLevel {
	return []GatherUsingSpeakRequestServiceLevel{
		GatherUsingSpeakRequestServiceLevelBasic,
		GatherUsingSpeakRequestServiceLevelPremium,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GatherUsingSpeakRequestServiceLevel) MarshalText() ([]byte, error) {
	switch s {
	case GatherUsingSpeakRequestServiceLevelBasic:
		return []byte(s), nil
	case GatherUsingSpeakRequestServiceLevelPremium:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GatherUsingSpeakRequestServiceLevel) UnmarshalText(data []byte) error {
	switch GatherUsingSpeakRequestServiceLevel(data) {
	case GatherUsingSpeakRequestServiceLevelBasic:
		*s = GatherUsingSpeakRequestServiceLevelBasic
		return nil
	case GatherUsingSpeakRequestServiceLevelPremium:
		*s = GatherUsingSpeakRequestServiceLevelPremium
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The gender of the voice used to speak back the text or the specific Amazon Polly voice to be used
// in the form of `Polly.<voice>`, e.g. `Polly.Brian`. All standard Amazon Polly voices are supported.
type GatherUsingSpeakRequestVoice string

const (
	GatherUsingSpeakRequestVoiceMale   GatherUsingSpeakRequestVoice = "male"
	GatherUsingSpeakRequestVoiceFemale GatherUsingSpeakRequestVoice = "female"
)

// AllValues returns all GatherUsingSpeakRequestVoice values.
func (GatherUsingSpeakRequestVoice) AllValues() []GatherUsingSpeakRequestVoice {
	return []GatherUsingSpeakRequestVoice{
		GatherUsingSpeakRequestVoiceMale,
		GatherUsingSpeakRequestVoiceFemale,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GatherUsingSpeakRequestVoice) MarshalText() ([]byte, error) {
	switch s {
	case GatherUsingSpeakRequestVoiceMale:
		return []byte(s), nil
	case GatherUsingSpeakRequestVoiceFemale:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GatherUsingSpeakRequestVoice) UnmarshalText(data []byte) error {
	switch GatherUsingSpeakRequestVoice(data) {
	case GatherUsingSpeakRequestVoiceMale:
		*s = GatherUsingSpeakRequestVoiceMale
		return nil
	case GatherUsingSpeakRequestVoiceFemale:
		*s = GatherUsingSpeakRequestVoiceFemale
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/GcbPhoneNumber
type GcbPhoneNumber struct {
	RecordType    GcbPhoneNumberRecordType `json:"record_type"`
	ChannelZoneID string                   `json:"channel_zone_id"`
	ID            OptString                `json:"id"`
	PhoneNumber   string                   `json:"phone_number"`
	// ISO 8601 formatted date of when the phone number was created.
	CreatedAt OptString `json:"created_at"`
}

// GetRecordType returns the value of RecordType.
func (s *GcbPhoneNumber) GetRecordType() GcbPhoneNumberRecordType {
	return s.RecordType
}

// GetChannelZoneID returns the value of ChannelZoneID.
func (s *GcbPhoneNumber) GetChannelZoneID() string {
	return s.ChannelZoneID
}

// GetID returns the value of ID.
func (s *GcbPhoneNumber) GetID() OptString {
	return s.ID
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *GcbPhoneNumber) GetPhoneNumber() string {
	return s.PhoneNumber
}

// GetCreatedAt returns the value of CreatedAt.
func (s *GcbPhoneNumber) GetCreatedAt() OptString {
	return s.CreatedAt
}

// SetRecordType sets the value of RecordType.
func (s *GcbPhoneNumber) SetRecordType(val GcbPhoneNumberRecordType) {
	s.RecordType = val
}

// SetChannelZoneID sets the value of ChannelZoneID.
func (s *GcbPhoneNumber) SetChannelZoneID(val string) {
	s.ChannelZoneID = val
}

// SetID sets the value of ID.
func (s *GcbPhoneNumber) SetID(val OptString) {
	s.ID = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *GcbPhoneNumber) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *GcbPhoneNumber) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

func (*GcbPhoneNumber) assignPhoneNumberRes() {}

type GcbPhoneNumberRecordType string

const (
	GcbPhoneNumberRecordTypeChannelZonePhoneNumber GcbPhoneNumberRecordType = "channel_zone_phone_number"
)

// AllValues returns all GcbPhoneNumberRecordType values.
func (GcbPhoneNumberRecordType) AllValues() []GcbPhoneNumberRecordType {
	return []GcbPhoneNumberRecordType{
		GcbPhoneNumberRecordTypeChannelZonePhoneNumber,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GcbPhoneNumberRecordType) MarshalText() ([]byte, error) {
	switch s {
	case GcbPhoneNumberRecordTypeChannelZonePhoneNumber:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GcbPhoneNumberRecordType) UnmarshalText(data []byte) error {
	switch GcbPhoneNumberRecordType(data) {
	case GcbPhoneNumberRecordTypeChannelZonePhoneNumber:
		*s = GcbPhoneNumberRecordTypeChannelZonePhoneNumber
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// GenericErrorResponseStatusCode wraps Errors with StatusCode.
type GenericErrorResponseStatusCode struct {
	StatusCode int
	Response   Errors
}

// GetStatusCode returns the value of StatusCode.
func (s *GenericErrorResponseStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *GenericErrorResponseStatusCode) GetResponse() Errors {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *GenericErrorResponseStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *GenericErrorResponseStatusCode) SetResponse(val Errors) {
	s.Response = val
}

func (*GenericErrorResponseStatusCode) answerCallRes()                                   {}
func (*GenericErrorResponseStatusCode) assignPhoneNumberRes()                            {}
func (*GenericErrorResponseStatusCode) bridgeCallRes()                                   {}
func (*GenericErrorResponseStatusCode) createCommentRes()                                {}
func (*GenericErrorResponseStatusCode) createCsvDownloadRes()                            {}
func (*GenericErrorResponseStatusCode) createCustomStorageCredentialsRes()               {}
func (*GenericErrorResponseStatusCode) createDefaultGatewayRes()                         {}
func (*GenericErrorResponseStatusCode) createDeletePhoneNumbersJobRes()                  {}
func (*GenericErrorResponseStatusCode) createFlashcallVerificationRes()                  {}
func (*GenericErrorResponseStatusCode) createGroupMmsMessageRes()                        {}
func (*GenericErrorResponseStatusCode) createLongCodeMessageRes()                        {}
func (*GenericErrorResponseStatusCode) createMessagingHostedNumberOrderRes()             {}
func (*GenericErrorResponseStatusCode) createNetworkRes()                                {}
func (*GenericErrorResponseStatusCode) createNotificationChannelsRes()                   {}
func (*GenericErrorResponseStatusCode) createNumberOrderDocumentRes()                    {}
func (*GenericErrorResponseStatusCode) createNumberPoolMessageRes()                      {}
func (*GenericErrorResponseStatusCode) createNumberReservationRes()                      {}
func (*GenericErrorResponseStatusCode) createPhoneNumbersJobUpdateEmergencySettingsRes() {}
func (*GenericErrorResponseStatusCode) createPrivateWirelessGatewayRes()                 {}
func (*GenericErrorResponseStatusCode) createProfileRes()                                {}
func (*GenericErrorResponseStatusCode) createProfileVerificationRequestRes()             {}
func (*GenericErrorResponseStatusCode) createShortCodeMessageRes()                       {}
func (*GenericErrorResponseStatusCode) createUpdatePhoneNumbersJobRes()                  {}
func (*GenericErrorResponseStatusCode) createVerificationCallRes()                       {}
func (*GenericErrorResponseStatusCode) createVerificationSmsRes()                        {}
func (*GenericErrorResponseStatusCode) createVerifiedNumberRes()                         {}
func (*GenericErrorResponseStatusCode) createVerifyProfileRes()                          {}
func (*GenericErrorResponseStatusCode) deleteCustomStorageCredentialsRes()               {}
func (*GenericErrorResponseStatusCode) deleteDefaultGatewayRes()                         {}
func (*GenericErrorResponseStatusCode) deleteNetworkRes()                                {}
func (*GenericErrorResponseStatusCode) deleteNotificationChannelRes()                    {}
func (*GenericErrorResponseStatusCode) deletePhoneNumberRes()                            {}
func (*GenericErrorResponseStatusCode) deleteProfileRes()                                {}
func (*GenericErrorResponseStatusCode) deleteRecordingRes()                              {}
func (*GenericErrorResponseStatusCode) deleteRecordingTranscriptionRes()                 {}
func (*GenericErrorResponseStatusCode) deleteRecordingsRes()                             {}
func (*GenericErrorResponseStatusCode) deleteVerifiedCallDisplayProfileRes()             {}
func (*GenericErrorResponseStatusCode) deleteVerifiedNumberRes()                         {}
func (*GenericErrorResponseStatusCode) deleteWirelessGatewayRes()                        {}
func (*GenericErrorResponseStatusCode) dialCallRes()                                     {}
func (*GenericErrorResponseStatusCode) displayProfileRes()                               {}
func (*GenericErrorResponseStatusCode) enablePhoneNumberEmergencyRes()                   {}
func (*GenericErrorResponseStatusCode) enqueueCallRes()                                  {}
func (*GenericErrorResponseStatusCode) extendNumberReservationExpiryTimeRes()            {}
func (*GenericErrorResponseStatusCode) gatherCallRes()                                   {}
func (*GenericErrorResponseStatusCode) gatherUsingAudioRes()                             {}
func (*GenericErrorResponseStatusCode) gatherUsingSpeakRes()                             {}
func (*GenericErrorResponseStatusCode) getCsvDownloadRes()                               {}
func (*GenericErrorResponseStatusCode) getCustomStorageCredentialsRes()                  {}
func (*GenericErrorResponseStatusCode) getDefaultGatewayRes()                            {}
func (*GenericErrorResponseStatusCode) getMessageRes()                                   {}
func (*GenericErrorResponseStatusCode) getMessagingHostedNumberOrderRes()                {}
func (*GenericErrorResponseStatusCode) getMobileNetworkOperatorsRes()                    {}
func (*GenericErrorResponseStatusCode) getNetworkRes()                                   {}
func (*GenericErrorResponseStatusCode) getNotificationChannelRes()                       {}
func (*GenericErrorResponseStatusCode) getNumberOrderPhoneNumberRes()                    {}
func (*GenericErrorResponseStatusCode) getOtaUpdateRes()                                 {}
func (*GenericErrorResponseStatusCode) getPhoneNumberMessagingSettingsRes()              {}
func (*GenericErrorResponseStatusCode) getPhoneNumberVoiceSettingsRes()                  {}
func (*GenericErrorResponseStatusCode) getPrivateWirelessGatewayRes()                    {}
func (*GenericErrorResponseStatusCode) getPrivateWirelessGatewaysRes()                   {}
func (*GenericErrorResponseStatusCode) getRecordingRes()                                 {}
func (*GenericErrorResponseStatusCode) getRecordingTranscriptionRes()                    {}
func (*GenericErrorResponseStatusCode) getRecordingTranscriptionsRes()                   {}
func (*GenericErrorResponseStatusCode) getRecordingsRes()                                {}
func (*GenericErrorResponseStatusCode) getUserBalanceRes()                               {}
func (*GenericErrorResponseStatusCode) getVerifiedNumberRes()                            {}
func (*GenericErrorResponseStatusCode) getVerifyProfileRes()                             {}
func (*GenericErrorResponseStatusCode) hangupCallRes()                                   {}
func (*GenericErrorResponseStatusCode) leaveQueueRes()                                   {}
func (*GenericErrorResponseStatusCode) listAvailablePhoneNumberBlocksRes()               {}
func (*GenericErrorResponseStatusCode) listAvailablePhoneNumbersRes()                    {}
func (*GenericErrorResponseStatusCode) listCommentsRes()                                 {}
func (*GenericErrorResponseStatusCode) listConnectionActiveCallsRes()                    {}
func (*GenericErrorResponseStatusCode) listCsvDownloadsRes()                             {}
func (*GenericErrorResponseStatusCode) listMessagingHostedNumberOrdersRes()              {}
func (*GenericErrorResponseStatusCode) listMessagingUrlDomainsRes()                      {}
func (*GenericErrorResponseStatusCode) listNetworkInterfacesRes()                        {}
func (*GenericErrorResponseStatusCode) listNetworksRes()                                 {}
func (*GenericErrorResponseStatusCode) listNotificationChannelsRes()                     {}
func (*GenericErrorResponseStatusCode) listNumberOrderDocumentsRes()                     {}
func (*GenericErrorResponseStatusCode) listNumberReservationsRes()                       {}
func (*GenericErrorResponseStatusCode) listOtaUpdatesRes()                               {}
func (*GenericErrorResponseStatusCode) listPhoneNumbersJobsRes()                         {}
func (*GenericErrorResponseStatusCode) listPhoneNumbersRes()                             {}
func (*GenericErrorResponseStatusCode) listPhoneNumbersWithMessagingSettingsRes()        {}
func (*GenericErrorResponseStatusCode) listPhoneNumbersWithVoiceSettingsRes()            {}
func (*GenericErrorResponseStatusCode) listProfilePhoneNumbersRes()                      {}
func (*GenericErrorResponseStatusCode) listProfilesRes()                                 {}
func (*GenericErrorResponseStatusCode) listRegulatoryRequirementsRes()                   {}
func (*GenericErrorResponseStatusCode) listRequirementsRes()                             {}
func (*GenericErrorResponseStatusCode) listVerificationsRes()                            {}
func (*GenericErrorResponseStatusCode) listVerifiedCallDisplayProfilesRes()              {}
func (*GenericErrorResponseStatusCode) listVerifiedNumbersRes()                          {}
func (*GenericErrorResponseStatusCode) lookupNumberRes()                                 {}
func (*GenericErrorResponseStatusCode) markCommentReadRes()                              {}
func (*GenericErrorResponseStatusCode) noiseSuppressionStartRes()                        {}
func (*GenericErrorResponseStatusCode) noiseSuppressionStopRes()                         {}
func (*GenericErrorResponseStatusCode) pauseCallRecordingRes()                           {}
func (*GenericErrorResponseStatusCode) referCallRes()                                    {}
func (*GenericErrorResponseStatusCode) registerCallRes()                                 {}
func (*GenericErrorResponseStatusCode) rejectCallRes()                                   {}
func (*GenericErrorResponseStatusCode) resumeCallRecordingRes()                          {}
func (*GenericErrorResponseStatusCode) retrieveCallStatusRes()                           {}
func (*GenericErrorResponseStatusCode) retrieveCommentRes()                              {}
func (*GenericErrorResponseStatusCode) retrieveDocumentRequirementsRes()                 {}
func (*GenericErrorResponseStatusCode) retrieveNumberOrderDocumentRes()                  {}
func (*GenericErrorResponseStatusCode) retrieveNumberReservationRes()                    {}
func (*GenericErrorResponseStatusCode) retrieveOrderPhoneNumbersRes()                    {}
func (*GenericErrorResponseStatusCode) retrievePhoneNumberRes()                          {}
func (*GenericErrorResponseStatusCode) retrievePhoneNumbersJobRes()                      {}
func (*GenericErrorResponseStatusCode) retrieveVerificationRes()                         {}
func (*GenericErrorResponseStatusCode) sendDTMFRes()                                     {}
func (*GenericErrorResponseStatusCode) sendMessageRes()                                  {}
func (*GenericErrorResponseStatusCode) slimListPhoneNumbersRes()                         {}
func (*GenericErrorResponseStatusCode) speakCallRes()                                    {}
func (*GenericErrorResponseStatusCode) startCallForkRes()                                {}
func (*GenericErrorResponseStatusCode) startCallPlaybackRes()                            {}
func (*GenericErrorResponseStatusCode) startCallRecordRes()                              {}
func (*GenericErrorResponseStatusCode) startCallStreamingRes()                           {}
func (*GenericErrorResponseStatusCode) startCallTranscriptionRes()                       {}
func (*GenericErrorResponseStatusCode) stopCallForkRes()                                 {}
func (*GenericErrorResponseStatusCode) stopCallGatherRes()                               {}
func (*GenericErrorResponseStatusCode) stopCallPlaybackRes()                             {}
func (*GenericErrorResponseStatusCode) stopCallRecordingRes()                            {}
func (*GenericErrorResponseStatusCode) stopCallStreamingRes()                            {}
func (*GenericErrorResponseStatusCode) stopCallTranscriptionRes()                        {}
func (*GenericErrorResponseStatusCode) transferCallRes()                                 {}
func (*GenericErrorResponseStatusCode) unassignPhoneNumberRes()                          {}
func (*GenericErrorResponseStatusCode) updateClientStateRes()                            {}
func (*GenericErrorResponseStatusCode) updateCustomStorageCredentialsRes()               {}
func (*GenericErrorResponseStatusCode) updateNetworkRes()                                {}
func (*GenericErrorResponseStatusCode) updateNotificationChannelRes()                    {}
func (*GenericErrorResponseStatusCode) updateNumberOrderDocumentRes()                    {}
func (*GenericErrorResponseStatusCode) updateNumberOrderPhoneNumberRes()                 {}
func (*GenericErrorResponseStatusCode) updatePhoneNumberMessagingSettingsRes()           {}
func (*GenericErrorResponseStatusCode) updatePhoneNumberRes()                            {}
func (*GenericErrorResponseStatusCode) updatePhoneNumberVoiceSettingsRes()               {}
func (*GenericErrorResponseStatusCode) updateProfileRes()                                {}
func (*GenericErrorResponseStatusCode) updateVerifyProfileRes()                          {}
func (*GenericErrorResponseStatusCode) verifyVerificationCodeByPhoneNumberRes()          {}
func (*GenericErrorResponseStatusCode) verifyVerificationCodeRes()                       {}

type GetAllPrivateWirelessGatewaysResponse struct {
	Data []PrivateWirelessGateway `json:"data"`
	Meta OptPaginationMeta        `json:"meta"`
}

// GetData returns the value of Data.
func (s *GetAllPrivateWirelessGatewaysResponse) GetData() []PrivateWirelessGateway {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *GetAllPrivateWirelessGatewaysResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *GetAllPrivateWirelessGatewaysResponse) SetData(val []PrivateWirelessGateway) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *GetAllPrivateWirelessGatewaysResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*GetAllPrivateWirelessGatewaysResponse) getPrivateWirelessGatewaysRes() {}

type GetAllTelephonyCredentialResponse struct {
	Data []TelephonyCredential `json:"data"`
	Meta OptPaginationMeta     `json:"meta"`
}

// GetData returns the value of Data.
func (s *GetAllTelephonyCredentialResponse) GetData() []TelephonyCredential {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *GetAllTelephonyCredentialResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *GetAllTelephonyCredentialResponse) SetData(val []TelephonyCredential) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *GetAllTelephonyCredentialResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*GetAllTelephonyCredentialResponse) findTelephonyCredentialsRes() {}

type GetAllTexmlApplicationsResponse struct {
	Data []TexmlApplication `json:"data"`
	Meta OptPaginationMeta  `json:"meta"`
}

// GetData returns the value of Data.
func (s *GetAllTexmlApplicationsResponse) GetData() []TexmlApplication {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *GetAllTexmlApplicationsResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *GetAllTexmlApplicationsResponse) SetData(val []TexmlApplication) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *GetAllTexmlApplicationsResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*GetAllTexmlApplicationsResponse) findTexmlApplicationsRes() {}

type GetCallResponse struct {
	Data OptCallResource `json:"data"`
}

// GetData returns the value of Data.
func (s *GetCallResponse) GetData() OptCallResource {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetCallResponse) SetData(val OptCallResource) {
	s.Data = val
}

func (*GetCallResponse) getTexmlCallRes() {}

type GetCallsResponse struct {
	Data OptCallResourceIndex `json:"data"`
}

// GetData returns the value of Data.
func (s *GetCallsResponse) GetData() OptCallResourceIndex {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetCallsResponse) SetData(val OptCallResourceIndex) {
	s.Data = val
}

func (*GetCallsResponse) getTexmlCallsRes() {}

type GetConferenceRecordingsResponse struct {
	Data OptConferenceRecordingResourceIndex `json:"data"`
}

// GetData returns the value of Data.
func (s *GetConferenceRecordingsResponse) GetData() OptConferenceRecordingResourceIndex {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetConferenceRecordingsResponse) SetData(val OptConferenceRecordingResourceIndex) {
	s.Data = val
}

func (*GetConferenceRecordingsResponse) getTexmlConferenceRecordingsRes() {}

type GetConferenceResponse struct {
	Data OptConferenceResource `json:"data"`
}

// GetData returns the value of Data.
func (s *GetConferenceResponse) GetData() OptConferenceResource {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetConferenceResponse) SetData(val OptConferenceResource) {
	s.Data = val
}

func (*GetConferenceResponse) getTexmlConferenceRes()    {}
func (*GetConferenceResponse) updateTexmlConferenceRes() {}

type GetConferencesResponse struct {
	Data OptConferenceResourceIndex `json:"data"`
}

// GetData returns the value of Data.
func (s *GetConferencesResponse) GetData() OptConferenceResourceIndex {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetConferencesResponse) SetData(val OptConferenceResourceIndex) {
	s.Data = val
}

func (*GetConferencesResponse) getTexmlConferencesRes() {}

// GetExternalConnectionLogMessageNotFound is response for GetExternalConnectionLogMessage operation.
type GetExternalConnectionLogMessageNotFound struct{}

func (*GetExternalConnectionLogMessageNotFound) getExternalConnectionLogMessageRes() {}

// GetExternalConnectionLogMessageUnauthorized is response for GetExternalConnectionLogMessage operation.
type GetExternalConnectionLogMessageUnauthorized struct{}

func (*GetExternalConnectionLogMessageUnauthorized) getExternalConnectionLogMessageRes() {}

// GetExternalConnectionPhoneNumberNotFound is response for GetExternalConnectionPhoneNumber operation.
type GetExternalConnectionPhoneNumberNotFound struct{}

func (*GetExternalConnectionPhoneNumberNotFound) getExternalConnectionPhoneNumberRes() {}

type GetExternalConnectionPhoneNumberResponse struct {
	Data OptExternalConnectionPhoneNumber `json:"data"`
}

// GetData returns the value of Data.
func (s *GetExternalConnectionPhoneNumberResponse) GetData() OptExternalConnectionPhoneNumber {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetExternalConnectionPhoneNumberResponse) SetData(val OptExternalConnectionPhoneNumber) {
	s.Data = val
}

func (*GetExternalConnectionPhoneNumberResponse) getExternalConnectionPhoneNumberRes()    {}
func (*GetExternalConnectionPhoneNumberResponse) updateExternalConnectionPhoneNumberRes() {}

// GetExternalConnectionPhoneNumberUnauthorized is response for GetExternalConnectionPhoneNumber operation.
type GetExternalConnectionPhoneNumberUnauthorized struct{}

func (*GetExternalConnectionPhoneNumberUnauthorized) getExternalConnectionPhoneNumberRes() {}

type GetGcbPhoneNumbersRequestResponse struct {
	Data []GcbPhoneNumber  `json:"data"`
	Meta OptPaginationMeta `json:"meta"`
}

// GetData returns the value of Data.
func (s *GetGcbPhoneNumbersRequestResponse) GetData() []GcbPhoneNumber {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *GetGcbPhoneNumbersRequestResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *GetGcbPhoneNumbersRequestResponse) SetData(val []GcbPhoneNumber) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *GetGcbPhoneNumbersRequestResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

// GetLoaConfigurationInternalServerError is response for GetLoaConfiguration operation.
type GetLoaConfigurationInternalServerError struct{}

func (*GetLoaConfigurationInternalServerError) getLoaConfigurationRes() {}

// GetLoaConfigurationNotFound is response for GetLoaConfiguration operation.
type GetLoaConfigurationNotFound struct{}

func (*GetLoaConfigurationNotFound) getLoaConfigurationRes() {}

type GetLogMessageResponse struct {
	LogMessages []LogMessage `json:"log_messages"`
}

// GetLogMessages returns the value of LogMessages.
func (s *GetLogMessageResponse) GetLogMessages() []LogMessage {
	return s.LogMessages
}

// SetLogMessages sets the value of LogMessages.
func (s *GetLogMessageResponse) SetLogMessages(val []LogMessage) {
	s.LogMessages = val
}

func (*GetLogMessageResponse) getExternalConnectionLogMessageRes() {}

type GetNotificationChannelOK struct {
	Data OptNotificationChannel `json:"data"`
}

// GetData returns the value of Data.
func (s *GetNotificationChannelOK) GetData() OptNotificationChannel {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetNotificationChannelOK) SetData(val OptNotificationChannel) {
	s.Data = val
}

func (*GetNotificationChannelOK) getNotificationChannelRes() {}

// GetOutboundVoiceProfileNotFound is response for GetOutboundVoiceProfile operation.
type GetOutboundVoiceProfileNotFound struct{}

func (*GetOutboundVoiceProfileNotFound) getOutboundVoiceProfileRes() {}

// GetOutboundVoiceProfileUnauthorized is response for GetOutboundVoiceProfile operation.
type GetOutboundVoiceProfileUnauthorized struct{}

func (*GetOutboundVoiceProfileUnauthorized) getOutboundVoiceProfileRes() {}

// GetOutboundVoiceProfileUnprocessableEntity is response for GetOutboundVoiceProfile operation.
type GetOutboundVoiceProfileUnprocessableEntity struct{}

func (*GetOutboundVoiceProfileUnprocessableEntity) getOutboundVoiceProfileRes() {}

type GetParticipantResponse struct {
	Data OptParticipantResource `json:"data"`
}

// GetData returns the value of Data.
func (s *GetParticipantResponse) GetData() OptParticipantResource {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetParticipantResponse) SetData(val OptParticipantResource) {
	s.Data = val
}

func (*GetParticipantResponse) getTexmlConferenceParticipantRes()    {}
func (*GetParticipantResponse) updateTexmlConferenceParticipantRes() {}

type GetParticipantsResponse struct {
	Data OptParticipantResourceIndex `json:"data"`
}

// GetData returns the value of Data.
func (s *GetParticipantsResponse) GetData() OptParticipantResourceIndex {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetParticipantsResponse) SetData(val OptParticipantResourceIndex) {
	s.Data = val
}

func (*GetParticipantsResponse) getTexmlConferenceParticipantsRes() {}

// GetPortRequestSupportingDocumentsNotFound is response for GetPortRequestSupportingDocuments operation.
type GetPortRequestSupportingDocumentsNotFound struct{}

func (*GetPortRequestSupportingDocumentsNotFound) getPortRequestSupportingDocumentsRes() {}

// GetPortRequestSupportingDocumentsUnauthorized is response for GetPortRequestSupportingDocuments operation.
type GetPortRequestSupportingDocumentsUnauthorized struct{}

func (*GetPortRequestSupportingDocumentsUnauthorized) getPortRequestSupportingDocumentsRes() {}

// GetPortingOrderLoaTemplateUnauthorized is response for GetPortingOrderLoaTemplate operation.
type GetPortingOrderLoaTemplateUnauthorized struct{}

func (*GetPortingOrderLoaTemplateUnauthorized) getPortingOrderLoaTemplateRes() {}

// GetPortingOrderSubRequestNotFound is response for GetPortingOrderSubRequest operation.
type GetPortingOrderSubRequestNotFound struct{}

func (*GetPortingOrderSubRequestNotFound) getPortingOrderSubRequestRes() {}

// GetPortingOrderSubRequestUnauthorized is response for GetPortingOrderSubRequest operation.
type GetPortingOrderSubRequestUnauthorized struct{}

func (*GetPortingOrderSubRequestUnauthorized) getPortingOrderSubRequestRes() {}

// GetPortingOrderUnauthorized is response for GetPortingOrder operation.
type GetPortingOrderUnauthorized struct{}

func (*GetPortingOrderUnauthorized) getPortingOrderRes() {}

// GetPortingOrdersActivationJobUnauthorized is response for GetPortingOrdersActivationJob operation.
type GetPortingOrdersActivationJobUnauthorized struct{}

func (*GetPortingOrdersActivationJobUnauthorized) getPortingOrdersActivationJobRes() {}

// GetPortingOrdersActivationJobUnprocessableEntity is response for GetPortingOrdersActivationJob operation.
type GetPortingOrdersActivationJobUnprocessableEntity struct{}

func (*GetPortingOrdersActivationJobUnprocessableEntity) getPortingOrdersActivationJobRes() {}

// GetPortingReportInternalServerError is response for GetPortingReport operation.
type GetPortingReportInternalServerError struct{}

func (*GetPortingReportInternalServerError) getPortingReportRes() {}

// GetPortingReportNotFound is response for GetPortingReport operation.
type GetPortingReportNotFound struct{}

func (*GetPortingReportNotFound) getPortingReportRes() {}

type GetPrivateWirelessGatewayResponse struct {
	Data OptPrivateWirelessGateway `json:"data"`
}

// GetData returns the value of Data.
func (s *GetPrivateWirelessGatewayResponse) GetData() OptPrivateWirelessGateway {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetPrivateWirelessGatewayResponse) SetData(val OptPrivateWirelessGateway) {
	s.Data = val
}

func (*GetPrivateWirelessGatewayResponse) getPrivateWirelessGatewayRes() {}

type GetRoomRecordingResponse struct {
	Data OptRoomRecording `json:"data"`
}

// GetData returns the value of Data.
func (s *GetRoomRecordingResponse) GetData() OptRoomRecording {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetRoomRecordingResponse) SetData(val OptRoomRecording) {
	s.Data = val
}

func (*GetRoomRecordingResponse) viewRoomRecordingRes() {}

// Ref: #/components/schemas/GetSubRequestByPortingOrder
type GetSubRequestByPortingOrder struct {
	// Identifies the Sub Request associated with the Porting Order.
	SubRequestID OptString `json:"sub_request_id"`
	// Identifies the Port Request associated with the Porting Order.
	PortRequestID OptString `json:"port_request_id"`
}

// GetSubRequestID returns the value of SubRequestID.
func (s *GetSubRequestByPortingOrder) GetSubRequestID() OptString {
	return s.SubRequestID
}

// GetPortRequestID returns the value of PortRequestID.
func (s *GetSubRequestByPortingOrder) GetPortRequestID() OptString {
	return s.PortRequestID
}

// SetSubRequestID sets the value of SubRequestID.
func (s *GetSubRequestByPortingOrder) SetSubRequestID(val OptString) {
	s.SubRequestID = val
}

// SetPortRequestID sets the value of PortRequestID.
func (s *GetSubRequestByPortingOrder) SetPortRequestID(val OptString) {
	s.PortRequestID = val
}

// GetTelephonyCredentialBadRequest is response for GetTelephonyCredential operation.
type GetTelephonyCredentialBadRequest struct{}

func (*GetTelephonyCredentialBadRequest) getTelephonyCredentialRes() {}

// GetTelephonyCredentialNotFound is response for GetTelephonyCredential operation.
type GetTelephonyCredentialNotFound struct{}

func (*GetTelephonyCredentialNotFound) getTelephonyCredentialRes() {}

// GetTelephonyCredentialUnauthorized is response for GetTelephonyCredential operation.
type GetTelephonyCredentialUnauthorized struct{}

func (*GetTelephonyCredentialUnauthorized) getTelephonyCredentialRes() {}

type GetTexmlApplicationBadRequest ErrorResponse

func (*GetTexmlApplicationBadRequest) getTexmlApplicationRes() {}

type GetTexmlApplicationNotFound ErrorResponse

func (*GetTexmlApplicationNotFound) getTexmlApplicationRes() {}

type GetTexmlApplicationUnauthorized ErrorResponse

func (*GetTexmlApplicationUnauthorized) getTexmlApplicationRes() {}

type GetVerifiedNumberNotFound Errors

func (*GetVerifiedNumberNotFound) getVerifiedNumberRes() {}

type GetVerifiedNumberUnauthorized Errors

func (*GetVerifiedNumberUnauthorized) getVerifiedNumberRes() {}

type GetWebhookDeliveriesFilterStatusEq string

const (
	GetWebhookDeliveriesFilterStatusEqDelivered GetWebhookDeliveriesFilterStatusEq = "delivered"
	GetWebhookDeliveriesFilterStatusEqFailed    GetWebhookDeliveriesFilterStatusEq = "failed"
)

// AllValues returns all GetWebhookDeliveriesFilterStatusEq values.
func (GetWebhookDeliveriesFilterStatusEq) AllValues() []GetWebhookDeliveriesFilterStatusEq {
	return []GetWebhookDeliveriesFilterStatusEq{
		GetWebhookDeliveriesFilterStatusEqDelivered,
		GetWebhookDeliveriesFilterStatusEqFailed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetWebhookDeliveriesFilterStatusEq) MarshalText() ([]byte, error) {
	switch s {
	case GetWebhookDeliveriesFilterStatusEqDelivered:
		return []byte(s), nil
	case GetWebhookDeliveriesFilterStatusEqFailed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetWebhookDeliveriesFilterStatusEq) UnmarshalText(data []byte) error {
	switch GetWebhookDeliveriesFilterStatusEq(data) {
	case GetWebhookDeliveriesFilterStatusEqDelivered:
		*s = GetWebhookDeliveriesFilterStatusEqDelivered
		return nil
	case GetWebhookDeliveriesFilterStatusEqFailed:
		*s = GetWebhookDeliveriesFilterStatusEqFailed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// GetWebhookDeliveriesUnauthorized is response for GetWebhookDeliveries operation.
type GetWebhookDeliveriesUnauthorized struct{}

func (*GetWebhookDeliveriesUnauthorized) getWebhookDeliveriesRes() {}

// GetWebhookDeliveriesUnprocessableEntity is response for GetWebhookDeliveries operation.
type GetWebhookDeliveriesUnprocessableEntity struct{}

func (*GetWebhookDeliveriesUnprocessableEntity) getWebhookDeliveriesRes() {}

// GetWebhookDeliveryNotFound is response for GetWebhookDelivery operation.
type GetWebhookDeliveryNotFound struct{}

func (*GetWebhookDeliveryNotFound) getWebhookDeliveryRes() {}

type GetWebhookDeliveryOK struct {
	Data OptWebhookDelivery `json:"data"`
}

// GetData returns the value of Data.
func (s *GetWebhookDeliveryOK) GetData() OptWebhookDelivery {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetWebhookDeliveryOK) SetData(val OptWebhookDelivery) {
	s.Data = val
}

func (*GetWebhookDeliveryOK) getWebhookDeliveryRes() {}

// GetWebhookDeliveryUnauthorized is response for GetWebhookDelivery operation.
type GetWebhookDeliveryUnauthorized struct{}

func (*GetWebhookDeliveryUnauthorized) getWebhookDeliveryRes() {}

// HTTP request and response information.
// Ref: #/components/schemas/http
type HTTP struct {
	// Request details.
	Request OptHTTPRequest `json:"request"`
	// Response details, optional.
	Response OptNilHTTPResponse `json:"response"`
}

// GetRequest returns the value of Request.
func (s *HTTP) GetRequest() OptHTTPRequest {
	return s.Request
}

// GetResponse returns the value of Response.
func (s *HTTP) GetResponse() OptNilHTTPResponse {
	return s.Response
}

// SetRequest sets the value of Request.
func (s *HTTP) SetRequest(val OptHTTPRequest) {
	s.Request = val
}

// SetResponse sets the value of Response.
func (s *HTTP) SetResponse(val OptNilHTTPResponse) {
	s.Response = val
}

type HTTPHeaders []string

// Request details.
type HTTPRequest struct {
	URL     OptString   `json:"url"`
	Headers HTTPHeaders `json:"headers"`
}

// GetURL returns the value of URL.
func (s *HTTPRequest) GetURL() OptString {
	return s.URL
}

// GetHeaders returns the value of Headers.
func (s *HTTPRequest) GetHeaders() HTTPHeaders {
	return s.Headers
}

// SetURL sets the value of URL.
func (s *HTTPRequest) SetURL(val OptString) {
	s.URL = val
}

// SetHeaders sets the value of Headers.
func (s *HTTPRequest) SetHeaders(val HTTPHeaders) {
	s.Headers = val
}

// Response details, optional.
type HTTPResponse struct {
	Status  OptInt      `json:"status"`
	Headers HTTPHeaders `json:"headers"`
	// Raw response body, limited to 10kB.
	Body OptString `json:"body"`
}

// GetStatus returns the value of Status.
func (s *HTTPResponse) GetStatus() OptInt {
	return s.Status
}

// GetHeaders returns the value of Headers.
func (s *HTTPResponse) GetHeaders() HTTPHeaders {
	return s.Headers
}

// GetBody returns the value of Body.
func (s *HTTPResponse) GetBody() OptString {
	return s.Body
}

// SetStatus sets the value of Status.
func (s *HTTPResponse) SetStatus(val OptInt) {
	s.Status = val
}

// SetHeaders sets the value of Headers.
func (s *HTTPResponse) SetHeaders(val HTTPHeaders) {
	s.Headers = val
}

// SetBody sets the value of Body.
func (s *HTTPResponse) SetBody(val OptString) {
	s.Body = val
}

// Ref: #/components/schemas/HTTPValidationError
type HTTPValidationError struct {
	Detail []ValidationError `json:"detail"`
}

// GetDetail returns the value of Detail.
func (s *HTTPValidationError) GetDetail() []ValidationError {
	return s.Detail
}

// SetDetail sets the value of Detail.
func (s *HTTPValidationError) SetDetail(val []ValidationError) {
	s.Detail = val
}

func (*HTTPValidationError) audioPublicAudioTranscriptionsPostRes() {}

// Ref: #/components/schemas/HangupRequest
type HangupRequest struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetClientState returns the value of ClientState.
func (s *HangupRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *HangupRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetClientState sets the value of ClientState.
func (s *HangupRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *HangupRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// Ref: #/components/schemas/HostedNumber
type HostedNumber struct {
	RecordType OptString `json:"record_type"`
	// Identifies the type of resource.
	ID OptUUID `json:"id"`
	// The messaging hosted phone number (+E.164 format).
	PhoneNumber OptString             `json:"phone_number"`
	Status      OptHostedNumberStatus `json:"status"`
}

// GetRecordType returns the value of RecordType.
func (s *HostedNumber) GetRecordType() OptString {
	return s.RecordType
}

// GetID returns the value of ID.
func (s *HostedNumber) GetID() OptUUID {
	return s.ID
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *HostedNumber) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetStatus returns the value of Status.
func (s *HostedNumber) GetStatus() OptHostedNumberStatus {
	return s.Status
}

// SetRecordType sets the value of RecordType.
func (s *HostedNumber) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetID sets the value of ID.
func (s *HostedNumber) SetID(val OptUUID) {
	s.ID = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *HostedNumber) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetStatus sets the value of Status.
func (s *HostedNumber) SetStatus(val OptHostedNumberStatus) {
	s.Status = val
}

type HostedNumberStatus string

const (
	HostedNumberStatusDeleted    HostedNumberStatus = "deleted"
	HostedNumberStatusFailed     HostedNumberStatus = "failed"
	HostedNumberStatusPending    HostedNumberStatus = "pending"
	HostedNumberStatusSuccessful HostedNumberStatus = "successful"
)

// AllValues returns all HostedNumberStatus values.
func (HostedNumberStatus) AllValues() []HostedNumberStatus {
	return []HostedNumberStatus{
		HostedNumberStatusDeleted,
		HostedNumberStatusFailed,
		HostedNumberStatusPending,
		HostedNumberStatusSuccessful,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s HostedNumberStatus) MarshalText() ([]byte, error) {
	switch s {
	case HostedNumberStatusDeleted:
		return []byte(s), nil
	case HostedNumberStatusFailed:
		return []byte(s), nil
	case HostedNumberStatusPending:
		return []byte(s), nil
	case HostedNumberStatusSuccessful:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HostedNumberStatus) UnmarshalText(data []byte) error {
	switch HostedNumberStatus(data) {
	case HostedNumberStatusDeleted:
		*s = HostedNumberStatusDeleted
		return nil
	case HostedNumberStatusFailed:
		*s = HostedNumberStatusFailed
		return nil
	case HostedNumberStatusPending:
		*s = HostedNumberStatusPending
		return nil
	case HostedNumberStatusSuccessful:
		*s = HostedNumberStatusSuccessful
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/InitiateCallRequest
type InitiateCallRequest struct {
	// The ID of the TeXML Application.
	ApplicationSid string `json:"ApplicationSid"`
	// The phone number of the called party. Phone numbers are formatted with a `+` and country code.
	To string `json:"To"`
	// The phone number of the party that initiated the call. Phone numbers are formatted with a `+` and
	// country code.
	From string `json:"From"`
	// The URL from which Telnyx will retrieve the TeXML call instructions.
	URL OptString `json:"Url"`
	// HTTP request type used for `Url`. The default value is inherited from TeXML Application setting.
	UrlMethod OptInitiateCallRequestUrlMethod `json:"UrlMethod"`
	// A failover URL for which Telnyx will retrieve the TeXML call instructions if the `Url` is not
	// responding.
	FallbackUrl OptString `json:"FallbackUrl"`
	// URL destination for Telnyx to send status callback events to for the call.
	StatusCallback OptString `json:"StatusCallback"`
	// HTTP request type used for `StatusCallback`.
	StatusCallbackMethod OptInitiateCallRequestStatusCallbackMethod `json:"StatusCallbackMethod"`
	// The call events for which Telnyx should send a webhook. Multiple events can be defined when
	// separated by a space.
	StatusCallbackEvent OptInitiateCallRequestStatusCallbackEvent `json:"StatusCallbackEvent"`
	// Enables Answering Machine Detection.
	MachineDetection OptInitiateCallRequestMachineDetection `json:"MachineDetection"`
	// Allows you to chose between Premium and Standard detections.
	DetectionMode OptInitiateCallRequestDetectionMode `json:"DetectionMode"`
	// Select whether to perform answering machine detection in the background. By default execution is
	// blocked until Answering Machine Detection is completed.
	AsyncAmd OptBool `json:"AsyncAmd"`
	// URL destination for Telnyx to send AMD callback events to for the call.
	AsyncAmdStatusCallback OptString `json:"AsyncAmdStatusCallback"`
	// HTTP request type used for `AsyncAmdStatusCallback`. The default value is inherited from TeXML
	// Application setting.
	AsyncAmdStatusCallbackMethod OptInitiateCallRequestAsyncAmdStatusCallbackMethod `json:"AsyncAmdStatusCallbackMethod"`
	// Maximum timeout threshold in milliseconds for overall detection.
	MachineDetectionTimeout OptInt `json:"MachineDetectionTimeout"`
	// Maximum threshold of a human greeting. If greeting longer than this value, considered machine.
	// Ignored when `premium` detection is used.
	MachineDetectionSpeechThreshold OptInt `json:"MachineDetectionSpeechThreshold"`
	// Silence duration threshold after a greeting message or voice for it be considered human. Ignored
	// when `premium` detection is used.
	MachineDetectionSpeechEndThreshold OptInt `json:"MachineDetectionSpeechEndThreshold"`
	// If initial silence duration is greater than this value, consider it a machine. Ignored when
	// `premium` detection is used.
	MachineDetectionSilenceTimeout OptInt `json:"MachineDetectionSilenceTimeout"`
	// Whether to cancel ongoing playback on `machine` detection. Defaults to `true`.
	CancelPlaybackOnMachineDetection OptBool `json:"CancelPlaybackOnMachineDetection"`
	// Whether to cancel ongoing playback on `greeting ended` detection. Defaults to `true`.
	CancelPlaybackOnDetectMessageEnd OptBool `json:"CancelPlaybackOnDetectMessageEnd"`
	// The list of comma-separated codecs to be offered on a call.
	PreferredCodecs OptString `json:"PreferredCodecs"`
	// Whether to record the entire participant's call leg. Defaults to `false`.
	Record OptBool `json:"Record"`
	// The number of channels in the final recording. Defaults to `mono`.
	RecordingChannels OptInitiateCallRequestRecordingChannels `json:"RecordingChannels"`
	// The URL the recording callbacks will be sent to.
	RecordingStatusCallback OptString `json:"RecordingStatusCallback"`
	// HTTP request type used for `RecordingStatusCallback`. Defaults to `POST`.
	RecordingStatusCallbackMethod OptInitiateCallRequestRecordingStatusCallbackMethod `json:"RecordingStatusCallbackMethod"`
	// The changes to the recording's state that should generate a call to `RecoridngStatusCallback`. Can
	// be: `in-progress`, `completed` and `absent`. Separate multiple values with a space. Defaults to
	// `completed`.
	RecordingStatusCallbackEvent OptString `json:"RecordingStatusCallbackEvent"`
	// The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected.
	//  The timer only starts when the speech is detected. Please note that the transcription is used to
	// detect silence and the related charge will be applied. The minimum value is 0. The default value
	// is 0 (infinite).
	RecordingTimeout OptInt `json:"RecordingTimeout"`
	// The audio track to record for the call. The default is `both`.
	RecordingTrack OptInitiateCallRequestRecordingTrack `json:"RecordingTrack"`
	// The password to use for SIP authentication.
	SipAuthPassword OptString `json:"SipAuthPassword"`
	// The username to use for SIP authentication.
	SipAuthUsername OptString `json:"SipAuthUsername"`
	// Whether to trim any leading and trailing silence from the recording. Defaults to `trim-silence`.
	Trim OptInitiateCallRequestTrim `json:"Trim"`
}

// GetApplicationSid returns the value of ApplicationSid.
func (s *InitiateCallRequest) GetApplicationSid() string {
	return s.ApplicationSid
}

// GetTo returns the value of To.
func (s *InitiateCallRequest) GetTo() string {
	return s.To
}

// GetFrom returns the value of From.
func (s *InitiateCallRequest) GetFrom() string {
	return s.From
}

// GetURL returns the value of URL.
func (s *InitiateCallRequest) GetURL() OptString {
	return s.URL
}

// GetUrlMethod returns the value of UrlMethod.
func (s *InitiateCallRequest) GetUrlMethod() OptInitiateCallRequestUrlMethod {
	return s.UrlMethod
}

// GetFallbackUrl returns the value of FallbackUrl.
func (s *InitiateCallRequest) GetFallbackUrl() OptString {
	return s.FallbackUrl
}

// GetStatusCallback returns the value of StatusCallback.
func (s *InitiateCallRequest) GetStatusCallback() OptString {
	return s.StatusCallback
}

// GetStatusCallbackMethod returns the value of StatusCallbackMethod.
func (s *InitiateCallRequest) GetStatusCallbackMethod() OptInitiateCallRequestStatusCallbackMethod {
	return s.StatusCallbackMethod
}

// GetStatusCallbackEvent returns the value of StatusCallbackEvent.
func (s *InitiateCallRequest) GetStatusCallbackEvent() OptInitiateCallRequestStatusCallbackEvent {
	return s.StatusCallbackEvent
}

// GetMachineDetection returns the value of MachineDetection.
func (s *InitiateCallRequest) GetMachineDetection() OptInitiateCallRequestMachineDetection {
	return s.MachineDetection
}

// GetDetectionMode returns the value of DetectionMode.
func (s *InitiateCallRequest) GetDetectionMode() OptInitiateCallRequestDetectionMode {
	return s.DetectionMode
}

// GetAsyncAmd returns the value of AsyncAmd.
func (s *InitiateCallRequest) GetAsyncAmd() OptBool {
	return s.AsyncAmd
}

// GetAsyncAmdStatusCallback returns the value of AsyncAmdStatusCallback.
func (s *InitiateCallRequest) GetAsyncAmdStatusCallback() OptString {
	return s.AsyncAmdStatusCallback
}

// GetAsyncAmdStatusCallbackMethod returns the value of AsyncAmdStatusCallbackMethod.
func (s *InitiateCallRequest) GetAsyncAmdStatusCallbackMethod() OptInitiateCallRequestAsyncAmdStatusCallbackMethod {
	return s.AsyncAmdStatusCallbackMethod
}

// GetMachineDetectionTimeout returns the value of MachineDetectionTimeout.
func (s *InitiateCallRequest) GetMachineDetectionTimeout() OptInt {
	return s.MachineDetectionTimeout
}

// GetMachineDetectionSpeechThreshold returns the value of MachineDetectionSpeechThreshold.
func (s *InitiateCallRequest) GetMachineDetectionSpeechThreshold() OptInt {
	return s.MachineDetectionSpeechThreshold
}

// GetMachineDetectionSpeechEndThreshold returns the value of MachineDetectionSpeechEndThreshold.
func (s *InitiateCallRequest) GetMachineDetectionSpeechEndThreshold() OptInt {
	return s.MachineDetectionSpeechEndThreshold
}

// GetMachineDetectionSilenceTimeout returns the value of MachineDetectionSilenceTimeout.
func (s *InitiateCallRequest) GetMachineDetectionSilenceTimeout() OptInt {
	return s.MachineDetectionSilenceTimeout
}

// GetCancelPlaybackOnMachineDetection returns the value of CancelPlaybackOnMachineDetection.
func (s *InitiateCallRequest) GetCancelPlaybackOnMachineDetection() OptBool {
	return s.CancelPlaybackOnMachineDetection
}

// GetCancelPlaybackOnDetectMessageEnd returns the value of CancelPlaybackOnDetectMessageEnd.
func (s *InitiateCallRequest) GetCancelPlaybackOnDetectMessageEnd() OptBool {
	return s.CancelPlaybackOnDetectMessageEnd
}

// GetPreferredCodecs returns the value of PreferredCodecs.
func (s *InitiateCallRequest) GetPreferredCodecs() OptString {
	return s.PreferredCodecs
}

// GetRecord returns the value of Record.
func (s *InitiateCallRequest) GetRecord() OptBool {
	return s.Record
}

// GetRecordingChannels returns the value of RecordingChannels.
func (s *InitiateCallRequest) GetRecordingChannels() OptInitiateCallRequestRecordingChannels {
	return s.RecordingChannels
}

// GetRecordingStatusCallback returns the value of RecordingStatusCallback.
func (s *InitiateCallRequest) GetRecordingStatusCallback() OptString {
	return s.RecordingStatusCallback
}

// GetRecordingStatusCallbackMethod returns the value of RecordingStatusCallbackMethod.
func (s *InitiateCallRequest) GetRecordingStatusCallbackMethod() OptInitiateCallRequestRecordingStatusCallbackMethod {
	return s.RecordingStatusCallbackMethod
}

// GetRecordingStatusCallbackEvent returns the value of RecordingStatusCallbackEvent.
func (s *InitiateCallRequest) GetRecordingStatusCallbackEvent() OptString {
	return s.RecordingStatusCallbackEvent
}

// GetRecordingTimeout returns the value of RecordingTimeout.
func (s *InitiateCallRequest) GetRecordingTimeout() OptInt {
	return s.RecordingTimeout
}

// GetRecordingTrack returns the value of RecordingTrack.
func (s *InitiateCallRequest) GetRecordingTrack() OptInitiateCallRequestRecordingTrack {
	return s.RecordingTrack
}

// GetSipAuthPassword returns the value of SipAuthPassword.
func (s *InitiateCallRequest) GetSipAuthPassword() OptString {
	return s.SipAuthPassword
}

// GetSipAuthUsername returns the value of SipAuthUsername.
func (s *InitiateCallRequest) GetSipAuthUsername() OptString {
	return s.SipAuthUsername
}

// GetTrim returns the value of Trim.
func (s *InitiateCallRequest) GetTrim() OptInitiateCallRequestTrim {
	return s.Trim
}

// SetApplicationSid sets the value of ApplicationSid.
func (s *InitiateCallRequest) SetApplicationSid(val string) {
	s.ApplicationSid = val
}

// SetTo sets the value of To.
func (s *InitiateCallRequest) SetTo(val string) {
	s.To = val
}

// SetFrom sets the value of From.
func (s *InitiateCallRequest) SetFrom(val string) {
	s.From = val
}

// SetURL sets the value of URL.
func (s *InitiateCallRequest) SetURL(val OptString) {
	s.URL = val
}

// SetUrlMethod sets the value of UrlMethod.
func (s *InitiateCallRequest) SetUrlMethod(val OptInitiateCallRequestUrlMethod) {
	s.UrlMethod = val
}

// SetFallbackUrl sets the value of FallbackUrl.
func (s *InitiateCallRequest) SetFallbackUrl(val OptString) {
	s.FallbackUrl = val
}

// SetStatusCallback sets the value of StatusCallback.
func (s *InitiateCallRequest) SetStatusCallback(val OptString) {
	s.StatusCallback = val
}

// SetStatusCallbackMethod sets the value of StatusCallbackMethod.
func (s *InitiateCallRequest) SetStatusCallbackMethod(val OptInitiateCallRequestStatusCallbackMethod) {
	s.StatusCallbackMethod = val
}

// SetStatusCallbackEvent sets the value of StatusCallbackEvent.
func (s *InitiateCallRequest) SetStatusCallbackEvent(val OptInitiateCallRequestStatusCallbackEvent) {
	s.StatusCallbackEvent = val
}

// SetMachineDetection sets the value of MachineDetection.
func (s *InitiateCallRequest) SetMachineDetection(val OptInitiateCallRequestMachineDetection) {
	s.MachineDetection = val
}

// SetDetectionMode sets the value of DetectionMode.
func (s *InitiateCallRequest) SetDetectionMode(val OptInitiateCallRequestDetectionMode) {
	s.DetectionMode = val
}

// SetAsyncAmd sets the value of AsyncAmd.
func (s *InitiateCallRequest) SetAsyncAmd(val OptBool) {
	s.AsyncAmd = val
}

// SetAsyncAmdStatusCallback sets the value of AsyncAmdStatusCallback.
func (s *InitiateCallRequest) SetAsyncAmdStatusCallback(val OptString) {
	s.AsyncAmdStatusCallback = val
}

// SetAsyncAmdStatusCallbackMethod sets the value of AsyncAmdStatusCallbackMethod.
func (s *InitiateCallRequest) SetAsyncAmdStatusCallbackMethod(val OptInitiateCallRequestAsyncAmdStatusCallbackMethod) {
	s.AsyncAmdStatusCallbackMethod = val
}

// SetMachineDetectionTimeout sets the value of MachineDetectionTimeout.
func (s *InitiateCallRequest) SetMachineDetectionTimeout(val OptInt) {
	s.MachineDetectionTimeout = val
}

// SetMachineDetectionSpeechThreshold sets the value of MachineDetectionSpeechThreshold.
func (s *InitiateCallRequest) SetMachineDetectionSpeechThreshold(val OptInt) {
	s.MachineDetectionSpeechThreshold = val
}

// SetMachineDetectionSpeechEndThreshold sets the value of MachineDetectionSpeechEndThreshold.
func (s *InitiateCallRequest) SetMachineDetectionSpeechEndThreshold(val OptInt) {
	s.MachineDetectionSpeechEndThreshold = val
}

// SetMachineDetectionSilenceTimeout sets the value of MachineDetectionSilenceTimeout.
func (s *InitiateCallRequest) SetMachineDetectionSilenceTimeout(val OptInt) {
	s.MachineDetectionSilenceTimeout = val
}

// SetCancelPlaybackOnMachineDetection sets the value of CancelPlaybackOnMachineDetection.
func (s *InitiateCallRequest) SetCancelPlaybackOnMachineDetection(val OptBool) {
	s.CancelPlaybackOnMachineDetection = val
}

// SetCancelPlaybackOnDetectMessageEnd sets the value of CancelPlaybackOnDetectMessageEnd.
func (s *InitiateCallRequest) SetCancelPlaybackOnDetectMessageEnd(val OptBool) {
	s.CancelPlaybackOnDetectMessageEnd = val
}

// SetPreferredCodecs sets the value of PreferredCodecs.
func (s *InitiateCallRequest) SetPreferredCodecs(val OptString) {
	s.PreferredCodecs = val
}

// SetRecord sets the value of Record.
func (s *InitiateCallRequest) SetRecord(val OptBool) {
	s.Record = val
}

// SetRecordingChannels sets the value of RecordingChannels.
func (s *InitiateCallRequest) SetRecordingChannels(val OptInitiateCallRequestRecordingChannels) {
	s.RecordingChannels = val
}

// SetRecordingStatusCallback sets the value of RecordingStatusCallback.
func (s *InitiateCallRequest) SetRecordingStatusCallback(val OptString) {
	s.RecordingStatusCallback = val
}

// SetRecordingStatusCallbackMethod sets the value of RecordingStatusCallbackMethod.
func (s *InitiateCallRequest) SetRecordingStatusCallbackMethod(val OptInitiateCallRequestRecordingStatusCallbackMethod) {
	s.RecordingStatusCallbackMethod = val
}

// SetRecordingStatusCallbackEvent sets the value of RecordingStatusCallbackEvent.
func (s *InitiateCallRequest) SetRecordingStatusCallbackEvent(val OptString) {
	s.RecordingStatusCallbackEvent = val
}

// SetRecordingTimeout sets the value of RecordingTimeout.
func (s *InitiateCallRequest) SetRecordingTimeout(val OptInt) {
	s.RecordingTimeout = val
}

// SetRecordingTrack sets the value of RecordingTrack.
func (s *InitiateCallRequest) SetRecordingTrack(val OptInitiateCallRequestRecordingTrack) {
	s.RecordingTrack = val
}

// SetSipAuthPassword sets the value of SipAuthPassword.
func (s *InitiateCallRequest) SetSipAuthPassword(val OptString) {
	s.SipAuthPassword = val
}

// SetSipAuthUsername sets the value of SipAuthUsername.
func (s *InitiateCallRequest) SetSipAuthUsername(val OptString) {
	s.SipAuthUsername = val
}

// SetTrim sets the value of Trim.
func (s *InitiateCallRequest) SetTrim(val OptInitiateCallRequestTrim) {
	s.Trim = val
}

// HTTP request type used for `AsyncAmdStatusCallback`. The default value is inherited from TeXML
// Application setting.
type InitiateCallRequestAsyncAmdStatusCallbackMethod string

const (
	InitiateCallRequestAsyncAmdStatusCallbackMethodGET  InitiateCallRequestAsyncAmdStatusCallbackMethod = "GET"
	InitiateCallRequestAsyncAmdStatusCallbackMethodPOST InitiateCallRequestAsyncAmdStatusCallbackMethod = "POST"
)

// AllValues returns all InitiateCallRequestAsyncAmdStatusCallbackMethod values.
func (InitiateCallRequestAsyncAmdStatusCallbackMethod) AllValues() []InitiateCallRequestAsyncAmdStatusCallbackMethod {
	return []InitiateCallRequestAsyncAmdStatusCallbackMethod{
		InitiateCallRequestAsyncAmdStatusCallbackMethodGET,
		InitiateCallRequestAsyncAmdStatusCallbackMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InitiateCallRequestAsyncAmdStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case InitiateCallRequestAsyncAmdStatusCallbackMethodGET:
		return []byte(s), nil
	case InitiateCallRequestAsyncAmdStatusCallbackMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InitiateCallRequestAsyncAmdStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch InitiateCallRequestAsyncAmdStatusCallbackMethod(data) {
	case InitiateCallRequestAsyncAmdStatusCallbackMethodGET:
		*s = InitiateCallRequestAsyncAmdStatusCallbackMethodGET
		return nil
	case InitiateCallRequestAsyncAmdStatusCallbackMethodPOST:
		*s = InitiateCallRequestAsyncAmdStatusCallbackMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Allows you to chose between Premium and Standard detections.
type InitiateCallRequestDetectionMode string

const (
	InitiateCallRequestDetectionModePremium InitiateCallRequestDetectionMode = "Premium"
	InitiateCallRequestDetectionModeRegular InitiateCallRequestDetectionMode = "Regular"
)

// AllValues returns all InitiateCallRequestDetectionMode values.
func (InitiateCallRequestDetectionMode) AllValues() []InitiateCallRequestDetectionMode {
	return []InitiateCallRequestDetectionMode{
		InitiateCallRequestDetectionModePremium,
		InitiateCallRequestDetectionModeRegular,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InitiateCallRequestDetectionMode) MarshalText() ([]byte, error) {
	switch s {
	case InitiateCallRequestDetectionModePremium:
		return []byte(s), nil
	case InitiateCallRequestDetectionModeRegular:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InitiateCallRequestDetectionMode) UnmarshalText(data []byte) error {
	switch InitiateCallRequestDetectionMode(data) {
	case InitiateCallRequestDetectionModePremium:
		*s = InitiateCallRequestDetectionModePremium
		return nil
	case InitiateCallRequestDetectionModeRegular:
		*s = InitiateCallRequestDetectionModeRegular
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Enables Answering Machine Detection.
type InitiateCallRequestMachineDetection string

const (
	InitiateCallRequestMachineDetectionEnable           InitiateCallRequestMachineDetection = "Enable"
	InitiateCallRequestMachineDetectionDisable          InitiateCallRequestMachineDetection = "Disable"
	InitiateCallRequestMachineDetectionDetectMessageEnd InitiateCallRequestMachineDetection = "DetectMessageEnd"
)

// AllValues returns all InitiateCallRequestMachineDetection values.
func (InitiateCallRequestMachineDetection) AllValues() []InitiateCallRequestMachineDetection {
	return []InitiateCallRequestMachineDetection{
		InitiateCallRequestMachineDetectionEnable,
		InitiateCallRequestMachineDetectionDisable,
		InitiateCallRequestMachineDetectionDetectMessageEnd,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InitiateCallRequestMachineDetection) MarshalText() ([]byte, error) {
	switch s {
	case InitiateCallRequestMachineDetectionEnable:
		return []byte(s), nil
	case InitiateCallRequestMachineDetectionDisable:
		return []byte(s), nil
	case InitiateCallRequestMachineDetectionDetectMessageEnd:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InitiateCallRequestMachineDetection) UnmarshalText(data []byte) error {
	switch InitiateCallRequestMachineDetection(data) {
	case InitiateCallRequestMachineDetectionEnable:
		*s = InitiateCallRequestMachineDetectionEnable
		return nil
	case InitiateCallRequestMachineDetectionDisable:
		*s = InitiateCallRequestMachineDetectionDisable
		return nil
	case InitiateCallRequestMachineDetectionDetectMessageEnd:
		*s = InitiateCallRequestMachineDetectionDetectMessageEnd
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The number of channels in the final recording. Defaults to `mono`.
type InitiateCallRequestRecordingChannels string

const (
	InitiateCallRequestRecordingChannelsMono InitiateCallRequestRecordingChannels = "mono"
	InitiateCallRequestRecordingChannelsDual InitiateCallRequestRecordingChannels = "dual"
)

// AllValues returns all InitiateCallRequestRecordingChannels values.
func (InitiateCallRequestRecordingChannels) AllValues() []InitiateCallRequestRecordingChannels {
	return []InitiateCallRequestRecordingChannels{
		InitiateCallRequestRecordingChannelsMono,
		InitiateCallRequestRecordingChannelsDual,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InitiateCallRequestRecordingChannels) MarshalText() ([]byte, error) {
	switch s {
	case InitiateCallRequestRecordingChannelsMono:
		return []byte(s), nil
	case InitiateCallRequestRecordingChannelsDual:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InitiateCallRequestRecordingChannels) UnmarshalText(data []byte) error {
	switch InitiateCallRequestRecordingChannels(data) {
	case InitiateCallRequestRecordingChannelsMono:
		*s = InitiateCallRequestRecordingChannelsMono
		return nil
	case InitiateCallRequestRecordingChannelsDual:
		*s = InitiateCallRequestRecordingChannelsDual
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request type used for `RecordingStatusCallback`. Defaults to `POST`.
type InitiateCallRequestRecordingStatusCallbackMethod string

const (
	InitiateCallRequestRecordingStatusCallbackMethodGET  InitiateCallRequestRecordingStatusCallbackMethod = "GET"
	InitiateCallRequestRecordingStatusCallbackMethodPOST InitiateCallRequestRecordingStatusCallbackMethod = "POST"
)

// AllValues returns all InitiateCallRequestRecordingStatusCallbackMethod values.
func (InitiateCallRequestRecordingStatusCallbackMethod) AllValues() []InitiateCallRequestRecordingStatusCallbackMethod {
	return []InitiateCallRequestRecordingStatusCallbackMethod{
		InitiateCallRequestRecordingStatusCallbackMethodGET,
		InitiateCallRequestRecordingStatusCallbackMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InitiateCallRequestRecordingStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case InitiateCallRequestRecordingStatusCallbackMethodGET:
		return []byte(s), nil
	case InitiateCallRequestRecordingStatusCallbackMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InitiateCallRequestRecordingStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch InitiateCallRequestRecordingStatusCallbackMethod(data) {
	case InitiateCallRequestRecordingStatusCallbackMethodGET:
		*s = InitiateCallRequestRecordingStatusCallbackMethodGET
		return nil
	case InitiateCallRequestRecordingStatusCallbackMethodPOST:
		*s = InitiateCallRequestRecordingStatusCallbackMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The audio track to record for the call. The default is `both`.
type InitiateCallRequestRecordingTrack string

const (
	InitiateCallRequestRecordingTrackInbound  InitiateCallRequestRecordingTrack = "inbound"
	InitiateCallRequestRecordingTrackOutbound InitiateCallRequestRecordingTrack = "outbound"
	InitiateCallRequestRecordingTrackBoth     InitiateCallRequestRecordingTrack = "both"
)

// AllValues returns all InitiateCallRequestRecordingTrack values.
func (InitiateCallRequestRecordingTrack) AllValues() []InitiateCallRequestRecordingTrack {
	return []InitiateCallRequestRecordingTrack{
		InitiateCallRequestRecordingTrackInbound,
		InitiateCallRequestRecordingTrackOutbound,
		InitiateCallRequestRecordingTrackBoth,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InitiateCallRequestRecordingTrack) MarshalText() ([]byte, error) {
	switch s {
	case InitiateCallRequestRecordingTrackInbound:
		return []byte(s), nil
	case InitiateCallRequestRecordingTrackOutbound:
		return []byte(s), nil
	case InitiateCallRequestRecordingTrackBoth:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InitiateCallRequestRecordingTrack) UnmarshalText(data []byte) error {
	switch InitiateCallRequestRecordingTrack(data) {
	case InitiateCallRequestRecordingTrackInbound:
		*s = InitiateCallRequestRecordingTrackInbound
		return nil
	case InitiateCallRequestRecordingTrackOutbound:
		*s = InitiateCallRequestRecordingTrackOutbound
		return nil
	case InitiateCallRequestRecordingTrackBoth:
		*s = InitiateCallRequestRecordingTrackBoth
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The call events for which Telnyx should send a webhook. Multiple events can be defined when
// separated by a space.
type InitiateCallRequestStatusCallbackEvent string

const (
	InitiateCallRequestStatusCallbackEventInitiated InitiateCallRequestStatusCallbackEvent = "initiated"
	InitiateCallRequestStatusCallbackEventRinging   InitiateCallRequestStatusCallbackEvent = "ringing"
	InitiateCallRequestStatusCallbackEventAnswered  InitiateCallRequestStatusCallbackEvent = "answered"
	InitiateCallRequestStatusCallbackEventCompleted InitiateCallRequestStatusCallbackEvent = "completed"
)

// AllValues returns all InitiateCallRequestStatusCallbackEvent values.
func (InitiateCallRequestStatusCallbackEvent) AllValues() []InitiateCallRequestStatusCallbackEvent {
	return []InitiateCallRequestStatusCallbackEvent{
		InitiateCallRequestStatusCallbackEventInitiated,
		InitiateCallRequestStatusCallbackEventRinging,
		InitiateCallRequestStatusCallbackEventAnswered,
		InitiateCallRequestStatusCallbackEventCompleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InitiateCallRequestStatusCallbackEvent) MarshalText() ([]byte, error) {
	switch s {
	case InitiateCallRequestStatusCallbackEventInitiated:
		return []byte(s), nil
	case InitiateCallRequestStatusCallbackEventRinging:
		return []byte(s), nil
	case InitiateCallRequestStatusCallbackEventAnswered:
		return []byte(s), nil
	case InitiateCallRequestStatusCallbackEventCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InitiateCallRequestStatusCallbackEvent) UnmarshalText(data []byte) error {
	switch InitiateCallRequestStatusCallbackEvent(data) {
	case InitiateCallRequestStatusCallbackEventInitiated:
		*s = InitiateCallRequestStatusCallbackEventInitiated
		return nil
	case InitiateCallRequestStatusCallbackEventRinging:
		*s = InitiateCallRequestStatusCallbackEventRinging
		return nil
	case InitiateCallRequestStatusCallbackEventAnswered:
		*s = InitiateCallRequestStatusCallbackEventAnswered
		return nil
	case InitiateCallRequestStatusCallbackEventCompleted:
		*s = InitiateCallRequestStatusCallbackEventCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request type used for `StatusCallback`.
type InitiateCallRequestStatusCallbackMethod string

const (
	InitiateCallRequestStatusCallbackMethodGET  InitiateCallRequestStatusCallbackMethod = "GET"
	InitiateCallRequestStatusCallbackMethodPOST InitiateCallRequestStatusCallbackMethod = "POST"
)

// AllValues returns all InitiateCallRequestStatusCallbackMethod values.
func (InitiateCallRequestStatusCallbackMethod) AllValues() []InitiateCallRequestStatusCallbackMethod {
	return []InitiateCallRequestStatusCallbackMethod{
		InitiateCallRequestStatusCallbackMethodGET,
		InitiateCallRequestStatusCallbackMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InitiateCallRequestStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case InitiateCallRequestStatusCallbackMethodGET:
		return []byte(s), nil
	case InitiateCallRequestStatusCallbackMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InitiateCallRequestStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch InitiateCallRequestStatusCallbackMethod(data) {
	case InitiateCallRequestStatusCallbackMethodGET:
		*s = InitiateCallRequestStatusCallbackMethodGET
		return nil
	case InitiateCallRequestStatusCallbackMethodPOST:
		*s = InitiateCallRequestStatusCallbackMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Whether to trim any leading and trailing silence from the recording. Defaults to `trim-silence`.
type InitiateCallRequestTrim string

const (
	InitiateCallRequestTrimTrimSilence InitiateCallRequestTrim = "trim-silence"
	InitiateCallRequestTrimDoNotTrim   InitiateCallRequestTrim = "do-not-trim"
)

// AllValues returns all InitiateCallRequestTrim values.
func (InitiateCallRequestTrim) AllValues() []InitiateCallRequestTrim {
	return []InitiateCallRequestTrim{
		InitiateCallRequestTrimTrimSilence,
		InitiateCallRequestTrimDoNotTrim,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InitiateCallRequestTrim) MarshalText() ([]byte, error) {
	switch s {
	case InitiateCallRequestTrimTrimSilence:
		return []byte(s), nil
	case InitiateCallRequestTrimDoNotTrim:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InitiateCallRequestTrim) UnmarshalText(data []byte) error {
	switch InitiateCallRequestTrim(data) {
	case InitiateCallRequestTrimTrimSilence:
		*s = InitiateCallRequestTrimTrimSilence
		return nil
	case InitiateCallRequestTrimDoNotTrim:
		*s = InitiateCallRequestTrimDoNotTrim
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request type used for `Url`. The default value is inherited from TeXML Application setting.
type InitiateCallRequestUrlMethod string

const (
	InitiateCallRequestUrlMethodGET  InitiateCallRequestUrlMethod = "GET"
	InitiateCallRequestUrlMethodPOST InitiateCallRequestUrlMethod = "POST"
)

// AllValues returns all InitiateCallRequestUrlMethod values.
func (InitiateCallRequestUrlMethod) AllValues() []InitiateCallRequestUrlMethod {
	return []InitiateCallRequestUrlMethod{
		InitiateCallRequestUrlMethodGET,
		InitiateCallRequestUrlMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InitiateCallRequestUrlMethod) MarshalText() ([]byte, error) {
	switch s {
	case InitiateCallRequestUrlMethodGET:
		return []byte(s), nil
	case InitiateCallRequestUrlMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InitiateCallRequestUrlMethod) UnmarshalText(data []byte) error {
	switch InitiateCallRequestUrlMethod(data) {
	case InitiateCallRequestUrlMethodGET:
		*s = InitiateCallRequestUrlMethodGET
		return nil
	case InitiateCallRequestUrlMethodPOST:
		*s = InitiateCallRequestUrlMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type InitiateCallResponse struct {
	Data OptInitiateCallResult `json:"data"`
}

// GetData returns the value of Data.
func (s *InitiateCallResponse) GetData() OptInitiateCallResult {
	return s.Data
}

// SetData sets the value of Data.
func (s *InitiateCallResponse) SetData(val OptInitiateCallResult) {
	s.Data = val
}

// Ref: #/components/schemas/InitiateCallResult
type InitiateCallResult struct {
	From   OptString `json:"from"`
	To     OptString `json:"to"`
	Status OptString `json:"status"`
}

// GetFrom returns the value of From.
func (s *InitiateCallResult) GetFrom() OptString {
	return s.From
}

// GetTo returns the value of To.
func (s *InitiateCallResult) GetTo() OptString {
	return s.To
}

// GetStatus returns the value of Status.
func (s *InitiateCallResult) GetStatus() OptString {
	return s.Status
}

// SetFrom sets the value of From.
func (s *InitiateCallResult) SetFrom(val OptString) {
	s.From = val
}

// SetTo sets the value of To.
func (s *InitiateCallResult) SetTo(val OptString) {
	s.To = val
}

// SetStatus sets the value of Status.
func (s *InitiateCallResult) SetStatus(val OptString) {
	s.Status = val
}

type IntId int64

// The current status of the interface deployment.
// Ref: #/components/schemas/InterfaceStatus
type InterfaceStatus string

const (
	InterfaceStatusCreated      InterfaceStatus = "created"
	InterfaceStatusProvisioning InterfaceStatus = "provisioning"
	InterfaceStatusProvisioned  InterfaceStatus = "provisioned"
	InterfaceStatusDeleting     InterfaceStatus = "deleting"
)

// AllValues returns all InterfaceStatus values.
func (InterfaceStatus) AllValues() []InterfaceStatus {
	return []InterfaceStatus{
		InterfaceStatusCreated,
		InterfaceStatusProvisioning,
		InterfaceStatusProvisioned,
		InterfaceStatusDeleting,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InterfaceStatus) MarshalText() ([]byte, error) {
	switch s {
	case InterfaceStatusCreated:
		return []byte(s), nil
	case InterfaceStatusProvisioning:
		return []byte(s), nil
	case InterfaceStatusProvisioned:
		return []byte(s), nil
	case InterfaceStatusDeleting:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InterfaceStatus) UnmarshalText(data []byte) error {
	switch InterfaceStatus(data) {
	case InterfaceStatusCreated:
		*s = InterfaceStatusCreated
		return nil
	case InterfaceStatusProvisioning:
		*s = InterfaceStatusProvisioning
		return nil
	case InterfaceStatusProvisioned:
		*s = InterfaceStatusProvisioned
		return nil
	case InterfaceStatusDeleting:
		*s = InterfaceStatusDeleting
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/LeaveQueueRequest
type LeaveQueueRequest struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetClientState returns the value of ClientState.
func (s *LeaveQueueRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *LeaveQueueRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetClientState sets the value of ClientState.
func (s *LeaveQueueRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *LeaveQueueRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

type ListAdditionalDocumentsFilterDocumentType string

const (
	ListAdditionalDocumentsFilterDocumentTypeLoa     ListAdditionalDocumentsFilterDocumentType = "loa"
	ListAdditionalDocumentsFilterDocumentTypeInvoice ListAdditionalDocumentsFilterDocumentType = "invoice"
	ListAdditionalDocumentsFilterDocumentTypeCsr     ListAdditionalDocumentsFilterDocumentType = "csr"
	ListAdditionalDocumentsFilterDocumentTypeOther   ListAdditionalDocumentsFilterDocumentType = "other"
)

// AllValues returns all ListAdditionalDocumentsFilterDocumentType values.
func (ListAdditionalDocumentsFilterDocumentType) AllValues() []ListAdditionalDocumentsFilterDocumentType {
	return []ListAdditionalDocumentsFilterDocumentType{
		ListAdditionalDocumentsFilterDocumentTypeLoa,
		ListAdditionalDocumentsFilterDocumentTypeInvoice,
		ListAdditionalDocumentsFilterDocumentTypeCsr,
		ListAdditionalDocumentsFilterDocumentTypeOther,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListAdditionalDocumentsFilterDocumentType) MarshalText() ([]byte, error) {
	switch s {
	case ListAdditionalDocumentsFilterDocumentTypeLoa:
		return []byte(s), nil
	case ListAdditionalDocumentsFilterDocumentTypeInvoice:
		return []byte(s), nil
	case ListAdditionalDocumentsFilterDocumentTypeCsr:
		return []byte(s), nil
	case ListAdditionalDocumentsFilterDocumentTypeOther:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListAdditionalDocumentsFilterDocumentType) UnmarshalText(data []byte) error {
	switch ListAdditionalDocumentsFilterDocumentType(data) {
	case ListAdditionalDocumentsFilterDocumentTypeLoa:
		*s = ListAdditionalDocumentsFilterDocumentTypeLoa
		return nil
	case ListAdditionalDocumentsFilterDocumentTypeInvoice:
		*s = ListAdditionalDocumentsFilterDocumentTypeInvoice
		return nil
	case ListAdditionalDocumentsFilterDocumentTypeCsr:
		*s = ListAdditionalDocumentsFilterDocumentTypeCsr
		return nil
	case ListAdditionalDocumentsFilterDocumentTypeOther:
		*s = ListAdditionalDocumentsFilterDocumentTypeOther
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListAdditionalDocumentsFilterDocumentTypeInItem string

const (
	ListAdditionalDocumentsFilterDocumentTypeInItemLoa     ListAdditionalDocumentsFilterDocumentTypeInItem = "loa"
	ListAdditionalDocumentsFilterDocumentTypeInItemInvoice ListAdditionalDocumentsFilterDocumentTypeInItem = "invoice"
	ListAdditionalDocumentsFilterDocumentTypeInItemCsr     ListAdditionalDocumentsFilterDocumentTypeInItem = "csr"
	ListAdditionalDocumentsFilterDocumentTypeInItemOther   ListAdditionalDocumentsFilterDocumentTypeInItem = "other"
)

// AllValues returns all ListAdditionalDocumentsFilterDocumentTypeInItem values.
func (ListAdditionalDocumentsFilterDocumentTypeInItem) AllValues() []ListAdditionalDocumentsFilterDocumentTypeInItem {
	return []ListAdditionalDocumentsFilterDocumentTypeInItem{
		ListAdditionalDocumentsFilterDocumentTypeInItemLoa,
		ListAdditionalDocumentsFilterDocumentTypeInItemInvoice,
		ListAdditionalDocumentsFilterDocumentTypeInItemCsr,
		ListAdditionalDocumentsFilterDocumentTypeInItemOther,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListAdditionalDocumentsFilterDocumentTypeInItem) MarshalText() ([]byte, error) {
	switch s {
	case ListAdditionalDocumentsFilterDocumentTypeInItemLoa:
		return []byte(s), nil
	case ListAdditionalDocumentsFilterDocumentTypeInItemInvoice:
		return []byte(s), nil
	case ListAdditionalDocumentsFilterDocumentTypeInItemCsr:
		return []byte(s), nil
	case ListAdditionalDocumentsFilterDocumentTypeInItemOther:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListAdditionalDocumentsFilterDocumentTypeInItem) UnmarshalText(data []byte) error {
	switch ListAdditionalDocumentsFilterDocumentTypeInItem(data) {
	case ListAdditionalDocumentsFilterDocumentTypeInItemLoa:
		*s = ListAdditionalDocumentsFilterDocumentTypeInItemLoa
		return nil
	case ListAdditionalDocumentsFilterDocumentTypeInItemInvoice:
		*s = ListAdditionalDocumentsFilterDocumentTypeInItemInvoice
		return nil
	case ListAdditionalDocumentsFilterDocumentTypeInItemCsr:
		*s = ListAdditionalDocumentsFilterDocumentTypeInItemCsr
		return nil
	case ListAdditionalDocumentsFilterDocumentTypeInItemOther:
		*s = ListAdditionalDocumentsFilterDocumentTypeInItemOther
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ListAdditionalDocumentsNotFound is response for ListAdditionalDocuments operation.
type ListAdditionalDocumentsNotFound struct{}

func (*ListAdditionalDocumentsNotFound) listAdditionalDocumentsRes() {}

type ListAdditionalDocumentsSort string

const (
	ListAdditionalDocumentsSortCreatedAt      ListAdditionalDocumentsSort = "created_at"
	ListAdditionalDocumentsSortMinusCreatedAt ListAdditionalDocumentsSort = "-created_at"
)

// AllValues returns all ListAdditionalDocumentsSort values.
func (ListAdditionalDocumentsSort) AllValues() []ListAdditionalDocumentsSort {
	return []ListAdditionalDocumentsSort{
		ListAdditionalDocumentsSortCreatedAt,
		ListAdditionalDocumentsSortMinusCreatedAt,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListAdditionalDocumentsSort) MarshalText() ([]byte, error) {
	switch s {
	case ListAdditionalDocumentsSortCreatedAt:
		return []byte(s), nil
	case ListAdditionalDocumentsSortMinusCreatedAt:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListAdditionalDocumentsSort) UnmarshalText(data []byte) error {
	switch ListAdditionalDocumentsSort(data) {
	case ListAdditionalDocumentsSortCreatedAt:
		*s = ListAdditionalDocumentsSortCreatedAt
		return nil
	case ListAdditionalDocumentsSortMinusCreatedAt:
		*s = ListAdditionalDocumentsSortMinusCreatedAt
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ListAdditionalDocumentsUnauthorized is response for ListAdditionalDocuments operation.
type ListAdditionalDocumentsUnauthorized struct{}

func (*ListAdditionalDocumentsUnauthorized) listAdditionalDocumentsRes() {}

type ListAllowedFocWindows struct {
	Data []PortingOrdersAllowedFocWindow `json:"data"`
	Meta OptPaginationMeta               `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListAllowedFocWindows) GetData() []PortingOrdersAllowedFocWindow {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListAllowedFocWindows) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListAllowedFocWindows) SetData(val []PortingOrdersAllowedFocWindow) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListAllowedFocWindows) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListAllowedFocWindows) listAllowedFocWindowsRes() {}

// ListAllowedFocWindowsUnauthorized is response for ListAllowedFocWindows operation.
type ListAllowedFocWindowsUnauthorized struct{}

func (*ListAllowedFocWindowsUnauthorized) listAllowedFocWindowsRes() {}

type ListAvailablePhoneNumberBlocksFilterNumberType string

const (
	ListAvailablePhoneNumberBlocksFilterNumberTypeTollFree ListAvailablePhoneNumberBlocksFilterNumberType = "toll-free"
)

// AllValues returns all ListAvailablePhoneNumberBlocksFilterNumberType values.
func (ListAvailablePhoneNumberBlocksFilterNumberType) AllValues() []ListAvailablePhoneNumberBlocksFilterNumberType {
	return []ListAvailablePhoneNumberBlocksFilterNumberType{
		ListAvailablePhoneNumberBlocksFilterNumberTypeTollFree,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListAvailablePhoneNumberBlocksFilterNumberType) MarshalText() ([]byte, error) {
	switch s {
	case ListAvailablePhoneNumberBlocksFilterNumberTypeTollFree:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListAvailablePhoneNumberBlocksFilterNumberType) UnmarshalText(data []byte) error {
	switch ListAvailablePhoneNumberBlocksFilterNumberType(data) {
	case ListAvailablePhoneNumberBlocksFilterNumberTypeTollFree:
		*s = ListAvailablePhoneNumberBlocksFilterNumberTypeTollFree
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListAvailablePhoneNumbersBlockResponse struct {
	Data []AvailablePhoneNumberBlock      `json:"data"`
	Meta OptAvailablePhoneNumbersMetadata `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListAvailablePhoneNumbersBlockResponse) GetData() []AvailablePhoneNumberBlock {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListAvailablePhoneNumbersBlockResponse) GetMeta() OptAvailablePhoneNumbersMetadata {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListAvailablePhoneNumbersBlockResponse) SetData(val []AvailablePhoneNumberBlock) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListAvailablePhoneNumbersBlockResponse) SetMeta(val OptAvailablePhoneNumbersMetadata) {
	s.Meta = val
}

func (*ListAvailablePhoneNumbersBlockResponse) listAvailablePhoneNumberBlocksRes() {}

type ListAvailablePhoneNumbersFilterFeaturesItem string

const (
	ListAvailablePhoneNumbersFilterFeaturesItemSMS       ListAvailablePhoneNumbersFilterFeaturesItem = "sms"
	ListAvailablePhoneNumbersFilterFeaturesItemMms       ListAvailablePhoneNumbersFilterFeaturesItem = "mms"
	ListAvailablePhoneNumbersFilterFeaturesItemVoice     ListAvailablePhoneNumbersFilterFeaturesItem = "voice"
	ListAvailablePhoneNumbersFilterFeaturesItemFax       ListAvailablePhoneNumbersFilterFeaturesItem = "fax"
	ListAvailablePhoneNumbersFilterFeaturesItemEmergency ListAvailablePhoneNumbersFilterFeaturesItem = "emergency"
)

// AllValues returns all ListAvailablePhoneNumbersFilterFeaturesItem values.
func (ListAvailablePhoneNumbersFilterFeaturesItem) AllValues() []ListAvailablePhoneNumbersFilterFeaturesItem {
	return []ListAvailablePhoneNumbersFilterFeaturesItem{
		ListAvailablePhoneNumbersFilterFeaturesItemSMS,
		ListAvailablePhoneNumbersFilterFeaturesItemMms,
		ListAvailablePhoneNumbersFilterFeaturesItemVoice,
		ListAvailablePhoneNumbersFilterFeaturesItemFax,
		ListAvailablePhoneNumbersFilterFeaturesItemEmergency,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListAvailablePhoneNumbersFilterFeaturesItem) MarshalText() ([]byte, error) {
	switch s {
	case ListAvailablePhoneNumbersFilterFeaturesItemSMS:
		return []byte(s), nil
	case ListAvailablePhoneNumbersFilterFeaturesItemMms:
		return []byte(s), nil
	case ListAvailablePhoneNumbersFilterFeaturesItemVoice:
		return []byte(s), nil
	case ListAvailablePhoneNumbersFilterFeaturesItemFax:
		return []byte(s), nil
	case ListAvailablePhoneNumbersFilterFeaturesItemEmergency:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListAvailablePhoneNumbersFilterFeaturesItem) UnmarshalText(data []byte) error {
	switch ListAvailablePhoneNumbersFilterFeaturesItem(data) {
	case ListAvailablePhoneNumbersFilterFeaturesItemSMS:
		*s = ListAvailablePhoneNumbersFilterFeaturesItemSMS
		return nil
	case ListAvailablePhoneNumbersFilterFeaturesItemMms:
		*s = ListAvailablePhoneNumbersFilterFeaturesItemMms
		return nil
	case ListAvailablePhoneNumbersFilterFeaturesItemVoice:
		*s = ListAvailablePhoneNumbersFilterFeaturesItemVoice
		return nil
	case ListAvailablePhoneNumbersFilterFeaturesItemFax:
		*s = ListAvailablePhoneNumbersFilterFeaturesItemFax
		return nil
	case ListAvailablePhoneNumbersFilterFeaturesItemEmergency:
		*s = ListAvailablePhoneNumbersFilterFeaturesItemEmergency
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListAvailablePhoneNumbersFilterPhoneNumberType string

const (
	ListAvailablePhoneNumbersFilterPhoneNumberTypeLocal      ListAvailablePhoneNumbersFilterPhoneNumberType = "local"
	ListAvailablePhoneNumbersFilterPhoneNumberTypeTollFree   ListAvailablePhoneNumbersFilterPhoneNumberType = "toll_free"
	ListAvailablePhoneNumbersFilterPhoneNumberTypeMobile     ListAvailablePhoneNumbersFilterPhoneNumberType = "mobile"
	ListAvailablePhoneNumbersFilterPhoneNumberTypeNational   ListAvailablePhoneNumbersFilterPhoneNumberType = "national"
	ListAvailablePhoneNumbersFilterPhoneNumberTypeSharedCost ListAvailablePhoneNumbersFilterPhoneNumberType = "shared_cost"
	ListAvailablePhoneNumbersFilterPhoneNumberTypeLandline   ListAvailablePhoneNumbersFilterPhoneNumberType = "landline"
)

// AllValues returns all ListAvailablePhoneNumbersFilterPhoneNumberType values.
func (ListAvailablePhoneNumbersFilterPhoneNumberType) AllValues() []ListAvailablePhoneNumbersFilterPhoneNumberType {
	return []ListAvailablePhoneNumbersFilterPhoneNumberType{
		ListAvailablePhoneNumbersFilterPhoneNumberTypeLocal,
		ListAvailablePhoneNumbersFilterPhoneNumberTypeTollFree,
		ListAvailablePhoneNumbersFilterPhoneNumberTypeMobile,
		ListAvailablePhoneNumbersFilterPhoneNumberTypeNational,
		ListAvailablePhoneNumbersFilterPhoneNumberTypeSharedCost,
		ListAvailablePhoneNumbersFilterPhoneNumberTypeLandline,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListAvailablePhoneNumbersFilterPhoneNumberType) MarshalText() ([]byte, error) {
	switch s {
	case ListAvailablePhoneNumbersFilterPhoneNumberTypeLocal:
		return []byte(s), nil
	case ListAvailablePhoneNumbersFilterPhoneNumberTypeTollFree:
		return []byte(s), nil
	case ListAvailablePhoneNumbersFilterPhoneNumberTypeMobile:
		return []byte(s), nil
	case ListAvailablePhoneNumbersFilterPhoneNumberTypeNational:
		return []byte(s), nil
	case ListAvailablePhoneNumbersFilterPhoneNumberTypeSharedCost:
		return []byte(s), nil
	case ListAvailablePhoneNumbersFilterPhoneNumberTypeLandline:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListAvailablePhoneNumbersFilterPhoneNumberType) UnmarshalText(data []byte) error {
	switch ListAvailablePhoneNumbersFilterPhoneNumberType(data) {
	case ListAvailablePhoneNumbersFilterPhoneNumberTypeLocal:
		*s = ListAvailablePhoneNumbersFilterPhoneNumberTypeLocal
		return nil
	case ListAvailablePhoneNumbersFilterPhoneNumberTypeTollFree:
		*s = ListAvailablePhoneNumbersFilterPhoneNumberTypeTollFree
		return nil
	case ListAvailablePhoneNumbersFilterPhoneNumberTypeMobile:
		*s = ListAvailablePhoneNumbersFilterPhoneNumberTypeMobile
		return nil
	case ListAvailablePhoneNumbersFilterPhoneNumberTypeNational:
		*s = ListAvailablePhoneNumbersFilterPhoneNumberTypeNational
		return nil
	case ListAvailablePhoneNumbersFilterPhoneNumberTypeSharedCost:
		*s = ListAvailablePhoneNumbersFilterPhoneNumberTypeSharedCost
		return nil
	case ListAvailablePhoneNumbersFilterPhoneNumberTypeLandline:
		*s = ListAvailablePhoneNumbersFilterPhoneNumberTypeLandline
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListAvailablePhoneNumbersResponse struct {
	Data []AvailablePhoneNumber           `json:"data"`
	Meta OptAvailablePhoneNumbersMetadata `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListAvailablePhoneNumbersResponse) GetData() []AvailablePhoneNumber {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListAvailablePhoneNumbersResponse) GetMeta() OptAvailablePhoneNumbersMetadata {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListAvailablePhoneNumbersResponse) SetData(val []AvailablePhoneNumber) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListAvailablePhoneNumbersResponse) SetMeta(val OptAvailablePhoneNumbersMetadata) {
	s.Meta = val
}

func (*ListAvailablePhoneNumbersResponse) listAvailablePhoneNumbersRes() {}

// ListCallControlApplicationsBadRequest is response for ListCallControlApplications operation.
type ListCallControlApplicationsBadRequest struct{}

func (*ListCallControlApplicationsBadRequest) listCallControlApplicationsRes() {}

// ListCallControlApplicationsNotFound is response for ListCallControlApplications operation.
type ListCallControlApplicationsNotFound struct{}

func (*ListCallControlApplicationsNotFound) listCallControlApplicationsRes() {}

type ListCallControlApplicationsResponse struct {
	Data []CallControlApplication `json:"data"`
	Meta OptPaginationMeta        `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListCallControlApplicationsResponse) GetData() []CallControlApplication {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListCallControlApplicationsResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListCallControlApplicationsResponse) SetData(val []CallControlApplication) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListCallControlApplicationsResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListCallControlApplicationsResponse) listCallControlApplicationsRes() {}

type ListCommentsResponse struct {
	Data []Comment         `json:"data"`
	Meta OptPaginationMeta `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListCommentsResponse) GetData() []Comment {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListCommentsResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListCommentsResponse) SetData(val []Comment) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListCommentsResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListCommentsResponse) listCommentsRes() {}

type ListCsvDownloadsResponse struct {
	Data []CsvDownload     `json:"data"`
	Meta OptPaginationMeta `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListCsvDownloadsResponse) GetData() []CsvDownload {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListCsvDownloadsResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListCsvDownloadsResponse) SetData(val []CsvDownload) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListCsvDownloadsResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListCsvDownloadsResponse) listCsvDownloadsRes() {}

type ListDraftPortingOrdersWithoutPagination struct {
	Data []PortingOrder `json:"data"`
}

// GetData returns the value of Data.
func (s *ListDraftPortingOrdersWithoutPagination) GetData() []PortingOrder {
	return s.Data
}

// SetData sets the value of Data.
func (s *ListDraftPortingOrdersWithoutPagination) SetData(val []PortingOrder) {
	s.Data = val
}

func (*ListDraftPortingOrdersWithoutPagination) createPortingOrderRes() {}

// ListExceptionTypesUnauthorized is response for ListExceptionTypes operation.
type ListExceptionTypesUnauthorized struct{}

func (*ListExceptionTypesUnauthorized) listExceptionTypesRes() {}

// ListExceptionTypesUnprocessableEntity is response for ListExceptionTypes operation.
type ListExceptionTypesUnprocessableEntity struct{}

func (*ListExceptionTypesUnprocessableEntity) listExceptionTypesRes() {}

// ListExternalConnectionLogMessagesUnauthorized is response for ListExternalConnectionLogMessages operation.
type ListExternalConnectionLogMessagesUnauthorized struct{}

func (*ListExternalConnectionLogMessagesUnauthorized) listExternalConnectionLogMessagesRes() {}

// ListExternalConnectionLogMessagesUnprocessableEntity is response for ListExternalConnectionLogMessages operation.
type ListExternalConnectionLogMessagesUnprocessableEntity struct{}

func (*ListExternalConnectionLogMessagesUnprocessableEntity) listExternalConnectionLogMessagesRes() {}

// ListExternalConnectionPhoneNumbersNotFound is response for ListExternalConnectionPhoneNumbers operation.
type ListExternalConnectionPhoneNumbersNotFound struct{}

func (*ListExternalConnectionPhoneNumbersNotFound) listExternalConnectionPhoneNumbersRes() {}

type ListExternalConnectionPhoneNumbersResponse struct {
	Data []ExternalConnectionPhoneNumber `json:"data"`
	Meta OptPaginationMeta               `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListExternalConnectionPhoneNumbersResponse) GetData() []ExternalConnectionPhoneNumber {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListExternalConnectionPhoneNumbersResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListExternalConnectionPhoneNumbersResponse) SetData(val []ExternalConnectionPhoneNumber) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListExternalConnectionPhoneNumbersResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListExternalConnectionPhoneNumbersResponse) listExternalConnectionPhoneNumbersRes() {}

// ListExternalConnectionPhoneNumbersUnauthorized is response for ListExternalConnectionPhoneNumbers operation.
type ListExternalConnectionPhoneNumbersUnauthorized struct{}

func (*ListExternalConnectionPhoneNumbersUnauthorized) listExternalConnectionPhoneNumbersRes() {}

// ListExternalConnectionPhoneNumbersUnprocessableEntity is response for ListExternalConnectionPhoneNumbers operation.
type ListExternalConnectionPhoneNumbersUnprocessableEntity struct{}

func (*ListExternalConnectionPhoneNumbersUnprocessableEntity) listExternalConnectionPhoneNumbersRes() {
}

// ListInboundChannelsNotFound is response for ListInboundChannels operation.
type ListInboundChannelsNotFound struct{}

func (*ListInboundChannelsNotFound) listInboundChannelsRes() {}

type ListInboundChannelsOK struct {
	Data OptListInboundChannelsOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *ListInboundChannelsOK) GetData() OptListInboundChannelsOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *ListInboundChannelsOK) SetData(val OptListInboundChannelsOKData) {
	s.Data = val
}

func (*ListInboundChannelsOK) listInboundChannelsRes() {}

type ListInboundChannelsOKData struct {
	// The current number of concurrent channels set for the account.
	Channels OptInt `json:"channels"`
	// Identifies the type of the response.
	RecordType OptString `json:"record_type"`
}

// GetChannels returns the value of Channels.
func (s *ListInboundChannelsOKData) GetChannels() OptInt {
	return s.Channels
}

// GetRecordType returns the value of RecordType.
func (s *ListInboundChannelsOKData) GetRecordType() OptString {
	return s.RecordType
}

// SetChannels sets the value of Channels.
func (s *ListInboundChannelsOKData) SetChannels(val OptInt) {
	s.Channels = val
}

// SetRecordType sets the value of RecordType.
func (s *ListInboundChannelsOKData) SetRecordType(val OptString) {
	s.RecordType = val
}

// ListInboundChannelsUnauthorized is response for ListInboundChannels operation.
type ListInboundChannelsUnauthorized struct{}

func (*ListInboundChannelsUnauthorized) listInboundChannelsRes() {}

// ListInboundChannelsUnprocessableEntity is response for ListInboundChannels operation.
type ListInboundChannelsUnprocessableEntity struct{}

func (*ListInboundChannelsUnprocessableEntity) listInboundChannelsRes() {}

// ListLoaConfigurationsInternalServerError is response for ListLoaConfigurations operation.
type ListLoaConfigurationsInternalServerError struct{}

func (*ListLoaConfigurationsInternalServerError) listLoaConfigurationsRes() {}

// ListLoaConfigurationsUnprocessableEntity is response for ListLoaConfigurations operation.
type ListLoaConfigurationsUnprocessableEntity struct{}

func (*ListLoaConfigurationsUnprocessableEntity) listLoaConfigurationsRes() {}

type ListLogMessagesResponse struct {
	LogMessages []LogMessage      `json:"log_messages"`
	Meta        OptPaginationMeta `json:"meta"`
}

// GetLogMessages returns the value of LogMessages.
func (s *ListLogMessagesResponse) GetLogMessages() []LogMessage {
	return s.LogMessages
}

// GetMeta returns the value of Meta.
func (s *ListLogMessagesResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetLogMessages sets the value of LogMessages.
func (s *ListLogMessagesResponse) SetLogMessages(val []LogMessage) {
	s.LogMessages = val
}

// SetMeta sets the value of Meta.
func (s *ListLogMessagesResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListLogMessagesResponse) listExternalConnectionLogMessagesRes() {}

type ListMessagingHostedNumberOrdersResponse struct {
	Data []MessagingHostedNumberOrder `json:"data"`
	Meta OptPaginationMeta            `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListMessagingHostedNumberOrdersResponse) GetData() []MessagingHostedNumberOrder {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListMessagingHostedNumberOrdersResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListMessagingHostedNumberOrdersResponse) SetData(val []MessagingHostedNumberOrder) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListMessagingHostedNumberOrdersResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListMessagingHostedNumberOrdersResponse) listMessagingHostedNumberOrdersRes() {}

type ListMessagingProfilePhoneNumbersResponse struct {
	Data []PhoneNumberWithMessagingSettings `json:"data"`
	Meta OptPaginationMeta                  `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListMessagingProfilePhoneNumbersResponse) GetData() []PhoneNumberWithMessagingSettings {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListMessagingProfilePhoneNumbersResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListMessagingProfilePhoneNumbersResponse) SetData(val []PhoneNumberWithMessagingSettings) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListMessagingProfilePhoneNumbersResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListMessagingProfilePhoneNumbersResponse) listProfilePhoneNumbersRes() {}

type ListMessagingUrlDomains struct {
	Data []MessagingUrlDomain `json:"data"`
	Meta OptPaginationMeta    `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListMessagingUrlDomains) GetData() []MessagingUrlDomain {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListMessagingUrlDomains) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListMessagingUrlDomains) SetData(val []MessagingUrlDomain) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListMessagingUrlDomains) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListMessagingUrlDomains) listMessagingUrlDomainsRes() {}

type ListNotificationChannelsOK struct {
	Data []NotificationChannel `json:"data"`
	Meta OptPaginationMeta     `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListNotificationChannelsOK) GetData() []NotificationChannel {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListNotificationChannelsOK) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListNotificationChannelsOK) SetData(val []NotificationChannel) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListNotificationChannelsOK) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListNotificationChannelsOK) listNotificationChannelsRes() {}

type ListNumberOrderDocumentsResponse struct {
	Data []NumberOrderDocument `json:"data"`
	Meta OptPaginationMeta     `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListNumberOrderDocumentsResponse) GetData() []NumberOrderDocument {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListNumberOrderDocumentsResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListNumberOrderDocumentsResponse) SetData(val []NumberOrderDocument) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListNumberOrderDocumentsResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListNumberOrderDocumentsResponse) listNumberOrderDocumentsRes() {}

type ListNumberOrderPhoneNumbersResponse struct {
	Data []NumberOrderPhoneNumber `json:"data"`
	Meta OptPaginationMeta        `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListNumberOrderPhoneNumbersResponse) GetData() []NumberOrderPhoneNumber {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListNumberOrderPhoneNumbersResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListNumberOrderPhoneNumbersResponse) SetData(val []NumberOrderPhoneNumber) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListNumberOrderPhoneNumbersResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListNumberOrderPhoneNumbersResponse) retrieveOrderPhoneNumbersRes() {}

type ListNumberReservationsResponse struct {
	Data []NumberReservation `json:"data"`
	Meta OptPaginationMeta   `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListNumberReservationsResponse) GetData() []NumberReservation {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListNumberReservationsResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListNumberReservationsResponse) SetData(val []NumberReservation) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListNumberReservationsResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListNumberReservationsResponse) listNumberReservationsRes() {}

type ListOtaUpdatesFilterType string

const (
	ListOtaUpdatesFilterTypeSimCardNetworkPreferences ListOtaUpdatesFilterType = "sim_card_network_preferences"
)

// AllValues returns all ListOtaUpdatesFilterType values.
func (ListOtaUpdatesFilterType) AllValues() []ListOtaUpdatesFilterType {
	return []ListOtaUpdatesFilterType{
		ListOtaUpdatesFilterTypeSimCardNetworkPreferences,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListOtaUpdatesFilterType) MarshalText() ([]byte, error) {
	switch s {
	case ListOtaUpdatesFilterTypeSimCardNetworkPreferences:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListOtaUpdatesFilterType) UnmarshalText(data []byte) error {
	switch ListOtaUpdatesFilterType(data) {
	case ListOtaUpdatesFilterTypeSimCardNetworkPreferences:
		*s = ListOtaUpdatesFilterTypeSimCardNetworkPreferences
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListOutboundVoiceProfilesResponse struct {
	Data []OutboundVoiceProfile `json:"data"`
	Meta OptPaginationMeta      `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListOutboundVoiceProfilesResponse) GetData() []OutboundVoiceProfile {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListOutboundVoiceProfilesResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListOutboundVoiceProfilesResponse) SetData(val []OutboundVoiceProfile) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListOutboundVoiceProfilesResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListOutboundVoiceProfilesResponse) listOutboundVoiceProfilesRes() {}

// ListOutboundVoiceProfilesUnauthorized is response for ListOutboundVoiceProfiles operation.
type ListOutboundVoiceProfilesUnauthorized struct{}

func (*ListOutboundVoiceProfilesUnauthorized) listOutboundVoiceProfilesRes() {}

// ListOutboundVoiceProfilesUnprocessableEntity is response for ListOutboundVoiceProfiles operation.
type ListOutboundVoiceProfilesUnprocessableEntity struct{}

func (*ListOutboundVoiceProfilesUnprocessableEntity) listOutboundVoiceProfilesRes() {}

type ListPhoneNumberConfigurationsSort string

const (
	ListPhoneNumberConfigurationsSortCreatedAt      ListPhoneNumberConfigurationsSort = "created_at"
	ListPhoneNumberConfigurationsSortMinusCreatedAt ListPhoneNumberConfigurationsSort = "-created_at"
)

// AllValues returns all ListPhoneNumberConfigurationsSort values.
func (ListPhoneNumberConfigurationsSort) AllValues() []ListPhoneNumberConfigurationsSort {
	return []ListPhoneNumberConfigurationsSort{
		ListPhoneNumberConfigurationsSortCreatedAt,
		ListPhoneNumberConfigurationsSortMinusCreatedAt,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListPhoneNumberConfigurationsSort) MarshalText() ([]byte, error) {
	switch s {
	case ListPhoneNumberConfigurationsSortCreatedAt:
		return []byte(s), nil
	case ListPhoneNumberConfigurationsSortMinusCreatedAt:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListPhoneNumberConfigurationsSort) UnmarshalText(data []byte) error {
	switch ListPhoneNumberConfigurationsSort(data) {
	case ListPhoneNumberConfigurationsSortCreatedAt:
		*s = ListPhoneNumberConfigurationsSortCreatedAt
		return nil
	case ListPhoneNumberConfigurationsSortMinusCreatedAt:
		*s = ListPhoneNumberConfigurationsSortMinusCreatedAt
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ListPhoneNumberConfigurationsUnauthorized is response for ListPhoneNumberConfigurations operation.
type ListPhoneNumberConfigurationsUnauthorized struct{}

func (*ListPhoneNumberConfigurationsUnauthorized) listPhoneNumberConfigurationsRes() {}

// ListPhoneNumberConfigurationsUnprocessableEntity is response for ListPhoneNumberConfigurations operation.
type ListPhoneNumberConfigurationsUnprocessableEntity struct{}

func (*ListPhoneNumberConfigurationsUnprocessableEntity) listPhoneNumberConfigurationsRes() {}

type ListPhoneNumbersFilterStatus string

const (
	ListPhoneNumbersFilterStatusPurchasePending ListPhoneNumbersFilterStatus = "purchase_pending"
	ListPhoneNumbersFilterStatusPurchaseFailed  ListPhoneNumbersFilterStatus = "purchase_failed"
	ListPhoneNumbersFilterStatusPortPending     ListPhoneNumbersFilterStatus = "port_pending"
	ListPhoneNumbersFilterStatusActive          ListPhoneNumbersFilterStatus = "active"
	ListPhoneNumbersFilterStatusDeleted         ListPhoneNumbersFilterStatus = "deleted"
	ListPhoneNumbersFilterStatusPortFailed      ListPhoneNumbersFilterStatus = "port_failed"
	ListPhoneNumbersFilterStatusEmergencyOnly   ListPhoneNumbersFilterStatus = "emergency_only"
	ListPhoneNumbersFilterStatusPortedOut       ListPhoneNumbersFilterStatus = "ported_out"
	ListPhoneNumbersFilterStatusPortOutPending  ListPhoneNumbersFilterStatus = "port_out_pending"
)

// AllValues returns all ListPhoneNumbersFilterStatus values.
func (ListPhoneNumbersFilterStatus) AllValues() []ListPhoneNumbersFilterStatus {
	return []ListPhoneNumbersFilterStatus{
		ListPhoneNumbersFilterStatusPurchasePending,
		ListPhoneNumbersFilterStatusPurchaseFailed,
		ListPhoneNumbersFilterStatusPortPending,
		ListPhoneNumbersFilterStatusActive,
		ListPhoneNumbersFilterStatusDeleted,
		ListPhoneNumbersFilterStatusPortFailed,
		ListPhoneNumbersFilterStatusEmergencyOnly,
		ListPhoneNumbersFilterStatusPortedOut,
		ListPhoneNumbersFilterStatusPortOutPending,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListPhoneNumbersFilterStatus) MarshalText() ([]byte, error) {
	switch s {
	case ListPhoneNumbersFilterStatusPurchasePending:
		return []byte(s), nil
	case ListPhoneNumbersFilterStatusPurchaseFailed:
		return []byte(s), nil
	case ListPhoneNumbersFilterStatusPortPending:
		return []byte(s), nil
	case ListPhoneNumbersFilterStatusActive:
		return []byte(s), nil
	case ListPhoneNumbersFilterStatusDeleted:
		return []byte(s), nil
	case ListPhoneNumbersFilterStatusPortFailed:
		return []byte(s), nil
	case ListPhoneNumbersFilterStatusEmergencyOnly:
		return []byte(s), nil
	case ListPhoneNumbersFilterStatusPortedOut:
		return []byte(s), nil
	case ListPhoneNumbersFilterStatusPortOutPending:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListPhoneNumbersFilterStatus) UnmarshalText(data []byte) error {
	switch ListPhoneNumbersFilterStatus(data) {
	case ListPhoneNumbersFilterStatusPurchasePending:
		*s = ListPhoneNumbersFilterStatusPurchasePending
		return nil
	case ListPhoneNumbersFilterStatusPurchaseFailed:
		*s = ListPhoneNumbersFilterStatusPurchaseFailed
		return nil
	case ListPhoneNumbersFilterStatusPortPending:
		*s = ListPhoneNumbersFilterStatusPortPending
		return nil
	case ListPhoneNumbersFilterStatusActive:
		*s = ListPhoneNumbersFilterStatusActive
		return nil
	case ListPhoneNumbersFilterStatusDeleted:
		*s = ListPhoneNumbersFilterStatusDeleted
		return nil
	case ListPhoneNumbersFilterStatusPortFailed:
		*s = ListPhoneNumbersFilterStatusPortFailed
		return nil
	case ListPhoneNumbersFilterStatusEmergencyOnly:
		*s = ListPhoneNumbersFilterStatusEmergencyOnly
		return nil
	case ListPhoneNumbersFilterStatusPortedOut:
		*s = ListPhoneNumbersFilterStatusPortedOut
		return nil
	case ListPhoneNumbersFilterStatusPortOutPending:
		*s = ListPhoneNumbersFilterStatusPortOutPending
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListPhoneNumbersFilterVoiceUsagePaymentMethod string

const (
	ListPhoneNumbersFilterVoiceUsagePaymentMethodPayPerMinute ListPhoneNumbersFilterVoiceUsagePaymentMethod = "pay-per-minute"
	ListPhoneNumbersFilterVoiceUsagePaymentMethodChannel      ListPhoneNumbersFilterVoiceUsagePaymentMethod = "channel"
)

// AllValues returns all ListPhoneNumbersFilterVoiceUsagePaymentMethod values.
func (ListPhoneNumbersFilterVoiceUsagePaymentMethod) AllValues() []ListPhoneNumbersFilterVoiceUsagePaymentMethod {
	return []ListPhoneNumbersFilterVoiceUsagePaymentMethod{
		ListPhoneNumbersFilterVoiceUsagePaymentMethodPayPerMinute,
		ListPhoneNumbersFilterVoiceUsagePaymentMethodChannel,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListPhoneNumbersFilterVoiceUsagePaymentMethod) MarshalText() ([]byte, error) {
	switch s {
	case ListPhoneNumbersFilterVoiceUsagePaymentMethodPayPerMinute:
		return []byte(s), nil
	case ListPhoneNumbersFilterVoiceUsagePaymentMethodChannel:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListPhoneNumbersFilterVoiceUsagePaymentMethod) UnmarshalText(data []byte) error {
	switch ListPhoneNumbersFilterVoiceUsagePaymentMethod(data) {
	case ListPhoneNumbersFilterVoiceUsagePaymentMethodPayPerMinute:
		*s = ListPhoneNumbersFilterVoiceUsagePaymentMethodPayPerMinute
		return nil
	case ListPhoneNumbersFilterVoiceUsagePaymentMethodChannel:
		*s = ListPhoneNumbersFilterVoiceUsagePaymentMethodChannel
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Identifies the type of the background job.
type ListPhoneNumbersJobsFilterType string

const (
	ListPhoneNumbersJobsFilterTypeUpdateEmergencySettings ListPhoneNumbersJobsFilterType = "update_emergency_settings"
	ListPhoneNumbersJobsFilterTypeDeletePhoneNumbers      ListPhoneNumbersJobsFilterType = "delete_phone_numbers"
	ListPhoneNumbersJobsFilterTypeUpdatePhoneNumbers      ListPhoneNumbersJobsFilterType = "update_phone_numbers"
)

// AllValues returns all ListPhoneNumbersJobsFilterType values.
func (ListPhoneNumbersJobsFilterType) AllValues() []ListPhoneNumbersJobsFilterType {
	return []ListPhoneNumbersJobsFilterType{
		ListPhoneNumbersJobsFilterTypeUpdateEmergencySettings,
		ListPhoneNumbersJobsFilterTypeDeletePhoneNumbers,
		ListPhoneNumbersJobsFilterTypeUpdatePhoneNumbers,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListPhoneNumbersJobsFilterType) MarshalText() ([]byte, error) {
	switch s {
	case ListPhoneNumbersJobsFilterTypeUpdateEmergencySettings:
		return []byte(s), nil
	case ListPhoneNumbersJobsFilterTypeDeletePhoneNumbers:
		return []byte(s), nil
	case ListPhoneNumbersJobsFilterTypeUpdatePhoneNumbers:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListPhoneNumbersJobsFilterType) UnmarshalText(data []byte) error {
	switch ListPhoneNumbersJobsFilterType(data) {
	case ListPhoneNumbersJobsFilterTypeUpdateEmergencySettings:
		*s = ListPhoneNumbersJobsFilterTypeUpdateEmergencySettings
		return nil
	case ListPhoneNumbersJobsFilterTypeDeletePhoneNumbers:
		*s = ListPhoneNumbersJobsFilterTypeDeletePhoneNumbers
		return nil
	case ListPhoneNumbersJobsFilterTypeUpdatePhoneNumbers:
		*s = ListPhoneNumbersJobsFilterTypeUpdatePhoneNumbers
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListPhoneNumbersJobsResponse struct {
	Data []PhoneNumbersJob `json:"data"`
	Meta OptPaginationMeta `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListPhoneNumbersJobsResponse) GetData() []PhoneNumbersJob {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListPhoneNumbersJobsResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListPhoneNumbersJobsResponse) SetData(val []PhoneNumbersJob) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListPhoneNumbersJobsResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListPhoneNumbersJobsResponse) listPhoneNumbersJobsRes() {}

type ListPhoneNumbersJobsSort string

const (
	ListPhoneNumbersJobsSortCreatedAt ListPhoneNumbersJobsSort = "created_at"
)

// AllValues returns all ListPhoneNumbersJobsSort values.
func (ListPhoneNumbersJobsSort) AllValues() []ListPhoneNumbersJobsSort {
	return []ListPhoneNumbersJobsSort{
		ListPhoneNumbersJobsSortCreatedAt,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListPhoneNumbersJobsSort) MarshalText() ([]byte, error) {
	switch s {
	case ListPhoneNumbersJobsSortCreatedAt:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListPhoneNumbersJobsSort) UnmarshalText(data []byte) error {
	switch ListPhoneNumbersJobsSort(data) {
	case ListPhoneNumbersJobsSortCreatedAt:
		*s = ListPhoneNumbersJobsSortCreatedAt
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListPhoneNumbersResponse struct {
	Data []PhoneNumberDetailed `json:"data"`
	Meta OptPaginationMeta     `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListPhoneNumbersResponse) GetData() []PhoneNumberDetailed {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListPhoneNumbersResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListPhoneNumbersResponse) SetData(val []PhoneNumberDetailed) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListPhoneNumbersResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListPhoneNumbersResponse) listPhoneNumbersRes() {}

type ListPhoneNumbersSort string

const (
	ListPhoneNumbersSortPurchasedAt        ListPhoneNumbersSort = "purchased_at"
	ListPhoneNumbersSortPhoneNumber        ListPhoneNumbersSort = "phone_number"
	ListPhoneNumbersSortConnectionName     ListPhoneNumbersSort = "connection_name"
	ListPhoneNumbersSortUsagePaymentMethod ListPhoneNumbersSort = "usage_payment_method"
)

// AllValues returns all ListPhoneNumbersSort values.
func (ListPhoneNumbersSort) AllValues() []ListPhoneNumbersSort {
	return []ListPhoneNumbersSort{
		ListPhoneNumbersSortPurchasedAt,
		ListPhoneNumbersSortPhoneNumber,
		ListPhoneNumbersSortConnectionName,
		ListPhoneNumbersSortUsagePaymentMethod,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListPhoneNumbersSort) MarshalText() ([]byte, error) {
	switch s {
	case ListPhoneNumbersSortPurchasedAt:
		return []byte(s), nil
	case ListPhoneNumbersSortPhoneNumber:
		return []byte(s), nil
	case ListPhoneNumbersSortConnectionName:
		return []byte(s), nil
	case ListPhoneNumbersSortUsagePaymentMethod:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListPhoneNumbersSort) UnmarshalText(data []byte) error {
	switch ListPhoneNumbersSort(data) {
	case ListPhoneNumbersSortPurchasedAt:
		*s = ListPhoneNumbersSortPurchasedAt
		return nil
	case ListPhoneNumbersSortPhoneNumber:
		*s = ListPhoneNumbersSortPhoneNumber
		return nil
	case ListPhoneNumbersSortConnectionName:
		*s = ListPhoneNumbersSortConnectionName
		return nil
	case ListPhoneNumbersSortUsagePaymentMethod:
		*s = ListPhoneNumbersSortUsagePaymentMethod
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListPhoneNumbersWithMessagingSettingsResponse struct {
	Data []PhoneNumberWithMessagingSettings `json:"data"`
	Meta OptPaginationMeta                  `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListPhoneNumbersWithMessagingSettingsResponse) GetData() []PhoneNumberWithMessagingSettings {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListPhoneNumbersWithMessagingSettingsResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListPhoneNumbersWithMessagingSettingsResponse) SetData(val []PhoneNumberWithMessagingSettings) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListPhoneNumbersWithMessagingSettingsResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListPhoneNumbersWithMessagingSettingsResponse) listPhoneNumbersWithMessagingSettingsRes() {}

type ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod string

const (
	ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethodPayPerMinute ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod = "pay-per-minute"
	ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethodChannel      ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod = "channel"
)

// AllValues returns all ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod values.
func (ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod) AllValues() []ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod {
	return []ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod{
		ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethodPayPerMinute,
		ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethodChannel,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod) MarshalText() ([]byte, error) {
	switch s {
	case ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethodPayPerMinute:
		return []byte(s), nil
	case ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethodChannel:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod) UnmarshalText(data []byte) error {
	switch ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod(data) {
	case ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethodPayPerMinute:
		*s = ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethodPayPerMinute
		return nil
	case ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethodChannel:
		*s = ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethodChannel
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListPhoneNumbersWithVoiceSettingsResponse struct {
	Data []PhoneNumberWithVoiceSettings `json:"data"`
	Meta OptPaginationMeta              `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListPhoneNumbersWithVoiceSettingsResponse) GetData() []PhoneNumberWithVoiceSettings {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListPhoneNumbersWithVoiceSettingsResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListPhoneNumbersWithVoiceSettingsResponse) SetData(val []PhoneNumberWithVoiceSettings) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListPhoneNumbersWithVoiceSettingsResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListPhoneNumbersWithVoiceSettingsResponse) listPhoneNumbersWithVoiceSettingsRes() {}

type ListPhoneNumbersWithVoiceSettingsSort string

const (
	ListPhoneNumbersWithVoiceSettingsSortPurchasedAt        ListPhoneNumbersWithVoiceSettingsSort = "purchased_at"
	ListPhoneNumbersWithVoiceSettingsSortPhoneNumber        ListPhoneNumbersWithVoiceSettingsSort = "phone_number"
	ListPhoneNumbersWithVoiceSettingsSortConnectionName     ListPhoneNumbersWithVoiceSettingsSort = "connection_name"
	ListPhoneNumbersWithVoiceSettingsSortUsagePaymentMethod ListPhoneNumbersWithVoiceSettingsSort = "usage_payment_method"
)

// AllValues returns all ListPhoneNumbersWithVoiceSettingsSort values.
func (ListPhoneNumbersWithVoiceSettingsSort) AllValues() []ListPhoneNumbersWithVoiceSettingsSort {
	return []ListPhoneNumbersWithVoiceSettingsSort{
		ListPhoneNumbersWithVoiceSettingsSortPurchasedAt,
		ListPhoneNumbersWithVoiceSettingsSortPhoneNumber,
		ListPhoneNumbersWithVoiceSettingsSortConnectionName,
		ListPhoneNumbersWithVoiceSettingsSortUsagePaymentMethod,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListPhoneNumbersWithVoiceSettingsSort) MarshalText() ([]byte, error) {
	switch s {
	case ListPhoneNumbersWithVoiceSettingsSortPurchasedAt:
		return []byte(s), nil
	case ListPhoneNumbersWithVoiceSettingsSortPhoneNumber:
		return []byte(s), nil
	case ListPhoneNumbersWithVoiceSettingsSortConnectionName:
		return []byte(s), nil
	case ListPhoneNumbersWithVoiceSettingsSortUsagePaymentMethod:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListPhoneNumbersWithVoiceSettingsSort) UnmarshalText(data []byte) error {
	switch ListPhoneNumbersWithVoiceSettingsSort(data) {
	case ListPhoneNumbersWithVoiceSettingsSortPurchasedAt:
		*s = ListPhoneNumbersWithVoiceSettingsSortPurchasedAt
		return nil
	case ListPhoneNumbersWithVoiceSettingsSortPhoneNumber:
		*s = ListPhoneNumbersWithVoiceSettingsSortPhoneNumber
		return nil
	case ListPhoneNumbersWithVoiceSettingsSortConnectionName:
		*s = ListPhoneNumbersWithVoiceSettingsSortConnectionName
		return nil
	case ListPhoneNumbersWithVoiceSettingsSortUsagePaymentMethod:
		*s = ListPhoneNumbersWithVoiceSettingsSortUsagePaymentMethod
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListPortingAdditionalDocuments struct {
	Data []PortingAdditionalDocument `json:"data"`
	Meta OptPaginationMeta           `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListPortingAdditionalDocuments) GetData() []PortingAdditionalDocument {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListPortingAdditionalDocuments) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListPortingAdditionalDocuments) SetData(val []PortingAdditionalDocument) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListPortingAdditionalDocuments) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListPortingAdditionalDocuments) listAdditionalDocumentsRes() {}

type ListPortingLOAConfigurations struct {
	Data []PortingLOAConfiguration `json:"data"`
	Meta OptPaginationMeta         `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListPortingLOAConfigurations) GetData() []PortingLOAConfiguration {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListPortingLOAConfigurations) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListPortingLOAConfigurations) SetData(val []PortingLOAConfiguration) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListPortingLOAConfigurations) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListPortingLOAConfigurations) listLoaConfigurationsRes() {}

type ListPortingOrder struct {
	Data []PortingOrder    `json:"data"`
	Meta OptPaginationMeta `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListPortingOrder) GetData() []PortingOrder {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListPortingOrder) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListPortingOrder) SetData(val []PortingOrder) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListPortingOrder) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListPortingOrder) listPortingOrdersRes() {}

// ListPortingOrderActivationJobsUnauthorized is response for ListPortingOrderActivationJobs operation.
type ListPortingOrderActivationJobsUnauthorized struct{}

func (*ListPortingOrderActivationJobsUnauthorized) listPortingOrderActivationJobsRes() {}

// ListPortingOrderActivationJobsUnprocessableEntity is response for ListPortingOrderActivationJobs operation.
type ListPortingOrderActivationJobsUnprocessableEntity struct{}

func (*ListPortingOrderActivationJobsUnprocessableEntity) listPortingOrderActivationJobsRes() {}

// ListPortingOrderCommentsUnauthorized is response for ListPortingOrderComments operation.
type ListPortingOrderCommentsUnauthorized struct{}

func (*ListPortingOrderCommentsUnauthorized) listPortingOrderCommentsRes() {}

// ListPortingOrderCommentsUnprocessableEntity is response for ListPortingOrderComments operation.
type ListPortingOrderCommentsUnprocessableEntity struct{}

func (*ListPortingOrderCommentsUnprocessableEntity) listPortingOrderCommentsRes() {}

type ListPortingOrderRequirements struct {
	Data []PortingOrderRequirementDetail `json:"data"`
	Meta OptPaginationMeta               `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListPortingOrderRequirements) GetData() []PortingOrderRequirementDetail {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListPortingOrderRequirements) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListPortingOrderRequirements) SetData(val []PortingOrderRequirementDetail) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListPortingOrderRequirements) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListPortingOrderRequirements) listPortingOrderRequirementsRes() {}

// ListPortingOrderRequirementsUnauthorized is response for ListPortingOrderRequirements operation.
type ListPortingOrderRequirementsUnauthorized struct{}

func (*ListPortingOrderRequirementsUnauthorized) listPortingOrderRequirementsRes() {}

// ListPortingOrderRequirementsUnprocessableEntity is response for ListPortingOrderRequirements operation.
type ListPortingOrderRequirementsUnprocessableEntity struct{}

func (*ListPortingOrderRequirementsUnprocessableEntity) listPortingOrderRequirementsRes() {}

type ListPortingOrdersActivationJobs struct {
	Data []PortingOrdersActivationJob `json:"data"`
	Meta OptPaginationMeta            `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListPortingOrdersActivationJobs) GetData() []PortingOrdersActivationJob {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListPortingOrdersActivationJobs) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListPortingOrdersActivationJobs) SetData(val []PortingOrdersActivationJob) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListPortingOrdersActivationJobs) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListPortingOrdersActivationJobs) listPortingOrderActivationJobsRes() {}

type ListPortingOrdersComments struct {
	Data []PortingOrdersComment `json:"data"`
	Meta OptPaginationMeta      `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListPortingOrdersComments) GetData() []PortingOrdersComment {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListPortingOrdersComments) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListPortingOrdersComments) SetData(val []PortingOrdersComment) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListPortingOrdersComments) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListPortingOrdersComments) listPortingOrderCommentsRes() {}

type ListPortingOrdersExceptionTypes struct {
	Data []PortingOrdersExceptionType `json:"data"`
}

// GetData returns the value of Data.
func (s *ListPortingOrdersExceptionTypes) GetData() []PortingOrdersExceptionType {
	return s.Data
}

// SetData sets the value of Data.
func (s *ListPortingOrdersExceptionTypes) SetData(val []PortingOrdersExceptionType) {
	s.Data = val
}

func (*ListPortingOrdersExceptionTypes) listExceptionTypesRes() {}

type ListPortingOrdersSort string

const (
	ListPortingOrdersSortCreatedAt                                      ListPortingOrdersSort = "created_at"
	ListPortingOrdersSortMinusCreatedAt                                 ListPortingOrdersSort = "-created_at"
	ListPortingOrdersSortActivationSettingsDotFocDatetimeRequested      ListPortingOrdersSort = "activation_settings.foc_datetime_requested"
	ListPortingOrdersSortMinusActivationSettingsDotFocDatetimeRequested ListPortingOrdersSort = "-activation_settings.foc_datetime_requested"
)

// AllValues returns all ListPortingOrdersSort values.
func (ListPortingOrdersSort) AllValues() []ListPortingOrdersSort {
	return []ListPortingOrdersSort{
		ListPortingOrdersSortCreatedAt,
		ListPortingOrdersSortMinusCreatedAt,
		ListPortingOrdersSortActivationSettingsDotFocDatetimeRequested,
		ListPortingOrdersSortMinusActivationSettingsDotFocDatetimeRequested,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListPortingOrdersSort) MarshalText() ([]byte, error) {
	switch s {
	case ListPortingOrdersSortCreatedAt:
		return []byte(s), nil
	case ListPortingOrdersSortMinusCreatedAt:
		return []byte(s), nil
	case ListPortingOrdersSortActivationSettingsDotFocDatetimeRequested:
		return []byte(s), nil
	case ListPortingOrdersSortMinusActivationSettingsDotFocDatetimeRequested:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListPortingOrdersSort) UnmarshalText(data []byte) error {
	switch ListPortingOrdersSort(data) {
	case ListPortingOrdersSortCreatedAt:
		*s = ListPortingOrdersSortCreatedAt
		return nil
	case ListPortingOrdersSortMinusCreatedAt:
		*s = ListPortingOrdersSortMinusCreatedAt
		return nil
	case ListPortingOrdersSortActivationSettingsDotFocDatetimeRequested:
		*s = ListPortingOrdersSortActivationSettingsDotFocDatetimeRequested
		return nil
	case ListPortingOrdersSortMinusActivationSettingsDotFocDatetimeRequested:
		*s = ListPortingOrdersSortMinusActivationSettingsDotFocDatetimeRequested
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ListPortingOrdersUnauthorized is response for ListPortingOrders operation.
type ListPortingOrdersUnauthorized struct{}

func (*ListPortingOrdersUnauthorized) listPortingOrdersRes() {}

// ListPortingOrdersUnprocessableEntity is response for ListPortingOrders operation.
type ListPortingOrdersUnprocessableEntity struct{}

func (*ListPortingOrdersUnprocessableEntity) listPortingOrdersRes() {}

type ListPortingPhoneNumberConfigurations struct {
	Data []PortingPhoneNumberConfiguration `json:"data"`
	Meta OptPaginationMeta                 `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListPortingPhoneNumberConfigurations) GetData() []PortingPhoneNumberConfiguration {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListPortingPhoneNumberConfigurations) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListPortingPhoneNumberConfigurations) SetData(val []PortingPhoneNumberConfiguration) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListPortingPhoneNumberConfigurations) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListPortingPhoneNumberConfigurations) listPhoneNumberConfigurationsRes() {}

type ListPortingPhoneNumbersApplicationJSON struct {
	Data []PortingPhoneNumber `json:"data"`
	Meta OptPaginationMeta    `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListPortingPhoneNumbersApplicationJSON) GetData() []PortingPhoneNumber {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListPortingPhoneNumbersApplicationJSON) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListPortingPhoneNumbersApplicationJSON) SetData(val []PortingPhoneNumber) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListPortingPhoneNumbersApplicationJSON) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListPortingPhoneNumbersApplicationJSON) listPortingPhoneNumbersRes() {}

type ListPortingPhoneNumbersFilterPortingOrderStatus string

const (
	ListPortingPhoneNumbersFilterPortingOrderStatusDraft            ListPortingPhoneNumbersFilterPortingOrderStatus = "draft"
	ListPortingPhoneNumbersFilterPortingOrderStatusInProcess        ListPortingPhoneNumbersFilterPortingOrderStatus = "in-process"
	ListPortingPhoneNumbersFilterPortingOrderStatusSubmitted        ListPortingPhoneNumbersFilterPortingOrderStatus = "submitted"
	ListPortingPhoneNumbersFilterPortingOrderStatusException        ListPortingPhoneNumbersFilterPortingOrderStatus = "exception"
	ListPortingPhoneNumbersFilterPortingOrderStatusFocDateConfirmed ListPortingPhoneNumbersFilterPortingOrderStatus = "foc-date-confirmed"
	ListPortingPhoneNumbersFilterPortingOrderStatusCancelPending    ListPortingPhoneNumbersFilterPortingOrderStatus = "cancel-pending"
	ListPortingPhoneNumbersFilterPortingOrderStatusPorted           ListPortingPhoneNumbersFilterPortingOrderStatus = "ported"
	ListPortingPhoneNumbersFilterPortingOrderStatusCancelled        ListPortingPhoneNumbersFilterPortingOrderStatus = "cancelled"
)

// AllValues returns all ListPortingPhoneNumbersFilterPortingOrderStatus values.
func (ListPortingPhoneNumbersFilterPortingOrderStatus) AllValues() []ListPortingPhoneNumbersFilterPortingOrderStatus {
	return []ListPortingPhoneNumbersFilterPortingOrderStatus{
		ListPortingPhoneNumbersFilterPortingOrderStatusDraft,
		ListPortingPhoneNumbersFilterPortingOrderStatusInProcess,
		ListPortingPhoneNumbersFilterPortingOrderStatusSubmitted,
		ListPortingPhoneNumbersFilterPortingOrderStatusException,
		ListPortingPhoneNumbersFilterPortingOrderStatusFocDateConfirmed,
		ListPortingPhoneNumbersFilterPortingOrderStatusCancelPending,
		ListPortingPhoneNumbersFilterPortingOrderStatusPorted,
		ListPortingPhoneNumbersFilterPortingOrderStatusCancelled,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListPortingPhoneNumbersFilterPortingOrderStatus) MarshalText() ([]byte, error) {
	switch s {
	case ListPortingPhoneNumbersFilterPortingOrderStatusDraft:
		return []byte(s), nil
	case ListPortingPhoneNumbersFilterPortingOrderStatusInProcess:
		return []byte(s), nil
	case ListPortingPhoneNumbersFilterPortingOrderStatusSubmitted:
		return []byte(s), nil
	case ListPortingPhoneNumbersFilterPortingOrderStatusException:
		return []byte(s), nil
	case ListPortingPhoneNumbersFilterPortingOrderStatusFocDateConfirmed:
		return []byte(s), nil
	case ListPortingPhoneNumbersFilterPortingOrderStatusCancelPending:
		return []byte(s), nil
	case ListPortingPhoneNumbersFilterPortingOrderStatusPorted:
		return []byte(s), nil
	case ListPortingPhoneNumbersFilterPortingOrderStatusCancelled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListPortingPhoneNumbersFilterPortingOrderStatus) UnmarshalText(data []byte) error {
	switch ListPortingPhoneNumbersFilterPortingOrderStatus(data) {
	case ListPortingPhoneNumbersFilterPortingOrderStatusDraft:
		*s = ListPortingPhoneNumbersFilterPortingOrderStatusDraft
		return nil
	case ListPortingPhoneNumbersFilterPortingOrderStatusInProcess:
		*s = ListPortingPhoneNumbersFilterPortingOrderStatusInProcess
		return nil
	case ListPortingPhoneNumbersFilterPortingOrderStatusSubmitted:
		*s = ListPortingPhoneNumbersFilterPortingOrderStatusSubmitted
		return nil
	case ListPortingPhoneNumbersFilterPortingOrderStatusException:
		*s = ListPortingPhoneNumbersFilterPortingOrderStatusException
		return nil
	case ListPortingPhoneNumbersFilterPortingOrderStatusFocDateConfirmed:
		*s = ListPortingPhoneNumbersFilterPortingOrderStatusFocDateConfirmed
		return nil
	case ListPortingPhoneNumbersFilterPortingOrderStatusCancelPending:
		*s = ListPortingPhoneNumbersFilterPortingOrderStatusCancelPending
		return nil
	case ListPortingPhoneNumbersFilterPortingOrderStatusPorted:
		*s = ListPortingPhoneNumbersFilterPortingOrderStatusPorted
		return nil
	case ListPortingPhoneNumbersFilterPortingOrderStatusCancelled:
		*s = ListPortingPhoneNumbersFilterPortingOrderStatusCancelled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListPortingPhoneNumbersTextCsv struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ListPortingPhoneNumbersTextCsv) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ListPortingPhoneNumbersTextCsv) listPortingPhoneNumbersRes() {}

// ListPortingPhoneNumbersUnauthorized is response for ListPortingPhoneNumbers operation.
type ListPortingPhoneNumbersUnauthorized struct{}

func (*ListPortingPhoneNumbersUnauthorized) listPortingPhoneNumbersRes() {}

// ListPortingPhoneNumbersUnprocessableEntity is response for ListPortingPhoneNumbers operation.
type ListPortingPhoneNumbersUnprocessableEntity struct{}

func (*ListPortingPhoneNumbersUnprocessableEntity) listPortingPhoneNumbersRes() {}

type ListPortingReports struct {
	Data []PortingReport   `json:"data"`
	Meta OptPaginationMeta `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListPortingReports) GetData() []PortingReport {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListPortingReports) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListPortingReports) SetData(val []PortingReport) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListPortingReports) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListPortingReports) listPortingReportsRes() {}

type ListPortingReportsFilterReportType string

const (
	ListPortingReportsFilterReportTypeExportPortingOrdersCsv ListPortingReportsFilterReportType = "export_porting_orders_csv"
)

// AllValues returns all ListPortingReportsFilterReportType values.
func (ListPortingReportsFilterReportType) AllValues() []ListPortingReportsFilterReportType {
	return []ListPortingReportsFilterReportType{
		ListPortingReportsFilterReportTypeExportPortingOrdersCsv,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListPortingReportsFilterReportType) MarshalText() ([]byte, error) {
	switch s {
	case ListPortingReportsFilterReportTypeExportPortingOrdersCsv:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListPortingReportsFilterReportType) UnmarshalText(data []byte) error {
	switch ListPortingReportsFilterReportType(data) {
	case ListPortingReportsFilterReportTypeExportPortingOrdersCsv:
		*s = ListPortingReportsFilterReportTypeExportPortingOrdersCsv
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListPortingReportsFilterStatus string

const (
	ListPortingReportsFilterStatusPending   ListPortingReportsFilterStatus = "pending"
	ListPortingReportsFilterStatusCompleted ListPortingReportsFilterStatus = "completed"
)

// AllValues returns all ListPortingReportsFilterStatus values.
func (ListPortingReportsFilterStatus) AllValues() []ListPortingReportsFilterStatus {
	return []ListPortingReportsFilterStatus{
		ListPortingReportsFilterStatusPending,
		ListPortingReportsFilterStatusCompleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListPortingReportsFilterStatus) MarshalText() ([]byte, error) {
	switch s {
	case ListPortingReportsFilterStatusPending:
		return []byte(s), nil
	case ListPortingReportsFilterStatusCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListPortingReportsFilterStatus) UnmarshalText(data []byte) error {
	switch ListPortingReportsFilterStatus(data) {
	case ListPortingReportsFilterStatusPending:
		*s = ListPortingReportsFilterStatusPending
		return nil
	case ListPortingReportsFilterStatusCompleted:
		*s = ListPortingReportsFilterStatusCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ListPortingReportsInternalServerError is response for ListPortingReports operation.
type ListPortingReportsInternalServerError struct{}

func (*ListPortingReportsInternalServerError) listPortingReportsRes() {}

// ListPortingReportsUnprocessableEntity is response for ListPortingReports operation.
type ListPortingReportsUnprocessableEntity struct{}

func (*ListPortingReportsUnprocessableEntity) listPortingReportsRes() {}

type ListPortingVerificationCodes struct {
	Data []PortingVerificationCode `json:"data"`
	Meta OptPaginationMeta         `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListPortingVerificationCodes) GetData() []PortingVerificationCode {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListPortingVerificationCodes) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListPortingVerificationCodes) SetData(val []PortingVerificationCode) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListPortingVerificationCodes) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListPortingVerificationCodes) listVerificationCodesRes() {}

type ListPortoutComments struct {
	Data []PortoutComment `json:"data"`
	Meta OptMetadata      `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListPortoutComments) GetData() []PortoutComment {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListPortoutComments) GetMeta() OptMetadata {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListPortoutComments) SetData(val []PortoutComment) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListPortoutComments) SetMeta(val OptMetadata) {
	s.Meta = val
}

func (*ListPortoutComments) findPortoutCommentsRes() {}

type ListPortoutRequestFilterStatus string

const (
	ListPortoutRequestFilterStatusPending         ListPortoutRequestFilterStatus = "pending"
	ListPortoutRequestFilterStatusAuthorized      ListPortoutRequestFilterStatus = "authorized"
	ListPortoutRequestFilterStatusPorted          ListPortoutRequestFilterStatus = "ported"
	ListPortoutRequestFilterStatusRejected        ListPortoutRequestFilterStatus = "rejected"
	ListPortoutRequestFilterStatusRejectedPending ListPortoutRequestFilterStatus = "rejected-pending"
	ListPortoutRequestFilterStatusCanceled        ListPortoutRequestFilterStatus = "canceled"
)

// AllValues returns all ListPortoutRequestFilterStatus values.
func (ListPortoutRequestFilterStatus) AllValues() []ListPortoutRequestFilterStatus {
	return []ListPortoutRequestFilterStatus{
		ListPortoutRequestFilterStatusPending,
		ListPortoutRequestFilterStatusAuthorized,
		ListPortoutRequestFilterStatusPorted,
		ListPortoutRequestFilterStatusRejected,
		ListPortoutRequestFilterStatusRejectedPending,
		ListPortoutRequestFilterStatusCanceled,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListPortoutRequestFilterStatus) MarshalText() ([]byte, error) {
	switch s {
	case ListPortoutRequestFilterStatusPending:
		return []byte(s), nil
	case ListPortoutRequestFilterStatusAuthorized:
		return []byte(s), nil
	case ListPortoutRequestFilterStatusPorted:
		return []byte(s), nil
	case ListPortoutRequestFilterStatusRejected:
		return []byte(s), nil
	case ListPortoutRequestFilterStatusRejectedPending:
		return []byte(s), nil
	case ListPortoutRequestFilterStatusCanceled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListPortoutRequestFilterStatus) UnmarshalText(data []byte) error {
	switch ListPortoutRequestFilterStatus(data) {
	case ListPortoutRequestFilterStatusPending:
		*s = ListPortoutRequestFilterStatusPending
		return nil
	case ListPortoutRequestFilterStatusAuthorized:
		*s = ListPortoutRequestFilterStatusAuthorized
		return nil
	case ListPortoutRequestFilterStatusPorted:
		*s = ListPortoutRequestFilterStatusPorted
		return nil
	case ListPortoutRequestFilterStatusRejected:
		*s = ListPortoutRequestFilterStatusRejected
		return nil
	case ListPortoutRequestFilterStatusRejectedPending:
		*s = ListPortoutRequestFilterStatusRejectedPending
		return nil
	case ListPortoutRequestFilterStatusCanceled:
		*s = ListPortoutRequestFilterStatusCanceled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ListPortoutRequestNotFound is response for ListPortoutRequest operation.
type ListPortoutRequestNotFound struct{}

func (*ListPortoutRequestNotFound) listPortoutRequestRes() {}

// ListPortoutRequestUnauthorized is response for ListPortoutRequest operation.
type ListPortoutRequestUnauthorized struct{}

func (*ListPortoutRequestUnauthorized) listPortoutRequestRes() {}

// ListPortoutRequestUnprocessableEntity is response for ListPortoutRequest operation.
type ListPortoutRequestUnprocessableEntity struct{}

func (*ListPortoutRequestUnprocessableEntity) listPortoutRequestRes() {}

type ListPortoutResponse struct {
	Data []PortoutDetails `json:"data"`
	Meta OptMetadata      `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListPortoutResponse) GetData() []PortoutDetails {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListPortoutResponse) GetMeta() OptMetadata {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListPortoutResponse) SetData(val []PortoutDetails) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListPortoutResponse) SetMeta(val OptMetadata) {
	s.Meta = val
}

func (*ListPortoutResponse) listPortoutRequestRes() {}

type ListQueueCallsResponse struct {
	Data []QueueCall       `json:"data"`
	Meta OptPaginationMeta `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListQueueCallsResponse) GetData() []QueueCall {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListQueueCallsResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListQueueCallsResponse) SetData(val []QueueCall) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListQueueCallsResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListQueueCallsResponse) listQueueCallsRes() {}

type ListRecordingTranscriptionsResponse struct {
	Data []RecordingTranscription `json:"data"`
	Meta OptCursorPaginationMeta  `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListRecordingTranscriptionsResponse) GetData() []RecordingTranscription {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListRecordingTranscriptionsResponse) GetMeta() OptCursorPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListRecordingTranscriptionsResponse) SetData(val []RecordingTranscription) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListRecordingTranscriptionsResponse) SetMeta(val OptCursorPaginationMeta) {
	s.Meta = val
}

func (*ListRecordingTranscriptionsResponse) getRecordingTranscriptionsRes() {}

type ListRegulatoryRequirements struct {
	Data []RegulatoryRequirements `json:"data"`
	Meta OptPaginationMeta        `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListRegulatoryRequirements) GetData() []RegulatoryRequirements {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListRegulatoryRequirements) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListRegulatoryRequirements) SetData(val []RegulatoryRequirements) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListRegulatoryRequirements) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListRegulatoryRequirements) listRegulatoryRequirementsRes() {}

type ListRequirementsResponse struct {
	Data DocReqsRequirementList `json:"data"`
	Meta OptPaginationMeta      `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListRequirementsResponse) GetData() DocReqsRequirementList {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListRequirementsResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListRequirementsResponse) SetData(val DocReqsRequirementList) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListRequirementsResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListRequirementsResponse) listRequirementsRes() {}

type ListRoomRecordingsResponse struct {
	Data []RoomRecording   `json:"data"`
	Meta OptPaginationMeta `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListRoomRecordingsResponse) GetData() []RoomRecording {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListRoomRecordingsResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListRoomRecordingsResponse) SetData(val []RoomRecording) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListRoomRecordingsResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

// ListTagsBadRequest is response for ListTags operation.
type ListTagsBadRequest struct{}

func (*ListTagsBadRequest) listTagsRes() {}

// ListTagsNotFound is response for ListTags operation.
type ListTagsNotFound struct{}

func (*ListTagsNotFound) listTagsRes() {}

type ListTagsResponse struct {
	Data []ListTagsResponseDataItem `json:"data"`
	Meta OptPaginationMeta          `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListTagsResponse) GetData() []ListTagsResponseDataItem {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListTagsResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListTagsResponse) SetData(val []ListTagsResponseDataItem) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListTagsResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListTagsResponse) listTagsRes() {}

type ListTagsResponseDataItem struct {
	Tag    OptString `json:"tag"`
	Amount OptInt    `json:"amount"`
}

// GetTag returns the value of Tag.
func (s *ListTagsResponseDataItem) GetTag() OptString {
	return s.Tag
}

// GetAmount returns the value of Amount.
func (s *ListTagsResponseDataItem) GetAmount() OptInt {
	return s.Amount
}

// SetTag sets the value of Tag.
func (s *ListTagsResponseDataItem) SetTag(val OptString) {
	s.Tag = val
}

// SetAmount sets the value of Amount.
func (s *ListTagsResponseDataItem) SetAmount(val OptInt) {
	s.Amount = val
}

// ListTagsUnauthorized is response for ListTags operation.
type ListTagsUnauthorized struct{}

func (*ListTagsUnauthorized) listTagsRes() {}

// ListVerificationCodesNotFound is response for ListVerificationCodes operation.
type ListVerificationCodesNotFound struct{}

func (*ListVerificationCodesNotFound) listVerificationCodesRes() {}

type ListVerificationCodesSort string

const (
	ListVerificationCodesSortCreatedAt      ListVerificationCodesSort = "created_at"
	ListVerificationCodesSortMinusCreatedAt ListVerificationCodesSort = "-created_at"
)

// AllValues returns all ListVerificationCodesSort values.
func (ListVerificationCodesSort) AllValues() []ListVerificationCodesSort {
	return []ListVerificationCodesSort{
		ListVerificationCodesSortCreatedAt,
		ListVerificationCodesSortMinusCreatedAt,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListVerificationCodesSort) MarshalText() ([]byte, error) {
	switch s {
	case ListVerificationCodesSortCreatedAt:
		return []byte(s), nil
	case ListVerificationCodesSortMinusCreatedAt:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListVerificationCodesSort) UnmarshalText(data []byte) error {
	switch ListVerificationCodesSort(data) {
	case ListVerificationCodesSortCreatedAt:
		*s = ListVerificationCodesSortCreatedAt
		return nil
	case ListVerificationCodesSortMinusCreatedAt:
		*s = ListVerificationCodesSortMinusCreatedAt
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ListVerificationCodesUnauthorized is response for ListVerificationCodes operation.
type ListVerificationCodesUnauthorized struct{}

func (*ListVerificationCodesUnauthorized) listVerificationCodesRes() {}

// Ref: #/components/schemas/ListVerificationsResponse
type ListVerificationsResponse struct {
	Data []Verification `json:"data"`
	Meta Meta           `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListVerificationsResponse) GetData() []Verification {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListVerificationsResponse) GetMeta() Meta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListVerificationsResponse) SetData(val []Verification) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListVerificationsResponse) SetMeta(val Meta) {
	s.Meta = val
}

func (*ListVerificationsResponse) listVerificationsRes() {}

type ListVerifiedCallsDisplayProfilesResponse struct {
	Data []VerifiedCallsDisplayProfile `json:"data"`
	Meta OptPaginationMeta             `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListVerifiedCallsDisplayProfilesResponse) GetData() []VerifiedCallsDisplayProfile {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListVerifiedCallsDisplayProfilesResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListVerifiedCallsDisplayProfilesResponse) SetData(val []VerifiedCallsDisplayProfile) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListVerifiedCallsDisplayProfilesResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*ListVerifiedCallsDisplayProfilesResponse) listVerifiedCallDisplayProfilesRes() {}

// A paginated list of Verified Numbers.
// Ref: #/components/schemas/ListVerifiedNumbersResponse
type ListVerifiedNumbersResponse struct {
	Data []VerifiedNumberResponse `json:"data"`
	Meta Meta                     `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListVerifiedNumbersResponse) GetData() []VerifiedNumberResponse {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListVerifiedNumbersResponse) GetMeta() Meta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListVerifiedNumbersResponse) SetData(val []VerifiedNumberResponse) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListVerifiedNumbersResponse) SetMeta(val Meta) {
	s.Meta = val
}

func (*ListVerifiedNumbersResponse) listVerifiedNumbersRes() {}

// A list of Verify profile message templates.
// Ref: #/components/schemas/ListVerifyProfileMessageTemplateResponse
type ListVerifyProfileMessageTemplateResponse struct {
	Data []VerifyProfileMessageTemplateResponse `json:"data"`
}

// GetData returns the value of Data.
func (s *ListVerifyProfileMessageTemplateResponse) GetData() []VerifyProfileMessageTemplateResponse {
	return s.Data
}

// SetData sets the value of Data.
func (s *ListVerifyProfileMessageTemplateResponse) SetData(val []VerifyProfileMessageTemplateResponse) {
	s.Data = val
}

// A paginated list of Verify profiles.
// Ref: #/components/schemas/ListVerifyProfilesResponse
type ListVerifyProfilesResponse struct {
	Data []VerifyProfileResponse `json:"data"`
	Meta Meta                    `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListVerifyProfilesResponse) GetData() []VerifyProfileResponse {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListVerifyProfilesResponse) GetMeta() Meta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListVerifyProfilesResponse) SetData(val []VerifyProfileResponse) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListVerifyProfilesResponse) SetMeta(val Meta) {
	s.Meta = val
}

func (*ListVerifyProfilesResponse) listProfilesRes() {}

type ListWebhookDeliveriesResponse struct {
	Data []WebhookDelivery       `json:"data"`
	Meta OptPaginationMetaSimple `json:"meta"`
}

// GetData returns the value of Data.
func (s *ListWebhookDeliveriesResponse) GetData() []WebhookDelivery {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ListWebhookDeliveriesResponse) GetMeta() OptPaginationMetaSimple {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ListWebhookDeliveriesResponse) SetData(val []WebhookDelivery) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ListWebhookDeliveriesResponse) SetMeta(val OptPaginationMetaSimple) {
	s.Meta = val
}

func (*ListWebhookDeliveriesResponse) getWebhookDeliveriesRes() {}

// Ref: #/components/schemas/LogMessage
type LogMessage struct {
	Code   string              `json:"code"`
	Title  string              `json:"title"`
	Detail OptString           `json:"detail"`
	Source OptLogMessageSource `json:"source"`
	Meta   OptLogMessageMeta   `json:"meta"`
}

// GetCode returns the value of Code.
func (s *LogMessage) GetCode() string {
	return s.Code
}

// GetTitle returns the value of Title.
func (s *LogMessage) GetTitle() string {
	return s.Title
}

// GetDetail returns the value of Detail.
func (s *LogMessage) GetDetail() OptString {
	return s.Detail
}

// GetSource returns the value of Source.
func (s *LogMessage) GetSource() OptLogMessageSource {
	return s.Source
}

// GetMeta returns the value of Meta.
func (s *LogMessage) GetMeta() OptLogMessageMeta {
	return s.Meta
}

// SetCode sets the value of Code.
func (s *LogMessage) SetCode(val string) {
	s.Code = val
}

// SetTitle sets the value of Title.
func (s *LogMessage) SetTitle(val string) {
	s.Title = val
}

// SetDetail sets the value of Detail.
func (s *LogMessage) SetDetail(val OptString) {
	s.Detail = val
}

// SetSource sets the value of Source.
func (s *LogMessage) SetSource(val OptLogMessageSource) {
	s.Source = val
}

// SetMeta sets the value of Meta.
func (s *LogMessage) SetMeta(val OptLogMessageMeta) {
	s.Meta = val
}

type LogMessageMeta struct {
	// The telephone number the log message is associated with, if any.
	TelephoneNumber OptString `json:"telephone_number"`
	// The external connection the log message is associated with, if any.
	ExternalConnectionID OptStringInt64 `json:"external_connection_id"`
	// The ticket ID for an operation that generated the log message, if any.
	TicketID OptUUID `json:"ticket_id"`
}

// GetTelephoneNumber returns the value of TelephoneNumber.
func (s *LogMessageMeta) GetTelephoneNumber() OptString {
	return s.TelephoneNumber
}

// GetExternalConnectionID returns the value of ExternalConnectionID.
func (s *LogMessageMeta) GetExternalConnectionID() OptStringInt64 {
	return s.ExternalConnectionID
}

// GetTicketID returns the value of TicketID.
func (s *LogMessageMeta) GetTicketID() OptUUID {
	return s.TicketID
}

// SetTelephoneNumber sets the value of TelephoneNumber.
func (s *LogMessageMeta) SetTelephoneNumber(val OptString) {
	s.TelephoneNumber = val
}

// SetExternalConnectionID sets the value of ExternalConnectionID.
func (s *LogMessageMeta) SetExternalConnectionID(val OptStringInt64) {
	s.ExternalConnectionID = val
}

// SetTicketID sets the value of TicketID.
func (s *LogMessageMeta) SetTicketID(val OptUUID) {
	s.TicketID = val
}

type LogMessageSource struct {
	// JSON pointer (RFC6901) to the offending entity.
	Pointer OptString `json:"pointer"`
}

// GetPointer returns the value of Pointer.
func (s *LogMessageSource) GetPointer() OptString {
	return s.Pointer
}

// SetPointer sets the value of Pointer.
func (s *LogMessageSource) SetPointer(val OptString) {
	s.Pointer = val
}

type LogoURL string

// Ref: #/components/schemas/Loopcount
// Loopcount represents sum type.
type Loopcount struct {
	Type   LoopcountType // switch on this field
	String string
	Int    int
}

// LoopcountType is oneOf type of Loopcount.
type LoopcountType string

// Possible values for LoopcountType.
const (
	StringLoopcount LoopcountType = "string"
	IntLoopcount    LoopcountType = "int"
)

// IsString reports whether Loopcount is string.
func (s Loopcount) IsString() bool { return s.Type == StringLoopcount }

// IsInt reports whether Loopcount is int.
func (s Loopcount) IsInt() bool { return s.Type == IntLoopcount }

// SetString sets Loopcount to string.
func (s *Loopcount) SetString(v string) {
	s.Type = StringLoopcount
	s.String = v
}

// GetString returns string and true boolean if Loopcount is string.
func (s Loopcount) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringLoopcount returns new Loopcount from string.
func NewStringLoopcount(v string) Loopcount {
	var s Loopcount
	s.SetString(v)
	return s
}

// SetInt sets Loopcount to int.
func (s *Loopcount) SetInt(v int) {
	s.Type = IntLoopcount
	s.Int = v
}

// GetInt returns int and true boolean if Loopcount is int.
func (s Loopcount) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntLoopcount returns new Loopcount from int.
func NewIntLoopcount(v int) Loopcount {
	var s Loopcount
	s.SetInt(v)
	return s
}

// The media features settings for a phone number.
// Ref: #/components/schemas/MediaFeatures
type MediaFeatures struct {
	// When RTP Auto-Adjust is enabled, the destination RTP address port will be automatically changed to
	// match the source of the incoming RTP packets.
	RtpAutoAdjustEnabled OptBool `json:"rtp_auto_adjust_enabled"`
	// When enabled, Telnyx will accept RTP packets from any customer-side IP address and port, not just
	// those to which Telnyx is sending RTP.
	AcceptAnyRtpPacketsEnabled OptBool `json:"accept_any_rtp_packets_enabled"`
	// Controls whether Telnyx will accept a T.38 re-INVITE for this phone number. Note that Telnyx will
	// not send a T.38 re-INVITE; this option only controls whether one will be accepted.
	T38FaxGatewayEnabled OptBool `json:"t38_fax_gateway_enabled"`
}

// GetRtpAutoAdjustEnabled returns the value of RtpAutoAdjustEnabled.
func (s *MediaFeatures) GetRtpAutoAdjustEnabled() OptBool {
	return s.RtpAutoAdjustEnabled
}

// GetAcceptAnyRtpPacketsEnabled returns the value of AcceptAnyRtpPacketsEnabled.
func (s *MediaFeatures) GetAcceptAnyRtpPacketsEnabled() OptBool {
	return s.AcceptAnyRtpPacketsEnabled
}

// GetT38FaxGatewayEnabled returns the value of T38FaxGatewayEnabled.
func (s *MediaFeatures) GetT38FaxGatewayEnabled() OptBool {
	return s.T38FaxGatewayEnabled
}

// SetRtpAutoAdjustEnabled sets the value of RtpAutoAdjustEnabled.
func (s *MediaFeatures) SetRtpAutoAdjustEnabled(val OptBool) {
	s.RtpAutoAdjustEnabled = val
}

// SetAcceptAnyRtpPacketsEnabled sets the value of AcceptAnyRtpPacketsEnabled.
func (s *MediaFeatures) SetAcceptAnyRtpPacketsEnabled(val OptBool) {
	s.AcceptAnyRtpPacketsEnabled = val
}

// SetT38FaxGatewayEnabled sets the value of T38FaxGatewayEnabled.
func (s *MediaFeatures) SetT38FaxGatewayEnabled(val OptBool) {
	s.T38FaxGatewayEnabled = val
}

type MessageResponse struct {
	Data OptOutboundMessagePayload `json:"data"`
}

// GetData returns the value of Data.
func (s *MessageResponse) GetData() OptOutboundMessagePayload {
	return s.Data
}

// SetData sets the value of Data.
func (s *MessageResponse) SetData(val OptOutboundMessagePayload) {
	s.Data = val
}

func (*MessageResponse) createGroupMmsMessageRes()   {}
func (*MessageResponse) createLongCodeMessageRes()   {}
func (*MessageResponse) createNumberPoolMessageRes() {}
func (*MessageResponse) createShortCodeMessageRes()  {}
func (*MessageResponse) getMessageRes()              {}
func (*MessageResponse) sendMessageRes()             {}

// The set of features available for a specific messaging use case (SMS or MMS). Features
// can vary depending on the characteristics the phone number, as well as its current
// product configuration.
// Ref: #/components/schemas/MessagingFeatureSet
type MessagingFeatureSet struct {
	// Send messages to and receive messages from numbers in the same country.
	DomesticTwoWay bool `json:"domestic_two_way"`
	// Receive messages from numbers in other countries.
	InternationalInbound bool `json:"international_inbound"`
	// Send messages to numbers in other countries.
	InternationalOutbound bool `json:"international_outbound"`
}

// GetDomesticTwoWay returns the value of DomesticTwoWay.
func (s *MessagingFeatureSet) GetDomesticTwoWay() bool {
	return s.DomesticTwoWay
}

// GetInternationalInbound returns the value of InternationalInbound.
func (s *MessagingFeatureSet) GetInternationalInbound() bool {
	return s.InternationalInbound
}

// GetInternationalOutbound returns the value of InternationalOutbound.
func (s *MessagingFeatureSet) GetInternationalOutbound() bool {
	return s.InternationalOutbound
}

// SetDomesticTwoWay sets the value of DomesticTwoWay.
func (s *MessagingFeatureSet) SetDomesticTwoWay(val bool) {
	s.DomesticTwoWay = val
}

// SetInternationalInbound sets the value of InternationalInbound.
func (s *MessagingFeatureSet) SetInternationalInbound(val bool) {
	s.InternationalInbound = val
}

// SetInternationalOutbound sets the value of InternationalOutbound.
func (s *MessagingFeatureSet) SetInternationalOutbound(val bool) {
	s.InternationalOutbound = val
}

// Ref: #/components/schemas/MessagingHostedNumberOrder
type MessagingHostedNumberOrder struct {
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	// Resource unique identifier.
	ID OptUUID `json:"id"`
	// Automatically associate the number with this messaging profile ID when the order is complete.
	MessagingProfileID OptNilString                        `json:"messaging_profile_id"`
	Status             OptMessagingHostedNumberOrderStatus `json:"status"`
	PhoneNumbers       []HostedNumber                      `json:"phone_numbers"`
}

// GetRecordType returns the value of RecordType.
func (s *MessagingHostedNumberOrder) GetRecordType() OptString {
	return s.RecordType
}

// GetID returns the value of ID.
func (s *MessagingHostedNumberOrder) GetID() OptUUID {
	return s.ID
}

// GetMessagingProfileID returns the value of MessagingProfileID.
func (s *MessagingHostedNumberOrder) GetMessagingProfileID() OptNilString {
	return s.MessagingProfileID
}

// GetStatus returns the value of Status.
func (s *MessagingHostedNumberOrder) GetStatus() OptMessagingHostedNumberOrderStatus {
	return s.Status
}

// GetPhoneNumbers returns the value of PhoneNumbers.
func (s *MessagingHostedNumberOrder) GetPhoneNumbers() []HostedNumber {
	return s.PhoneNumbers
}

// SetRecordType sets the value of RecordType.
func (s *MessagingHostedNumberOrder) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetID sets the value of ID.
func (s *MessagingHostedNumberOrder) SetID(val OptUUID) {
	s.ID = val
}

// SetMessagingProfileID sets the value of MessagingProfileID.
func (s *MessagingHostedNumberOrder) SetMessagingProfileID(val OptNilString) {
	s.MessagingProfileID = val
}

// SetStatus sets the value of Status.
func (s *MessagingHostedNumberOrder) SetStatus(val OptMessagingHostedNumberOrderStatus) {
	s.Status = val
}

// SetPhoneNumbers sets the value of PhoneNumbers.
func (s *MessagingHostedNumberOrder) SetPhoneNumbers(val []HostedNumber) {
	s.PhoneNumbers = val
}

type MessagingHostedNumberOrderResponse struct {
	Data OptMessagingHostedNumberOrder `json:"data"`
}

// GetData returns the value of Data.
func (s *MessagingHostedNumberOrderResponse) GetData() OptMessagingHostedNumberOrder {
	return s.Data
}

// SetData sets the value of Data.
func (s *MessagingHostedNumberOrderResponse) SetData(val OptMessagingHostedNumberOrder) {
	s.Data = val
}

func (*MessagingHostedNumberOrderResponse) createMessagingHostedNumberOrderRes() {}
func (*MessagingHostedNumberOrderResponse) getMessagingHostedNumberOrderRes()    {}

type MessagingHostedNumberOrderStatus string

const (
	MessagingHostedNumberOrderStatusFailed     MessagingHostedNumberOrderStatus = "failed"
	MessagingHostedNumberOrderStatusPending    MessagingHostedNumberOrderStatus = "pending"
	MessagingHostedNumberOrderStatusSuccessful MessagingHostedNumberOrderStatus = "successful"
)

// AllValues returns all MessagingHostedNumberOrderStatus values.
func (MessagingHostedNumberOrderStatus) AllValues() []MessagingHostedNumberOrderStatus {
	return []MessagingHostedNumberOrderStatus{
		MessagingHostedNumberOrderStatusFailed,
		MessagingHostedNumberOrderStatusPending,
		MessagingHostedNumberOrderStatusSuccessful,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MessagingHostedNumberOrderStatus) MarshalText() ([]byte, error) {
	switch s {
	case MessagingHostedNumberOrderStatusFailed:
		return []byte(s), nil
	case MessagingHostedNumberOrderStatusPending:
		return []byte(s), nil
	case MessagingHostedNumberOrderStatusSuccessful:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MessagingHostedNumberOrderStatus) UnmarshalText(data []byte) error {
	switch MessagingHostedNumberOrderStatus(data) {
	case MessagingHostedNumberOrderStatusFailed:
		*s = MessagingHostedNumberOrderStatusFailed
		return nil
	case MessagingHostedNumberOrderStatusPending:
		*s = MessagingHostedNumberOrderStatusPending
		return nil
	case MessagingHostedNumberOrderStatusSuccessful:
		*s = MessagingHostedNumberOrderStatusSuccessful
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/MessagingUrlDomain
type MessagingUrlDomain struct {
	RecordType OptString `json:"record_type"`
	ID         OptString `json:"id"`
	URLDomain  OptString `json:"url_domain"`
	UseCase    OptString `json:"use_case"`
}

// GetRecordType returns the value of RecordType.
func (s *MessagingUrlDomain) GetRecordType() OptString {
	return s.RecordType
}

// GetID returns the value of ID.
func (s *MessagingUrlDomain) GetID() OptString {
	return s.ID
}

// GetURLDomain returns the value of URLDomain.
func (s *MessagingUrlDomain) GetURLDomain() OptString {
	return s.URLDomain
}

// GetUseCase returns the value of UseCase.
func (s *MessagingUrlDomain) GetUseCase() OptString {
	return s.UseCase
}

// SetRecordType sets the value of RecordType.
func (s *MessagingUrlDomain) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetID sets the value of ID.
func (s *MessagingUrlDomain) SetID(val OptString) {
	s.ID = val
}

// SetURLDomain sets the value of URLDomain.
func (s *MessagingUrlDomain) SetURLDomain(val OptString) {
	s.URLDomain = val
}

// SetUseCase sets the value of UseCase.
func (s *MessagingUrlDomain) SetUseCase(val OptString) {
	s.UseCase = val
}

// Ref: #/components/schemas/Meta
type Meta struct {
	TotalPages   OptInt `json:"total_pages"`
	TotalResults OptInt `json:"total_results"`
	PageNumber   OptInt `json:"page_number"`
	PageSize     OptInt `json:"page_size"`
}

// GetTotalPages returns the value of TotalPages.
func (s *Meta) GetTotalPages() OptInt {
	return s.TotalPages
}

// GetTotalResults returns the value of TotalResults.
func (s *Meta) GetTotalResults() OptInt {
	return s.TotalResults
}

// GetPageNumber returns the value of PageNumber.
func (s *Meta) GetPageNumber() OptInt {
	return s.PageNumber
}

// GetPageSize returns the value of PageSize.
func (s *Meta) GetPageSize() OptInt {
	return s.PageSize
}

// SetTotalPages sets the value of TotalPages.
func (s *Meta) SetTotalPages(val OptInt) {
	s.TotalPages = val
}

// SetTotalResults sets the value of TotalResults.
func (s *Meta) SetTotalResults(val OptInt) {
	s.TotalResults = val
}

// SetPageNumber sets the value of PageNumber.
func (s *Meta) SetPageNumber(val OptInt) {
	s.PageNumber = val
}

// SetPageSize sets the value of PageSize.
func (s *Meta) SetPageSize(val OptInt) {
	s.PageSize = val
}

// Ref: #/components/schemas/MetaResponse
type MetaResponse struct {
	// This should likely be a URL to the relevant documentation.
	URL OptString `json:"url"`
}

// GetURL returns the value of URL.
func (s *MetaResponse) GetURL() OptString {
	return s.URL
}

// SetURL sets the value of URL.
func (s *MetaResponse) SetURL(val OptString) {
	s.URL = val
}

// Ref: #/components/schemas/Metadata
type Metadata struct {
	// Total number of pages based on pagination settings.
	TotalPages OptFloat64 `json:"total_pages"`
	// Total number of results.
	TotalResults OptFloat64 `json:"total_results"`
	// Current Page based on pagination settings (included when defaults are used.).
	PageNumber OptFloat64 `json:"page_number"`
	// Number of results to return per page based on pagination settings (included when defaults are used.
	// ).
	PageSize OptFloat64 `json:"page_size"`
}

// GetTotalPages returns the value of TotalPages.
func (s *Metadata) GetTotalPages() OptFloat64 {
	return s.TotalPages
}

// GetTotalResults returns the value of TotalResults.
func (s *Metadata) GetTotalResults() OptFloat64 {
	return s.TotalResults
}

// GetPageNumber returns the value of PageNumber.
func (s *Metadata) GetPageNumber() OptFloat64 {
	return s.PageNumber
}

// GetPageSize returns the value of PageSize.
func (s *Metadata) GetPageSize() OptFloat64 {
	return s.PageSize
}

// SetTotalPages sets the value of TotalPages.
func (s *Metadata) SetTotalPages(val OptFloat64) {
	s.TotalPages = val
}

// SetTotalResults sets the value of TotalResults.
func (s *Metadata) SetTotalResults(val OptFloat64) {
	s.TotalResults = val
}

// SetPageNumber sets the value of PageNumber.
func (s *Metadata) SetPageNumber(val OptFloat64) {
	s.PageNumber = val
}

// SetPageSize sets the value of PageSize.
func (s *Metadata) SetPageSize(val OptFloat64) {
	s.PageSize = val
}

// Ref: #/components/schemas/MobileNetworkOperator
type MobileNetworkOperator struct {
	// Identifies the resource.
	ID OptUUID `json:"id"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	// The network operator name.
	Name OptString `json:"name"`
	// TADIG stands for Transferred Account Data Interchange Group. The TADIG code is a unique identifier
	// for network operators in GSM mobile networks.
	Tadig OptString `json:"tadig"`
	// The mobile operator two-character (ISO 3166-1 alpha-2) origin country code.
	CountryCode OptString `json:"country_code"`
	// MCC stands for Mobile Country Code. It's a three decimal digit that identifies a country.<br/><br/>
	// This code is commonly seen joined with a Mobile Network Code (MNC) in a tuple that allows
	// identifying a carrier known as PLMN (Public Land Mobile Network) code.
	Mcc OptString `json:"mcc"`
	// MNC stands for Mobile Network Code. It's a two to three decimal digits that identify a network.
	// <br/><br/>
	// This code is commonly seen joined with a Mobile Country Code (MCC) in a tuple that allows
	// identifying a carrier known as PLMN (Public Land Mobile Network) code.
	Mnc OptString `json:"mnc"`
	// Indicate whether the mobile network operator can be set as preferred in the Network Preferences
	// API.
	NetworkPreferencesEnabled OptBool `json:"network_preferences_enabled"`
}

// GetID returns the value of ID.
func (s *MobileNetworkOperator) GetID() OptUUID {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *MobileNetworkOperator) GetRecordType() OptString {
	return s.RecordType
}

// GetName returns the value of Name.
func (s *MobileNetworkOperator) GetName() OptString {
	return s.Name
}

// GetTadig returns the value of Tadig.
func (s *MobileNetworkOperator) GetTadig() OptString {
	return s.Tadig
}

// GetCountryCode returns the value of CountryCode.
func (s *MobileNetworkOperator) GetCountryCode() OptString {
	return s.CountryCode
}

// GetMcc returns the value of Mcc.
func (s *MobileNetworkOperator) GetMcc() OptString {
	return s.Mcc
}

// GetMnc returns the value of Mnc.
func (s *MobileNetworkOperator) GetMnc() OptString {
	return s.Mnc
}

// GetNetworkPreferencesEnabled returns the value of NetworkPreferencesEnabled.
func (s *MobileNetworkOperator) GetNetworkPreferencesEnabled() OptBool {
	return s.NetworkPreferencesEnabled
}

// SetID sets the value of ID.
func (s *MobileNetworkOperator) SetID(val OptUUID) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *MobileNetworkOperator) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetName sets the value of Name.
func (s *MobileNetworkOperator) SetName(val OptString) {
	s.Name = val
}

// SetTadig sets the value of Tadig.
func (s *MobileNetworkOperator) SetTadig(val OptString) {
	s.Tadig = val
}

// SetCountryCode sets the value of CountryCode.
func (s *MobileNetworkOperator) SetCountryCode(val OptString) {
	s.CountryCode = val
}

// SetMcc sets the value of Mcc.
func (s *MobileNetworkOperator) SetMcc(val OptString) {
	s.Mcc = val
}

// SetMnc sets the value of Mnc.
func (s *MobileNetworkOperator) SetMnc(val OptString) {
	s.Mnc = val
}

// SetNetworkPreferencesEnabled sets the value of NetworkPreferencesEnabled.
func (s *MobileNetworkOperator) SetNetworkPreferencesEnabled(val OptBool) {
	s.NetworkPreferencesEnabled = val
}

// Ref: #/components/schemas/MobileNetworkOperatorPreferencesResponse
type MobileNetworkOperatorPreferencesResponse struct {
	// The mobile network operator resource identification UUID.
	MobileNetworkOperatorID OptUUID `json:"mobile_network_operator_id"`
	// The mobile network operator resource name.
	MobileNetworkOperatorName OptString `json:"mobile_network_operator_name"`
	// It determines what is the priority of a specific network operator that should be assumed by a SIM
	// card when connecting to a network. The highest priority is 0, the second highest is 1 and so on.
	Priority OptInt `json:"priority"`
}

// GetMobileNetworkOperatorID returns the value of MobileNetworkOperatorID.
func (s *MobileNetworkOperatorPreferencesResponse) GetMobileNetworkOperatorID() OptUUID {
	return s.MobileNetworkOperatorID
}

// GetMobileNetworkOperatorName returns the value of MobileNetworkOperatorName.
func (s *MobileNetworkOperatorPreferencesResponse) GetMobileNetworkOperatorName() OptString {
	return s.MobileNetworkOperatorName
}

// GetPriority returns the value of Priority.
func (s *MobileNetworkOperatorPreferencesResponse) GetPriority() OptInt {
	return s.Priority
}

// SetMobileNetworkOperatorID sets the value of MobileNetworkOperatorID.
func (s *MobileNetworkOperatorPreferencesResponse) SetMobileNetworkOperatorID(val OptUUID) {
	s.MobileNetworkOperatorID = val
}

// SetMobileNetworkOperatorName sets the value of MobileNetworkOperatorName.
func (s *MobileNetworkOperatorPreferencesResponse) SetMobileNetworkOperatorName(val OptString) {
	s.MobileNetworkOperatorName = val
}

// SetPriority sets the value of Priority.
func (s *MobileNetworkOperatorPreferencesResponse) SetPriority(val OptInt) {
	s.Priority = val
}

type MobileNetworkOperatorsPreferencesResponse []MobileNetworkOperatorPreferencesResponse

type Name string

// Merged schema.
// Ref: #/components/schemas/Network
type Network struct {
	// Identifies the resource.
	ID OptUUID `json:"id"`
	// Merged property.
	RecordType OptString `json:"record_type"`
	// ISO 8601 formatted date-time indicating when the resource was created.
	CreatedAt OptString `json:"created_at"`
	// ISO 8601 formatted date-time indicating when the resource was updated.
	UpdatedAt OptString `json:"updated_at"`
	// A user specified name for the network.
	Name OptString `json:"name"`
}

// GetID returns the value of ID.
func (s *Network) GetID() OptUUID {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *Network) GetRecordType() OptString {
	return s.RecordType
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Network) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Network) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *Network) GetName() OptString {
	return s.Name
}

// SetID sets the value of ID.
func (s *Network) SetID(val OptUUID) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *Network) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Network) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Network) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *Network) SetName(val OptString) {
	s.Name = val
}

// Merged schema.
// Ref: #/components/schemas/NetworkCreate
type NetworkCreate struct {
	// Identifies the resource.
	ID OptUUID `json:"id"`
	// Merged property.
	RecordType OptString `json:"record_type"`
	// ISO 8601 formatted date-time indicating when the resource was created.
	CreatedAt OptString `json:"created_at"`
	// ISO 8601 formatted date-time indicating when the resource was updated.
	UpdatedAt OptString `json:"updated_at"`
	// A user specified name for the network.
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *NetworkCreate) GetID() OptUUID {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *NetworkCreate) GetRecordType() OptString {
	return s.RecordType
}

// GetCreatedAt returns the value of CreatedAt.
func (s *NetworkCreate) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *NetworkCreate) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *NetworkCreate) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *NetworkCreate) SetID(val OptUUID) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *NetworkCreate) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *NetworkCreate) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *NetworkCreate) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *NetworkCreate) SetName(val string) {
	s.Name = val
}

// Merged schema.
// Ref: #/components/schemas/NetworkInterface
type NetworkInterface struct {
	// Identifies the resource.
	ID OptUUID `json:"id"`
	// Merged property.
	RecordType OptString `json:"record_type"`
	// ISO 8601 formatted date-time indicating when the resource was created.
	CreatedAt OptString `json:"created_at"`
	// ISO 8601 formatted date-time indicating when the resource was updated.
	UpdatedAt OptString `json:"updated_at"`
	// The id of the network associated with the interface.
	NetworkID OptUUID `json:"network_id"`
	// A user specified name for the interface.
	Name   OptString          `json:"name"`
	Status OptInterfaceStatus `json:"status"`
	// The region interface is deployed to.
	RegionCode OptString                 `json:"region_code"`
	Region     OptNetworkInterfaceRegion `json:"region"`
	// Identifies the type of the interface.
	Type OptString `json:"type"`
}

// GetID returns the value of ID.
func (s *NetworkInterface) GetID() OptUUID {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *NetworkInterface) GetRecordType() OptString {
	return s.RecordType
}

// GetCreatedAt returns the value of CreatedAt.
func (s *NetworkInterface) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *NetworkInterface) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetNetworkID returns the value of NetworkID.
func (s *NetworkInterface) GetNetworkID() OptUUID {
	return s.NetworkID
}

// GetName returns the value of Name.
func (s *NetworkInterface) GetName() OptString {
	return s.Name
}

// GetStatus returns the value of Status.
func (s *NetworkInterface) GetStatus() OptInterfaceStatus {
	return s.Status
}

// GetRegionCode returns the value of RegionCode.
func (s *NetworkInterface) GetRegionCode() OptString {
	return s.RegionCode
}

// GetRegion returns the value of Region.
func (s *NetworkInterface) GetRegion() OptNetworkInterfaceRegion {
	return s.Region
}

// GetType returns the value of Type.
func (s *NetworkInterface) GetType() OptString {
	return s.Type
}

// SetID sets the value of ID.
func (s *NetworkInterface) SetID(val OptUUID) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *NetworkInterface) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *NetworkInterface) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *NetworkInterface) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetNetworkID sets the value of NetworkID.
func (s *NetworkInterface) SetNetworkID(val OptUUID) {
	s.NetworkID = val
}

// SetName sets the value of Name.
func (s *NetworkInterface) SetName(val OptString) {
	s.Name = val
}

// SetStatus sets the value of Status.
func (s *NetworkInterface) SetStatus(val OptInterfaceStatus) {
	s.Status = val
}

// SetRegionCode sets the value of RegionCode.
func (s *NetworkInterface) SetRegionCode(val OptString) {
	s.RegionCode = val
}

// SetRegion sets the value of Region.
func (s *NetworkInterface) SetRegion(val OptNetworkInterfaceRegion) {
	s.Region = val
}

// SetType sets the value of Type.
func (s *NetworkInterface) SetType(val OptString) {
	s.Type = val
}

type NetworkInterfaceListResponse struct {
	Data []NetworkInterface `json:"data"`
	Meta OptPaginationMeta  `json:"meta"`
}

// GetData returns the value of Data.
func (s *NetworkInterfaceListResponse) GetData() []NetworkInterface {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *NetworkInterfaceListResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *NetworkInterfaceListResponse) SetData(val []NetworkInterface) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *NetworkInterfaceListResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*NetworkInterfaceListResponse) listNetworkInterfacesRes() {}

type NetworkInterfaceRegion struct {
	// Region code of the interface.
	Code OptString `json:"code"`
	// Region name of the interface.
	Name OptString `json:"name"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
}

// GetCode returns the value of Code.
func (s *NetworkInterfaceRegion) GetCode() OptString {
	return s.Code
}

// GetName returns the value of Name.
func (s *NetworkInterfaceRegion) GetName() OptString {
	return s.Name
}

// GetRecordType returns the value of RecordType.
func (s *NetworkInterfaceRegion) GetRecordType() OptString {
	return s.RecordType
}

// SetCode sets the value of Code.
func (s *NetworkInterfaceRegion) SetCode(val OptString) {
	s.Code = val
}

// SetName sets the value of Name.
func (s *NetworkInterfaceRegion) SetName(val OptString) {
	s.Name = val
}

// SetRecordType sets the value of RecordType.
func (s *NetworkInterfaceRegion) SetRecordType(val OptString) {
	s.RecordType = val
}

type NetworkListResponse struct {
	Data []Network         `json:"data"`
	Meta OptPaginationMeta `json:"meta"`
}

// GetData returns the value of Data.
func (s *NetworkListResponse) GetData() []Network {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *NetworkListResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *NetworkListResponse) SetData(val []Network) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *NetworkListResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*NetworkListResponse) listNetworksRes() {}

type NetworkResponse struct {
	Data OptNetwork `json:"data"`
}

// GetData returns the value of Data.
func (s *NetworkResponse) GetData() OptNetwork {
	return s.Data
}

// SetData sets the value of Data.
func (s *NetworkResponse) SetData(val OptNetwork) {
	s.Data = val
}

func (*NetworkResponse) createNetworkRes() {}
func (*NetworkResponse) deleteNetworkRes() {}
func (*NetworkResponse) getNetworkRes()    {}
func (*NetworkResponse) updateNetworkRes() {}

// Ref: #/components/schemas/NewParticipantResource
type NewParticipantResource struct {
	// The id of the account the resource belongs to.
	AccountSid OptString `json:"account_sid"`
	// The identifier of this participant's call.
	CallSid OptString `json:"call_sid"`
	// Whether the participant is coaching another call.
	Coaching OptBool `json:"coaching"`
	// The identifier of the coached participant's call.
	CoachingCallSid OptString `json:"coaching_call_sid"`
	// Whether the conference ends when the participant leaves.
	EndConferenceOnExit OptBool `json:"end_conference_on_exit"`
	// Whether the participant is on hold.
	Hold OptBool `json:"hold"`
	// Whether the participant is muted.
	Muted OptBool `json:"muted"`
	// The status of the participant's call in the conference.
	Status OptNewParticipantResourceStatus `json:"status"`
	// The relative URI for this participant.
	URI OptString `json:"uri"`
}

// GetAccountSid returns the value of AccountSid.
func (s *NewParticipantResource) GetAccountSid() OptString {
	return s.AccountSid
}

// GetCallSid returns the value of CallSid.
func (s *NewParticipantResource) GetCallSid() OptString {
	return s.CallSid
}

// GetCoaching returns the value of Coaching.
func (s *NewParticipantResource) GetCoaching() OptBool {
	return s.Coaching
}

// GetCoachingCallSid returns the value of CoachingCallSid.
func (s *NewParticipantResource) GetCoachingCallSid() OptString {
	return s.CoachingCallSid
}

// GetEndConferenceOnExit returns the value of EndConferenceOnExit.
func (s *NewParticipantResource) GetEndConferenceOnExit() OptBool {
	return s.EndConferenceOnExit
}

// GetHold returns the value of Hold.
func (s *NewParticipantResource) GetHold() OptBool {
	return s.Hold
}

// GetMuted returns the value of Muted.
func (s *NewParticipantResource) GetMuted() OptBool {
	return s.Muted
}

// GetStatus returns the value of Status.
func (s *NewParticipantResource) GetStatus() OptNewParticipantResourceStatus {
	return s.Status
}

// GetURI returns the value of URI.
func (s *NewParticipantResource) GetURI() OptString {
	return s.URI
}

// SetAccountSid sets the value of AccountSid.
func (s *NewParticipantResource) SetAccountSid(val OptString) {
	s.AccountSid = val
}

// SetCallSid sets the value of CallSid.
func (s *NewParticipantResource) SetCallSid(val OptString) {
	s.CallSid = val
}

// SetCoaching sets the value of Coaching.
func (s *NewParticipantResource) SetCoaching(val OptBool) {
	s.Coaching = val
}

// SetCoachingCallSid sets the value of CoachingCallSid.
func (s *NewParticipantResource) SetCoachingCallSid(val OptString) {
	s.CoachingCallSid = val
}

// SetEndConferenceOnExit sets the value of EndConferenceOnExit.
func (s *NewParticipantResource) SetEndConferenceOnExit(val OptBool) {
	s.EndConferenceOnExit = val
}

// SetHold sets the value of Hold.
func (s *NewParticipantResource) SetHold(val OptBool) {
	s.Hold = val
}

// SetMuted sets the value of Muted.
func (s *NewParticipantResource) SetMuted(val OptBool) {
	s.Muted = val
}

// SetStatus sets the value of Status.
func (s *NewParticipantResource) SetStatus(val OptNewParticipantResourceStatus) {
	s.Status = val
}

// SetURI sets the value of URI.
func (s *NewParticipantResource) SetURI(val OptString) {
	s.URI = val
}

// The status of the participant's call in the conference.
type NewParticipantResourceStatus string

const (
	NewParticipantResourceStatusConnecting NewParticipantResourceStatus = "connecting"
	NewParticipantResourceStatusConnected  NewParticipantResourceStatus = "connected"
	NewParticipantResourceStatusCompleted  NewParticipantResourceStatus = "completed"
)

// AllValues returns all NewParticipantResourceStatus values.
func (NewParticipantResourceStatus) AllValues() []NewParticipantResourceStatus {
	return []NewParticipantResourceStatus{
		NewParticipantResourceStatusConnecting,
		NewParticipantResourceStatusConnected,
		NewParticipantResourceStatusCompleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NewParticipantResourceStatus) MarshalText() ([]byte, error) {
	switch s {
	case NewParticipantResourceStatusConnecting:
		return []byte(s), nil
	case NewParticipantResourceStatusConnected:
		return []byte(s), nil
	case NewParticipantResourceStatusCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NewParticipantResourceStatus) UnmarshalText(data []byte) error {
	switch NewParticipantResourceStatus(data) {
	case NewParticipantResourceStatusConnecting:
		*s = NewParticipantResourceStatusConnecting
		return nil
	case NewParticipantResourceStatusConnected:
		*s = NewParticipantResourceStatusConnected
		return nil
	case NewParticipantResourceStatusCompleted:
		*s = NewParticipantResourceStatusCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The direction of the audio stream to be noise suppressed.
// Ref: #/components/schemas/NoiseSuppressionDirection
type NoiseSuppressionDirection string

const (
	NoiseSuppressionDirectionInbound  NoiseSuppressionDirection = "inbound"
	NoiseSuppressionDirectionOutbound NoiseSuppressionDirection = "outbound"
	NoiseSuppressionDirectionBoth     NoiseSuppressionDirection = "both"
)

// AllValues returns all NoiseSuppressionDirection values.
func (NoiseSuppressionDirection) AllValues() []NoiseSuppressionDirection {
	return []NoiseSuppressionDirection{
		NoiseSuppressionDirectionInbound,
		NoiseSuppressionDirectionOutbound,
		NoiseSuppressionDirectionBoth,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NoiseSuppressionDirection) MarshalText() ([]byte, error) {
	switch s {
	case NoiseSuppressionDirectionInbound:
		return []byte(s), nil
	case NoiseSuppressionDirectionOutbound:
		return []byte(s), nil
	case NoiseSuppressionDirectionBoth:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NoiseSuppressionDirection) UnmarshalText(data []byte) error {
	switch NoiseSuppressionDirection(data) {
	case NoiseSuppressionDirectionInbound:
		*s = NoiseSuppressionDirectionInbound
		return nil
	case NoiseSuppressionDirectionOutbound:
		*s = NoiseSuppressionDirectionOutbound
		return nil
	case NoiseSuppressionDirectionBoth:
		*s = NoiseSuppressionDirectionBoth
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/NoiseSuppressionStart
type NoiseSuppressionStart struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString                    `json:"command_id"`
	Direction OptNoiseSuppressionDirection `json:"direction"`
}

// GetClientState returns the value of ClientState.
func (s *NoiseSuppressionStart) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *NoiseSuppressionStart) GetCommandID() OptString {
	return s.CommandID
}

// GetDirection returns the value of Direction.
func (s *NoiseSuppressionStart) GetDirection() OptNoiseSuppressionDirection {
	return s.Direction
}

// SetClientState sets the value of ClientState.
func (s *NoiseSuppressionStart) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *NoiseSuppressionStart) SetCommandID(val OptString) {
	s.CommandID = val
}

// SetDirection sets the value of Direction.
func (s *NoiseSuppressionStart) SetDirection(val OptNoiseSuppressionDirection) {
	s.Direction = val
}

// Ref: #/components/schemas/NoiseSuppressionStop
type NoiseSuppressionStop struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetClientState returns the value of ClientState.
func (s *NoiseSuppressionStop) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *NoiseSuppressionStop) GetCommandID() OptString {
	return s.CommandID
}

// SetClientState sets the value of ClientState.
func (s *NoiseSuppressionStop) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *NoiseSuppressionStop) SetCommandID(val OptString) {
	s.CommandID = val
}

// A Notification Channel.
// Ref: #/components/schemas/NotificationChannel
type NotificationChannel struct {
	// A UUID.
	ID OptString `json:"id"`
	// A UUID reference to the associated Notification Profile.
	NotificationProfileID OptString `json:"notification_profile_id"`
	// A Channel Type ID.
	ChannelTypeID OptNotificationChannelChannelTypeID `json:"channel_type_id"`
	// The destination associated with the channel type.
	ChannelDestination OptString `json:"channel_destination"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt OptDateTime `json:"created_at"`
	// ISO 8601 formatted date indicating when the resource was updated.
	UpdatedAt OptDateTime `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *NotificationChannel) GetID() OptString {
	return s.ID
}

// GetNotificationProfileID returns the value of NotificationProfileID.
func (s *NotificationChannel) GetNotificationProfileID() OptString {
	return s.NotificationProfileID
}

// GetChannelTypeID returns the value of ChannelTypeID.
func (s *NotificationChannel) GetChannelTypeID() OptNotificationChannelChannelTypeID {
	return s.ChannelTypeID
}

// GetChannelDestination returns the value of ChannelDestination.
func (s *NotificationChannel) GetChannelDestination() OptString {
	return s.ChannelDestination
}

// GetCreatedAt returns the value of CreatedAt.
func (s *NotificationChannel) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *NotificationChannel) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *NotificationChannel) SetID(val OptString) {
	s.ID = val
}

// SetNotificationProfileID sets the value of NotificationProfileID.
func (s *NotificationChannel) SetNotificationProfileID(val OptString) {
	s.NotificationProfileID = val
}

// SetChannelTypeID sets the value of ChannelTypeID.
func (s *NotificationChannel) SetChannelTypeID(val OptNotificationChannelChannelTypeID) {
	s.ChannelTypeID = val
}

// SetChannelDestination sets the value of ChannelDestination.
func (s *NotificationChannel) SetChannelDestination(val OptString) {
	s.ChannelDestination = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *NotificationChannel) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *NotificationChannel) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// A Channel Type ID.
type NotificationChannelChannelTypeID string

const (
	NotificationChannelChannelTypeIDSMS     NotificationChannelChannelTypeID = "sms"
	NotificationChannelChannelTypeIDVoice   NotificationChannelChannelTypeID = "voice"
	NotificationChannelChannelTypeIDEmail   NotificationChannelChannelTypeID = "email"
	NotificationChannelChannelTypeIDWebhook NotificationChannelChannelTypeID = "webhook"
)

// AllValues returns all NotificationChannelChannelTypeID values.
func (NotificationChannelChannelTypeID) AllValues() []NotificationChannelChannelTypeID {
	return []NotificationChannelChannelTypeID{
		NotificationChannelChannelTypeIDSMS,
		NotificationChannelChannelTypeIDVoice,
		NotificationChannelChannelTypeIDEmail,
		NotificationChannelChannelTypeIDWebhook,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NotificationChannelChannelTypeID) MarshalText() ([]byte, error) {
	switch s {
	case NotificationChannelChannelTypeIDSMS:
		return []byte(s), nil
	case NotificationChannelChannelTypeIDVoice:
		return []byte(s), nil
	case NotificationChannelChannelTypeIDEmail:
		return []byte(s), nil
	case NotificationChannelChannelTypeIDWebhook:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NotificationChannelChannelTypeID) UnmarshalText(data []byte) error {
	switch NotificationChannelChannelTypeID(data) {
	case NotificationChannelChannelTypeIDSMS:
		*s = NotificationChannelChannelTypeIDSMS
		return nil
	case NotificationChannelChannelTypeIDVoice:
		*s = NotificationChannelChannelTypeIDVoice
		return nil
	case NotificationChannelChannelTypeIDEmail:
		*s = NotificationChannelChannelTypeIDEmail
		return nil
	case NotificationChannelChannelTypeIDWebhook:
		*s = NotificationChannelChannelTypeIDWebhook
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// High level health metrics about the number and it's messaging sending patterns.
// Ref: #/components/schemas/NumberHealthMetrics
type NumberHealthMetrics struct {
	// The number of messages analyzed for the health metrics.
	MessageCount int `json:"message_count"`
	// The ratio of messages received to the number of messages sent.
	InboundOutboundRatio float32 `json:"inbound_outbound_ratio"`
	// The ratio of messages sucessfully delivered to the number of messages attempted.
	SuccessRatio float32 `json:"success_ratio"`
	// The ratio of messages blocked for spam to the number of messages attempted.
	SpamRatio float32 `json:"spam_ratio"`
}

// GetMessageCount returns the value of MessageCount.
func (s *NumberHealthMetrics) GetMessageCount() int {
	return s.MessageCount
}

// GetInboundOutboundRatio returns the value of InboundOutboundRatio.
func (s *NumberHealthMetrics) GetInboundOutboundRatio() float32 {
	return s.InboundOutboundRatio
}

// GetSuccessRatio returns the value of SuccessRatio.
func (s *NumberHealthMetrics) GetSuccessRatio() float32 {
	return s.SuccessRatio
}

// GetSpamRatio returns the value of SpamRatio.
func (s *NumberHealthMetrics) GetSpamRatio() float32 {
	return s.SpamRatio
}

// SetMessageCount sets the value of MessageCount.
func (s *NumberHealthMetrics) SetMessageCount(val int) {
	s.MessageCount = val
}

// SetInboundOutboundRatio sets the value of InboundOutboundRatio.
func (s *NumberHealthMetrics) SetInboundOutboundRatio(val float32) {
	s.InboundOutboundRatio = val
}

// SetSuccessRatio sets the value of SuccessRatio.
func (s *NumberHealthMetrics) SetSuccessRatio(val float32) {
	s.SuccessRatio = val
}

// SetSpamRatio sets the value of SpamRatio.
func (s *NumberHealthMetrics) SetSpamRatio(val float32) {
	s.SpamRatio = val
}

// Ref: #/components/schemas/NumberLookupRecord
type NumberLookupRecord struct {
	// Identifies the type of record.
	RecordType OptString `json:"record_type"`
	// Region code that matches the specific country calling code.
	CountryCode OptString `json:"country_code"`
	// Hyphen-separated national number, preceded by the national destination code (NDC), with a 0 prefix,
	//  if an NDC is found.
	NationalFormat OptString `json:"national_format"`
	// E164-formatted phone number.
	PhoneNumber OptString `json:"phone_number"`
	// Unused.
	Fraud       OptString      `json:"fraud"`
	Carrier     OptCarrier     `json:"carrier"`
	CallerName  OptCallerName  `json:"caller_name"`
	Portability OptPortability `json:"portability"`
}

// GetRecordType returns the value of RecordType.
func (s *NumberLookupRecord) GetRecordType() OptString {
	return s.RecordType
}

// GetCountryCode returns the value of CountryCode.
func (s *NumberLookupRecord) GetCountryCode() OptString {
	return s.CountryCode
}

// GetNationalFormat returns the value of NationalFormat.
func (s *NumberLookupRecord) GetNationalFormat() OptString {
	return s.NationalFormat
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *NumberLookupRecord) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetFraud returns the value of Fraud.
func (s *NumberLookupRecord) GetFraud() OptString {
	return s.Fraud
}

// GetCarrier returns the value of Carrier.
func (s *NumberLookupRecord) GetCarrier() OptCarrier {
	return s.Carrier
}

// GetCallerName returns the value of CallerName.
func (s *NumberLookupRecord) GetCallerName() OptCallerName {
	return s.CallerName
}

// GetPortability returns the value of Portability.
func (s *NumberLookupRecord) GetPortability() OptPortability {
	return s.Portability
}

// SetRecordType sets the value of RecordType.
func (s *NumberLookupRecord) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetCountryCode sets the value of CountryCode.
func (s *NumberLookupRecord) SetCountryCode(val OptString) {
	s.CountryCode = val
}

// SetNationalFormat sets the value of NationalFormat.
func (s *NumberLookupRecord) SetNationalFormat(val OptString) {
	s.NationalFormat = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *NumberLookupRecord) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetFraud sets the value of Fraud.
func (s *NumberLookupRecord) SetFraud(val OptString) {
	s.Fraud = val
}

// SetCarrier sets the value of Carrier.
func (s *NumberLookupRecord) SetCarrier(val OptCarrier) {
	s.Carrier = val
}

// SetCallerName sets the value of CallerName.
func (s *NumberLookupRecord) SetCallerName(val OptCallerName) {
	s.CallerName = val
}

// SetPortability sets the value of Portability.
func (s *NumberLookupRecord) SetPortability(val OptPortability) {
	s.Portability = val
}

type NumberLookupResponse struct {
	Data OptNumberLookupRecord `json:"data"`
}

// GetData returns the value of Data.
func (s *NumberLookupResponse) GetData() OptNumberLookupRecord {
	return s.Data
}

// SetData sets the value of Data.
func (s *NumberLookupResponse) SetData(val OptNumberLookupRecord) {
	s.Data = val
}

func (*NumberLookupResponse) lookupNumberRes() {}

type NumberLookupType string

const (
	NumberLookupTypeCarrier    NumberLookupType = "carrier"
	NumberLookupTypeCallerName NumberLookupType = "caller-name"
)

// AllValues returns all NumberLookupType values.
func (NumberLookupType) AllValues() []NumberLookupType {
	return []NumberLookupType{
		NumberLookupTypeCarrier,
		NumberLookupTypeCallerName,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NumberLookupType) MarshalText() ([]byte, error) {
	switch s {
	case NumberLookupTypeCarrier:
		return []byte(s), nil
	case NumberLookupTypeCallerName:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NumberLookupType) UnmarshalText(data []byte) error {
	switch NumberLookupType(data) {
	case NumberLookupTypeCarrier:
		*s = NumberLookupTypeCarrier
		return nil
	case NumberLookupTypeCallerName:
		*s = NumberLookupTypeCallerName
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/NumberOrderDocument
type NumberOrderDocument struct {
	ID         OptUUID   `json:"id"`
	RecordType OptString `json:"record_type"`
	// The id of the file to associate as a number order document.
	FileID OptString `json:"file_id"`
	// Unique id for a requirement.
	RequirementsID OptString `json:"requirements_id"`
	// A customer reference string for customer look ups.
	CustomerReference OptString                             `json:"customer_reference"`
	RequirementType   OptNumberOrderDocumentRequirementType `json:"requirement_type"`
	// An ISO 8901 datetime string denoting when the number order document was uploaded.
	CreatedAt OptString `json:"created_at"`
}

// GetID returns the value of ID.
func (s *NumberOrderDocument) GetID() OptUUID {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *NumberOrderDocument) GetRecordType() OptString {
	return s.RecordType
}

// GetFileID returns the value of FileID.
func (s *NumberOrderDocument) GetFileID() OptString {
	return s.FileID
}

// GetRequirementsID returns the value of RequirementsID.
func (s *NumberOrderDocument) GetRequirementsID() OptString {
	return s.RequirementsID
}

// GetCustomerReference returns the value of CustomerReference.
func (s *NumberOrderDocument) GetCustomerReference() OptString {
	return s.CustomerReference
}

// GetRequirementType returns the value of RequirementType.
func (s *NumberOrderDocument) GetRequirementType() OptNumberOrderDocumentRequirementType {
	return s.RequirementType
}

// GetCreatedAt returns the value of CreatedAt.
func (s *NumberOrderDocument) GetCreatedAt() OptString {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *NumberOrderDocument) SetID(val OptUUID) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *NumberOrderDocument) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetFileID sets the value of FileID.
func (s *NumberOrderDocument) SetFileID(val OptString) {
	s.FileID = val
}

// SetRequirementsID sets the value of RequirementsID.
func (s *NumberOrderDocument) SetRequirementsID(val OptString) {
	s.RequirementsID = val
}

// SetCustomerReference sets the value of CustomerReference.
func (s *NumberOrderDocument) SetCustomerReference(val OptString) {
	s.CustomerReference = val
}

// SetRequirementType sets the value of RequirementType.
func (s *NumberOrderDocument) SetRequirementType(val OptNumberOrderDocumentRequirementType) {
	s.RequirementType = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *NumberOrderDocument) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

type NumberOrderDocumentRequirementType string

const (
	NumberOrderDocumentRequirementTypeAddressProof   NumberOrderDocumentRequirementType = "address_proof"
	NumberOrderDocumentRequirementTypeIdentification NumberOrderDocumentRequirementType = "identification"
	NumberOrderDocumentRequirementTypeRegForm        NumberOrderDocumentRequirementType = "reg_form"
)

// AllValues returns all NumberOrderDocumentRequirementType values.
func (NumberOrderDocumentRequirementType) AllValues() []NumberOrderDocumentRequirementType {
	return []NumberOrderDocumentRequirementType{
		NumberOrderDocumentRequirementTypeAddressProof,
		NumberOrderDocumentRequirementTypeIdentification,
		NumberOrderDocumentRequirementTypeRegForm,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NumberOrderDocumentRequirementType) MarshalText() ([]byte, error) {
	switch s {
	case NumberOrderDocumentRequirementTypeAddressProof:
		return []byte(s), nil
	case NumberOrderDocumentRequirementTypeIdentification:
		return []byte(s), nil
	case NumberOrderDocumentRequirementTypeRegForm:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NumberOrderDocumentRequirementType) UnmarshalText(data []byte) error {
	switch NumberOrderDocumentRequirementType(data) {
	case NumberOrderDocumentRequirementTypeAddressProof:
		*s = NumberOrderDocumentRequirementTypeAddressProof
		return nil
	case NumberOrderDocumentRequirementTypeIdentification:
		*s = NumberOrderDocumentRequirementTypeIdentification
		return nil
	case NumberOrderDocumentRequirementTypeRegForm:
		*s = NumberOrderDocumentRequirementTypeRegForm
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type NumberOrderDocumentResponse struct {
	Data OptNumberOrderDocument `json:"data"`
}

// GetData returns the value of Data.
func (s *NumberOrderDocumentResponse) GetData() OptNumberOrderDocument {
	return s.Data
}

// SetData sets the value of Data.
func (s *NumberOrderDocumentResponse) SetData(val OptNumberOrderDocument) {
	s.Data = val
}

func (*NumberOrderDocumentResponse) createNumberOrderDocumentRes()   {}
func (*NumberOrderDocumentResponse) retrieveNumberOrderDocumentRes() {}
func (*NumberOrderDocumentResponse) updateNumberOrderDocumentRes()   {}

// Ref: #/components/schemas/NumberOrderPhoneNumber
type NumberOrderPhoneNumber struct {
	ID                     OptUUID                                        `json:"id"`
	RecordType             OptString                                      `json:"record_type"`
	PhoneNumber            OptString                                      `json:"phone_number"`
	OrderRequestID         OptUUID                                        `json:"order_request_id"`
	SubNumberOrderID       OptUUID                                        `json:"sub_number_order_id"`
	CountryCode            OptString                                      `json:"country_code"`
	PhoneNumberType        OptNumberOrderPhoneNumberPhoneNumberType       `json:"phone_number_type"`
	RegulatoryRequirements []SubNumberOrderRegulatoryRequirementWithValue `json:"regulatory_requirements"`
	// True if all requirements are met for a phone number, false otherwise.
	RequirementsMet OptBool `json:"requirements_met"`
	// The status of the phone number in the order.
	Status OptNumberOrderPhoneNumberStatus `json:"status"`
}

// GetID returns the value of ID.
func (s *NumberOrderPhoneNumber) GetID() OptUUID {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *NumberOrderPhoneNumber) GetRecordType() OptString {
	return s.RecordType
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *NumberOrderPhoneNumber) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetOrderRequestID returns the value of OrderRequestID.
func (s *NumberOrderPhoneNumber) GetOrderRequestID() OptUUID {
	return s.OrderRequestID
}

// GetSubNumberOrderID returns the value of SubNumberOrderID.
func (s *NumberOrderPhoneNumber) GetSubNumberOrderID() OptUUID {
	return s.SubNumberOrderID
}

// GetCountryCode returns the value of CountryCode.
func (s *NumberOrderPhoneNumber) GetCountryCode() OptString {
	return s.CountryCode
}

// GetPhoneNumberType returns the value of PhoneNumberType.
func (s *NumberOrderPhoneNumber) GetPhoneNumberType() OptNumberOrderPhoneNumberPhoneNumberType {
	return s.PhoneNumberType
}

// GetRegulatoryRequirements returns the value of RegulatoryRequirements.
func (s *NumberOrderPhoneNumber) GetRegulatoryRequirements() []SubNumberOrderRegulatoryRequirementWithValue {
	return s.RegulatoryRequirements
}

// GetRequirementsMet returns the value of RequirementsMet.
func (s *NumberOrderPhoneNumber) GetRequirementsMet() OptBool {
	return s.RequirementsMet
}

// GetStatus returns the value of Status.
func (s *NumberOrderPhoneNumber) GetStatus() OptNumberOrderPhoneNumberStatus {
	return s.Status
}

// SetID sets the value of ID.
func (s *NumberOrderPhoneNumber) SetID(val OptUUID) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *NumberOrderPhoneNumber) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *NumberOrderPhoneNumber) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetOrderRequestID sets the value of OrderRequestID.
func (s *NumberOrderPhoneNumber) SetOrderRequestID(val OptUUID) {
	s.OrderRequestID = val
}

// SetSubNumberOrderID sets the value of SubNumberOrderID.
func (s *NumberOrderPhoneNumber) SetSubNumberOrderID(val OptUUID) {
	s.SubNumberOrderID = val
}

// SetCountryCode sets the value of CountryCode.
func (s *NumberOrderPhoneNumber) SetCountryCode(val OptString) {
	s.CountryCode = val
}

// SetPhoneNumberType sets the value of PhoneNumberType.
func (s *NumberOrderPhoneNumber) SetPhoneNumberType(val OptNumberOrderPhoneNumberPhoneNumberType) {
	s.PhoneNumberType = val
}

// SetRegulatoryRequirements sets the value of RegulatoryRequirements.
func (s *NumberOrderPhoneNumber) SetRegulatoryRequirements(val []SubNumberOrderRegulatoryRequirementWithValue) {
	s.RegulatoryRequirements = val
}

// SetRequirementsMet sets the value of RequirementsMet.
func (s *NumberOrderPhoneNumber) SetRequirementsMet(val OptBool) {
	s.RequirementsMet = val
}

// SetStatus sets the value of Status.
func (s *NumberOrderPhoneNumber) SetStatus(val OptNumberOrderPhoneNumberStatus) {
	s.Status = val
}

type NumberOrderPhoneNumberPhoneNumberType string

const (
	NumberOrderPhoneNumberPhoneNumberTypeLocal      NumberOrderPhoneNumberPhoneNumberType = "local"
	NumberOrderPhoneNumberPhoneNumberTypeTollFree   NumberOrderPhoneNumberPhoneNumberType = "toll_free"
	NumberOrderPhoneNumberPhoneNumberTypeMobile     NumberOrderPhoneNumberPhoneNumberType = "mobile"
	NumberOrderPhoneNumberPhoneNumberTypeNational   NumberOrderPhoneNumberPhoneNumberType = "national"
	NumberOrderPhoneNumberPhoneNumberTypeSharedCost NumberOrderPhoneNumberPhoneNumberType = "shared_cost"
	NumberOrderPhoneNumberPhoneNumberTypeLandline   NumberOrderPhoneNumberPhoneNumberType = "landline"
)

// AllValues returns all NumberOrderPhoneNumberPhoneNumberType values.
func (NumberOrderPhoneNumberPhoneNumberType) AllValues() []NumberOrderPhoneNumberPhoneNumberType {
	return []NumberOrderPhoneNumberPhoneNumberType{
		NumberOrderPhoneNumberPhoneNumberTypeLocal,
		NumberOrderPhoneNumberPhoneNumberTypeTollFree,
		NumberOrderPhoneNumberPhoneNumberTypeMobile,
		NumberOrderPhoneNumberPhoneNumberTypeNational,
		NumberOrderPhoneNumberPhoneNumberTypeSharedCost,
		NumberOrderPhoneNumberPhoneNumberTypeLandline,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NumberOrderPhoneNumberPhoneNumberType) MarshalText() ([]byte, error) {
	switch s {
	case NumberOrderPhoneNumberPhoneNumberTypeLocal:
		return []byte(s), nil
	case NumberOrderPhoneNumberPhoneNumberTypeTollFree:
		return []byte(s), nil
	case NumberOrderPhoneNumberPhoneNumberTypeMobile:
		return []byte(s), nil
	case NumberOrderPhoneNumberPhoneNumberTypeNational:
		return []byte(s), nil
	case NumberOrderPhoneNumberPhoneNumberTypeSharedCost:
		return []byte(s), nil
	case NumberOrderPhoneNumberPhoneNumberTypeLandline:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NumberOrderPhoneNumberPhoneNumberType) UnmarshalText(data []byte) error {
	switch NumberOrderPhoneNumberPhoneNumberType(data) {
	case NumberOrderPhoneNumberPhoneNumberTypeLocal:
		*s = NumberOrderPhoneNumberPhoneNumberTypeLocal
		return nil
	case NumberOrderPhoneNumberPhoneNumberTypeTollFree:
		*s = NumberOrderPhoneNumberPhoneNumberTypeTollFree
		return nil
	case NumberOrderPhoneNumberPhoneNumberTypeMobile:
		*s = NumberOrderPhoneNumberPhoneNumberTypeMobile
		return nil
	case NumberOrderPhoneNumberPhoneNumberTypeNational:
		*s = NumberOrderPhoneNumberPhoneNumberTypeNational
		return nil
	case NumberOrderPhoneNumberPhoneNumberTypeSharedCost:
		*s = NumberOrderPhoneNumberPhoneNumberTypeSharedCost
		return nil
	case NumberOrderPhoneNumberPhoneNumberTypeLandline:
		*s = NumberOrderPhoneNumberPhoneNumberTypeLandline
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type NumberOrderPhoneNumberResponse struct {
	Data OptNumberOrderPhoneNumber `json:"data"`
}

// GetData returns the value of Data.
func (s *NumberOrderPhoneNumberResponse) GetData() OptNumberOrderPhoneNumber {
	return s.Data
}

// SetData sets the value of Data.
func (s *NumberOrderPhoneNumberResponse) SetData(val OptNumberOrderPhoneNumber) {
	s.Data = val
}

func (*NumberOrderPhoneNumberResponse) getNumberOrderPhoneNumberRes()    {}
func (*NumberOrderPhoneNumberResponse) updateNumberOrderPhoneNumberRes() {}

// The status of the phone number in the order.
type NumberOrderPhoneNumberStatus string

const (
	NumberOrderPhoneNumberStatusPending NumberOrderPhoneNumberStatus = "pending"
	NumberOrderPhoneNumberStatusSuccess NumberOrderPhoneNumberStatus = "success"
	NumberOrderPhoneNumberStatusFailure NumberOrderPhoneNumberStatus = "failure"
)

// AllValues returns all NumberOrderPhoneNumberStatus values.
func (NumberOrderPhoneNumberStatus) AllValues() []NumberOrderPhoneNumberStatus {
	return []NumberOrderPhoneNumberStatus{
		NumberOrderPhoneNumberStatusPending,
		NumberOrderPhoneNumberStatusSuccess,
		NumberOrderPhoneNumberStatusFailure,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NumberOrderPhoneNumberStatus) MarshalText() ([]byte, error) {
	switch s {
	case NumberOrderPhoneNumberStatusPending:
		return []byte(s), nil
	case NumberOrderPhoneNumberStatusSuccess:
		return []byte(s), nil
	case NumberOrderPhoneNumberStatusFailure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NumberOrderPhoneNumberStatus) UnmarshalText(data []byte) error {
	switch NumberOrderPhoneNumberStatus(data) {
	case NumberOrderPhoneNumberStatusPending:
		*s = NumberOrderPhoneNumberStatusPending
		return nil
	case NumberOrderPhoneNumberStatusSuccess:
		*s = NumberOrderPhoneNumberStatusSuccess
		return nil
	case NumberOrderPhoneNumberStatusFailure:
		*s = NumberOrderPhoneNumberStatusFailure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/NumberReservation
type NumberReservation struct {
	ID           OptUUID               `json:"id"`
	RecordType   OptString             `json:"record_type"`
	PhoneNumbers []ReservedPhoneNumber `json:"phone_numbers"`
	// The status of the entire reservation.
	Status OptNumberReservationStatus `json:"status"`
	// A customer reference string for customer look ups.
	CustomerReference OptString `json:"customer_reference"`
	// An ISO 8901 datetime string denoting when the numbers reservation was created.
	CreatedAt OptString `json:"created_at"`
	// An ISO 8901 datetime string for when the number reservation was updated.
	UpdatedAt OptString `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *NumberReservation) GetID() OptUUID {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *NumberReservation) GetRecordType() OptString {
	return s.RecordType
}

// GetPhoneNumbers returns the value of PhoneNumbers.
func (s *NumberReservation) GetPhoneNumbers() []ReservedPhoneNumber {
	return s.PhoneNumbers
}

// GetStatus returns the value of Status.
func (s *NumberReservation) GetStatus() OptNumberReservationStatus {
	return s.Status
}

// GetCustomerReference returns the value of CustomerReference.
func (s *NumberReservation) GetCustomerReference() OptString {
	return s.CustomerReference
}

// GetCreatedAt returns the value of CreatedAt.
func (s *NumberReservation) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *NumberReservation) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *NumberReservation) SetID(val OptUUID) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *NumberReservation) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetPhoneNumbers sets the value of PhoneNumbers.
func (s *NumberReservation) SetPhoneNumbers(val []ReservedPhoneNumber) {
	s.PhoneNumbers = val
}

// SetStatus sets the value of Status.
func (s *NumberReservation) SetStatus(val OptNumberReservationStatus) {
	s.Status = val
}

// SetCustomerReference sets the value of CustomerReference.
func (s *NumberReservation) SetCustomerReference(val OptString) {
	s.CustomerReference = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *NumberReservation) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *NumberReservation) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

type NumberReservationResponse struct {
	Data OptNumberReservation `json:"data"`
}

// GetData returns the value of Data.
func (s *NumberReservationResponse) GetData() OptNumberReservation {
	return s.Data
}

// SetData sets the value of Data.
func (s *NumberReservationResponse) SetData(val OptNumberReservation) {
	s.Data = val
}

func (*NumberReservationResponse) createNumberReservationRes()           {}
func (*NumberReservationResponse) extendNumberReservationExpiryTimeRes() {}
func (*NumberReservationResponse) retrieveNumberReservationRes()         {}

// The status of the entire reservation.
type NumberReservationStatus string

const (
	NumberReservationStatusPending NumberReservationStatus = "pending"
	NumberReservationStatusSuccess NumberReservationStatus = "success"
	NumberReservationStatusFailure NumberReservationStatus = "failure"
)

// AllValues returns all NumberReservationStatus values.
func (NumberReservationStatus) AllValues() []NumberReservationStatus {
	return []NumberReservationStatus{
		NumberReservationStatusPending,
		NumberReservationStatusSuccess,
		NumberReservationStatusFailure,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NumberReservationStatus) MarshalText() ([]byte, error) {
	switch s {
	case NumberReservationStatusPending:
		return []byte(s), nil
	case NumberReservationStatusSuccess:
		return []byte(s), nil
	case NumberReservationStatusFailure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NumberReservationStatus) UnmarshalText(data []byte) error {
	switch NumberReservationStatus(data) {
	case NumberReservationStatusPending:
		*s = NumberReservationStatusPending
		return nil
	case NumberReservationStatusSuccess:
		*s = NumberReservationStatusSuccess
		return nil
	case NumberReservationStatusFailure:
		*s = NumberReservationStatusFailure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type OTAUpdateResponse struct {
	Data OptCompleteOTAUpdate `json:"data"`
}

// GetData returns the value of Data.
func (s *OTAUpdateResponse) GetData() OptCompleteOTAUpdate {
	return s.Data
}

// SetData sets the value of Data.
func (s *OTAUpdateResponse) SetData(val OptCompleteOTAUpdate) {
	s.Data = val
}

func (*OTAUpdateResponse) getOtaUpdateRes() {}

// NewOptAccountSid returns new OptAccountSid with value set to v.
func NewOptAccountSid(v AccountSid) OptAccountSid {
	return OptAccountSid{
		Value: v,
		Set:   true,
	}
}

// OptAccountSid is optional AccountSid.
type OptAccountSid struct {
	Value AccountSid
	Set   bool
}

// IsSet returns true if OptAccountSid was set.
func (o OptAccountSid) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountSid) Reset() {
	var v AccountSid
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountSid) SetTo(v AccountSid) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountSid) Get() (v AccountSid, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountSid) Or(d AccountSid) AccountSid {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAnchorsiteOverride returns new OptAnchorsiteOverride with value set to v.
func NewOptAnchorsiteOverride(v AnchorsiteOverride) OptAnchorsiteOverride {
	return OptAnchorsiteOverride{
		Value: v,
		Set:   true,
	}
}

// OptAnchorsiteOverride is optional AnchorsiteOverride.
type OptAnchorsiteOverride struct {
	Value AnchorsiteOverride
	Set   bool
}

// IsSet returns true if OptAnchorsiteOverride was set.
func (o OptAnchorsiteOverride) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnchorsiteOverride) Reset() {
	var v AnchorsiteOverride
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnchorsiteOverride) SetTo(v AnchorsiteOverride) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnchorsiteOverride) Get() (v AnchorsiteOverride, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnchorsiteOverride) Or(d AnchorsiteOverride) AnchorsiteOverride {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAnswerRequestPreferredCodecs returns new OptAnswerRequestPreferredCodecs with value set to v.
func NewOptAnswerRequestPreferredCodecs(v AnswerRequestPreferredCodecs) OptAnswerRequestPreferredCodecs {
	return OptAnswerRequestPreferredCodecs{
		Value: v,
		Set:   true,
	}
}

// OptAnswerRequestPreferredCodecs is optional AnswerRequestPreferredCodecs.
type OptAnswerRequestPreferredCodecs struct {
	Value AnswerRequestPreferredCodecs
	Set   bool
}

// IsSet returns true if OptAnswerRequestPreferredCodecs was set.
func (o OptAnswerRequestPreferredCodecs) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnswerRequestPreferredCodecs) Reset() {
	var v AnswerRequestPreferredCodecs
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnswerRequestPreferredCodecs) SetTo(v AnswerRequestPreferredCodecs) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnswerRequestPreferredCodecs) Get() (v AnswerRequestPreferredCodecs, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnswerRequestPreferredCodecs) Or(d AnswerRequestPreferredCodecs) AnswerRequestPreferredCodecs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAnswerRequestStreamTrack returns new OptAnswerRequestStreamTrack with value set to v.
func NewOptAnswerRequestStreamTrack(v AnswerRequestStreamTrack) OptAnswerRequestStreamTrack {
	return OptAnswerRequestStreamTrack{
		Value: v,
		Set:   true,
	}
}

// OptAnswerRequestStreamTrack is optional AnswerRequestStreamTrack.
type OptAnswerRequestStreamTrack struct {
	Value AnswerRequestStreamTrack
	Set   bool
}

// IsSet returns true if OptAnswerRequestStreamTrack was set.
func (o OptAnswerRequestStreamTrack) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnswerRequestStreamTrack) Reset() {
	var v AnswerRequestStreamTrack
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnswerRequestStreamTrack) SetTo(v AnswerRequestStreamTrack) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnswerRequestStreamTrack) Get() (v AnswerRequestStreamTrack, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnswerRequestStreamTrack) Or(d AnswerRequestStreamTrack) AnswerRequestStreamTrack {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAnswerRequestWebhookURLMethod returns new OptAnswerRequestWebhookURLMethod with value set to v.
func NewOptAnswerRequestWebhookURLMethod(v AnswerRequestWebhookURLMethod) OptAnswerRequestWebhookURLMethod {
	return OptAnswerRequestWebhookURLMethod{
		Value: v,
		Set:   true,
	}
}

// OptAnswerRequestWebhookURLMethod is optional AnswerRequestWebhookURLMethod.
type OptAnswerRequestWebhookURLMethod struct {
	Value AnswerRequestWebhookURLMethod
	Set   bool
}

// IsSet returns true if OptAnswerRequestWebhookURLMethod was set.
func (o OptAnswerRequestWebhookURLMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnswerRequestWebhookURLMethod) Reset() {
	var v AnswerRequestWebhookURLMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnswerRequestWebhookURLMethod) SetTo(v AnswerRequestWebhookURLMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnswerRequestWebhookURLMethod) Get() (v AnswerRequestWebhookURLMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnswerRequestWebhookURLMethod) Or(d AnswerRequestWebhookURLMethod) AnswerRequestWebhookURLMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptApplicationName returns new OptApplicationName with value set to v.
func NewOptApplicationName(v ApplicationName) OptApplicationName {
	return OptApplicationName{
		Value: v,
		Set:   true,
	}
}

// OptApplicationName is optional ApplicationName.
type OptApplicationName struct {
	Value ApplicationName
	Set   bool
}

// IsSet returns true if OptApplicationName was set.
func (o OptApplicationName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptApplicationName) Reset() {
	var v ApplicationName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptApplicationName) SetTo(v ApplicationName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptApplicationName) Get() (v ApplicationName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptApplicationName) Or(d ApplicationName) ApplicationName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAttemptStatus returns new OptAttemptStatus with value set to v.
func NewOptAttemptStatus(v AttemptStatus) OptAttemptStatus {
	return OptAttemptStatus{
		Value: v,
		Set:   true,
	}
}

// OptAttemptStatus is optional AttemptStatus.
type OptAttemptStatus struct {
	Value AttemptStatus
	Set   bool
}

// IsSet returns true if OptAttemptStatus was set.
func (o OptAttemptStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAttemptStatus) Reset() {
	var v AttemptStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAttemptStatus) SetTo(v AttemptStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAttemptStatus) Get() (v AttemptStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAttemptStatus) Or(d AttemptStatus) AttemptStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAudioTranscriptionRequestMultipartResponseFormat returns new OptAudioTranscriptionRequestMultipartResponseFormat with value set to v.
func NewOptAudioTranscriptionRequestMultipartResponseFormat(v AudioTranscriptionRequestMultipartResponseFormat) OptAudioTranscriptionRequestMultipartResponseFormat {
	return OptAudioTranscriptionRequestMultipartResponseFormat{
		Value: v,
		Set:   true,
	}
}

// OptAudioTranscriptionRequestMultipartResponseFormat is optional AudioTranscriptionRequestMultipartResponseFormat.
type OptAudioTranscriptionRequestMultipartResponseFormat struct {
	Value AudioTranscriptionRequestMultipartResponseFormat
	Set   bool
}

// IsSet returns true if OptAudioTranscriptionRequestMultipartResponseFormat was set.
func (o OptAudioTranscriptionRequestMultipartResponseFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAudioTranscriptionRequestMultipartResponseFormat) Reset() {
	var v AudioTranscriptionRequestMultipartResponseFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAudioTranscriptionRequestMultipartResponseFormat) SetTo(v AudioTranscriptionRequestMultipartResponseFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAudioTranscriptionRequestMultipartResponseFormat) Get() (v AudioTranscriptionRequestMultipartResponseFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAudioTranscriptionRequestMultipartResponseFormat) Or(d AudioTranscriptionRequestMultipartResponseFormat) AudioTranscriptionRequestMultipartResponseFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAudioTranscriptionRequestMultipartTimestampGranularities returns new OptAudioTranscriptionRequestMultipartTimestampGranularities with value set to v.
func NewOptAudioTranscriptionRequestMultipartTimestampGranularities(v AudioTranscriptionRequestMultipartTimestampGranularities) OptAudioTranscriptionRequestMultipartTimestampGranularities {
	return OptAudioTranscriptionRequestMultipartTimestampGranularities{
		Value: v,
		Set:   true,
	}
}

// OptAudioTranscriptionRequestMultipartTimestampGranularities is optional AudioTranscriptionRequestMultipartTimestampGranularities.
type OptAudioTranscriptionRequestMultipartTimestampGranularities struct {
	Value AudioTranscriptionRequestMultipartTimestampGranularities
	Set   bool
}

// IsSet returns true if OptAudioTranscriptionRequestMultipartTimestampGranularities was set.
func (o OptAudioTranscriptionRequestMultipartTimestampGranularities) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAudioTranscriptionRequestMultipartTimestampGranularities) Reset() {
	var v AudioTranscriptionRequestMultipartTimestampGranularities
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAudioTranscriptionRequestMultipartTimestampGranularities) SetTo(v AudioTranscriptionRequestMultipartTimestampGranularities) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAudioTranscriptionRequestMultipartTimestampGranularities) Get() (v AudioTranscriptionRequestMultipartTimestampGranularities, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAudioTranscriptionRequestMultipartTimestampGranularities) Or(d AudioTranscriptionRequestMultipartTimestampGranularities) AudioTranscriptionRequestMultipartTimestampGranularities {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAvailablePhoneNumberBlockRecordType returns new OptAvailablePhoneNumberBlockRecordType with value set to v.
func NewOptAvailablePhoneNumberBlockRecordType(v AvailablePhoneNumberBlockRecordType) OptAvailablePhoneNumberBlockRecordType {
	return OptAvailablePhoneNumberBlockRecordType{
		Value: v,
		Set:   true,
	}
}

// OptAvailablePhoneNumberBlockRecordType is optional AvailablePhoneNumberBlockRecordType.
type OptAvailablePhoneNumberBlockRecordType struct {
	Value AvailablePhoneNumberBlockRecordType
	Set   bool
}

// IsSet returns true if OptAvailablePhoneNumberBlockRecordType was set.
func (o OptAvailablePhoneNumberBlockRecordType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAvailablePhoneNumberBlockRecordType) Reset() {
	var v AvailablePhoneNumberBlockRecordType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAvailablePhoneNumberBlockRecordType) SetTo(v AvailablePhoneNumberBlockRecordType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAvailablePhoneNumberBlockRecordType) Get() (v AvailablePhoneNumberBlockRecordType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAvailablePhoneNumberBlockRecordType) Or(d AvailablePhoneNumberBlockRecordType) AvailablePhoneNumberBlockRecordType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAvailablePhoneNumberRecordType returns new OptAvailablePhoneNumberRecordType with value set to v.
func NewOptAvailablePhoneNumberRecordType(v AvailablePhoneNumberRecordType) OptAvailablePhoneNumberRecordType {
	return OptAvailablePhoneNumberRecordType{
		Value: v,
		Set:   true,
	}
}

// OptAvailablePhoneNumberRecordType is optional AvailablePhoneNumberRecordType.
type OptAvailablePhoneNumberRecordType struct {
	Value AvailablePhoneNumberRecordType
	Set   bool
}

// IsSet returns true if OptAvailablePhoneNumberRecordType was set.
func (o OptAvailablePhoneNumberRecordType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAvailablePhoneNumberRecordType) Reset() {
	var v AvailablePhoneNumberRecordType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAvailablePhoneNumberRecordType) SetTo(v AvailablePhoneNumberRecordType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAvailablePhoneNumberRecordType) Get() (v AvailablePhoneNumberRecordType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAvailablePhoneNumberRecordType) Or(d AvailablePhoneNumberRecordType) AvailablePhoneNumberRecordType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAvailablePhoneNumbersMetadata returns new OptAvailablePhoneNumbersMetadata with value set to v.
func NewOptAvailablePhoneNumbersMetadata(v AvailablePhoneNumbersMetadata) OptAvailablePhoneNumbersMetadata {
	return OptAvailablePhoneNumbersMetadata{
		Value: v,
		Set:   true,
	}
}

// OptAvailablePhoneNumbersMetadata is optional AvailablePhoneNumbersMetadata.
type OptAvailablePhoneNumbersMetadata struct {
	Value AvailablePhoneNumbersMetadata
	Set   bool
}

// IsSet returns true if OptAvailablePhoneNumbersMetadata was set.
func (o OptAvailablePhoneNumbersMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAvailablePhoneNumbersMetadata) Reset() {
	var v AvailablePhoneNumbersMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAvailablePhoneNumbersMetadata) SetTo(v AvailablePhoneNumbersMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAvailablePhoneNumbersMetadata) Get() (v AvailablePhoneNumbersMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAvailablePhoneNumbersMetadata) Or(d AvailablePhoneNumbersMetadata) AvailablePhoneNumbersMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAwsAccessKeyId returns new OptAwsAccessKeyId with value set to v.
func NewOptAwsAccessKeyId(v AwsAccessKeyId) OptAwsAccessKeyId {
	return OptAwsAccessKeyId{
		Value: v,
		Set:   true,
	}
}

// OptAwsAccessKeyId is optional AwsAccessKeyId.
type OptAwsAccessKeyId struct {
	Value AwsAccessKeyId
	Set   bool
}

// IsSet returns true if OptAwsAccessKeyId was set.
func (o OptAwsAccessKeyId) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAwsAccessKeyId) Reset() {
	var v AwsAccessKeyId
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAwsAccessKeyId) SetTo(v AwsAccessKeyId) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAwsAccessKeyId) Get() (v AwsAccessKeyId, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAwsAccessKeyId) Or(d AwsAccessKeyId) AwsAccessKeyId {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAwsSecretAccessKey returns new OptAwsSecretAccessKey with value set to v.
func NewOptAwsSecretAccessKey(v AwsSecretAccessKey) OptAwsSecretAccessKey {
	return OptAwsSecretAccessKey{
		Value: v,
		Set:   true,
	}
}

// OptAwsSecretAccessKey is optional AwsSecretAccessKey.
type OptAwsSecretAccessKey struct {
	Value AwsSecretAccessKey
	Set   bool
}

// IsSet returns true if OptAwsSecretAccessKey was set.
func (o OptAwsSecretAccessKey) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAwsSecretAccessKey) Reset() {
	var v AwsSecretAccessKey
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAwsSecretAccessKey) SetTo(v AwsSecretAccessKey) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAwsSecretAccessKey) Get() (v AwsSecretAccessKey, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAwsSecretAccessKey) Or(d AwsSecretAccessKey) AwsSecretAccessKey {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAzureAccountKey returns new OptAzureAccountKey with value set to v.
func NewOptAzureAccountKey(v AzureAccountKey) OptAzureAccountKey {
	return OptAzureAccountKey{
		Value: v,
		Set:   true,
	}
}

// OptAzureAccountKey is optional AzureAccountKey.
type OptAzureAccountKey struct {
	Value AzureAccountKey
	Set   bool
}

// IsSet returns true if OptAzureAccountKey was set.
func (o OptAzureAccountKey) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAzureAccountKey) Reset() {
	var v AzureAccountKey
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAzureAccountKey) SetTo(v AzureAccountKey) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAzureAccountKey) Get() (v AzureAccountKey, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAzureAccountKey) Or(d AzureAccountKey) AzureAccountKey {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAzureAccountName returns new OptAzureAccountName with value set to v.
func NewOptAzureAccountName(v AzureAccountName) OptAzureAccountName {
	return OptAzureAccountName{
		Value: v,
		Set:   true,
	}
}

// OptAzureAccountName is optional AzureAccountName.
type OptAzureAccountName struct {
	Value AzureAccountName
	Set   bool
}

// IsSet returns true if OptAzureAccountName was set.
func (o OptAzureAccountName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAzureAccountName) Reset() {
	var v AzureAccountName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAzureAccountName) SetTo(v AzureAccountName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAzureAccountName) Get() (v AzureAccountName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAzureAccountName) Or(d AzureAccountName) AzureAccountName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBucket returns new OptBucket with value set to v.
func NewOptBucket(v Bucket) OptBucket {
	return OptBucket{
		Value: v,
		Set:   true,
	}
}

// OptBucket is optional Bucket.
type OptBucket struct {
	Value Bucket
	Set   bool
}

// IsSet returns true if OptBucket was set.
func (o OptBucket) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBucket) Reset() {
	var v Bucket
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBucket) SetTo(v Bucket) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBucket) Get() (v Bucket, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBucket) Or(d Bucket) Bucket {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBulkCredentialResponseData returns new OptBulkCredentialResponseData with value set to v.
func NewOptBulkCredentialResponseData(v BulkCredentialResponseData) OptBulkCredentialResponseData {
	return OptBulkCredentialResponseData{
		Value: v,
		Set:   true,
	}
}

// OptBulkCredentialResponseData is optional BulkCredentialResponseData.
type OptBulkCredentialResponseData struct {
	Value BulkCredentialResponseData
	Set   bool
}

// IsSet returns true if OptBulkCredentialResponseData was set.
func (o OptBulkCredentialResponseData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBulkCredentialResponseData) Reset() {
	var v BulkCredentialResponseData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBulkCredentialResponseData) SetTo(v BulkCredentialResponseData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBulkCredentialResponseData) Get() (v BulkCredentialResponseData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBulkCredentialResponseData) Or(d BulkCredentialResponseData) BulkCredentialResponseData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBulkDeleteRoomRecordingsResponseData returns new OptBulkDeleteRoomRecordingsResponseData with value set to v.
func NewOptBulkDeleteRoomRecordingsResponseData(v BulkDeleteRoomRecordingsResponseData) OptBulkDeleteRoomRecordingsResponseData {
	return OptBulkDeleteRoomRecordingsResponseData{
		Value: v,
		Set:   true,
	}
}

// OptBulkDeleteRoomRecordingsResponseData is optional BulkDeleteRoomRecordingsResponseData.
type OptBulkDeleteRoomRecordingsResponseData struct {
	Value BulkDeleteRoomRecordingsResponseData
	Set   bool
}

// IsSet returns true if OptBulkDeleteRoomRecordingsResponseData was set.
func (o OptBulkDeleteRoomRecordingsResponseData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBulkDeleteRoomRecordingsResponseData) Reset() {
	var v BulkDeleteRoomRecordingsResponseData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBulkDeleteRoomRecordingsResponseData) SetTo(v BulkDeleteRoomRecordingsResponseData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBulkDeleteRoomRecordingsResponseData) Get() (v BulkDeleteRoomRecordingsResponseData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBulkDeleteRoomRecordingsResponseData) Or(d BulkDeleteRoomRecordingsResponseData) BulkDeleteRoomRecordingsResponseData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCall returns new OptCall with value set to v.
func NewOptCall(v Call) OptCall {
	return OptCall{
		Value: v,
		Set:   true,
	}
}

// OptCall is optional Call.
type OptCall struct {
	Value Call
	Set   bool
}

// IsSet returns true if OptCall was set.
func (o OptCall) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCall) Reset() {
	var v Call
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCall) SetTo(v Call) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCall) Get() (v Call, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCall) Or(d Call) Call {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallControlApplication returns new OptCallControlApplication with value set to v.
func NewOptCallControlApplication(v CallControlApplication) OptCallControlApplication {
	return OptCallControlApplication{
		Value: v,
		Set:   true,
	}
}

// OptCallControlApplication is optional CallControlApplication.
type OptCallControlApplication struct {
	Value CallControlApplication
	Set   bool
}

// IsSet returns true if OptCallControlApplication was set.
func (o OptCallControlApplication) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallControlApplication) Reset() {
	var v CallControlApplication
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallControlApplication) SetTo(v CallControlApplication) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallControlApplication) Get() (v CallControlApplication, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallControlApplication) Or(d CallControlApplication) CallControlApplication {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallControlApplicationDtmfType returns new OptCallControlApplicationDtmfType with value set to v.
func NewOptCallControlApplicationDtmfType(v CallControlApplicationDtmfType) OptCallControlApplicationDtmfType {
	return OptCallControlApplicationDtmfType{
		Value: v,
		Set:   true,
	}
}

// OptCallControlApplicationDtmfType is optional CallControlApplicationDtmfType.
type OptCallControlApplicationDtmfType struct {
	Value CallControlApplicationDtmfType
	Set   bool
}

// IsSet returns true if OptCallControlApplicationDtmfType was set.
func (o OptCallControlApplicationDtmfType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallControlApplicationDtmfType) Reset() {
	var v CallControlApplicationDtmfType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallControlApplicationDtmfType) SetTo(v CallControlApplicationDtmfType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallControlApplicationDtmfType) Get() (v CallControlApplicationDtmfType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallControlApplicationDtmfType) Or(d CallControlApplicationDtmfType) CallControlApplicationDtmfType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallControlApplicationInbound returns new OptCallControlApplicationInbound with value set to v.
func NewOptCallControlApplicationInbound(v CallControlApplicationInbound) OptCallControlApplicationInbound {
	return OptCallControlApplicationInbound{
		Value: v,
		Set:   true,
	}
}

// OptCallControlApplicationInbound is optional CallControlApplicationInbound.
type OptCallControlApplicationInbound struct {
	Value CallControlApplicationInbound
	Set   bool
}

// IsSet returns true if OptCallControlApplicationInbound was set.
func (o OptCallControlApplicationInbound) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallControlApplicationInbound) Reset() {
	var v CallControlApplicationInbound
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallControlApplicationInbound) SetTo(v CallControlApplicationInbound) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallControlApplicationInbound) Get() (v CallControlApplicationInbound, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallControlApplicationInbound) Or(d CallControlApplicationInbound) CallControlApplicationInbound {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallControlApplicationInboundSipSubdomainReceiveSettings returns new OptCallControlApplicationInboundSipSubdomainReceiveSettings with value set to v.
func NewOptCallControlApplicationInboundSipSubdomainReceiveSettings(v CallControlApplicationInboundSipSubdomainReceiveSettings) OptCallControlApplicationInboundSipSubdomainReceiveSettings {
	return OptCallControlApplicationInboundSipSubdomainReceiveSettings{
		Value: v,
		Set:   true,
	}
}

// OptCallControlApplicationInboundSipSubdomainReceiveSettings is optional CallControlApplicationInboundSipSubdomainReceiveSettings.
type OptCallControlApplicationInboundSipSubdomainReceiveSettings struct {
	Value CallControlApplicationInboundSipSubdomainReceiveSettings
	Set   bool
}

// IsSet returns true if OptCallControlApplicationInboundSipSubdomainReceiveSettings was set.
func (o OptCallControlApplicationInboundSipSubdomainReceiveSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallControlApplicationInboundSipSubdomainReceiveSettings) Reset() {
	var v CallControlApplicationInboundSipSubdomainReceiveSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallControlApplicationInboundSipSubdomainReceiveSettings) SetTo(v CallControlApplicationInboundSipSubdomainReceiveSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallControlApplicationInboundSipSubdomainReceiveSettings) Get() (v CallControlApplicationInboundSipSubdomainReceiveSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallControlApplicationInboundSipSubdomainReceiveSettings) Or(d CallControlApplicationInboundSipSubdomainReceiveSettings) CallControlApplicationInboundSipSubdomainReceiveSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallControlApplicationOutbound returns new OptCallControlApplicationOutbound with value set to v.
func NewOptCallControlApplicationOutbound(v CallControlApplicationOutbound) OptCallControlApplicationOutbound {
	return OptCallControlApplicationOutbound{
		Value: v,
		Set:   true,
	}
}

// OptCallControlApplicationOutbound is optional CallControlApplicationOutbound.
type OptCallControlApplicationOutbound struct {
	Value CallControlApplicationOutbound
	Set   bool
}

// IsSet returns true if OptCallControlApplicationOutbound was set.
func (o OptCallControlApplicationOutbound) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallControlApplicationOutbound) Reset() {
	var v CallControlApplicationOutbound
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallControlApplicationOutbound) SetTo(v CallControlApplicationOutbound) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallControlApplicationOutbound) Get() (v CallControlApplicationOutbound, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallControlApplicationOutbound) Or(d CallControlApplicationOutbound) CallControlApplicationOutbound {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallControlApplicationRecordType returns new OptCallControlApplicationRecordType with value set to v.
func NewOptCallControlApplicationRecordType(v CallControlApplicationRecordType) OptCallControlApplicationRecordType {
	return OptCallControlApplicationRecordType{
		Value: v,
		Set:   true,
	}
}

// OptCallControlApplicationRecordType is optional CallControlApplicationRecordType.
type OptCallControlApplicationRecordType struct {
	Value CallControlApplicationRecordType
	Set   bool
}

// IsSet returns true if OptCallControlApplicationRecordType was set.
func (o OptCallControlApplicationRecordType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallControlApplicationRecordType) Reset() {
	var v CallControlApplicationRecordType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallControlApplicationRecordType) SetTo(v CallControlApplicationRecordType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallControlApplicationRecordType) Get() (v CallControlApplicationRecordType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallControlApplicationRecordType) Or(d CallControlApplicationRecordType) CallControlApplicationRecordType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallControlApplicationWebhookAPIVersion returns new OptCallControlApplicationWebhookAPIVersion with value set to v.
func NewOptCallControlApplicationWebhookAPIVersion(v CallControlApplicationWebhookAPIVersion) OptCallControlApplicationWebhookAPIVersion {
	return OptCallControlApplicationWebhookAPIVersion{
		Value: v,
		Set:   true,
	}
}

// OptCallControlApplicationWebhookAPIVersion is optional CallControlApplicationWebhookAPIVersion.
type OptCallControlApplicationWebhookAPIVersion struct {
	Value CallControlApplicationWebhookAPIVersion
	Set   bool
}

// IsSet returns true if OptCallControlApplicationWebhookAPIVersion was set.
func (o OptCallControlApplicationWebhookAPIVersion) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallControlApplicationWebhookAPIVersion) Reset() {
	var v CallControlApplicationWebhookAPIVersion
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallControlApplicationWebhookAPIVersion) SetTo(v CallControlApplicationWebhookAPIVersion) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallControlApplicationWebhookAPIVersion) Get() (v CallControlApplicationWebhookAPIVersion, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallControlApplicationWebhookAPIVersion) Or(d CallControlApplicationWebhookAPIVersion) CallControlApplicationWebhookAPIVersion {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallControlCommandResult returns new OptCallControlCommandResult with value set to v.
func NewOptCallControlCommandResult(v CallControlCommandResult) OptCallControlCommandResult {
	return OptCallControlCommandResult{
		Value: v,
		Set:   true,
	}
}

// OptCallControlCommandResult is optional CallControlCommandResult.
type OptCallControlCommandResult struct {
	Value CallControlCommandResult
	Set   bool
}

// IsSet returns true if OptCallControlCommandResult was set.
func (o OptCallControlCommandResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallControlCommandResult) Reset() {
	var v CallControlCommandResult
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallControlCommandResult) SetTo(v CallControlCommandResult) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallControlCommandResult) Get() (v CallControlCommandResult, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallControlCommandResult) Or(d CallControlCommandResult) CallControlCommandResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallControlId returns new OptCallControlId with value set to v.
func NewOptCallControlId(v CallControlId) OptCallControlId {
	return OptCallControlId{
		Value: v,
		Set:   true,
	}
}

// OptCallControlId is optional CallControlId.
type OptCallControlId struct {
	Value CallControlId
	Set   bool
}

// IsSet returns true if OptCallControlId was set.
func (o OptCallControlId) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallControlId) Reset() {
	var v CallControlId
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallControlId) SetTo(v CallControlId) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallControlId) Get() (v CallControlId, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallControlId) Or(d CallControlId) CallControlId {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallForwarding returns new OptCallForwarding with value set to v.
func NewOptCallForwarding(v CallForwarding) OptCallForwarding {
	return OptCallForwarding{
		Value: v,
		Set:   true,
	}
}

// OptCallForwarding is optional CallForwarding.
type OptCallForwarding struct {
	Value CallForwarding
	Set   bool
}

// IsSet returns true if OptCallForwarding was set.
func (o OptCallForwarding) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallForwarding) Reset() {
	var v CallForwarding
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallForwarding) SetTo(v CallForwarding) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallForwarding) Get() (v CallForwarding, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallForwarding) Or(d CallForwarding) CallForwarding {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallForwardingForwardingType returns new OptCallForwardingForwardingType with value set to v.
func NewOptCallForwardingForwardingType(v CallForwardingForwardingType) OptCallForwardingForwardingType {
	return OptCallForwardingForwardingType{
		Value: v,
		Set:   true,
	}
}

// OptCallForwardingForwardingType is optional CallForwardingForwardingType.
type OptCallForwardingForwardingType struct {
	Value CallForwardingForwardingType
	Set   bool
}

// IsSet returns true if OptCallForwardingForwardingType was set.
func (o OptCallForwardingForwardingType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallForwardingForwardingType) Reset() {
	var v CallForwardingForwardingType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallForwardingForwardingType) SetTo(v CallForwardingForwardingType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallForwardingForwardingType) Get() (v CallForwardingForwardingType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallForwardingForwardingType) Or(d CallForwardingForwardingType) CallForwardingForwardingType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallReasonsItemGoogleVerificationStatus returns new OptCallReasonsItemGoogleVerificationStatus with value set to v.
func NewOptCallReasonsItemGoogleVerificationStatus(v CallReasonsItemGoogleVerificationStatus) OptCallReasonsItemGoogleVerificationStatus {
	return OptCallReasonsItemGoogleVerificationStatus{
		Value: v,
		Set:   true,
	}
}

// OptCallReasonsItemGoogleVerificationStatus is optional CallReasonsItemGoogleVerificationStatus.
type OptCallReasonsItemGoogleVerificationStatus struct {
	Value CallReasonsItemGoogleVerificationStatus
	Set   bool
}

// IsSet returns true if OptCallReasonsItemGoogleVerificationStatus was set.
func (o OptCallReasonsItemGoogleVerificationStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallReasonsItemGoogleVerificationStatus) Reset() {
	var v CallReasonsItemGoogleVerificationStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallReasonsItemGoogleVerificationStatus) SetTo(v CallReasonsItemGoogleVerificationStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallReasonsItemGoogleVerificationStatus) Get() (v CallReasonsItemGoogleVerificationStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallReasonsItemGoogleVerificationStatus) Or(d CallReasonsItemGoogleVerificationStatus) CallReasonsItemGoogleVerificationStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRecording returns new OptCallRecording with value set to v.
func NewOptCallRecording(v CallRecording) OptCallRecording {
	return OptCallRecording{
		Value: v,
		Set:   true,
	}
}

// OptCallRecording is optional CallRecording.
type OptCallRecording struct {
	Value CallRecording
	Set   bool
}

// IsSet returns true if OptCallRecording was set.
func (o OptCallRecording) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRecording) Reset() {
	var v CallRecording
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRecording) SetTo(v CallRecording) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRecording) Get() (v CallRecording, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRecording) Or(d CallRecording) CallRecording {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRecordingInboundCallRecordingChannels returns new OptCallRecordingInboundCallRecordingChannels with value set to v.
func NewOptCallRecordingInboundCallRecordingChannels(v CallRecordingInboundCallRecordingChannels) OptCallRecordingInboundCallRecordingChannels {
	return OptCallRecordingInboundCallRecordingChannels{
		Value: v,
		Set:   true,
	}
}

// OptCallRecordingInboundCallRecordingChannels is optional CallRecordingInboundCallRecordingChannels.
type OptCallRecordingInboundCallRecordingChannels struct {
	Value CallRecordingInboundCallRecordingChannels
	Set   bool
}

// IsSet returns true if OptCallRecordingInboundCallRecordingChannels was set.
func (o OptCallRecordingInboundCallRecordingChannels) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRecordingInboundCallRecordingChannels) Reset() {
	var v CallRecordingInboundCallRecordingChannels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRecordingInboundCallRecordingChannels) SetTo(v CallRecordingInboundCallRecordingChannels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRecordingInboundCallRecordingChannels) Get() (v CallRecordingInboundCallRecordingChannels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRecordingInboundCallRecordingChannels) Or(d CallRecordingInboundCallRecordingChannels) CallRecordingInboundCallRecordingChannels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRecordingInboundCallRecordingFormat returns new OptCallRecordingInboundCallRecordingFormat with value set to v.
func NewOptCallRecordingInboundCallRecordingFormat(v CallRecordingInboundCallRecordingFormat) OptCallRecordingInboundCallRecordingFormat {
	return OptCallRecordingInboundCallRecordingFormat{
		Value: v,
		Set:   true,
	}
}

// OptCallRecordingInboundCallRecordingFormat is optional CallRecordingInboundCallRecordingFormat.
type OptCallRecordingInboundCallRecordingFormat struct {
	Value CallRecordingInboundCallRecordingFormat
	Set   bool
}

// IsSet returns true if OptCallRecordingInboundCallRecordingFormat was set.
func (o OptCallRecordingInboundCallRecordingFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRecordingInboundCallRecordingFormat) Reset() {
	var v CallRecordingInboundCallRecordingFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRecordingInboundCallRecordingFormat) SetTo(v CallRecordingInboundCallRecordingFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRecordingInboundCallRecordingFormat) Get() (v CallRecordingInboundCallRecordingFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRecordingInboundCallRecordingFormat) Or(d CallRecordingInboundCallRecordingFormat) CallRecordingInboundCallRecordingFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestAnsweringMachineDetection returns new OptCallRequestAnsweringMachineDetection with value set to v.
func NewOptCallRequestAnsweringMachineDetection(v CallRequestAnsweringMachineDetection) OptCallRequestAnsweringMachineDetection {
	return OptCallRequestAnsweringMachineDetection{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestAnsweringMachineDetection is optional CallRequestAnsweringMachineDetection.
type OptCallRequestAnsweringMachineDetection struct {
	Value CallRequestAnsweringMachineDetection
	Set   bool
}

// IsSet returns true if OptCallRequestAnsweringMachineDetection was set.
func (o OptCallRequestAnsweringMachineDetection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestAnsweringMachineDetection) Reset() {
	var v CallRequestAnsweringMachineDetection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestAnsweringMachineDetection) SetTo(v CallRequestAnsweringMachineDetection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestAnsweringMachineDetection) Get() (v CallRequestAnsweringMachineDetection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestAnsweringMachineDetection) Or(d CallRequestAnsweringMachineDetection) CallRequestAnsweringMachineDetection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestAnsweringMachineDetectionConfig returns new OptCallRequestAnsweringMachineDetectionConfig with value set to v.
func NewOptCallRequestAnsweringMachineDetectionConfig(v CallRequestAnsweringMachineDetectionConfig) OptCallRequestAnsweringMachineDetectionConfig {
	return OptCallRequestAnsweringMachineDetectionConfig{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestAnsweringMachineDetectionConfig is optional CallRequestAnsweringMachineDetectionConfig.
type OptCallRequestAnsweringMachineDetectionConfig struct {
	Value CallRequestAnsweringMachineDetectionConfig
	Set   bool
}

// IsSet returns true if OptCallRequestAnsweringMachineDetectionConfig was set.
func (o OptCallRequestAnsweringMachineDetectionConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestAnsweringMachineDetectionConfig) Reset() {
	var v CallRequestAnsweringMachineDetectionConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestAnsweringMachineDetectionConfig) SetTo(v CallRequestAnsweringMachineDetectionConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestAnsweringMachineDetectionConfig) Get() (v CallRequestAnsweringMachineDetectionConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestAnsweringMachineDetectionConfig) Or(d CallRequestAnsweringMachineDetectionConfig) CallRequestAnsweringMachineDetectionConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestConferenceConfig returns new OptCallRequestConferenceConfig with value set to v.
func NewOptCallRequestConferenceConfig(v CallRequestConferenceConfig) OptCallRequestConferenceConfig {
	return OptCallRequestConferenceConfig{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestConferenceConfig is optional CallRequestConferenceConfig.
type OptCallRequestConferenceConfig struct {
	Value CallRequestConferenceConfig
	Set   bool
}

// IsSet returns true if OptCallRequestConferenceConfig was set.
func (o OptCallRequestConferenceConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestConferenceConfig) Reset() {
	var v CallRequestConferenceConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestConferenceConfig) SetTo(v CallRequestConferenceConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestConferenceConfig) Get() (v CallRequestConferenceConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestConferenceConfig) Or(d CallRequestConferenceConfig) CallRequestConferenceConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestConferenceConfigBeepEnabled returns new OptCallRequestConferenceConfigBeepEnabled with value set to v.
func NewOptCallRequestConferenceConfigBeepEnabled(v CallRequestConferenceConfigBeepEnabled) OptCallRequestConferenceConfigBeepEnabled {
	return OptCallRequestConferenceConfigBeepEnabled{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestConferenceConfigBeepEnabled is optional CallRequestConferenceConfigBeepEnabled.
type OptCallRequestConferenceConfigBeepEnabled struct {
	Value CallRequestConferenceConfigBeepEnabled
	Set   bool
}

// IsSet returns true if OptCallRequestConferenceConfigBeepEnabled was set.
func (o OptCallRequestConferenceConfigBeepEnabled) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestConferenceConfigBeepEnabled) Reset() {
	var v CallRequestConferenceConfigBeepEnabled
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestConferenceConfigBeepEnabled) SetTo(v CallRequestConferenceConfigBeepEnabled) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestConferenceConfigBeepEnabled) Get() (v CallRequestConferenceConfigBeepEnabled, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestConferenceConfigBeepEnabled) Or(d CallRequestConferenceConfigBeepEnabled) CallRequestConferenceConfigBeepEnabled {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestConferenceConfigSupervisorRole returns new OptCallRequestConferenceConfigSupervisorRole with value set to v.
func NewOptCallRequestConferenceConfigSupervisorRole(v CallRequestConferenceConfigSupervisorRole) OptCallRequestConferenceConfigSupervisorRole {
	return OptCallRequestConferenceConfigSupervisorRole{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestConferenceConfigSupervisorRole is optional CallRequestConferenceConfigSupervisorRole.
type OptCallRequestConferenceConfigSupervisorRole struct {
	Value CallRequestConferenceConfigSupervisorRole
	Set   bool
}

// IsSet returns true if OptCallRequestConferenceConfigSupervisorRole was set.
func (o OptCallRequestConferenceConfigSupervisorRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestConferenceConfigSupervisorRole) Reset() {
	var v CallRequestConferenceConfigSupervisorRole
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestConferenceConfigSupervisorRole) SetTo(v CallRequestConferenceConfigSupervisorRole) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestConferenceConfigSupervisorRole) Get() (v CallRequestConferenceConfigSupervisorRole, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestConferenceConfigSupervisorRole) Or(d CallRequestConferenceConfigSupervisorRole) CallRequestConferenceConfigSupervisorRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestMediaEncryption returns new OptCallRequestMediaEncryption with value set to v.
func NewOptCallRequestMediaEncryption(v CallRequestMediaEncryption) OptCallRequestMediaEncryption {
	return OptCallRequestMediaEncryption{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestMediaEncryption is optional CallRequestMediaEncryption.
type OptCallRequestMediaEncryption struct {
	Value CallRequestMediaEncryption
	Set   bool
}

// IsSet returns true if OptCallRequestMediaEncryption was set.
func (o OptCallRequestMediaEncryption) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestMediaEncryption) Reset() {
	var v CallRequestMediaEncryption
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestMediaEncryption) SetTo(v CallRequestMediaEncryption) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestMediaEncryption) Get() (v CallRequestMediaEncryption, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestMediaEncryption) Or(d CallRequestMediaEncryption) CallRequestMediaEncryption {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestRecord returns new OptCallRequestRecord with value set to v.
func NewOptCallRequestRecord(v CallRequestRecord) OptCallRequestRecord {
	return OptCallRequestRecord{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestRecord is optional CallRequestRecord.
type OptCallRequestRecord struct {
	Value CallRequestRecord
	Set   bool
}

// IsSet returns true if OptCallRequestRecord was set.
func (o OptCallRequestRecord) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestRecord) Reset() {
	var v CallRequestRecord
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestRecord) SetTo(v CallRequestRecord) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestRecord) Get() (v CallRequestRecord, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestRecord) Or(d CallRequestRecord) CallRequestRecord {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestRecordChannels returns new OptCallRequestRecordChannels with value set to v.
func NewOptCallRequestRecordChannels(v CallRequestRecordChannels) OptCallRequestRecordChannels {
	return OptCallRequestRecordChannels{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestRecordChannels is optional CallRequestRecordChannels.
type OptCallRequestRecordChannels struct {
	Value CallRequestRecordChannels
	Set   bool
}

// IsSet returns true if OptCallRequestRecordChannels was set.
func (o OptCallRequestRecordChannels) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestRecordChannels) Reset() {
	var v CallRequestRecordChannels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestRecordChannels) SetTo(v CallRequestRecordChannels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestRecordChannels) Get() (v CallRequestRecordChannels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestRecordChannels) Or(d CallRequestRecordChannels) CallRequestRecordChannels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestRecordFormat returns new OptCallRequestRecordFormat with value set to v.
func NewOptCallRequestRecordFormat(v CallRequestRecordFormat) OptCallRequestRecordFormat {
	return OptCallRequestRecordFormat{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestRecordFormat is optional CallRequestRecordFormat.
type OptCallRequestRecordFormat struct {
	Value CallRequestRecordFormat
	Set   bool
}

// IsSet returns true if OptCallRequestRecordFormat was set.
func (o OptCallRequestRecordFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestRecordFormat) Reset() {
	var v CallRequestRecordFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestRecordFormat) SetTo(v CallRequestRecordFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestRecordFormat) Get() (v CallRequestRecordFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestRecordFormat) Or(d CallRequestRecordFormat) CallRequestRecordFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestRecordTrim returns new OptCallRequestRecordTrim with value set to v.
func NewOptCallRequestRecordTrim(v CallRequestRecordTrim) OptCallRequestRecordTrim {
	return OptCallRequestRecordTrim{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestRecordTrim is optional CallRequestRecordTrim.
type OptCallRequestRecordTrim struct {
	Value CallRequestRecordTrim
	Set   bool
}

// IsSet returns true if OptCallRequestRecordTrim was set.
func (o OptCallRequestRecordTrim) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestRecordTrim) Reset() {
	var v CallRequestRecordTrim
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestRecordTrim) SetTo(v CallRequestRecordTrim) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestRecordTrim) Get() (v CallRequestRecordTrim, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestRecordTrim) Or(d CallRequestRecordTrim) CallRequestRecordTrim {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestSipTransportProtocol returns new OptCallRequestSipTransportProtocol with value set to v.
func NewOptCallRequestSipTransportProtocol(v CallRequestSipTransportProtocol) OptCallRequestSipTransportProtocol {
	return OptCallRequestSipTransportProtocol{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestSipTransportProtocol is optional CallRequestSipTransportProtocol.
type OptCallRequestSipTransportProtocol struct {
	Value CallRequestSipTransportProtocol
	Set   bool
}

// IsSet returns true if OptCallRequestSipTransportProtocol was set.
func (o OptCallRequestSipTransportProtocol) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestSipTransportProtocol) Reset() {
	var v CallRequestSipTransportProtocol
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestSipTransportProtocol) SetTo(v CallRequestSipTransportProtocol) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestSipTransportProtocol) Get() (v CallRequestSipTransportProtocol, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestSipTransportProtocol) Or(d CallRequestSipTransportProtocol) CallRequestSipTransportProtocol {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestStreamTrack returns new OptCallRequestStreamTrack with value set to v.
func NewOptCallRequestStreamTrack(v CallRequestStreamTrack) OptCallRequestStreamTrack {
	return OptCallRequestStreamTrack{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestStreamTrack is optional CallRequestStreamTrack.
type OptCallRequestStreamTrack struct {
	Value CallRequestStreamTrack
	Set   bool
}

// IsSet returns true if OptCallRequestStreamTrack was set.
func (o OptCallRequestStreamTrack) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestStreamTrack) Reset() {
	var v CallRequestStreamTrack
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestStreamTrack) SetTo(v CallRequestStreamTrack) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestStreamTrack) Get() (v CallRequestStreamTrack, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestStreamTrack) Or(d CallRequestStreamTrack) CallRequestStreamTrack {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallRequestWebhookURLMethod returns new OptCallRequestWebhookURLMethod with value set to v.
func NewOptCallRequestWebhookURLMethod(v CallRequestWebhookURLMethod) OptCallRequestWebhookURLMethod {
	return OptCallRequestWebhookURLMethod{
		Value: v,
		Set:   true,
	}
}

// OptCallRequestWebhookURLMethod is optional CallRequestWebhookURLMethod.
type OptCallRequestWebhookURLMethod struct {
	Value CallRequestWebhookURLMethod
	Set   bool
}

// IsSet returns true if OptCallRequestWebhookURLMethod was set.
func (o OptCallRequestWebhookURLMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallRequestWebhookURLMethod) Reset() {
	var v CallRequestWebhookURLMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallRequestWebhookURLMethod) SetTo(v CallRequestWebhookURLMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallRequestWebhookURLMethod) Get() (v CallRequestWebhookURLMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallRequestWebhookURLMethod) Or(d CallRequestWebhookURLMethod) CallRequestWebhookURLMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallResource returns new OptCallResource with value set to v.
func NewOptCallResource(v CallResource) OptCallResource {
	return OptCallResource{
		Value: v,
		Set:   true,
	}
}

// OptCallResource is optional CallResource.
type OptCallResource struct {
	Value CallResource
	Set   bool
}

// IsSet returns true if OptCallResource was set.
func (o OptCallResource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallResource) Reset() {
	var v CallResource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallResource) SetTo(v CallResource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallResource) Get() (v CallResource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallResource) Or(d CallResource) CallResource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallResourceAnsweredBy returns new OptCallResourceAnsweredBy with value set to v.
func NewOptCallResourceAnsweredBy(v CallResourceAnsweredBy) OptCallResourceAnsweredBy {
	return OptCallResourceAnsweredBy{
		Value: v,
		Set:   true,
	}
}

// OptCallResourceAnsweredBy is optional CallResourceAnsweredBy.
type OptCallResourceAnsweredBy struct {
	Value CallResourceAnsweredBy
	Set   bool
}

// IsSet returns true if OptCallResourceAnsweredBy was set.
func (o OptCallResourceAnsweredBy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallResourceAnsweredBy) Reset() {
	var v CallResourceAnsweredBy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallResourceAnsweredBy) SetTo(v CallResourceAnsweredBy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallResourceAnsweredBy) Get() (v CallResourceAnsweredBy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallResourceAnsweredBy) Or(d CallResourceAnsweredBy) CallResourceAnsweredBy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallResourceDirection returns new OptCallResourceDirection with value set to v.
func NewOptCallResourceDirection(v CallResourceDirection) OptCallResourceDirection {
	return OptCallResourceDirection{
		Value: v,
		Set:   true,
	}
}

// OptCallResourceDirection is optional CallResourceDirection.
type OptCallResourceDirection struct {
	Value CallResourceDirection
	Set   bool
}

// IsSet returns true if OptCallResourceDirection was set.
func (o OptCallResourceDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallResourceDirection) Reset() {
	var v CallResourceDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallResourceDirection) SetTo(v CallResourceDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallResourceDirection) Get() (v CallResourceDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallResourceDirection) Or(d CallResourceDirection) CallResourceDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallResourceIndex returns new OptCallResourceIndex with value set to v.
func NewOptCallResourceIndex(v CallResourceIndex) OptCallResourceIndex {
	return OptCallResourceIndex{
		Value: v,
		Set:   true,
	}
}

// OptCallResourceIndex is optional CallResourceIndex.
type OptCallResourceIndex struct {
	Value CallResourceIndex
	Set   bool
}

// IsSet returns true if OptCallResourceIndex was set.
func (o OptCallResourceIndex) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallResourceIndex) Reset() {
	var v CallResourceIndex
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallResourceIndex) SetTo(v CallResourceIndex) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallResourceIndex) Get() (v CallResourceIndex, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallResourceIndex) Or(d CallResourceIndex) CallResourceIndex {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallResourceStatus returns new OptCallResourceStatus with value set to v.
func NewOptCallResourceStatus(v CallResourceStatus) OptCallResourceStatus {
	return OptCallResourceStatus{
		Value: v,
		Set:   true,
	}
}

// OptCallResourceStatus is optional CallResourceStatus.
type OptCallResourceStatus struct {
	Value CallResourceStatus
	Set   bool
}

// IsSet returns true if OptCallResourceStatus was set.
func (o OptCallResourceStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallResourceStatus) Reset() {
	var v CallResourceStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallResourceStatus) SetTo(v CallResourceStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallResourceStatus) Get() (v CallResourceStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallResourceStatus) Or(d CallResourceStatus) CallResourceStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallerName returns new OptCallerName with value set to v.
func NewOptCallerName(v CallerName) OptCallerName {
	return OptCallerName{
		Value: v,
		Set:   true,
	}
}

// OptCallerName is optional CallerName.
type OptCallerName struct {
	Value CallerName
	Set   bool
}

// IsSet returns true if OptCallerName was set.
func (o OptCallerName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallerName) Reset() {
	var v CallerName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallerName) SetTo(v CallerName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallerName) Get() (v CallerName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallerName) Or(d CallerName) CallerName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCancelPortingOrderResponseMeta returns new OptCancelPortingOrderResponseMeta with value set to v.
func NewOptCancelPortingOrderResponseMeta(v CancelPortingOrderResponseMeta) OptCancelPortingOrderResponseMeta {
	return OptCancelPortingOrderResponseMeta{
		Value: v,
		Set:   true,
	}
}

// OptCancelPortingOrderResponseMeta is optional CancelPortingOrderResponseMeta.
type OptCancelPortingOrderResponseMeta struct {
	Value CancelPortingOrderResponseMeta
	Set   bool
}

// IsSet returns true if OptCancelPortingOrderResponseMeta was set.
func (o OptCancelPortingOrderResponseMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCancelPortingOrderResponseMeta) Reset() {
	var v CancelPortingOrderResponseMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCancelPortingOrderResponseMeta) SetTo(v CancelPortingOrderResponseMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCancelPortingOrderResponseMeta) Get() (v CancelPortingOrderResponseMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCancelPortingOrderResponseMeta) Or(d CancelPortingOrderResponseMeta) CancelPortingOrderResponseMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCarrier returns new OptCarrier with value set to v.
func NewOptCarrier(v Carrier) OptCarrier {
	return OptCarrier{
		Value: v,
		Set:   true,
	}
}

// OptCarrier is optional Carrier.
type OptCarrier struct {
	Value Carrier
	Set   bool
}

// IsSet returns true if OptCarrier was set.
func (o OptCarrier) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCarrier) Reset() {
	var v Carrier
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCarrier) SetTo(v Carrier) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCarrier) Get() (v Carrier, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCarrier) Or(d Carrier) Carrier {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCarrierType returns new OptCarrierType with value set to v.
func NewOptCarrierType(v CarrierType) OptCarrierType {
	return OptCarrierType{
		Value: v,
		Set:   true,
	}
}

// OptCarrierType is optional CarrierType.
type OptCarrierType struct {
	Value CarrierType
	Set   bool
}

// IsSet returns true if OptCarrierType was set.
func (o OptCarrierType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCarrierType) Reset() {
	var v CarrierType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCarrierType) SetTo(v CarrierType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCarrierType) Get() (v CarrierType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCarrierType) Or(d CarrierType) CarrierType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChannelTypeId returns new OptChannelTypeId with value set to v.
func NewOptChannelTypeId(v ChannelTypeId) OptChannelTypeId {
	return OptChannelTypeId{
		Value: v,
		Set:   true,
	}
}

// OptChannelTypeId is optional ChannelTypeId.
type OptChannelTypeId struct {
	Value ChannelTypeId
	Set   bool
}

// IsSet returns true if OptChannelTypeId was set.
func (o OptChannelTypeId) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChannelTypeId) Reset() {
	var v ChannelTypeId
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChannelTypeId) SetTo(v ChannelTypeId) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChannelTypeId) Get() (v ChannelTypeId, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChannelTypeId) Or(d ChannelTypeId) ChannelTypeId {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCnamListing returns new OptCnamListing with value set to v.
func NewOptCnamListing(v CnamListing) OptCnamListing {
	return OptCnamListing{
		Value: v,
		Set:   true,
	}
}

// OptCnamListing is optional CnamListing.
type OptCnamListing struct {
	Value CnamListing
	Set   bool
}

// IsSet returns true if OptCnamListing was set.
func (o OptCnamListing) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCnamListing) Reset() {
	var v CnamListing
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCnamListing) SetTo(v CnamListing) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCnamListing) Get() (v CnamListing, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCnamListing) Or(d CnamListing) CnamListing {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCommentCommentRecordType returns new OptCommentCommentRecordType with value set to v.
func NewOptCommentCommentRecordType(v CommentCommentRecordType) OptCommentCommentRecordType {
	return OptCommentCommentRecordType{
		Value: v,
		Set:   true,
	}
}

// OptCommentCommentRecordType is optional CommentCommentRecordType.
type OptCommentCommentRecordType struct {
	Value CommentCommentRecordType
	Set   bool
}

// IsSet returns true if OptCommentCommentRecordType was set.
func (o OptCommentCommentRecordType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCommentCommentRecordType) Reset() {
	var v CommentCommentRecordType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCommentCommentRecordType) SetTo(v CommentCommentRecordType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCommentCommentRecordType) Get() (v CommentCommentRecordType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCommentCommentRecordType) Or(d CommentCommentRecordType) CommentCommentRecordType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCommentCommenterType returns new OptCommentCommenterType with value set to v.
func NewOptCommentCommenterType(v CommentCommenterType) OptCommentCommenterType {
	return OptCommentCommenterType{
		Value: v,
		Set:   true,
	}
}

// OptCommentCommenterType is optional CommentCommenterType.
type OptCommentCommenterType struct {
	Value CommentCommenterType
	Set   bool
}

// IsSet returns true if OptCommentCommenterType was set.
func (o OptCommentCommenterType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCommentCommenterType) Reset() {
	var v CommentCommenterType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCommentCommenterType) SetTo(v CommentCommenterType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCommentCommenterType) Get() (v CommentCommenterType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCommentCommenterType) Or(d CommentCommenterType) CommentCommenterType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCommentResponseData returns new OptCommentResponseData with value set to v.
func NewOptCommentResponseData(v CommentResponseData) OptCommentResponseData {
	return OptCommentResponseData{
		Value: v,
		Set:   true,
	}
}

// OptCommentResponseData is optional CommentResponseData.
type OptCommentResponseData struct {
	Value CommentResponseData
	Set   bool
}

// IsSet returns true if OptCommentResponseData was set.
func (o OptCommentResponseData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCommentResponseData) Reset() {
	var v CommentResponseData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCommentResponseData) SetTo(v CommentResponseData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCommentResponseData) Get() (v CommentResponseData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCommentResponseData) Or(d CommentResponseData) CommentResponseData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCommentResponseDataCommentRecordType returns new OptCommentResponseDataCommentRecordType with value set to v.
func NewOptCommentResponseDataCommentRecordType(v CommentResponseDataCommentRecordType) OptCommentResponseDataCommentRecordType {
	return OptCommentResponseDataCommentRecordType{
		Value: v,
		Set:   true,
	}
}

// OptCommentResponseDataCommentRecordType is optional CommentResponseDataCommentRecordType.
type OptCommentResponseDataCommentRecordType struct {
	Value CommentResponseDataCommentRecordType
	Set   bool
}

// IsSet returns true if OptCommentResponseDataCommentRecordType was set.
func (o OptCommentResponseDataCommentRecordType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCommentResponseDataCommentRecordType) Reset() {
	var v CommentResponseDataCommentRecordType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCommentResponseDataCommentRecordType) SetTo(v CommentResponseDataCommentRecordType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCommentResponseDataCommentRecordType) Get() (v CommentResponseDataCommentRecordType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCommentResponseDataCommentRecordType) Or(d CommentResponseDataCommentRecordType) CommentResponseDataCommentRecordType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCommentResponseDataCommenterType returns new OptCommentResponseDataCommenterType with value set to v.
func NewOptCommentResponseDataCommenterType(v CommentResponseDataCommenterType) OptCommentResponseDataCommenterType {
	return OptCommentResponseDataCommenterType{
		Value: v,
		Set:   true,
	}
}

// OptCommentResponseDataCommenterType is optional CommentResponseDataCommenterType.
type OptCommentResponseDataCommenterType struct {
	Value CommentResponseDataCommenterType
	Set   bool
}

// IsSet returns true if OptCommentResponseDataCommenterType was set.
func (o OptCommentResponseDataCommenterType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCommentResponseDataCommenterType) Reset() {
	var v CommentResponseDataCommenterType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCommentResponseDataCommenterType) SetTo(v CommentResponseDataCommenterType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCommentResponseDataCommenterType) Get() (v CommentResponseDataCommenterType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCommentResponseDataCommenterType) Or(d CommentResponseDataCommenterType) CommentResponseDataCommenterType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCompleteOTAUpdate returns new OptCompleteOTAUpdate with value set to v.
func NewOptCompleteOTAUpdate(v CompleteOTAUpdate) OptCompleteOTAUpdate {
	return OptCompleteOTAUpdate{
		Value: v,
		Set:   true,
	}
}

// OptCompleteOTAUpdate is optional CompleteOTAUpdate.
type OptCompleteOTAUpdate struct {
	Value CompleteOTAUpdate
	Set   bool
}

// IsSet returns true if OptCompleteOTAUpdate was set.
func (o OptCompleteOTAUpdate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCompleteOTAUpdate) Reset() {
	var v CompleteOTAUpdate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCompleteOTAUpdate) SetTo(v CompleteOTAUpdate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCompleteOTAUpdate) Get() (v CompleteOTAUpdate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCompleteOTAUpdate) Or(d CompleteOTAUpdate) CompleteOTAUpdate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCompleteOTAUpdateSettings returns new OptCompleteOTAUpdateSettings with value set to v.
func NewOptCompleteOTAUpdateSettings(v CompleteOTAUpdateSettings) OptCompleteOTAUpdateSettings {
	return OptCompleteOTAUpdateSettings{
		Value: v,
		Set:   true,
	}
}

// OptCompleteOTAUpdateSettings is optional CompleteOTAUpdateSettings.
type OptCompleteOTAUpdateSettings struct {
	Value CompleteOTAUpdateSettings
	Set   bool
}

// IsSet returns true if OptCompleteOTAUpdateSettings was set.
func (o OptCompleteOTAUpdateSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCompleteOTAUpdateSettings) Reset() {
	var v CompleteOTAUpdateSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCompleteOTAUpdateSettings) SetTo(v CompleteOTAUpdateSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCompleteOTAUpdateSettings) Get() (v CompleteOTAUpdateSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCompleteOTAUpdateSettings) Or(d CompleteOTAUpdateSettings) CompleteOTAUpdateSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCompleteOTAUpdateStatus returns new OptCompleteOTAUpdateStatus with value set to v.
func NewOptCompleteOTAUpdateStatus(v CompleteOTAUpdateStatus) OptCompleteOTAUpdateStatus {
	return OptCompleteOTAUpdateStatus{
		Value: v,
		Set:   true,
	}
}

// OptCompleteOTAUpdateStatus is optional CompleteOTAUpdateStatus.
type OptCompleteOTAUpdateStatus struct {
	Value CompleteOTAUpdateStatus
	Set   bool
}

// IsSet returns true if OptCompleteOTAUpdateStatus was set.
func (o OptCompleteOTAUpdateStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCompleteOTAUpdateStatus) Reset() {
	var v CompleteOTAUpdateStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCompleteOTAUpdateStatus) SetTo(v CompleteOTAUpdateStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCompleteOTAUpdateStatus) Get() (v CompleteOTAUpdateStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCompleteOTAUpdateStatus) Or(d CompleteOTAUpdateStatus) CompleteOTAUpdateStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCompleteOTAUpdateType returns new OptCompleteOTAUpdateType with value set to v.
func NewOptCompleteOTAUpdateType(v CompleteOTAUpdateType) OptCompleteOTAUpdateType {
	return OptCompleteOTAUpdateType{
		Value: v,
		Set:   true,
	}
}

// OptCompleteOTAUpdateType is optional CompleteOTAUpdateType.
type OptCompleteOTAUpdateType struct {
	Value CompleteOTAUpdateType
	Set   bool
}

// IsSet returns true if OptCompleteOTAUpdateType was set.
func (o OptCompleteOTAUpdateType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCompleteOTAUpdateType) Reset() {
	var v CompleteOTAUpdateType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCompleteOTAUpdateType) SetTo(v CompleteOTAUpdateType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCompleteOTAUpdateType) Get() (v CompleteOTAUpdateType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCompleteOTAUpdateType) Or(d CompleteOTAUpdateType) CompleteOTAUpdateType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConferenceRecordingResourceIndex returns new OptConferenceRecordingResourceIndex with value set to v.
func NewOptConferenceRecordingResourceIndex(v ConferenceRecordingResourceIndex) OptConferenceRecordingResourceIndex {
	return OptConferenceRecordingResourceIndex{
		Value: v,
		Set:   true,
	}
}

// OptConferenceRecordingResourceIndex is optional ConferenceRecordingResourceIndex.
type OptConferenceRecordingResourceIndex struct {
	Value ConferenceRecordingResourceIndex
	Set   bool
}

// IsSet returns true if OptConferenceRecordingResourceIndex was set.
func (o OptConferenceRecordingResourceIndex) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConferenceRecordingResourceIndex) Reset() {
	var v ConferenceRecordingResourceIndex
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConferenceRecordingResourceIndex) SetTo(v ConferenceRecordingResourceIndex) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConferenceRecordingResourceIndex) Get() (v ConferenceRecordingResourceIndex, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConferenceRecordingResourceIndex) Or(d ConferenceRecordingResourceIndex) ConferenceRecordingResourceIndex {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConferenceRecordingResourceSource returns new OptConferenceRecordingResourceSource with value set to v.
func NewOptConferenceRecordingResourceSource(v ConferenceRecordingResourceSource) OptConferenceRecordingResourceSource {
	return OptConferenceRecordingResourceSource{
		Value: v,
		Set:   true,
	}
}

// OptConferenceRecordingResourceSource is optional ConferenceRecordingResourceSource.
type OptConferenceRecordingResourceSource struct {
	Value ConferenceRecordingResourceSource
	Set   bool
}

// IsSet returns true if OptConferenceRecordingResourceSource was set.
func (o OptConferenceRecordingResourceSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConferenceRecordingResourceSource) Reset() {
	var v ConferenceRecordingResourceSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConferenceRecordingResourceSource) SetTo(v ConferenceRecordingResourceSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConferenceRecordingResourceSource) Get() (v ConferenceRecordingResourceSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConferenceRecordingResourceSource) Or(d ConferenceRecordingResourceSource) ConferenceRecordingResourceSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConferenceRecordingResourceStatus returns new OptConferenceRecordingResourceStatus with value set to v.
func NewOptConferenceRecordingResourceStatus(v ConferenceRecordingResourceStatus) OptConferenceRecordingResourceStatus {
	return OptConferenceRecordingResourceStatus{
		Value: v,
		Set:   true,
	}
}

// OptConferenceRecordingResourceStatus is optional ConferenceRecordingResourceStatus.
type OptConferenceRecordingResourceStatus struct {
	Value ConferenceRecordingResourceStatus
	Set   bool
}

// IsSet returns true if OptConferenceRecordingResourceStatus was set.
func (o OptConferenceRecordingResourceStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConferenceRecordingResourceStatus) Reset() {
	var v ConferenceRecordingResourceStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConferenceRecordingResourceStatus) SetTo(v ConferenceRecordingResourceStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConferenceRecordingResourceStatus) Get() (v ConferenceRecordingResourceStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConferenceRecordingResourceStatus) Or(d ConferenceRecordingResourceStatus) ConferenceRecordingResourceStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConferenceRecordingResourceSubresourceUris returns new OptConferenceRecordingResourceSubresourceUris with value set to v.
func NewOptConferenceRecordingResourceSubresourceUris(v ConferenceRecordingResourceSubresourceUris) OptConferenceRecordingResourceSubresourceUris {
	return OptConferenceRecordingResourceSubresourceUris{
		Value: v,
		Set:   true,
	}
}

// OptConferenceRecordingResourceSubresourceUris is optional ConferenceRecordingResourceSubresourceUris.
type OptConferenceRecordingResourceSubresourceUris struct {
	Value ConferenceRecordingResourceSubresourceUris
	Set   bool
}

// IsSet returns true if OptConferenceRecordingResourceSubresourceUris was set.
func (o OptConferenceRecordingResourceSubresourceUris) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConferenceRecordingResourceSubresourceUris) Reset() {
	var v ConferenceRecordingResourceSubresourceUris
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConferenceRecordingResourceSubresourceUris) SetTo(v ConferenceRecordingResourceSubresourceUris) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConferenceRecordingResourceSubresourceUris) Get() (v ConferenceRecordingResourceSubresourceUris, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConferenceRecordingResourceSubresourceUris) Or(d ConferenceRecordingResourceSubresourceUris) ConferenceRecordingResourceSubresourceUris {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConferenceResource returns new OptConferenceResource with value set to v.
func NewOptConferenceResource(v ConferenceResource) OptConferenceResource {
	return OptConferenceResource{
		Value: v,
		Set:   true,
	}
}

// OptConferenceResource is optional ConferenceResource.
type OptConferenceResource struct {
	Value ConferenceResource
	Set   bool
}

// IsSet returns true if OptConferenceResource was set.
func (o OptConferenceResource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConferenceResource) Reset() {
	var v ConferenceResource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConferenceResource) SetTo(v ConferenceResource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConferenceResource) Get() (v ConferenceResource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConferenceResource) Or(d ConferenceResource) ConferenceResource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConferenceResourceIndex returns new OptConferenceResourceIndex with value set to v.
func NewOptConferenceResourceIndex(v ConferenceResourceIndex) OptConferenceResourceIndex {
	return OptConferenceResourceIndex{
		Value: v,
		Set:   true,
	}
}

// OptConferenceResourceIndex is optional ConferenceResourceIndex.
type OptConferenceResourceIndex struct {
	Value ConferenceResourceIndex
	Set   bool
}

// IsSet returns true if OptConferenceResourceIndex was set.
func (o OptConferenceResourceIndex) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConferenceResourceIndex) Reset() {
	var v ConferenceResourceIndex
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConferenceResourceIndex) SetTo(v ConferenceResourceIndex) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConferenceResourceIndex) Get() (v ConferenceResourceIndex, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConferenceResourceIndex) Or(d ConferenceResourceIndex) ConferenceResourceIndex {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConferenceResourceReasonConferenceEnded returns new OptConferenceResourceReasonConferenceEnded with value set to v.
func NewOptConferenceResourceReasonConferenceEnded(v ConferenceResourceReasonConferenceEnded) OptConferenceResourceReasonConferenceEnded {
	return OptConferenceResourceReasonConferenceEnded{
		Value: v,
		Set:   true,
	}
}

// OptConferenceResourceReasonConferenceEnded is optional ConferenceResourceReasonConferenceEnded.
type OptConferenceResourceReasonConferenceEnded struct {
	Value ConferenceResourceReasonConferenceEnded
	Set   bool
}

// IsSet returns true if OptConferenceResourceReasonConferenceEnded was set.
func (o OptConferenceResourceReasonConferenceEnded) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConferenceResourceReasonConferenceEnded) Reset() {
	var v ConferenceResourceReasonConferenceEnded
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConferenceResourceReasonConferenceEnded) SetTo(v ConferenceResourceReasonConferenceEnded) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConferenceResourceReasonConferenceEnded) Get() (v ConferenceResourceReasonConferenceEnded, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConferenceResourceReasonConferenceEnded) Or(d ConferenceResourceReasonConferenceEnded) ConferenceResourceReasonConferenceEnded {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConferenceResourceStatus returns new OptConferenceResourceStatus with value set to v.
func NewOptConferenceResourceStatus(v ConferenceResourceStatus) OptConferenceResourceStatus {
	return OptConferenceResourceStatus{
		Value: v,
		Set:   true,
	}
}

// OptConferenceResourceStatus is optional ConferenceResourceStatus.
type OptConferenceResourceStatus struct {
	Value ConferenceResourceStatus
	Set   bool
}

// IsSet returns true if OptConferenceResourceStatus was set.
func (o OptConferenceResourceStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConferenceResourceStatus) Reset() {
	var v ConferenceResourceStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConferenceResourceStatus) SetTo(v ConferenceResourceStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConferenceResourceStatus) Get() (v ConferenceResourceStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConferenceResourceStatus) Or(d ConferenceResourceStatus) ConferenceResourceStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConferenceResourceSubresourceUris returns new OptConferenceResourceSubresourceUris with value set to v.
func NewOptConferenceResourceSubresourceUris(v ConferenceResourceSubresourceUris) OptConferenceResourceSubresourceUris {
	return OptConferenceResourceSubresourceUris{
		Value: v,
		Set:   true,
	}
}

// OptConferenceResourceSubresourceUris is optional ConferenceResourceSubresourceUris.
type OptConferenceResourceSubresourceUris struct {
	Value ConferenceResourceSubresourceUris
	Set   bool
}

// IsSet returns true if OptConferenceResourceSubresourceUris was set.
func (o OptConferenceResourceSubresourceUris) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConferenceResourceSubresourceUris) Reset() {
	var v ConferenceResourceSubresourceUris
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConferenceResourceSubresourceUris) SetTo(v ConferenceResourceSubresourceUris) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConferenceResourceSubresourceUris) Get() (v ConferenceResourceSubresourceUris, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConferenceResourceSubresourceUris) Or(d ConferenceResourceSubresourceUris) ConferenceResourceSubresourceUris {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConferenceStatus returns new OptConferenceStatus with value set to v.
func NewOptConferenceStatus(v ConferenceStatus) OptConferenceStatus {
	return OptConferenceStatus{
		Value: v,
		Set:   true,
	}
}

// OptConferenceStatus is optional ConferenceStatus.
type OptConferenceStatus struct {
	Value ConferenceStatus
	Set   bool
}

// IsSet returns true if OptConferenceStatus was set.
func (o OptConferenceStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConferenceStatus) Reset() {
	var v ConferenceStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConferenceStatus) SetTo(v ConferenceStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConferenceStatus) Get() (v ConferenceStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConferenceStatus) Or(d ConferenceStatus) ConferenceStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConfirmPortingOrderResponseMeta returns new OptConfirmPortingOrderResponseMeta with value set to v.
func NewOptConfirmPortingOrderResponseMeta(v ConfirmPortingOrderResponseMeta) OptConfirmPortingOrderResponseMeta {
	return OptConfirmPortingOrderResponseMeta{
		Value: v,
		Set:   true,
	}
}

// OptConfirmPortingOrderResponseMeta is optional ConfirmPortingOrderResponseMeta.
type OptConfirmPortingOrderResponseMeta struct {
	Value ConfirmPortingOrderResponseMeta
	Set   bool
}

// IsSet returns true if OptConfirmPortingOrderResponseMeta was set.
func (o OptConfirmPortingOrderResponseMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConfirmPortingOrderResponseMeta) Reset() {
	var v ConfirmPortingOrderResponseMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConfirmPortingOrderResponseMeta) SetTo(v ConfirmPortingOrderResponseMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConfirmPortingOrderResponseMeta) Get() (v ConfirmPortingOrderResponseMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConfirmPortingOrderResponseMeta) Or(d ConfirmPortingOrderResponseMeta) ConfirmPortingOrderResponseMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConnectionActive returns new OptConnectionActive with value set to v.
func NewOptConnectionActive(v ConnectionActive) OptConnectionActive {
	return OptConnectionActive{
		Value: v,
		Set:   true,
	}
}

// OptConnectionActive is optional ConnectionActive.
type OptConnectionActive struct {
	Value ConnectionActive
	Set   bool
}

// IsSet returns true if OptConnectionActive was set.
func (o OptConnectionActive) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConnectionActive) Reset() {
	var v ConnectionActive
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConnectionActive) SetTo(v ConnectionActive) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConnectionActive) Get() (v ConnectionActive, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConnectionActive) Or(d ConnectionActive) ConnectionActive {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCostInformation returns new OptCostInformation with value set to v.
func NewOptCostInformation(v CostInformation) OptCostInformation {
	return OptCostInformation{
		Value: v,
		Set:   true,
	}
}

// OptCostInformation is optional CostInformation.
type OptCostInformation struct {
	Value CostInformation
	Set   bool
}

// IsSet returns true if OptCostInformation was set.
func (o OptCostInformation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCostInformation) Reset() {
	var v CostInformation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCostInformation) SetTo(v CostInformation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCostInformation) Get() (v CostInformation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCostInformation) Or(d CostInformation) CostInformation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType returns new OptCreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType with value set to v.
func NewOptCreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType(v CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType) OptCreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType {
	return OptCreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType{
		Value: v,
		Set:   true,
	}
}

// OptCreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType is optional CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType.
type OptCreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType struct {
	Value CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType
	Set   bool
}

// IsSet returns true if OptCreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType was set.
func (o OptCreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptCreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType) Reset() {
	var v CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType) SetTo(v CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType) Get() (v CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType) Or(d CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType) CreateAdditionalDocumentsReqAdditionalDocumentsItemDocumentType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateCallControlApplicationRequestAnchorsiteOverride returns new OptCreateCallControlApplicationRequestAnchorsiteOverride with value set to v.
func NewOptCreateCallControlApplicationRequestAnchorsiteOverride(v CreateCallControlApplicationRequestAnchorsiteOverride) OptCreateCallControlApplicationRequestAnchorsiteOverride {
	return OptCreateCallControlApplicationRequestAnchorsiteOverride{
		Value: v,
		Set:   true,
	}
}

// OptCreateCallControlApplicationRequestAnchorsiteOverride is optional CreateCallControlApplicationRequestAnchorsiteOverride.
type OptCreateCallControlApplicationRequestAnchorsiteOverride struct {
	Value CreateCallControlApplicationRequestAnchorsiteOverride
	Set   bool
}

// IsSet returns true if OptCreateCallControlApplicationRequestAnchorsiteOverride was set.
func (o OptCreateCallControlApplicationRequestAnchorsiteOverride) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateCallControlApplicationRequestAnchorsiteOverride) Reset() {
	var v CreateCallControlApplicationRequestAnchorsiteOverride
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateCallControlApplicationRequestAnchorsiteOverride) SetTo(v CreateCallControlApplicationRequestAnchorsiteOverride) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateCallControlApplicationRequestAnchorsiteOverride) Get() (v CreateCallControlApplicationRequestAnchorsiteOverride, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateCallControlApplicationRequestAnchorsiteOverride) Or(d CreateCallControlApplicationRequestAnchorsiteOverride) CreateCallControlApplicationRequestAnchorsiteOverride {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateCallControlApplicationRequestDtmfType returns new OptCreateCallControlApplicationRequestDtmfType with value set to v.
func NewOptCreateCallControlApplicationRequestDtmfType(v CreateCallControlApplicationRequestDtmfType) OptCreateCallControlApplicationRequestDtmfType {
	return OptCreateCallControlApplicationRequestDtmfType{
		Value: v,
		Set:   true,
	}
}

// OptCreateCallControlApplicationRequestDtmfType is optional CreateCallControlApplicationRequestDtmfType.
type OptCreateCallControlApplicationRequestDtmfType struct {
	Value CreateCallControlApplicationRequestDtmfType
	Set   bool
}

// IsSet returns true if OptCreateCallControlApplicationRequestDtmfType was set.
func (o OptCreateCallControlApplicationRequestDtmfType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateCallControlApplicationRequestDtmfType) Reset() {
	var v CreateCallControlApplicationRequestDtmfType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateCallControlApplicationRequestDtmfType) SetTo(v CreateCallControlApplicationRequestDtmfType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateCallControlApplicationRequestDtmfType) Get() (v CreateCallControlApplicationRequestDtmfType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateCallControlApplicationRequestDtmfType) Or(d CreateCallControlApplicationRequestDtmfType) CreateCallControlApplicationRequestDtmfType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateCallControlApplicationRequestWebhookAPIVersion returns new OptCreateCallControlApplicationRequestWebhookAPIVersion with value set to v.
func NewOptCreateCallControlApplicationRequestWebhookAPIVersion(v CreateCallControlApplicationRequestWebhookAPIVersion) OptCreateCallControlApplicationRequestWebhookAPIVersion {
	return OptCreateCallControlApplicationRequestWebhookAPIVersion{
		Value: v,
		Set:   true,
	}
}

// OptCreateCallControlApplicationRequestWebhookAPIVersion is optional CreateCallControlApplicationRequestWebhookAPIVersion.
type OptCreateCallControlApplicationRequestWebhookAPIVersion struct {
	Value CreateCallControlApplicationRequestWebhookAPIVersion
	Set   bool
}

// IsSet returns true if OptCreateCallControlApplicationRequestWebhookAPIVersion was set.
func (o OptCreateCallControlApplicationRequestWebhookAPIVersion) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateCallControlApplicationRequestWebhookAPIVersion) Reset() {
	var v CreateCallControlApplicationRequestWebhookAPIVersion
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateCallControlApplicationRequestWebhookAPIVersion) SetTo(v CreateCallControlApplicationRequestWebhookAPIVersion) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateCallControlApplicationRequestWebhookAPIVersion) Get() (v CreateCallControlApplicationRequestWebhookAPIVersion, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateCallControlApplicationRequestWebhookAPIVersion) Or(d CreateCallControlApplicationRequestWebhookAPIVersion) CreateCallControlApplicationRequestWebhookAPIVersion {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateGroupMMSMessageRequest returns new OptCreateGroupMMSMessageRequest with value set to v.
func NewOptCreateGroupMMSMessageRequest(v CreateGroupMMSMessageRequest) OptCreateGroupMMSMessageRequest {
	return OptCreateGroupMMSMessageRequest{
		Value: v,
		Set:   true,
	}
}

// OptCreateGroupMMSMessageRequest is optional CreateGroupMMSMessageRequest.
type OptCreateGroupMMSMessageRequest struct {
	Value CreateGroupMMSMessageRequest
	Set   bool
}

// IsSet returns true if OptCreateGroupMMSMessageRequest was set.
func (o OptCreateGroupMMSMessageRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateGroupMMSMessageRequest) Reset() {
	var v CreateGroupMMSMessageRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateGroupMMSMessageRequest) SetTo(v CreateGroupMMSMessageRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateGroupMMSMessageRequest) Get() (v CreateGroupMMSMessageRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateGroupMMSMessageRequest) Or(d CreateGroupMMSMessageRequest) CreateGroupMMSMessageRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateLongCodeMessageRequest returns new OptCreateLongCodeMessageRequest with value set to v.
func NewOptCreateLongCodeMessageRequest(v CreateLongCodeMessageRequest) OptCreateLongCodeMessageRequest {
	return OptCreateLongCodeMessageRequest{
		Value: v,
		Set:   true,
	}
}

// OptCreateLongCodeMessageRequest is optional CreateLongCodeMessageRequest.
type OptCreateLongCodeMessageRequest struct {
	Value CreateLongCodeMessageRequest
	Set   bool
}

// IsSet returns true if OptCreateLongCodeMessageRequest was set.
func (o OptCreateLongCodeMessageRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateLongCodeMessageRequest) Reset() {
	var v CreateLongCodeMessageRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateLongCodeMessageRequest) SetTo(v CreateLongCodeMessageRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateLongCodeMessageRequest) Get() (v CreateLongCodeMessageRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateLongCodeMessageRequest) Or(d CreateLongCodeMessageRequest) CreateLongCodeMessageRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateLongCodeMessageRequestType returns new OptCreateLongCodeMessageRequestType with value set to v.
func NewOptCreateLongCodeMessageRequestType(v CreateLongCodeMessageRequestType) OptCreateLongCodeMessageRequestType {
	return OptCreateLongCodeMessageRequestType{
		Value: v,
		Set:   true,
	}
}

// OptCreateLongCodeMessageRequestType is optional CreateLongCodeMessageRequestType.
type OptCreateLongCodeMessageRequestType struct {
	Value CreateLongCodeMessageRequestType
	Set   bool
}

// IsSet returns true if OptCreateLongCodeMessageRequestType was set.
func (o OptCreateLongCodeMessageRequestType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateLongCodeMessageRequestType) Reset() {
	var v CreateLongCodeMessageRequestType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateLongCodeMessageRequestType) SetTo(v CreateLongCodeMessageRequestType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateLongCodeMessageRequestType) Get() (v CreateLongCodeMessageRequestType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateLongCodeMessageRequestType) Or(d CreateLongCodeMessageRequestType) CreateLongCodeMessageRequestType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateMessageRequest returns new OptCreateMessageRequest with value set to v.
func NewOptCreateMessageRequest(v CreateMessageRequest) OptCreateMessageRequest {
	return OptCreateMessageRequest{
		Value: v,
		Set:   true,
	}
}

// OptCreateMessageRequest is optional CreateMessageRequest.
type OptCreateMessageRequest struct {
	Value CreateMessageRequest
	Set   bool
}

// IsSet returns true if OptCreateMessageRequest was set.
func (o OptCreateMessageRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateMessageRequest) Reset() {
	var v CreateMessageRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateMessageRequest) SetTo(v CreateMessageRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateMessageRequest) Get() (v CreateMessageRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateMessageRequest) Or(d CreateMessageRequest) CreateMessageRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateMessageRequestType returns new OptCreateMessageRequestType with value set to v.
func NewOptCreateMessageRequestType(v CreateMessageRequestType) OptCreateMessageRequestType {
	return OptCreateMessageRequestType{
		Value: v,
		Set:   true,
	}
}

// OptCreateMessageRequestType is optional CreateMessageRequestType.
type OptCreateMessageRequestType struct {
	Value CreateMessageRequestType
	Set   bool
}

// IsSet returns true if OptCreateMessageRequestType was set.
func (o OptCreateMessageRequestType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateMessageRequestType) Reset() {
	var v CreateMessageRequestType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateMessageRequestType) SetTo(v CreateMessageRequestType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateMessageRequestType) Get() (v CreateMessageRequestType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateMessageRequestType) Or(d CreateMessageRequestType) CreateMessageRequestType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateMessagingHostedNumberOrderRequest returns new OptCreateMessagingHostedNumberOrderRequest with value set to v.
func NewOptCreateMessagingHostedNumberOrderRequest(v CreateMessagingHostedNumberOrderRequest) OptCreateMessagingHostedNumberOrderRequest {
	return OptCreateMessagingHostedNumberOrderRequest{
		Value: v,
		Set:   true,
	}
}

// OptCreateMessagingHostedNumberOrderRequest is optional CreateMessagingHostedNumberOrderRequest.
type OptCreateMessagingHostedNumberOrderRequest struct {
	Value CreateMessagingHostedNumberOrderRequest
	Set   bool
}

// IsSet returns true if OptCreateMessagingHostedNumberOrderRequest was set.
func (o OptCreateMessagingHostedNumberOrderRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateMessagingHostedNumberOrderRequest) Reset() {
	var v CreateMessagingHostedNumberOrderRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateMessagingHostedNumberOrderRequest) SetTo(v CreateMessagingHostedNumberOrderRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateMessagingHostedNumberOrderRequest) Get() (v CreateMessagingHostedNumberOrderRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateMessagingHostedNumberOrderRequest) Or(d CreateMessagingHostedNumberOrderRequest) CreateMessagingHostedNumberOrderRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateNumberOrderDocumentRequestRequirementType returns new OptCreateNumberOrderDocumentRequestRequirementType with value set to v.
func NewOptCreateNumberOrderDocumentRequestRequirementType(v CreateNumberOrderDocumentRequestRequirementType) OptCreateNumberOrderDocumentRequestRequirementType {
	return OptCreateNumberOrderDocumentRequestRequirementType{
		Value: v,
		Set:   true,
	}
}

// OptCreateNumberOrderDocumentRequestRequirementType is optional CreateNumberOrderDocumentRequestRequirementType.
type OptCreateNumberOrderDocumentRequestRequirementType struct {
	Value CreateNumberOrderDocumentRequestRequirementType
	Set   bool
}

// IsSet returns true if OptCreateNumberOrderDocumentRequestRequirementType was set.
func (o OptCreateNumberOrderDocumentRequestRequirementType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateNumberOrderDocumentRequestRequirementType) Reset() {
	var v CreateNumberOrderDocumentRequestRequirementType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateNumberOrderDocumentRequestRequirementType) SetTo(v CreateNumberOrderDocumentRequestRequirementType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateNumberOrderDocumentRequestRequirementType) Get() (v CreateNumberOrderDocumentRequestRequirementType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateNumberOrderDocumentRequestRequirementType) Or(d CreateNumberOrderDocumentRequestRequirementType) CreateNumberOrderDocumentRequestRequirementType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateNumberPoolMessageRequest returns new OptCreateNumberPoolMessageRequest with value set to v.
func NewOptCreateNumberPoolMessageRequest(v CreateNumberPoolMessageRequest) OptCreateNumberPoolMessageRequest {
	return OptCreateNumberPoolMessageRequest{
		Value: v,
		Set:   true,
	}
}

// OptCreateNumberPoolMessageRequest is optional CreateNumberPoolMessageRequest.
type OptCreateNumberPoolMessageRequest struct {
	Value CreateNumberPoolMessageRequest
	Set   bool
}

// IsSet returns true if OptCreateNumberPoolMessageRequest was set.
func (o OptCreateNumberPoolMessageRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateNumberPoolMessageRequest) Reset() {
	var v CreateNumberPoolMessageRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateNumberPoolMessageRequest) SetTo(v CreateNumberPoolMessageRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateNumberPoolMessageRequest) Get() (v CreateNumberPoolMessageRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateNumberPoolMessageRequest) Or(d CreateNumberPoolMessageRequest) CreateNumberPoolMessageRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateNumberPoolMessageRequestType returns new OptCreateNumberPoolMessageRequestType with value set to v.
func NewOptCreateNumberPoolMessageRequestType(v CreateNumberPoolMessageRequestType) OptCreateNumberPoolMessageRequestType {
	return OptCreateNumberPoolMessageRequestType{
		Value: v,
		Set:   true,
	}
}

// OptCreateNumberPoolMessageRequestType is optional CreateNumberPoolMessageRequestType.
type OptCreateNumberPoolMessageRequestType struct {
	Value CreateNumberPoolMessageRequestType
	Set   bool
}

// IsSet returns true if OptCreateNumberPoolMessageRequestType was set.
func (o OptCreateNumberPoolMessageRequestType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateNumberPoolMessageRequestType) Reset() {
	var v CreateNumberPoolMessageRequestType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateNumberPoolMessageRequestType) SetTo(v CreateNumberPoolMessageRequestType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateNumberPoolMessageRequestType) Get() (v CreateNumberPoolMessageRequestType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateNumberPoolMessageRequestType) Or(d CreateNumberPoolMessageRequestType) CreateNumberPoolMessageRequestType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateNumberReservationRequestStatus returns new OptCreateNumberReservationRequestStatus with value set to v.
func NewOptCreateNumberReservationRequestStatus(v CreateNumberReservationRequestStatus) OptCreateNumberReservationRequestStatus {
	return OptCreateNumberReservationRequestStatus{
		Value: v,
		Set:   true,
	}
}

// OptCreateNumberReservationRequestStatus is optional CreateNumberReservationRequestStatus.
type OptCreateNumberReservationRequestStatus struct {
	Value CreateNumberReservationRequestStatus
	Set   bool
}

// IsSet returns true if OptCreateNumberReservationRequestStatus was set.
func (o OptCreateNumberReservationRequestStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateNumberReservationRequestStatus) Reset() {
	var v CreateNumberReservationRequestStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateNumberReservationRequestStatus) SetTo(v CreateNumberReservationRequestStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateNumberReservationRequestStatus) Get() (v CreateNumberReservationRequestStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateNumberReservationRequestStatus) Or(d CreateNumberReservationRequestStatus) CreateNumberReservationRequestStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateShortCodeMessageRequest returns new OptCreateShortCodeMessageRequest with value set to v.
func NewOptCreateShortCodeMessageRequest(v CreateShortCodeMessageRequest) OptCreateShortCodeMessageRequest {
	return OptCreateShortCodeMessageRequest{
		Value: v,
		Set:   true,
	}
}

// OptCreateShortCodeMessageRequest is optional CreateShortCodeMessageRequest.
type OptCreateShortCodeMessageRequest struct {
	Value CreateShortCodeMessageRequest
	Set   bool
}

// IsSet returns true if OptCreateShortCodeMessageRequest was set.
func (o OptCreateShortCodeMessageRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateShortCodeMessageRequest) Reset() {
	var v CreateShortCodeMessageRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateShortCodeMessageRequest) SetTo(v CreateShortCodeMessageRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateShortCodeMessageRequest) Get() (v CreateShortCodeMessageRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateShortCodeMessageRequest) Or(d CreateShortCodeMessageRequest) CreateShortCodeMessageRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateShortCodeMessageRequestType returns new OptCreateShortCodeMessageRequestType with value set to v.
func NewOptCreateShortCodeMessageRequestType(v CreateShortCodeMessageRequestType) OptCreateShortCodeMessageRequestType {
	return OptCreateShortCodeMessageRequestType{
		Value: v,
		Set:   true,
	}
}

// OptCreateShortCodeMessageRequestType is optional CreateShortCodeMessageRequestType.
type OptCreateShortCodeMessageRequestType struct {
	Value CreateShortCodeMessageRequestType
	Set   bool
}

// IsSet returns true if OptCreateShortCodeMessageRequestType was set.
func (o OptCreateShortCodeMessageRequestType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateShortCodeMessageRequestType) Reset() {
	var v CreateShortCodeMessageRequestType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateShortCodeMessageRequestType) SetTo(v CreateShortCodeMessageRequestType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateShortCodeMessageRequestType) Get() (v CreateShortCodeMessageRequestType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateShortCodeMessageRequestType) Or(d CreateShortCodeMessageRequestType) CreateShortCodeMessageRequestType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateTeXMLSecretResult returns new OptCreateTeXMLSecretResult with value set to v.
func NewOptCreateTeXMLSecretResult(v CreateTeXMLSecretResult) OptCreateTeXMLSecretResult {
	return OptCreateTeXMLSecretResult{
		Value: v,
		Set:   true,
	}
}

// OptCreateTeXMLSecretResult is optional CreateTeXMLSecretResult.
type OptCreateTeXMLSecretResult struct {
	Value CreateTeXMLSecretResult
	Set   bool
}

// IsSet returns true if OptCreateTeXMLSecretResult was set.
func (o OptCreateTeXMLSecretResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateTeXMLSecretResult) Reset() {
	var v CreateTeXMLSecretResult
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateTeXMLSecretResult) SetTo(v CreateTeXMLSecretResult) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateTeXMLSecretResult) Get() (v CreateTeXMLSecretResult, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateTeXMLSecretResult) Or(d CreateTeXMLSecretResult) CreateTeXMLSecretResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateTeXMLSecretResultValue returns new OptCreateTeXMLSecretResultValue with value set to v.
func NewOptCreateTeXMLSecretResultValue(v CreateTeXMLSecretResultValue) OptCreateTeXMLSecretResultValue {
	return OptCreateTeXMLSecretResultValue{
		Value: v,
		Set:   true,
	}
}

// OptCreateTeXMLSecretResultValue is optional CreateTeXMLSecretResultValue.
type OptCreateTeXMLSecretResultValue struct {
	Value CreateTeXMLSecretResultValue
	Set   bool
}

// IsSet returns true if OptCreateTeXMLSecretResultValue was set.
func (o OptCreateTeXMLSecretResultValue) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateTeXMLSecretResultValue) Reset() {
	var v CreateTeXMLSecretResultValue
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateTeXMLSecretResultValue) SetTo(v CreateTeXMLSecretResultValue) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateTeXMLSecretResultValue) Get() (v CreateTeXMLSecretResultValue, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateTeXMLSecretResultValue) Or(d CreateTeXMLSecretResultValue) CreateTeXMLSecretResultValue {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateTexmlApplicationRequestInbound returns new OptCreateTexmlApplicationRequestInbound with value set to v.
func NewOptCreateTexmlApplicationRequestInbound(v CreateTexmlApplicationRequestInbound) OptCreateTexmlApplicationRequestInbound {
	return OptCreateTexmlApplicationRequestInbound{
		Value: v,
		Set:   true,
	}
}

// OptCreateTexmlApplicationRequestInbound is optional CreateTexmlApplicationRequestInbound.
type OptCreateTexmlApplicationRequestInbound struct {
	Value CreateTexmlApplicationRequestInbound
	Set   bool
}

// IsSet returns true if OptCreateTexmlApplicationRequestInbound was set.
func (o OptCreateTexmlApplicationRequestInbound) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateTexmlApplicationRequestInbound) Reset() {
	var v CreateTexmlApplicationRequestInbound
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateTexmlApplicationRequestInbound) SetTo(v CreateTexmlApplicationRequestInbound) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateTexmlApplicationRequestInbound) Get() (v CreateTexmlApplicationRequestInbound, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateTexmlApplicationRequestInbound) Or(d CreateTexmlApplicationRequestInbound) CreateTexmlApplicationRequestInbound {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings returns new OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings with value set to v.
func NewOptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings(v CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings {
	return OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings{
		Value: v,
		Set:   true,
	}
}

// OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings is optional CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings.
type OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings struct {
	Value CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings
	Set   bool
}

// IsSet returns true if OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings was set.
func (o OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) Reset() {
	var v CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) SetTo(v CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) Get() (v CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) Or(d CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) CreateTexmlApplicationRequestInboundSipSubdomainReceiveSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateTexmlApplicationRequestOutbound returns new OptCreateTexmlApplicationRequestOutbound with value set to v.
func NewOptCreateTexmlApplicationRequestOutbound(v CreateTexmlApplicationRequestOutbound) OptCreateTexmlApplicationRequestOutbound {
	return OptCreateTexmlApplicationRequestOutbound{
		Value: v,
		Set:   true,
	}
}

// OptCreateTexmlApplicationRequestOutbound is optional CreateTexmlApplicationRequestOutbound.
type OptCreateTexmlApplicationRequestOutbound struct {
	Value CreateTexmlApplicationRequestOutbound
	Set   bool
}

// IsSet returns true if OptCreateTexmlApplicationRequestOutbound was set.
func (o OptCreateTexmlApplicationRequestOutbound) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateTexmlApplicationRequestOutbound) Reset() {
	var v CreateTexmlApplicationRequestOutbound
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateTexmlApplicationRequestOutbound) SetTo(v CreateTexmlApplicationRequestOutbound) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateTexmlApplicationRequestOutbound) Get() (v CreateTexmlApplicationRequestOutbound, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateTexmlApplicationRequestOutbound) Or(d CreateTexmlApplicationRequestOutbound) CreateTexmlApplicationRequestOutbound {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateTexmlApplicationRequestStatusCallbackMethod returns new OptCreateTexmlApplicationRequestStatusCallbackMethod with value set to v.
func NewOptCreateTexmlApplicationRequestStatusCallbackMethod(v CreateTexmlApplicationRequestStatusCallbackMethod) OptCreateTexmlApplicationRequestStatusCallbackMethod {
	return OptCreateTexmlApplicationRequestStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptCreateTexmlApplicationRequestStatusCallbackMethod is optional CreateTexmlApplicationRequestStatusCallbackMethod.
type OptCreateTexmlApplicationRequestStatusCallbackMethod struct {
	Value CreateTexmlApplicationRequestStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptCreateTexmlApplicationRequestStatusCallbackMethod was set.
func (o OptCreateTexmlApplicationRequestStatusCallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateTexmlApplicationRequestStatusCallbackMethod) Reset() {
	var v CreateTexmlApplicationRequestStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateTexmlApplicationRequestStatusCallbackMethod) SetTo(v CreateTexmlApplicationRequestStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateTexmlApplicationRequestStatusCallbackMethod) Get() (v CreateTexmlApplicationRequestStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateTexmlApplicationRequestStatusCallbackMethod) Or(d CreateTexmlApplicationRequestStatusCallbackMethod) CreateTexmlApplicationRequestStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateTexmlApplicationRequestVoiceMethod returns new OptCreateTexmlApplicationRequestVoiceMethod with value set to v.
func NewOptCreateTexmlApplicationRequestVoiceMethod(v CreateTexmlApplicationRequestVoiceMethod) OptCreateTexmlApplicationRequestVoiceMethod {
	return OptCreateTexmlApplicationRequestVoiceMethod{
		Value: v,
		Set:   true,
	}
}

// OptCreateTexmlApplicationRequestVoiceMethod is optional CreateTexmlApplicationRequestVoiceMethod.
type OptCreateTexmlApplicationRequestVoiceMethod struct {
	Value CreateTexmlApplicationRequestVoiceMethod
	Set   bool
}

// IsSet returns true if OptCreateTexmlApplicationRequestVoiceMethod was set.
func (o OptCreateTexmlApplicationRequestVoiceMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateTexmlApplicationRequestVoiceMethod) Reset() {
	var v CreateTexmlApplicationRequestVoiceMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateTexmlApplicationRequestVoiceMethod) SetTo(v CreateTexmlApplicationRequestVoiceMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateTexmlApplicationRequestVoiceMethod) Get() (v CreateTexmlApplicationRequestVoiceMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateTexmlApplicationRequestVoiceMethod) Or(d CreateTexmlApplicationRequestVoiceMethod) CreateTexmlApplicationRequestVoiceMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateVerifyProfileCallRequest returns new OptCreateVerifyProfileCallRequest with value set to v.
func NewOptCreateVerifyProfileCallRequest(v CreateVerifyProfileCallRequest) OptCreateVerifyProfileCallRequest {
	return OptCreateVerifyProfileCallRequest{
		Value: v,
		Set:   true,
	}
}

// OptCreateVerifyProfileCallRequest is optional CreateVerifyProfileCallRequest.
type OptCreateVerifyProfileCallRequest struct {
	Value CreateVerifyProfileCallRequest
	Set   bool
}

// IsSet returns true if OptCreateVerifyProfileCallRequest was set.
func (o OptCreateVerifyProfileCallRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateVerifyProfileCallRequest) Reset() {
	var v CreateVerifyProfileCallRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateVerifyProfileCallRequest) SetTo(v CreateVerifyProfileCallRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateVerifyProfileCallRequest) Get() (v CreateVerifyProfileCallRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateVerifyProfileCallRequest) Or(d CreateVerifyProfileCallRequest) CreateVerifyProfileCallRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateVerifyProfileFlashcallRequest returns new OptCreateVerifyProfileFlashcallRequest with value set to v.
func NewOptCreateVerifyProfileFlashcallRequest(v CreateVerifyProfileFlashcallRequest) OptCreateVerifyProfileFlashcallRequest {
	return OptCreateVerifyProfileFlashcallRequest{
		Value: v,
		Set:   true,
	}
}

// OptCreateVerifyProfileFlashcallRequest is optional CreateVerifyProfileFlashcallRequest.
type OptCreateVerifyProfileFlashcallRequest struct {
	Value CreateVerifyProfileFlashcallRequest
	Set   bool
}

// IsSet returns true if OptCreateVerifyProfileFlashcallRequest was set.
func (o OptCreateVerifyProfileFlashcallRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateVerifyProfileFlashcallRequest) Reset() {
	var v CreateVerifyProfileFlashcallRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateVerifyProfileFlashcallRequest) SetTo(v CreateVerifyProfileFlashcallRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateVerifyProfileFlashcallRequest) Get() (v CreateVerifyProfileFlashcallRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateVerifyProfileFlashcallRequest) Or(d CreateVerifyProfileFlashcallRequest) CreateVerifyProfileFlashcallRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateVerifyProfileSMSRequest returns new OptCreateVerifyProfileSMSRequest with value set to v.
func NewOptCreateVerifyProfileSMSRequest(v CreateVerifyProfileSMSRequest) OptCreateVerifyProfileSMSRequest {
	return OptCreateVerifyProfileSMSRequest{
		Value: v,
		Set:   true,
	}
}

// OptCreateVerifyProfileSMSRequest is optional CreateVerifyProfileSMSRequest.
type OptCreateVerifyProfileSMSRequest struct {
	Value CreateVerifyProfileSMSRequest
	Set   bool
}

// IsSet returns true if OptCreateVerifyProfileSMSRequest was set.
func (o OptCreateVerifyProfileSMSRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateVerifyProfileSMSRequest) Reset() {
	var v CreateVerifyProfileSMSRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateVerifyProfileSMSRequest) SetTo(v CreateVerifyProfileSMSRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateVerifyProfileSMSRequest) Get() (v CreateVerifyProfileSMSRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateVerifyProfileSMSRequest) Or(d CreateVerifyProfileSMSRequest) CreateVerifyProfileSMSRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatedAt returns new OptCreatedAt with value set to v.
func NewOptCreatedAt(v CreatedAt) OptCreatedAt {
	return OptCreatedAt{
		Value: v,
		Set:   true,
	}
}

// OptCreatedAt is optional CreatedAt.
type OptCreatedAt struct {
	Value CreatedAt
	Set   bool
}

// IsSet returns true if OptCreatedAt was set.
func (o OptCreatedAt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatedAt) Reset() {
	var v CreatedAt
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatedAt) SetTo(v CreatedAt) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatedAt) Get() (v CreatedAt, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatedAt) Or(d CreatedAt) CreatedAt {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCredentials returns new OptCredentials with value set to v.
func NewOptCredentials(v Credentials) OptCredentials {
	return OptCredentials{
		Value: v,
		Set:   true,
	}
}

// OptCredentials is optional Credentials.
type OptCredentials struct {
	Value Credentials
	Set   bool
}

// IsSet returns true if OptCredentials was set.
func (o OptCredentials) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCredentials) Reset() {
	var v Credentials
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCredentials) SetTo(v Credentials) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCredentials) Get() (v Credentials, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCredentials) Or(d Credentials) Credentials {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCsvDownloadStatus returns new OptCsvDownloadStatus with value set to v.
func NewOptCsvDownloadStatus(v CsvDownloadStatus) OptCsvDownloadStatus {
	return OptCsvDownloadStatus{
		Value: v,
		Set:   true,
	}
}

// OptCsvDownloadStatus is optional CsvDownloadStatus.
type OptCsvDownloadStatus struct {
	Value CsvDownloadStatus
	Set   bool
}

// IsSet returns true if OptCsvDownloadStatus was set.
func (o OptCsvDownloadStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCsvDownloadStatus) Reset() {
	var v CsvDownloadStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCsvDownloadStatus) SetTo(v CsvDownloadStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCsvDownloadStatus) Get() (v CsvDownloadStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCsvDownloadStatus) Or(d CsvDownloadStatus) CsvDownloadStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCursor returns new OptCursor with value set to v.
func NewOptCursor(v Cursor) OptCursor {
	return OptCursor{
		Value: v,
		Set:   true,
	}
}

// OptCursor is optional Cursor.
type OptCursor struct {
	Value Cursor
	Set   bool
}

// IsSet returns true if OptCursor was set.
func (o OptCursor) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCursor) Reset() {
	var v Cursor
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCursor) SetTo(v Cursor) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCursor) Get() (v Cursor, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCursor) Or(d Cursor) Cursor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCursorPaginationMeta returns new OptCursorPaginationMeta with value set to v.
func NewOptCursorPaginationMeta(v CursorPaginationMeta) OptCursorPaginationMeta {
	return OptCursorPaginationMeta{
		Value: v,
		Set:   true,
	}
}

// OptCursorPaginationMeta is optional CursorPaginationMeta.
type OptCursorPaginationMeta struct {
	Value CursorPaginationMeta
	Set   bool
}

// IsSet returns true if OptCursorPaginationMeta was set.
func (o OptCursorPaginationMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCursorPaginationMeta) Reset() {
	var v CursorPaginationMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCursorPaginationMeta) SetTo(v CursorPaginationMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCursorPaginationMeta) Get() (v CursorPaginationMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCursorPaginationMeta) Or(d CursorPaginationMeta) CursorPaginationMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDate returns new OptDate with value set to v.
func NewOptDate(v time.Time) OptDate {
	return OptDate{
		Value: v,
		Set:   true,
	}
}

// OptDate is optional time.Time.
type OptDate struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDate was set.
func (o OptDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDate) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDate) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDate) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDate) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTimeRFC2822 returns new OptDateTimeRFC2822 with value set to v.
func NewOptDateTimeRFC2822(v DateTimeRFC2822) OptDateTimeRFC2822 {
	return OptDateTimeRFC2822{
		Value: v,
		Set:   true,
	}
}

// OptDateTimeRFC2822 is optional DateTimeRFC2822.
type OptDateTimeRFC2822 struct {
	Value DateTimeRFC2822
	Set   bool
}

// IsSet returns true if OptDateTimeRFC2822 was set.
func (o OptDateTimeRFC2822) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTimeRFC2822) Reset() {
	var v DateTimeRFC2822
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTimeRFC2822) SetTo(v DateTimeRFC2822) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTimeRFC2822) Get() (v DateTimeRFC2822, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTimeRFC2822) Or(d DateTimeRFC2822) DateTimeRFC2822 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialConferenceParticipantRequestAmdStatusCallbackMethod returns new OptDialConferenceParticipantRequestAmdStatusCallbackMethod with value set to v.
func NewOptDialConferenceParticipantRequestAmdStatusCallbackMethod(v DialConferenceParticipantRequestAmdStatusCallbackMethod) OptDialConferenceParticipantRequestAmdStatusCallbackMethod {
	return OptDialConferenceParticipantRequestAmdStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptDialConferenceParticipantRequestAmdStatusCallbackMethod is optional DialConferenceParticipantRequestAmdStatusCallbackMethod.
type OptDialConferenceParticipantRequestAmdStatusCallbackMethod struct {
	Value DialConferenceParticipantRequestAmdStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptDialConferenceParticipantRequestAmdStatusCallbackMethod was set.
func (o OptDialConferenceParticipantRequestAmdStatusCallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialConferenceParticipantRequestAmdStatusCallbackMethod) Reset() {
	var v DialConferenceParticipantRequestAmdStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialConferenceParticipantRequestAmdStatusCallbackMethod) SetTo(v DialConferenceParticipantRequestAmdStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialConferenceParticipantRequestAmdStatusCallbackMethod) Get() (v DialConferenceParticipantRequestAmdStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialConferenceParticipantRequestAmdStatusCallbackMethod) Or(d DialConferenceParticipantRequestAmdStatusCallbackMethod) DialConferenceParticipantRequestAmdStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialConferenceParticipantRequestBeep returns new OptDialConferenceParticipantRequestBeep with value set to v.
func NewOptDialConferenceParticipantRequestBeep(v DialConferenceParticipantRequestBeep) OptDialConferenceParticipantRequestBeep {
	return OptDialConferenceParticipantRequestBeep{
		Value: v,
		Set:   true,
	}
}

// OptDialConferenceParticipantRequestBeep is optional DialConferenceParticipantRequestBeep.
type OptDialConferenceParticipantRequestBeep struct {
	Value DialConferenceParticipantRequestBeep
	Set   bool
}

// IsSet returns true if OptDialConferenceParticipantRequestBeep was set.
func (o OptDialConferenceParticipantRequestBeep) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialConferenceParticipantRequestBeep) Reset() {
	var v DialConferenceParticipantRequestBeep
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialConferenceParticipantRequestBeep) SetTo(v DialConferenceParticipantRequestBeep) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialConferenceParticipantRequestBeep) Get() (v DialConferenceParticipantRequestBeep, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialConferenceParticipantRequestBeep) Or(d DialConferenceParticipantRequestBeep) DialConferenceParticipantRequestBeep {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialConferenceParticipantRequestConferenceRecord returns new OptDialConferenceParticipantRequestConferenceRecord with value set to v.
func NewOptDialConferenceParticipantRequestConferenceRecord(v DialConferenceParticipantRequestConferenceRecord) OptDialConferenceParticipantRequestConferenceRecord {
	return OptDialConferenceParticipantRequestConferenceRecord{
		Value: v,
		Set:   true,
	}
}

// OptDialConferenceParticipantRequestConferenceRecord is optional DialConferenceParticipantRequestConferenceRecord.
type OptDialConferenceParticipantRequestConferenceRecord struct {
	Value DialConferenceParticipantRequestConferenceRecord
	Set   bool
}

// IsSet returns true if OptDialConferenceParticipantRequestConferenceRecord was set.
func (o OptDialConferenceParticipantRequestConferenceRecord) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialConferenceParticipantRequestConferenceRecord) Reset() {
	var v DialConferenceParticipantRequestConferenceRecord
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialConferenceParticipantRequestConferenceRecord) SetTo(v DialConferenceParticipantRequestConferenceRecord) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialConferenceParticipantRequestConferenceRecord) Get() (v DialConferenceParticipantRequestConferenceRecord, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialConferenceParticipantRequestConferenceRecord) Or(d DialConferenceParticipantRequestConferenceRecord) DialConferenceParticipantRequestConferenceRecord {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod returns new OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod with value set to v.
func NewOptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod(v DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod) OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod {
	return OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod is optional DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod.
type OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod struct {
	Value DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod was set.
func (o OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod) Reset() {
	var v DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod) SetTo(v DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod) Get() (v DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod) Or(d DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod) DialConferenceParticipantRequestConferenceRecordingStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialConferenceParticipantRequestConferenceStatusCallbackMethod returns new OptDialConferenceParticipantRequestConferenceStatusCallbackMethod with value set to v.
func NewOptDialConferenceParticipantRequestConferenceStatusCallbackMethod(v DialConferenceParticipantRequestConferenceStatusCallbackMethod) OptDialConferenceParticipantRequestConferenceStatusCallbackMethod {
	return OptDialConferenceParticipantRequestConferenceStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptDialConferenceParticipantRequestConferenceStatusCallbackMethod is optional DialConferenceParticipantRequestConferenceStatusCallbackMethod.
type OptDialConferenceParticipantRequestConferenceStatusCallbackMethod struct {
	Value DialConferenceParticipantRequestConferenceStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptDialConferenceParticipantRequestConferenceStatusCallbackMethod was set.
func (o OptDialConferenceParticipantRequestConferenceStatusCallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialConferenceParticipantRequestConferenceStatusCallbackMethod) Reset() {
	var v DialConferenceParticipantRequestConferenceStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialConferenceParticipantRequestConferenceStatusCallbackMethod) SetTo(v DialConferenceParticipantRequestConferenceStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialConferenceParticipantRequestConferenceStatusCallbackMethod) Get() (v DialConferenceParticipantRequestConferenceStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialConferenceParticipantRequestConferenceStatusCallbackMethod) Or(d DialConferenceParticipantRequestConferenceStatusCallbackMethod) DialConferenceParticipantRequestConferenceStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialConferenceParticipantRequestConferenceTrim returns new OptDialConferenceParticipantRequestConferenceTrim with value set to v.
func NewOptDialConferenceParticipantRequestConferenceTrim(v DialConferenceParticipantRequestConferenceTrim) OptDialConferenceParticipantRequestConferenceTrim {
	return OptDialConferenceParticipantRequestConferenceTrim{
		Value: v,
		Set:   true,
	}
}

// OptDialConferenceParticipantRequestConferenceTrim is optional DialConferenceParticipantRequestConferenceTrim.
type OptDialConferenceParticipantRequestConferenceTrim struct {
	Value DialConferenceParticipantRequestConferenceTrim
	Set   bool
}

// IsSet returns true if OptDialConferenceParticipantRequestConferenceTrim was set.
func (o OptDialConferenceParticipantRequestConferenceTrim) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialConferenceParticipantRequestConferenceTrim) Reset() {
	var v DialConferenceParticipantRequestConferenceTrim
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialConferenceParticipantRequestConferenceTrim) SetTo(v DialConferenceParticipantRequestConferenceTrim) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialConferenceParticipantRequestConferenceTrim) Get() (v DialConferenceParticipantRequestConferenceTrim, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialConferenceParticipantRequestConferenceTrim) Or(d DialConferenceParticipantRequestConferenceTrim) DialConferenceParticipantRequestConferenceTrim {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialConferenceParticipantRequestMachineDetection returns new OptDialConferenceParticipantRequestMachineDetection with value set to v.
func NewOptDialConferenceParticipantRequestMachineDetection(v DialConferenceParticipantRequestMachineDetection) OptDialConferenceParticipantRequestMachineDetection {
	return OptDialConferenceParticipantRequestMachineDetection{
		Value: v,
		Set:   true,
	}
}

// OptDialConferenceParticipantRequestMachineDetection is optional DialConferenceParticipantRequestMachineDetection.
type OptDialConferenceParticipantRequestMachineDetection struct {
	Value DialConferenceParticipantRequestMachineDetection
	Set   bool
}

// IsSet returns true if OptDialConferenceParticipantRequestMachineDetection was set.
func (o OptDialConferenceParticipantRequestMachineDetection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialConferenceParticipantRequestMachineDetection) Reset() {
	var v DialConferenceParticipantRequestMachineDetection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialConferenceParticipantRequestMachineDetection) SetTo(v DialConferenceParticipantRequestMachineDetection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialConferenceParticipantRequestMachineDetection) Get() (v DialConferenceParticipantRequestMachineDetection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialConferenceParticipantRequestMachineDetection) Or(d DialConferenceParticipantRequestMachineDetection) DialConferenceParticipantRequestMachineDetection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialConferenceParticipantRequestRecordingChannels returns new OptDialConferenceParticipantRequestRecordingChannels with value set to v.
func NewOptDialConferenceParticipantRequestRecordingChannels(v DialConferenceParticipantRequestRecordingChannels) OptDialConferenceParticipantRequestRecordingChannels {
	return OptDialConferenceParticipantRequestRecordingChannels{
		Value: v,
		Set:   true,
	}
}

// OptDialConferenceParticipantRequestRecordingChannels is optional DialConferenceParticipantRequestRecordingChannels.
type OptDialConferenceParticipantRequestRecordingChannels struct {
	Value DialConferenceParticipantRequestRecordingChannels
	Set   bool
}

// IsSet returns true if OptDialConferenceParticipantRequestRecordingChannels was set.
func (o OptDialConferenceParticipantRequestRecordingChannels) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialConferenceParticipantRequestRecordingChannels) Reset() {
	var v DialConferenceParticipantRequestRecordingChannels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialConferenceParticipantRequestRecordingChannels) SetTo(v DialConferenceParticipantRequestRecordingChannels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialConferenceParticipantRequestRecordingChannels) Get() (v DialConferenceParticipantRequestRecordingChannels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialConferenceParticipantRequestRecordingChannels) Or(d DialConferenceParticipantRequestRecordingChannels) DialConferenceParticipantRequestRecordingChannels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialConferenceParticipantRequestRecordingStatusCallbackMethod returns new OptDialConferenceParticipantRequestRecordingStatusCallbackMethod with value set to v.
func NewOptDialConferenceParticipantRequestRecordingStatusCallbackMethod(v DialConferenceParticipantRequestRecordingStatusCallbackMethod) OptDialConferenceParticipantRequestRecordingStatusCallbackMethod {
	return OptDialConferenceParticipantRequestRecordingStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptDialConferenceParticipantRequestRecordingStatusCallbackMethod is optional DialConferenceParticipantRequestRecordingStatusCallbackMethod.
type OptDialConferenceParticipantRequestRecordingStatusCallbackMethod struct {
	Value DialConferenceParticipantRequestRecordingStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptDialConferenceParticipantRequestRecordingStatusCallbackMethod was set.
func (o OptDialConferenceParticipantRequestRecordingStatusCallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialConferenceParticipantRequestRecordingStatusCallbackMethod) Reset() {
	var v DialConferenceParticipantRequestRecordingStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialConferenceParticipantRequestRecordingStatusCallbackMethod) SetTo(v DialConferenceParticipantRequestRecordingStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialConferenceParticipantRequestRecordingStatusCallbackMethod) Get() (v DialConferenceParticipantRequestRecordingStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialConferenceParticipantRequestRecordingStatusCallbackMethod) Or(d DialConferenceParticipantRequestRecordingStatusCallbackMethod) DialConferenceParticipantRequestRecordingStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialConferenceParticipantRequestRecordingTrack returns new OptDialConferenceParticipantRequestRecordingTrack with value set to v.
func NewOptDialConferenceParticipantRequestRecordingTrack(v DialConferenceParticipantRequestRecordingTrack) OptDialConferenceParticipantRequestRecordingTrack {
	return OptDialConferenceParticipantRequestRecordingTrack{
		Value: v,
		Set:   true,
	}
}

// OptDialConferenceParticipantRequestRecordingTrack is optional DialConferenceParticipantRequestRecordingTrack.
type OptDialConferenceParticipantRequestRecordingTrack struct {
	Value DialConferenceParticipantRequestRecordingTrack
	Set   bool
}

// IsSet returns true if OptDialConferenceParticipantRequestRecordingTrack was set.
func (o OptDialConferenceParticipantRequestRecordingTrack) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialConferenceParticipantRequestRecordingTrack) Reset() {
	var v DialConferenceParticipantRequestRecordingTrack
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialConferenceParticipantRequestRecordingTrack) SetTo(v DialConferenceParticipantRequestRecordingTrack) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialConferenceParticipantRequestRecordingTrack) Get() (v DialConferenceParticipantRequestRecordingTrack, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialConferenceParticipantRequestRecordingTrack) Or(d DialConferenceParticipantRequestRecordingTrack) DialConferenceParticipantRequestRecordingTrack {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialConferenceParticipantRequestStatusCallbackMethod returns new OptDialConferenceParticipantRequestStatusCallbackMethod with value set to v.
func NewOptDialConferenceParticipantRequestStatusCallbackMethod(v DialConferenceParticipantRequestStatusCallbackMethod) OptDialConferenceParticipantRequestStatusCallbackMethod {
	return OptDialConferenceParticipantRequestStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptDialConferenceParticipantRequestStatusCallbackMethod is optional DialConferenceParticipantRequestStatusCallbackMethod.
type OptDialConferenceParticipantRequestStatusCallbackMethod struct {
	Value DialConferenceParticipantRequestStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptDialConferenceParticipantRequestStatusCallbackMethod was set.
func (o OptDialConferenceParticipantRequestStatusCallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialConferenceParticipantRequestStatusCallbackMethod) Reset() {
	var v DialConferenceParticipantRequestStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialConferenceParticipantRequestStatusCallbackMethod) SetTo(v DialConferenceParticipantRequestStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialConferenceParticipantRequestStatusCallbackMethod) Get() (v DialConferenceParticipantRequestStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialConferenceParticipantRequestStatusCallbackMethod) Or(d DialConferenceParticipantRequestStatusCallbackMethod) DialConferenceParticipantRequestStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialConferenceParticipantRequestTrim returns new OptDialConferenceParticipantRequestTrim with value set to v.
func NewOptDialConferenceParticipantRequestTrim(v DialConferenceParticipantRequestTrim) OptDialConferenceParticipantRequestTrim {
	return OptDialConferenceParticipantRequestTrim{
		Value: v,
		Set:   true,
	}
}

// OptDialConferenceParticipantRequestTrim is optional DialConferenceParticipantRequestTrim.
type OptDialConferenceParticipantRequestTrim struct {
	Value DialConferenceParticipantRequestTrim
	Set   bool
}

// IsSet returns true if OptDialConferenceParticipantRequestTrim was set.
func (o OptDialConferenceParticipantRequestTrim) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialConferenceParticipantRequestTrim) Reset() {
	var v DialConferenceParticipantRequestTrim
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialConferenceParticipantRequestTrim) SetTo(v DialConferenceParticipantRequestTrim) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialConferenceParticipantRequestTrim) Get() (v DialConferenceParticipantRequestTrim, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialConferenceParticipantRequestTrim) Or(d DialConferenceParticipantRequestTrim) DialConferenceParticipantRequestTrim {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDialogflowConfig returns new OptDialogflowConfig with value set to v.
func NewOptDialogflowConfig(v DialogflowConfig) OptDialogflowConfig {
	return OptDialogflowConfig{
		Value: v,
		Set:   true,
	}
}

// OptDialogflowConfig is optional DialogflowConfig.
type OptDialogflowConfig struct {
	Value DialogflowConfig
	Set   bool
}

// IsSet returns true if OptDialogflowConfig was set.
func (o OptDialogflowConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialogflowConfig) Reset() {
	var v DialogflowConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialogflowConfig) SetTo(v DialogflowConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialogflowConfig) Get() (v DialogflowConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialogflowConfig) Or(d DialogflowConfig) DialogflowConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDisplayName returns new OptDisplayName with value set to v.
func NewOptDisplayName(v DisplayName) OptDisplayName {
	return OptDisplayName{
		Value: v,
		Set:   true,
	}
}

// OptDisplayName is optional DisplayName.
type OptDisplayName struct {
	Value DisplayName
	Set   bool
}

// IsSet returns true if OptDisplayName was set.
func (o OptDisplayName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDisplayName) Reset() {
	var v DisplayName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDisplayName) SetTo(v DisplayName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDisplayName) Get() (v DisplayName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDisplayName) Or(d DisplayName) DisplayName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDocReqsActionFilter returns new OptDocReqsActionFilter with value set to v.
func NewOptDocReqsActionFilter(v DocReqsActionFilter) OptDocReqsActionFilter {
	return OptDocReqsActionFilter{
		Value: v,
		Set:   true,
	}
}

// OptDocReqsActionFilter is optional DocReqsActionFilter.
type OptDocReqsActionFilter struct {
	Value DocReqsActionFilter
	Set   bool
}

// IsSet returns true if OptDocReqsActionFilter was set.
func (o OptDocReqsActionFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDocReqsActionFilter) Reset() {
	var v DocReqsActionFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDocReqsActionFilter) SetTo(v DocReqsActionFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDocReqsActionFilter) Get() (v DocReqsActionFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDocReqsActionFilter) Or(d DocReqsActionFilter) DocReqsActionFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDocReqsPhoneNumberTypeFilter returns new OptDocReqsPhoneNumberTypeFilter with value set to v.
func NewOptDocReqsPhoneNumberTypeFilter(v DocReqsPhoneNumberTypeFilter) OptDocReqsPhoneNumberTypeFilter {
	return OptDocReqsPhoneNumberTypeFilter{
		Value: v,
		Set:   true,
	}
}

// OptDocReqsPhoneNumberTypeFilter is optional DocReqsPhoneNumberTypeFilter.
type OptDocReqsPhoneNumberTypeFilter struct {
	Value DocReqsPhoneNumberTypeFilter
	Set   bool
}

// IsSet returns true if OptDocReqsPhoneNumberTypeFilter was set.
func (o OptDocReqsPhoneNumberTypeFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDocReqsPhoneNumberTypeFilter) Reset() {
	var v DocReqsPhoneNumberTypeFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDocReqsPhoneNumberTypeFilter) SetTo(v DocReqsPhoneNumberTypeFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDocReqsPhoneNumberTypeFilter) Get() (v DocReqsPhoneNumberTypeFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDocReqsPhoneNumberTypeFilter) Or(d DocReqsPhoneNumberTypeFilter) DocReqsPhoneNumberTypeFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDocReqsRequirement returns new OptDocReqsRequirement with value set to v.
func NewOptDocReqsRequirement(v DocReqsRequirement) OptDocReqsRequirement {
	return OptDocReqsRequirement{
		Value: v,
		Set:   true,
	}
}

// OptDocReqsRequirement is optional DocReqsRequirement.
type OptDocReqsRequirement struct {
	Value DocReqsRequirement
	Set   bool
}

// IsSet returns true if OptDocReqsRequirement was set.
func (o OptDocReqsRequirement) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDocReqsRequirement) Reset() {
	var v DocReqsRequirement
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDocReqsRequirement) SetTo(v DocReqsRequirement) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDocReqsRequirement) Get() (v DocReqsRequirement, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDocReqsRequirement) Or(d DocReqsRequirement) DocReqsRequirement {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDocReqsRequirementAction returns new OptDocReqsRequirementAction with value set to v.
func NewOptDocReqsRequirementAction(v DocReqsRequirementAction) OptDocReqsRequirementAction {
	return OptDocReqsRequirementAction{
		Value: v,
		Set:   true,
	}
}

// OptDocReqsRequirementAction is optional DocReqsRequirementAction.
type OptDocReqsRequirementAction struct {
	Value DocReqsRequirementAction
	Set   bool
}

// IsSet returns true if OptDocReqsRequirementAction was set.
func (o OptDocReqsRequirementAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDocReqsRequirementAction) Reset() {
	var v DocReqsRequirementAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDocReqsRequirementAction) SetTo(v DocReqsRequirementAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDocReqsRequirementAction) Get() (v DocReqsRequirementAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDocReqsRequirementAction) Or(d DocReqsRequirementAction) DocReqsRequirementAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDocReqsRequirementPhoneNumberType returns new OptDocReqsRequirementPhoneNumberType with value set to v.
func NewOptDocReqsRequirementPhoneNumberType(v DocReqsRequirementPhoneNumberType) OptDocReqsRequirementPhoneNumberType {
	return OptDocReqsRequirementPhoneNumberType{
		Value: v,
		Set:   true,
	}
}

// OptDocReqsRequirementPhoneNumberType is optional DocReqsRequirementPhoneNumberType.
type OptDocReqsRequirementPhoneNumberType struct {
	Value DocReqsRequirementPhoneNumberType
	Set   bool
}

// IsSet returns true if OptDocReqsRequirementPhoneNumberType was set.
func (o OptDocReqsRequirementPhoneNumberType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDocReqsRequirementPhoneNumberType) Reset() {
	var v DocReqsRequirementPhoneNumberType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDocReqsRequirementPhoneNumberType) SetTo(v DocReqsRequirementPhoneNumberType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDocReqsRequirementPhoneNumberType) Get() (v DocReqsRequirementPhoneNumberType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDocReqsRequirementPhoneNumberType) Or(d DocReqsRequirementPhoneNumberType) DocReqsRequirementPhoneNumberType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDocReqsRequirementTypeAcceptanceCriteria returns new OptDocReqsRequirementTypeAcceptanceCriteria with value set to v.
func NewOptDocReqsRequirementTypeAcceptanceCriteria(v DocReqsRequirementTypeAcceptanceCriteria) OptDocReqsRequirementTypeAcceptanceCriteria {
	return OptDocReqsRequirementTypeAcceptanceCriteria{
		Value: v,
		Set:   true,
	}
}

// OptDocReqsRequirementTypeAcceptanceCriteria is optional DocReqsRequirementTypeAcceptanceCriteria.
type OptDocReqsRequirementTypeAcceptanceCriteria struct {
	Value DocReqsRequirementTypeAcceptanceCriteria
	Set   bool
}

// IsSet returns true if OptDocReqsRequirementTypeAcceptanceCriteria was set.
func (o OptDocReqsRequirementTypeAcceptanceCriteria) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDocReqsRequirementTypeAcceptanceCriteria) Reset() {
	var v DocReqsRequirementTypeAcceptanceCriteria
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDocReqsRequirementTypeAcceptanceCriteria) SetTo(v DocReqsRequirementTypeAcceptanceCriteria) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDocReqsRequirementTypeAcceptanceCriteria) Get() (v DocReqsRequirementTypeAcceptanceCriteria, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDocReqsRequirementTypeAcceptanceCriteria) Or(d DocReqsRequirementTypeAcceptanceCriteria) DocReqsRequirementTypeAcceptanceCriteria {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDocReqsRequirementTypeType returns new OptDocReqsRequirementTypeType with value set to v.
func NewOptDocReqsRequirementTypeType(v DocReqsRequirementTypeType) OptDocReqsRequirementTypeType {
	return OptDocReqsRequirementTypeType{
		Value: v,
		Set:   true,
	}
}

// OptDocReqsRequirementTypeType is optional DocReqsRequirementTypeType.
type OptDocReqsRequirementTypeType struct {
	Value DocReqsRequirementTypeType
	Set   bool
}

// IsSet returns true if OptDocReqsRequirementTypeType was set.
func (o OptDocReqsRequirementTypeType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDocReqsRequirementTypeType) Reset() {
	var v DocReqsRequirementTypeType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDocReqsRequirementTypeType) SetTo(v DocReqsRequirementTypeType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDocReqsRequirementTypeType) Get() (v DocReqsRequirementTypeType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDocReqsRequirementTypeType) Or(d DocReqsRequirementTypeType) DocReqsRequirementTypeType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDocReqsRequirementsSort returns new OptDocReqsRequirementsSort with value set to v.
func NewOptDocReqsRequirementsSort(v DocReqsRequirementsSort) OptDocReqsRequirementsSort {
	return OptDocReqsRequirementsSort{
		Value: v,
		Set:   true,
	}
}

// OptDocReqsRequirementsSort is optional DocReqsRequirementsSort.
type OptDocReqsRequirementsSort struct {
	Value DocReqsRequirementsSort
	Set   bool
}

// IsSet returns true if OptDocReqsRequirementsSort was set.
func (o OptDocReqsRequirementsSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDocReqsRequirementsSort) Reset() {
	var v DocReqsRequirementsSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDocReqsRequirementsSort) SetTo(v DocReqsRequirementsSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDocReqsRequirementsSort) Get() (v DocReqsRequirementsSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDocReqsRequirementsSort) Or(d DocReqsRequirementsSort) DocReqsRequirementsSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDtmfType returns new OptDtmfType with value set to v.
func NewOptDtmfType(v DtmfType) OptDtmfType {
	return OptDtmfType{
		Value: v,
		Set:   true,
	}
}

// OptDtmfType is optional DtmfType.
type OptDtmfType struct {
	Value DtmfType
	Set   bool
}

// IsSet returns true if OptDtmfType was set.
func (o OptDtmfType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDtmfType) Reset() {
	var v DtmfType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDtmfType) SetTo(v DtmfType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDtmfType) Get() (v DtmfType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDtmfType) Or(d DtmfType) DtmfType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEmergencySettings returns new OptEmergencySettings with value set to v.
func NewOptEmergencySettings(v EmergencySettings) OptEmergencySettings {
	return OptEmergencySettings{
		Value: v,
		Set:   true,
	}
}

// OptEmergencySettings is optional EmergencySettings.
type OptEmergencySettings struct {
	Value EmergencySettings
	Set   bool
}

// IsSet returns true if OptEmergencySettings was set.
func (o OptEmergencySettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEmergencySettings) Reset() {
	var v EmergencySettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEmergencySettings) SetTo(v EmergencySettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEmergencySettings) Get() (v EmergencySettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEmergencySettings) Or(d EmergencySettings) EmergencySettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEmergencySettingsEmergencyStatus returns new OptEmergencySettingsEmergencyStatus with value set to v.
func NewOptEmergencySettingsEmergencyStatus(v EmergencySettingsEmergencyStatus) OptEmergencySettingsEmergencyStatus {
	return OptEmergencySettingsEmergencyStatus{
		Value: v,
		Set:   true,
	}
}

// OptEmergencySettingsEmergencyStatus is optional EmergencySettingsEmergencyStatus.
type OptEmergencySettingsEmergencyStatus struct {
	Value EmergencySettingsEmergencyStatus
	Set   bool
}

// IsSet returns true if OptEmergencySettingsEmergencyStatus was set.
func (o OptEmergencySettingsEmergencyStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEmergencySettingsEmergencyStatus) Reset() {
	var v EmergencySettingsEmergencyStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEmergencySettingsEmergencyStatus) SetTo(v EmergencySettingsEmergencyStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEmergencySettingsEmergencyStatus) Get() (v EmergencySettingsEmergencyStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEmergencySettingsEmergencyStatus) Or(d EmergencySettingsEmergencyStatus) EmergencySettingsEmergencyStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptErrorMeta returns new OptErrorMeta with value set to v.
func NewOptErrorMeta(v ErrorMeta) OptErrorMeta {
	return OptErrorMeta{
		Value: v,
		Set:   true,
	}
}

// OptErrorMeta is optional ErrorMeta.
type OptErrorMeta struct {
	Value ErrorMeta
	Set   bool
}

// IsSet returns true if OptErrorMeta was set.
func (o OptErrorMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrorMeta) Reset() {
	var v ErrorMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrorMeta) SetTo(v ErrorMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrorMeta) Get() (v ErrorMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrorMeta) Or(d ErrorMeta) ErrorMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptErrorSource returns new OptErrorSource with value set to v.
func NewOptErrorSource(v ErrorSource) OptErrorSource {
	return OptErrorSource{
		Value: v,
		Set:   true,
	}
}

// OptErrorSource is optional ErrorSource.
type OptErrorSource struct {
	Value ErrorSource
	Set   bool
}

// IsSet returns true if OptErrorSource was set.
func (o OptErrorSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrorSource) Reset() {
	var v ErrorSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrorSource) SetTo(v ErrorSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrorSource) Get() (v ErrorSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrorSource) Or(d ErrorSource) ErrorSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExternalConnectionPhoneNumber returns new OptExternalConnectionPhoneNumber with value set to v.
func NewOptExternalConnectionPhoneNumber(v ExternalConnectionPhoneNumber) OptExternalConnectionPhoneNumber {
	return OptExternalConnectionPhoneNumber{
		Value: v,
		Set:   true,
	}
}

// OptExternalConnectionPhoneNumber is optional ExternalConnectionPhoneNumber.
type OptExternalConnectionPhoneNumber struct {
	Value ExternalConnectionPhoneNumber
	Set   bool
}

// IsSet returns true if OptExternalConnectionPhoneNumber was set.
func (o OptExternalConnectionPhoneNumber) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExternalConnectionPhoneNumber) Reset() {
	var v ExternalConnectionPhoneNumber
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExternalConnectionPhoneNumber) SetTo(v ExternalConnectionPhoneNumber) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExternalConnectionPhoneNumber) Get() (v ExternalConnectionPhoneNumber, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExternalConnectionPhoneNumber) Or(d ExternalConnectionPhoneNumber) ExternalConnectionPhoneNumber {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFilterBasicStatusLifecycle returns new OptFilterBasicStatusLifecycle with value set to v.
func NewOptFilterBasicStatusLifecycle(v FilterBasicStatusLifecycle) OptFilterBasicStatusLifecycle {
	return OptFilterBasicStatusLifecycle{
		Value: v,
		Set:   true,
	}
}

// OptFilterBasicStatusLifecycle is optional FilterBasicStatusLifecycle.
type OptFilterBasicStatusLifecycle struct {
	Value FilterBasicStatusLifecycle
	Set   bool
}

// IsSet returns true if OptFilterBasicStatusLifecycle was set.
func (o OptFilterBasicStatusLifecycle) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFilterBasicStatusLifecycle) Reset() {
	var v FilterBasicStatusLifecycle
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFilterBasicStatusLifecycle) SetTo(v FilterBasicStatusLifecycle) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFilterBasicStatusLifecycle) Get() (v FilterBasicStatusLifecycle, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFilterBasicStatusLifecycle) Or(d FilterBasicStatusLifecycle) FilterBasicStatusLifecycle {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFilterByPortingOrderStatus returns new OptFilterByPortingOrderStatus with value set to v.
func NewOptFilterByPortingOrderStatus(v FilterByPortingOrderStatus) OptFilterByPortingOrderStatus {
	return OptFilterByPortingOrderStatus{
		Value: v,
		Set:   true,
	}
}

// OptFilterByPortingOrderStatus is optional FilterByPortingOrderStatus.
type OptFilterByPortingOrderStatus struct {
	Value FilterByPortingOrderStatus
	Set   bool
}

// IsSet returns true if OptFilterByPortingOrderStatus was set.
func (o OptFilterByPortingOrderStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFilterByPortingOrderStatus) Reset() {
	var v FilterByPortingOrderStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFilterByPortingOrderStatus) SetTo(v FilterByPortingOrderStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFilterByPortingOrderStatus) Get() (v FilterByPortingOrderStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFilterByPortingOrderStatus) Or(d FilterByPortingOrderStatus) FilterByPortingOrderStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFilterByPortingOrderStatusIn returns new OptFilterByPortingOrderStatusIn with value set to v.
func NewOptFilterByPortingOrderStatusIn(v FilterByPortingOrderStatusIn) OptFilterByPortingOrderStatusIn {
	return OptFilterByPortingOrderStatusIn{
		Value: v,
		Set:   true,
	}
}

// OptFilterByPortingOrderStatusIn is optional FilterByPortingOrderStatusIn.
type OptFilterByPortingOrderStatusIn struct {
	Value FilterByPortingOrderStatusIn
	Set   bool
}

// IsSet returns true if OptFilterByPortingOrderStatusIn was set.
func (o OptFilterByPortingOrderStatusIn) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFilterByPortingOrderStatusIn) Reset() {
	var v FilterByPortingOrderStatusIn
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFilterByPortingOrderStatusIn) SetTo(v FilterByPortingOrderStatusIn) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFilterByPortingOrderStatusIn) Get() (v FilterByPortingOrderStatusIn, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFilterByPortingOrderStatusIn) Or(d FilterByPortingOrderStatusIn) FilterByPortingOrderStatusIn {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFirstCommandTimeout returns new OptFirstCommandTimeout with value set to v.
func NewOptFirstCommandTimeout(v FirstCommandTimeout) OptFirstCommandTimeout {
	return OptFirstCommandTimeout{
		Value: v,
		Set:   true,
	}
}

// OptFirstCommandTimeout is optional FirstCommandTimeout.
type OptFirstCommandTimeout struct {
	Value FirstCommandTimeout
	Set   bool
}

// IsSet returns true if OptFirstCommandTimeout was set.
func (o OptFirstCommandTimeout) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFirstCommandTimeout) Reset() {
	var v FirstCommandTimeout
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFirstCommandTimeout) SetTo(v FirstCommandTimeout) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFirstCommandTimeout) Get() (v FirstCommandTimeout, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFirstCommandTimeout) Or(d FirstCommandTimeout) FirstCommandTimeout {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFirstCommandTimeoutSecs returns new OptFirstCommandTimeoutSecs with value set to v.
func NewOptFirstCommandTimeoutSecs(v FirstCommandTimeoutSecs) OptFirstCommandTimeoutSecs {
	return OptFirstCommandTimeoutSecs{
		Value: v,
		Set:   true,
	}
}

// OptFirstCommandTimeoutSecs is optional FirstCommandTimeoutSecs.
type OptFirstCommandTimeoutSecs struct {
	Value FirstCommandTimeoutSecs
	Set   bool
}

// IsSet returns true if OptFirstCommandTimeoutSecs was set.
func (o OptFirstCommandTimeoutSecs) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFirstCommandTimeoutSecs) Reset() {
	var v FirstCommandTimeoutSecs
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFirstCommandTimeoutSecs) SetTo(v FirstCommandTimeoutSecs) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFirstCommandTimeoutSecs) Get() (v FirstCommandTimeoutSecs, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFirstCommandTimeoutSecs) Or(d FirstCommandTimeoutSecs) FirstCommandTimeoutSecs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat32 returns new OptFloat32 with value set to v.
func NewOptFloat32(v float32) OptFloat32 {
	return OptFloat32{
		Value: v,
		Set:   true,
	}
}

// OptFloat32 is optional float32.
type OptFloat32 struct {
	Value float32
	Set   bool
}

// IsSet returns true if OptFloat32 was set.
func (o OptFloat32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat32) Reset() {
	var v float32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat32) SetTo(v float32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat32) Get() (v float32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat32) Or(d float32) float32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGatherUsingSpeakRequestLanguage returns new OptGatherUsingSpeakRequestLanguage with value set to v.
func NewOptGatherUsingSpeakRequestLanguage(v GatherUsingSpeakRequestLanguage) OptGatherUsingSpeakRequestLanguage {
	return OptGatherUsingSpeakRequestLanguage{
		Value: v,
		Set:   true,
	}
}

// OptGatherUsingSpeakRequestLanguage is optional GatherUsingSpeakRequestLanguage.
type OptGatherUsingSpeakRequestLanguage struct {
	Value GatherUsingSpeakRequestLanguage
	Set   bool
}

// IsSet returns true if OptGatherUsingSpeakRequestLanguage was set.
func (o OptGatherUsingSpeakRequestLanguage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGatherUsingSpeakRequestLanguage) Reset() {
	var v GatherUsingSpeakRequestLanguage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGatherUsingSpeakRequestLanguage) SetTo(v GatherUsingSpeakRequestLanguage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGatherUsingSpeakRequestLanguage) Get() (v GatherUsingSpeakRequestLanguage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGatherUsingSpeakRequestLanguage) Or(d GatherUsingSpeakRequestLanguage) GatherUsingSpeakRequestLanguage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGatherUsingSpeakRequestPayloadType returns new OptGatherUsingSpeakRequestPayloadType with value set to v.
func NewOptGatherUsingSpeakRequestPayloadType(v GatherUsingSpeakRequestPayloadType) OptGatherUsingSpeakRequestPayloadType {
	return OptGatherUsingSpeakRequestPayloadType{
		Value: v,
		Set:   true,
	}
}

// OptGatherUsingSpeakRequestPayloadType is optional GatherUsingSpeakRequestPayloadType.
type OptGatherUsingSpeakRequestPayloadType struct {
	Value GatherUsingSpeakRequestPayloadType
	Set   bool
}

// IsSet returns true if OptGatherUsingSpeakRequestPayloadType was set.
func (o OptGatherUsingSpeakRequestPayloadType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGatherUsingSpeakRequestPayloadType) Reset() {
	var v GatherUsingSpeakRequestPayloadType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGatherUsingSpeakRequestPayloadType) SetTo(v GatherUsingSpeakRequestPayloadType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGatherUsingSpeakRequestPayloadType) Get() (v GatherUsingSpeakRequestPayloadType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGatherUsingSpeakRequestPayloadType) Or(d GatherUsingSpeakRequestPayloadType) GatherUsingSpeakRequestPayloadType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGatherUsingSpeakRequestServiceLevel returns new OptGatherUsingSpeakRequestServiceLevel with value set to v.
func NewOptGatherUsingSpeakRequestServiceLevel(v GatherUsingSpeakRequestServiceLevel) OptGatherUsingSpeakRequestServiceLevel {
	return OptGatherUsingSpeakRequestServiceLevel{
		Value: v,
		Set:   true,
	}
}

// OptGatherUsingSpeakRequestServiceLevel is optional GatherUsingSpeakRequestServiceLevel.
type OptGatherUsingSpeakRequestServiceLevel struct {
	Value GatherUsingSpeakRequestServiceLevel
	Set   bool
}

// IsSet returns true if OptGatherUsingSpeakRequestServiceLevel was set.
func (o OptGatherUsingSpeakRequestServiceLevel) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGatherUsingSpeakRequestServiceLevel) Reset() {
	var v GatherUsingSpeakRequestServiceLevel
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGatherUsingSpeakRequestServiceLevel) SetTo(v GatherUsingSpeakRequestServiceLevel) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGatherUsingSpeakRequestServiceLevel) Get() (v GatherUsingSpeakRequestServiceLevel, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGatherUsingSpeakRequestServiceLevel) Or(d GatherUsingSpeakRequestServiceLevel) GatherUsingSpeakRequestServiceLevel {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetSubRequestByPortingOrder returns new OptGetSubRequestByPortingOrder with value set to v.
func NewOptGetSubRequestByPortingOrder(v GetSubRequestByPortingOrder) OptGetSubRequestByPortingOrder {
	return OptGetSubRequestByPortingOrder{
		Value: v,
		Set:   true,
	}
}

// OptGetSubRequestByPortingOrder is optional GetSubRequestByPortingOrder.
type OptGetSubRequestByPortingOrder struct {
	Value GetSubRequestByPortingOrder
	Set   bool
}

// IsSet returns true if OptGetSubRequestByPortingOrder was set.
func (o OptGetSubRequestByPortingOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetSubRequestByPortingOrder) Reset() {
	var v GetSubRequestByPortingOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetSubRequestByPortingOrder) SetTo(v GetSubRequestByPortingOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetSubRequestByPortingOrder) Get() (v GetSubRequestByPortingOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetSubRequestByPortingOrder) Or(d GetSubRequestByPortingOrder) GetSubRequestByPortingOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetWebhookDeliveriesFilterStatusEq returns new OptGetWebhookDeliveriesFilterStatusEq with value set to v.
func NewOptGetWebhookDeliveriesFilterStatusEq(v GetWebhookDeliveriesFilterStatusEq) OptGetWebhookDeliveriesFilterStatusEq {
	return OptGetWebhookDeliveriesFilterStatusEq{
		Value: v,
		Set:   true,
	}
}

// OptGetWebhookDeliveriesFilterStatusEq is optional GetWebhookDeliveriesFilterStatusEq.
type OptGetWebhookDeliveriesFilterStatusEq struct {
	Value GetWebhookDeliveriesFilterStatusEq
	Set   bool
}

// IsSet returns true if OptGetWebhookDeliveriesFilterStatusEq was set.
func (o OptGetWebhookDeliveriesFilterStatusEq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetWebhookDeliveriesFilterStatusEq) Reset() {
	var v GetWebhookDeliveriesFilterStatusEq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetWebhookDeliveriesFilterStatusEq) SetTo(v GetWebhookDeliveriesFilterStatusEq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetWebhookDeliveriesFilterStatusEq) Get() (v GetWebhookDeliveriesFilterStatusEq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetWebhookDeliveriesFilterStatusEq) Or(d GetWebhookDeliveriesFilterStatusEq) GetWebhookDeliveriesFilterStatusEq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHTTP returns new OptHTTP with value set to v.
func NewOptHTTP(v HTTP) OptHTTP {
	return OptHTTP{
		Value: v,
		Set:   true,
	}
}

// OptHTTP is optional HTTP.
type OptHTTP struct {
	Value HTTP
	Set   bool
}

// IsSet returns true if OptHTTP was set.
func (o OptHTTP) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHTTP) Reset() {
	var v HTTP
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHTTP) SetTo(v HTTP) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHTTP) Get() (v HTTP, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHTTP) Or(d HTTP) HTTP {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHTTPRequest returns new OptHTTPRequest with value set to v.
func NewOptHTTPRequest(v HTTPRequest) OptHTTPRequest {
	return OptHTTPRequest{
		Value: v,
		Set:   true,
	}
}

// OptHTTPRequest is optional HTTPRequest.
type OptHTTPRequest struct {
	Value HTTPRequest
	Set   bool
}

// IsSet returns true if OptHTTPRequest was set.
func (o OptHTTPRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHTTPRequest) Reset() {
	var v HTTPRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHTTPRequest) SetTo(v HTTPRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHTTPRequest) Get() (v HTTPRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHTTPRequest) Or(d HTTPRequest) HTTPRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHostedNumberStatus returns new OptHostedNumberStatus with value set to v.
func NewOptHostedNumberStatus(v HostedNumberStatus) OptHostedNumberStatus {
	return OptHostedNumberStatus{
		Value: v,
		Set:   true,
	}
}

// OptHostedNumberStatus is optional HostedNumberStatus.
type OptHostedNumberStatus struct {
	Value HostedNumberStatus
	Set   bool
}

// IsSet returns true if OptHostedNumberStatus was set.
func (o OptHostedNumberStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHostedNumberStatus) Reset() {
	var v HostedNumberStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHostedNumberStatus) SetTo(v HostedNumberStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHostedNumberStatus) Get() (v HostedNumberStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHostedNumberStatus) Or(d HostedNumberStatus) HostedNumberStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInitiateCallRequestAsyncAmdStatusCallbackMethod returns new OptInitiateCallRequestAsyncAmdStatusCallbackMethod with value set to v.
func NewOptInitiateCallRequestAsyncAmdStatusCallbackMethod(v InitiateCallRequestAsyncAmdStatusCallbackMethod) OptInitiateCallRequestAsyncAmdStatusCallbackMethod {
	return OptInitiateCallRequestAsyncAmdStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptInitiateCallRequestAsyncAmdStatusCallbackMethod is optional InitiateCallRequestAsyncAmdStatusCallbackMethod.
type OptInitiateCallRequestAsyncAmdStatusCallbackMethod struct {
	Value InitiateCallRequestAsyncAmdStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptInitiateCallRequestAsyncAmdStatusCallbackMethod was set.
func (o OptInitiateCallRequestAsyncAmdStatusCallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInitiateCallRequestAsyncAmdStatusCallbackMethod) Reset() {
	var v InitiateCallRequestAsyncAmdStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInitiateCallRequestAsyncAmdStatusCallbackMethod) SetTo(v InitiateCallRequestAsyncAmdStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInitiateCallRequestAsyncAmdStatusCallbackMethod) Get() (v InitiateCallRequestAsyncAmdStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInitiateCallRequestAsyncAmdStatusCallbackMethod) Or(d InitiateCallRequestAsyncAmdStatusCallbackMethod) InitiateCallRequestAsyncAmdStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInitiateCallRequestDetectionMode returns new OptInitiateCallRequestDetectionMode with value set to v.
func NewOptInitiateCallRequestDetectionMode(v InitiateCallRequestDetectionMode) OptInitiateCallRequestDetectionMode {
	return OptInitiateCallRequestDetectionMode{
		Value: v,
		Set:   true,
	}
}

// OptInitiateCallRequestDetectionMode is optional InitiateCallRequestDetectionMode.
type OptInitiateCallRequestDetectionMode struct {
	Value InitiateCallRequestDetectionMode
	Set   bool
}

// IsSet returns true if OptInitiateCallRequestDetectionMode was set.
func (o OptInitiateCallRequestDetectionMode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInitiateCallRequestDetectionMode) Reset() {
	var v InitiateCallRequestDetectionMode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInitiateCallRequestDetectionMode) SetTo(v InitiateCallRequestDetectionMode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInitiateCallRequestDetectionMode) Get() (v InitiateCallRequestDetectionMode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInitiateCallRequestDetectionMode) Or(d InitiateCallRequestDetectionMode) InitiateCallRequestDetectionMode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInitiateCallRequestMachineDetection returns new OptInitiateCallRequestMachineDetection with value set to v.
func NewOptInitiateCallRequestMachineDetection(v InitiateCallRequestMachineDetection) OptInitiateCallRequestMachineDetection {
	return OptInitiateCallRequestMachineDetection{
		Value: v,
		Set:   true,
	}
}

// OptInitiateCallRequestMachineDetection is optional InitiateCallRequestMachineDetection.
type OptInitiateCallRequestMachineDetection struct {
	Value InitiateCallRequestMachineDetection
	Set   bool
}

// IsSet returns true if OptInitiateCallRequestMachineDetection was set.
func (o OptInitiateCallRequestMachineDetection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInitiateCallRequestMachineDetection) Reset() {
	var v InitiateCallRequestMachineDetection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInitiateCallRequestMachineDetection) SetTo(v InitiateCallRequestMachineDetection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInitiateCallRequestMachineDetection) Get() (v InitiateCallRequestMachineDetection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInitiateCallRequestMachineDetection) Or(d InitiateCallRequestMachineDetection) InitiateCallRequestMachineDetection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInitiateCallRequestRecordingChannels returns new OptInitiateCallRequestRecordingChannels with value set to v.
func NewOptInitiateCallRequestRecordingChannels(v InitiateCallRequestRecordingChannels) OptInitiateCallRequestRecordingChannels {
	return OptInitiateCallRequestRecordingChannels{
		Value: v,
		Set:   true,
	}
}

// OptInitiateCallRequestRecordingChannels is optional InitiateCallRequestRecordingChannels.
type OptInitiateCallRequestRecordingChannels struct {
	Value InitiateCallRequestRecordingChannels
	Set   bool
}

// IsSet returns true if OptInitiateCallRequestRecordingChannels was set.
func (o OptInitiateCallRequestRecordingChannels) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInitiateCallRequestRecordingChannels) Reset() {
	var v InitiateCallRequestRecordingChannels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInitiateCallRequestRecordingChannels) SetTo(v InitiateCallRequestRecordingChannels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInitiateCallRequestRecordingChannels) Get() (v InitiateCallRequestRecordingChannels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInitiateCallRequestRecordingChannels) Or(d InitiateCallRequestRecordingChannels) InitiateCallRequestRecordingChannels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInitiateCallRequestRecordingStatusCallbackMethod returns new OptInitiateCallRequestRecordingStatusCallbackMethod with value set to v.
func NewOptInitiateCallRequestRecordingStatusCallbackMethod(v InitiateCallRequestRecordingStatusCallbackMethod) OptInitiateCallRequestRecordingStatusCallbackMethod {
	return OptInitiateCallRequestRecordingStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptInitiateCallRequestRecordingStatusCallbackMethod is optional InitiateCallRequestRecordingStatusCallbackMethod.
type OptInitiateCallRequestRecordingStatusCallbackMethod struct {
	Value InitiateCallRequestRecordingStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptInitiateCallRequestRecordingStatusCallbackMethod was set.
func (o OptInitiateCallRequestRecordingStatusCallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInitiateCallRequestRecordingStatusCallbackMethod) Reset() {
	var v InitiateCallRequestRecordingStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInitiateCallRequestRecordingStatusCallbackMethod) SetTo(v InitiateCallRequestRecordingStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInitiateCallRequestRecordingStatusCallbackMethod) Get() (v InitiateCallRequestRecordingStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInitiateCallRequestRecordingStatusCallbackMethod) Or(d InitiateCallRequestRecordingStatusCallbackMethod) InitiateCallRequestRecordingStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInitiateCallRequestRecordingTrack returns new OptInitiateCallRequestRecordingTrack with value set to v.
func NewOptInitiateCallRequestRecordingTrack(v InitiateCallRequestRecordingTrack) OptInitiateCallRequestRecordingTrack {
	return OptInitiateCallRequestRecordingTrack{
		Value: v,
		Set:   true,
	}
}

// OptInitiateCallRequestRecordingTrack is optional InitiateCallRequestRecordingTrack.
type OptInitiateCallRequestRecordingTrack struct {
	Value InitiateCallRequestRecordingTrack
	Set   bool
}

// IsSet returns true if OptInitiateCallRequestRecordingTrack was set.
func (o OptInitiateCallRequestRecordingTrack) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInitiateCallRequestRecordingTrack) Reset() {
	var v InitiateCallRequestRecordingTrack
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInitiateCallRequestRecordingTrack) SetTo(v InitiateCallRequestRecordingTrack) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInitiateCallRequestRecordingTrack) Get() (v InitiateCallRequestRecordingTrack, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInitiateCallRequestRecordingTrack) Or(d InitiateCallRequestRecordingTrack) InitiateCallRequestRecordingTrack {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInitiateCallRequestStatusCallbackEvent returns new OptInitiateCallRequestStatusCallbackEvent with value set to v.
func NewOptInitiateCallRequestStatusCallbackEvent(v InitiateCallRequestStatusCallbackEvent) OptInitiateCallRequestStatusCallbackEvent {
	return OptInitiateCallRequestStatusCallbackEvent{
		Value: v,
		Set:   true,
	}
}

// OptInitiateCallRequestStatusCallbackEvent is optional InitiateCallRequestStatusCallbackEvent.
type OptInitiateCallRequestStatusCallbackEvent struct {
	Value InitiateCallRequestStatusCallbackEvent
	Set   bool
}

// IsSet returns true if OptInitiateCallRequestStatusCallbackEvent was set.
func (o OptInitiateCallRequestStatusCallbackEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInitiateCallRequestStatusCallbackEvent) Reset() {
	var v InitiateCallRequestStatusCallbackEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInitiateCallRequestStatusCallbackEvent) SetTo(v InitiateCallRequestStatusCallbackEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInitiateCallRequestStatusCallbackEvent) Get() (v InitiateCallRequestStatusCallbackEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInitiateCallRequestStatusCallbackEvent) Or(d InitiateCallRequestStatusCallbackEvent) InitiateCallRequestStatusCallbackEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInitiateCallRequestStatusCallbackMethod returns new OptInitiateCallRequestStatusCallbackMethod with value set to v.
func NewOptInitiateCallRequestStatusCallbackMethod(v InitiateCallRequestStatusCallbackMethod) OptInitiateCallRequestStatusCallbackMethod {
	return OptInitiateCallRequestStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptInitiateCallRequestStatusCallbackMethod is optional InitiateCallRequestStatusCallbackMethod.
type OptInitiateCallRequestStatusCallbackMethod struct {
	Value InitiateCallRequestStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptInitiateCallRequestStatusCallbackMethod was set.
func (o OptInitiateCallRequestStatusCallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInitiateCallRequestStatusCallbackMethod) Reset() {
	var v InitiateCallRequestStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInitiateCallRequestStatusCallbackMethod) SetTo(v InitiateCallRequestStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInitiateCallRequestStatusCallbackMethod) Get() (v InitiateCallRequestStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInitiateCallRequestStatusCallbackMethod) Or(d InitiateCallRequestStatusCallbackMethod) InitiateCallRequestStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInitiateCallRequestTrim returns new OptInitiateCallRequestTrim with value set to v.
func NewOptInitiateCallRequestTrim(v InitiateCallRequestTrim) OptInitiateCallRequestTrim {
	return OptInitiateCallRequestTrim{
		Value: v,
		Set:   true,
	}
}

// OptInitiateCallRequestTrim is optional InitiateCallRequestTrim.
type OptInitiateCallRequestTrim struct {
	Value InitiateCallRequestTrim
	Set   bool
}

// IsSet returns true if OptInitiateCallRequestTrim was set.
func (o OptInitiateCallRequestTrim) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInitiateCallRequestTrim) Reset() {
	var v InitiateCallRequestTrim
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInitiateCallRequestTrim) SetTo(v InitiateCallRequestTrim) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInitiateCallRequestTrim) Get() (v InitiateCallRequestTrim, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInitiateCallRequestTrim) Or(d InitiateCallRequestTrim) InitiateCallRequestTrim {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInitiateCallRequestUrlMethod returns new OptInitiateCallRequestUrlMethod with value set to v.
func NewOptInitiateCallRequestUrlMethod(v InitiateCallRequestUrlMethod) OptInitiateCallRequestUrlMethod {
	return OptInitiateCallRequestUrlMethod{
		Value: v,
		Set:   true,
	}
}

// OptInitiateCallRequestUrlMethod is optional InitiateCallRequestUrlMethod.
type OptInitiateCallRequestUrlMethod struct {
	Value InitiateCallRequestUrlMethod
	Set   bool
}

// IsSet returns true if OptInitiateCallRequestUrlMethod was set.
func (o OptInitiateCallRequestUrlMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInitiateCallRequestUrlMethod) Reset() {
	var v InitiateCallRequestUrlMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInitiateCallRequestUrlMethod) SetTo(v InitiateCallRequestUrlMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInitiateCallRequestUrlMethod) Get() (v InitiateCallRequestUrlMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInitiateCallRequestUrlMethod) Or(d InitiateCallRequestUrlMethod) InitiateCallRequestUrlMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInitiateCallResult returns new OptInitiateCallResult with value set to v.
func NewOptInitiateCallResult(v InitiateCallResult) OptInitiateCallResult {
	return OptInitiateCallResult{
		Value: v,
		Set:   true,
	}
}

// OptInitiateCallResult is optional InitiateCallResult.
type OptInitiateCallResult struct {
	Value InitiateCallResult
	Set   bool
}

// IsSet returns true if OptInitiateCallResult was set.
func (o OptInitiateCallResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInitiateCallResult) Reset() {
	var v InitiateCallResult
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInitiateCallResult) SetTo(v InitiateCallResult) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInitiateCallResult) Get() (v InitiateCallResult, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInitiateCallResult) Or(d InitiateCallResult) InitiateCallResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIntId returns new OptIntId with value set to v.
func NewOptIntId(v IntId) OptIntId {
	return OptIntId{
		Value: v,
		Set:   true,
	}
}

// OptIntId is optional IntId.
type OptIntId struct {
	Value IntId
	Set   bool
}

// IsSet returns true if OptIntId was set.
func (o OptIntId) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIntId) Reset() {
	var v IntId
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIntId) SetTo(v IntId) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIntId) Get() (v IntId, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIntId) Or(d IntId) IntId {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInterfaceStatus returns new OptInterfaceStatus with value set to v.
func NewOptInterfaceStatus(v InterfaceStatus) OptInterfaceStatus {
	return OptInterfaceStatus{
		Value: v,
		Set:   true,
	}
}

// OptInterfaceStatus is optional InterfaceStatus.
type OptInterfaceStatus struct {
	Value InterfaceStatus
	Set   bool
}

// IsSet returns true if OptInterfaceStatus was set.
func (o OptInterfaceStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInterfaceStatus) Reset() {
	var v InterfaceStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInterfaceStatus) SetTo(v InterfaceStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInterfaceStatus) Get() (v InterfaceStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInterfaceStatus) Or(d InterfaceStatus) InterfaceStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListAdditionalDocumentsFilterDocumentType returns new OptListAdditionalDocumentsFilterDocumentType with value set to v.
func NewOptListAdditionalDocumentsFilterDocumentType(v ListAdditionalDocumentsFilterDocumentType) OptListAdditionalDocumentsFilterDocumentType {
	return OptListAdditionalDocumentsFilterDocumentType{
		Value: v,
		Set:   true,
	}
}

// OptListAdditionalDocumentsFilterDocumentType is optional ListAdditionalDocumentsFilterDocumentType.
type OptListAdditionalDocumentsFilterDocumentType struct {
	Value ListAdditionalDocumentsFilterDocumentType
	Set   bool
}

// IsSet returns true if OptListAdditionalDocumentsFilterDocumentType was set.
func (o OptListAdditionalDocumentsFilterDocumentType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListAdditionalDocumentsFilterDocumentType) Reset() {
	var v ListAdditionalDocumentsFilterDocumentType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListAdditionalDocumentsFilterDocumentType) SetTo(v ListAdditionalDocumentsFilterDocumentType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListAdditionalDocumentsFilterDocumentType) Get() (v ListAdditionalDocumentsFilterDocumentType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListAdditionalDocumentsFilterDocumentType) Or(d ListAdditionalDocumentsFilterDocumentType) ListAdditionalDocumentsFilterDocumentType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListAdditionalDocumentsSort returns new OptListAdditionalDocumentsSort with value set to v.
func NewOptListAdditionalDocumentsSort(v ListAdditionalDocumentsSort) OptListAdditionalDocumentsSort {
	return OptListAdditionalDocumentsSort{
		Value: v,
		Set:   true,
	}
}

// OptListAdditionalDocumentsSort is optional ListAdditionalDocumentsSort.
type OptListAdditionalDocumentsSort struct {
	Value ListAdditionalDocumentsSort
	Set   bool
}

// IsSet returns true if OptListAdditionalDocumentsSort was set.
func (o OptListAdditionalDocumentsSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListAdditionalDocumentsSort) Reset() {
	var v ListAdditionalDocumentsSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListAdditionalDocumentsSort) SetTo(v ListAdditionalDocumentsSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListAdditionalDocumentsSort) Get() (v ListAdditionalDocumentsSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListAdditionalDocumentsSort) Or(d ListAdditionalDocumentsSort) ListAdditionalDocumentsSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListAvailablePhoneNumberBlocksFilterNumberType returns new OptListAvailablePhoneNumberBlocksFilterNumberType with value set to v.
func NewOptListAvailablePhoneNumberBlocksFilterNumberType(v ListAvailablePhoneNumberBlocksFilterNumberType) OptListAvailablePhoneNumberBlocksFilterNumberType {
	return OptListAvailablePhoneNumberBlocksFilterNumberType{
		Value: v,
		Set:   true,
	}
}

// OptListAvailablePhoneNumberBlocksFilterNumberType is optional ListAvailablePhoneNumberBlocksFilterNumberType.
type OptListAvailablePhoneNumberBlocksFilterNumberType struct {
	Value ListAvailablePhoneNumberBlocksFilterNumberType
	Set   bool
}

// IsSet returns true if OptListAvailablePhoneNumberBlocksFilterNumberType was set.
func (o OptListAvailablePhoneNumberBlocksFilterNumberType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListAvailablePhoneNumberBlocksFilterNumberType) Reset() {
	var v ListAvailablePhoneNumberBlocksFilterNumberType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListAvailablePhoneNumberBlocksFilterNumberType) SetTo(v ListAvailablePhoneNumberBlocksFilterNumberType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListAvailablePhoneNumberBlocksFilterNumberType) Get() (v ListAvailablePhoneNumberBlocksFilterNumberType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListAvailablePhoneNumberBlocksFilterNumberType) Or(d ListAvailablePhoneNumberBlocksFilterNumberType) ListAvailablePhoneNumberBlocksFilterNumberType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListAvailablePhoneNumbersFilterPhoneNumberType returns new OptListAvailablePhoneNumbersFilterPhoneNumberType with value set to v.
func NewOptListAvailablePhoneNumbersFilterPhoneNumberType(v ListAvailablePhoneNumbersFilterPhoneNumberType) OptListAvailablePhoneNumbersFilterPhoneNumberType {
	return OptListAvailablePhoneNumbersFilterPhoneNumberType{
		Value: v,
		Set:   true,
	}
}

// OptListAvailablePhoneNumbersFilterPhoneNumberType is optional ListAvailablePhoneNumbersFilterPhoneNumberType.
type OptListAvailablePhoneNumbersFilterPhoneNumberType struct {
	Value ListAvailablePhoneNumbersFilterPhoneNumberType
	Set   bool
}

// IsSet returns true if OptListAvailablePhoneNumbersFilterPhoneNumberType was set.
func (o OptListAvailablePhoneNumbersFilterPhoneNumberType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListAvailablePhoneNumbersFilterPhoneNumberType) Reset() {
	var v ListAvailablePhoneNumbersFilterPhoneNumberType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListAvailablePhoneNumbersFilterPhoneNumberType) SetTo(v ListAvailablePhoneNumbersFilterPhoneNumberType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListAvailablePhoneNumbersFilterPhoneNumberType) Get() (v ListAvailablePhoneNumbersFilterPhoneNumberType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListAvailablePhoneNumbersFilterPhoneNumberType) Or(d ListAvailablePhoneNumbersFilterPhoneNumberType) ListAvailablePhoneNumbersFilterPhoneNumberType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListInboundChannelsOKData returns new OptListInboundChannelsOKData with value set to v.
func NewOptListInboundChannelsOKData(v ListInboundChannelsOKData) OptListInboundChannelsOKData {
	return OptListInboundChannelsOKData{
		Value: v,
		Set:   true,
	}
}

// OptListInboundChannelsOKData is optional ListInboundChannelsOKData.
type OptListInboundChannelsOKData struct {
	Value ListInboundChannelsOKData
	Set   bool
}

// IsSet returns true if OptListInboundChannelsOKData was set.
func (o OptListInboundChannelsOKData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListInboundChannelsOKData) Reset() {
	var v ListInboundChannelsOKData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListInboundChannelsOKData) SetTo(v ListInboundChannelsOKData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListInboundChannelsOKData) Get() (v ListInboundChannelsOKData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListInboundChannelsOKData) Or(d ListInboundChannelsOKData) ListInboundChannelsOKData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListOtaUpdatesFilterType returns new OptListOtaUpdatesFilterType with value set to v.
func NewOptListOtaUpdatesFilterType(v ListOtaUpdatesFilterType) OptListOtaUpdatesFilterType {
	return OptListOtaUpdatesFilterType{
		Value: v,
		Set:   true,
	}
}

// OptListOtaUpdatesFilterType is optional ListOtaUpdatesFilterType.
type OptListOtaUpdatesFilterType struct {
	Value ListOtaUpdatesFilterType
	Set   bool
}

// IsSet returns true if OptListOtaUpdatesFilterType was set.
func (o OptListOtaUpdatesFilterType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListOtaUpdatesFilterType) Reset() {
	var v ListOtaUpdatesFilterType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListOtaUpdatesFilterType) SetTo(v ListOtaUpdatesFilterType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListOtaUpdatesFilterType) Get() (v ListOtaUpdatesFilterType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListOtaUpdatesFilterType) Or(d ListOtaUpdatesFilterType) ListOtaUpdatesFilterType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListPhoneNumberConfigurationsSort returns new OptListPhoneNumberConfigurationsSort with value set to v.
func NewOptListPhoneNumberConfigurationsSort(v ListPhoneNumberConfigurationsSort) OptListPhoneNumberConfigurationsSort {
	return OptListPhoneNumberConfigurationsSort{
		Value: v,
		Set:   true,
	}
}

// OptListPhoneNumberConfigurationsSort is optional ListPhoneNumberConfigurationsSort.
type OptListPhoneNumberConfigurationsSort struct {
	Value ListPhoneNumberConfigurationsSort
	Set   bool
}

// IsSet returns true if OptListPhoneNumberConfigurationsSort was set.
func (o OptListPhoneNumberConfigurationsSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListPhoneNumberConfigurationsSort) Reset() {
	var v ListPhoneNumberConfigurationsSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListPhoneNumberConfigurationsSort) SetTo(v ListPhoneNumberConfigurationsSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListPhoneNumberConfigurationsSort) Get() (v ListPhoneNumberConfigurationsSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListPhoneNumberConfigurationsSort) Or(d ListPhoneNumberConfigurationsSort) ListPhoneNumberConfigurationsSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListPhoneNumbersFilterStatus returns new OptListPhoneNumbersFilterStatus with value set to v.
func NewOptListPhoneNumbersFilterStatus(v ListPhoneNumbersFilterStatus) OptListPhoneNumbersFilterStatus {
	return OptListPhoneNumbersFilterStatus{
		Value: v,
		Set:   true,
	}
}

// OptListPhoneNumbersFilterStatus is optional ListPhoneNumbersFilterStatus.
type OptListPhoneNumbersFilterStatus struct {
	Value ListPhoneNumbersFilterStatus
	Set   bool
}

// IsSet returns true if OptListPhoneNumbersFilterStatus was set.
func (o OptListPhoneNumbersFilterStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListPhoneNumbersFilterStatus) Reset() {
	var v ListPhoneNumbersFilterStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListPhoneNumbersFilterStatus) SetTo(v ListPhoneNumbersFilterStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListPhoneNumbersFilterStatus) Get() (v ListPhoneNumbersFilterStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListPhoneNumbersFilterStatus) Or(d ListPhoneNumbersFilterStatus) ListPhoneNumbersFilterStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListPhoneNumbersFilterVoiceUsagePaymentMethod returns new OptListPhoneNumbersFilterVoiceUsagePaymentMethod with value set to v.
func NewOptListPhoneNumbersFilterVoiceUsagePaymentMethod(v ListPhoneNumbersFilterVoiceUsagePaymentMethod) OptListPhoneNumbersFilterVoiceUsagePaymentMethod {
	return OptListPhoneNumbersFilterVoiceUsagePaymentMethod{
		Value: v,
		Set:   true,
	}
}

// OptListPhoneNumbersFilterVoiceUsagePaymentMethod is optional ListPhoneNumbersFilterVoiceUsagePaymentMethod.
type OptListPhoneNumbersFilterVoiceUsagePaymentMethod struct {
	Value ListPhoneNumbersFilterVoiceUsagePaymentMethod
	Set   bool
}

// IsSet returns true if OptListPhoneNumbersFilterVoiceUsagePaymentMethod was set.
func (o OptListPhoneNumbersFilterVoiceUsagePaymentMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListPhoneNumbersFilterVoiceUsagePaymentMethod) Reset() {
	var v ListPhoneNumbersFilterVoiceUsagePaymentMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListPhoneNumbersFilterVoiceUsagePaymentMethod) SetTo(v ListPhoneNumbersFilterVoiceUsagePaymentMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListPhoneNumbersFilterVoiceUsagePaymentMethod) Get() (v ListPhoneNumbersFilterVoiceUsagePaymentMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListPhoneNumbersFilterVoiceUsagePaymentMethod) Or(d ListPhoneNumbersFilterVoiceUsagePaymentMethod) ListPhoneNumbersFilterVoiceUsagePaymentMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListPhoneNumbersJobsFilterType returns new OptListPhoneNumbersJobsFilterType with value set to v.
func NewOptListPhoneNumbersJobsFilterType(v ListPhoneNumbersJobsFilterType) OptListPhoneNumbersJobsFilterType {
	return OptListPhoneNumbersJobsFilterType{
		Value: v,
		Set:   true,
	}
}

// OptListPhoneNumbersJobsFilterType is optional ListPhoneNumbersJobsFilterType.
type OptListPhoneNumbersJobsFilterType struct {
	Value ListPhoneNumbersJobsFilterType
	Set   bool
}

// IsSet returns true if OptListPhoneNumbersJobsFilterType was set.
func (o OptListPhoneNumbersJobsFilterType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListPhoneNumbersJobsFilterType) Reset() {
	var v ListPhoneNumbersJobsFilterType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListPhoneNumbersJobsFilterType) SetTo(v ListPhoneNumbersJobsFilterType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListPhoneNumbersJobsFilterType) Get() (v ListPhoneNumbersJobsFilterType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListPhoneNumbersJobsFilterType) Or(d ListPhoneNumbersJobsFilterType) ListPhoneNumbersJobsFilterType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListPhoneNumbersJobsSort returns new OptListPhoneNumbersJobsSort with value set to v.
func NewOptListPhoneNumbersJobsSort(v ListPhoneNumbersJobsSort) OptListPhoneNumbersJobsSort {
	return OptListPhoneNumbersJobsSort{
		Value: v,
		Set:   true,
	}
}

// OptListPhoneNumbersJobsSort is optional ListPhoneNumbersJobsSort.
type OptListPhoneNumbersJobsSort struct {
	Value ListPhoneNumbersJobsSort
	Set   bool
}

// IsSet returns true if OptListPhoneNumbersJobsSort was set.
func (o OptListPhoneNumbersJobsSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListPhoneNumbersJobsSort) Reset() {
	var v ListPhoneNumbersJobsSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListPhoneNumbersJobsSort) SetTo(v ListPhoneNumbersJobsSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListPhoneNumbersJobsSort) Get() (v ListPhoneNumbersJobsSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListPhoneNumbersJobsSort) Or(d ListPhoneNumbersJobsSort) ListPhoneNumbersJobsSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListPhoneNumbersSort returns new OptListPhoneNumbersSort with value set to v.
func NewOptListPhoneNumbersSort(v ListPhoneNumbersSort) OptListPhoneNumbersSort {
	return OptListPhoneNumbersSort{
		Value: v,
		Set:   true,
	}
}

// OptListPhoneNumbersSort is optional ListPhoneNumbersSort.
type OptListPhoneNumbersSort struct {
	Value ListPhoneNumbersSort
	Set   bool
}

// IsSet returns true if OptListPhoneNumbersSort was set.
func (o OptListPhoneNumbersSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListPhoneNumbersSort) Reset() {
	var v ListPhoneNumbersSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListPhoneNumbersSort) SetTo(v ListPhoneNumbersSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListPhoneNumbersSort) Get() (v ListPhoneNumbersSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListPhoneNumbersSort) Or(d ListPhoneNumbersSort) ListPhoneNumbersSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod returns new OptListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod with value set to v.
func NewOptListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod(v ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod) OptListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod {
	return OptListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod{
		Value: v,
		Set:   true,
	}
}

// OptListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod is optional ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod.
type OptListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod struct {
	Value ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod
	Set   bool
}

// IsSet returns true if OptListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod was set.
func (o OptListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod) Reset() {
	var v ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod) SetTo(v ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod) Get() (v ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod) Or(d ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod) ListPhoneNumbersWithVoiceSettingsFilterVoiceUsagePaymentMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListPhoneNumbersWithVoiceSettingsSort returns new OptListPhoneNumbersWithVoiceSettingsSort with value set to v.
func NewOptListPhoneNumbersWithVoiceSettingsSort(v ListPhoneNumbersWithVoiceSettingsSort) OptListPhoneNumbersWithVoiceSettingsSort {
	return OptListPhoneNumbersWithVoiceSettingsSort{
		Value: v,
		Set:   true,
	}
}

// OptListPhoneNumbersWithVoiceSettingsSort is optional ListPhoneNumbersWithVoiceSettingsSort.
type OptListPhoneNumbersWithVoiceSettingsSort struct {
	Value ListPhoneNumbersWithVoiceSettingsSort
	Set   bool
}

// IsSet returns true if OptListPhoneNumbersWithVoiceSettingsSort was set.
func (o OptListPhoneNumbersWithVoiceSettingsSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListPhoneNumbersWithVoiceSettingsSort) Reset() {
	var v ListPhoneNumbersWithVoiceSettingsSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListPhoneNumbersWithVoiceSettingsSort) SetTo(v ListPhoneNumbersWithVoiceSettingsSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListPhoneNumbersWithVoiceSettingsSort) Get() (v ListPhoneNumbersWithVoiceSettingsSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListPhoneNumbersWithVoiceSettingsSort) Or(d ListPhoneNumbersWithVoiceSettingsSort) ListPhoneNumbersWithVoiceSettingsSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListPortingOrdersSort returns new OptListPortingOrdersSort with value set to v.
func NewOptListPortingOrdersSort(v ListPortingOrdersSort) OptListPortingOrdersSort {
	return OptListPortingOrdersSort{
		Value: v,
		Set:   true,
	}
}

// OptListPortingOrdersSort is optional ListPortingOrdersSort.
type OptListPortingOrdersSort struct {
	Value ListPortingOrdersSort
	Set   bool
}

// IsSet returns true if OptListPortingOrdersSort was set.
func (o OptListPortingOrdersSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListPortingOrdersSort) Reset() {
	var v ListPortingOrdersSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListPortingOrdersSort) SetTo(v ListPortingOrdersSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListPortingOrdersSort) Get() (v ListPortingOrdersSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListPortingOrdersSort) Or(d ListPortingOrdersSort) ListPortingOrdersSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListPortingPhoneNumbersFilterPortingOrderStatus returns new OptListPortingPhoneNumbersFilterPortingOrderStatus with value set to v.
func NewOptListPortingPhoneNumbersFilterPortingOrderStatus(v ListPortingPhoneNumbersFilterPortingOrderStatus) OptListPortingPhoneNumbersFilterPortingOrderStatus {
	return OptListPortingPhoneNumbersFilterPortingOrderStatus{
		Value: v,
		Set:   true,
	}
}

// OptListPortingPhoneNumbersFilterPortingOrderStatus is optional ListPortingPhoneNumbersFilterPortingOrderStatus.
type OptListPortingPhoneNumbersFilterPortingOrderStatus struct {
	Value ListPortingPhoneNumbersFilterPortingOrderStatus
	Set   bool
}

// IsSet returns true if OptListPortingPhoneNumbersFilterPortingOrderStatus was set.
func (o OptListPortingPhoneNumbersFilterPortingOrderStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListPortingPhoneNumbersFilterPortingOrderStatus) Reset() {
	var v ListPortingPhoneNumbersFilterPortingOrderStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListPortingPhoneNumbersFilterPortingOrderStatus) SetTo(v ListPortingPhoneNumbersFilterPortingOrderStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListPortingPhoneNumbersFilterPortingOrderStatus) Get() (v ListPortingPhoneNumbersFilterPortingOrderStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListPortingPhoneNumbersFilterPortingOrderStatus) Or(d ListPortingPhoneNumbersFilterPortingOrderStatus) ListPortingPhoneNumbersFilterPortingOrderStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListPortingReportsFilterReportType returns new OptListPortingReportsFilterReportType with value set to v.
func NewOptListPortingReportsFilterReportType(v ListPortingReportsFilterReportType) OptListPortingReportsFilterReportType {
	return OptListPortingReportsFilterReportType{
		Value: v,
		Set:   true,
	}
}

// OptListPortingReportsFilterReportType is optional ListPortingReportsFilterReportType.
type OptListPortingReportsFilterReportType struct {
	Value ListPortingReportsFilterReportType
	Set   bool
}

// IsSet returns true if OptListPortingReportsFilterReportType was set.
func (o OptListPortingReportsFilterReportType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListPortingReportsFilterReportType) Reset() {
	var v ListPortingReportsFilterReportType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListPortingReportsFilterReportType) SetTo(v ListPortingReportsFilterReportType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListPortingReportsFilterReportType) Get() (v ListPortingReportsFilterReportType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListPortingReportsFilterReportType) Or(d ListPortingReportsFilterReportType) ListPortingReportsFilterReportType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListPortingReportsFilterStatus returns new OptListPortingReportsFilterStatus with value set to v.
func NewOptListPortingReportsFilterStatus(v ListPortingReportsFilterStatus) OptListPortingReportsFilterStatus {
	return OptListPortingReportsFilterStatus{
		Value: v,
		Set:   true,
	}
}

// OptListPortingReportsFilterStatus is optional ListPortingReportsFilterStatus.
type OptListPortingReportsFilterStatus struct {
	Value ListPortingReportsFilterStatus
	Set   bool
}

// IsSet returns true if OptListPortingReportsFilterStatus was set.
func (o OptListPortingReportsFilterStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListPortingReportsFilterStatus) Reset() {
	var v ListPortingReportsFilterStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListPortingReportsFilterStatus) SetTo(v ListPortingReportsFilterStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListPortingReportsFilterStatus) Get() (v ListPortingReportsFilterStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListPortingReportsFilterStatus) Or(d ListPortingReportsFilterStatus) ListPortingReportsFilterStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListPortoutRequestFilterStatus returns new OptListPortoutRequestFilterStatus with value set to v.
func NewOptListPortoutRequestFilterStatus(v ListPortoutRequestFilterStatus) OptListPortoutRequestFilterStatus {
	return OptListPortoutRequestFilterStatus{
		Value: v,
		Set:   true,
	}
}

// OptListPortoutRequestFilterStatus is optional ListPortoutRequestFilterStatus.
type OptListPortoutRequestFilterStatus struct {
	Value ListPortoutRequestFilterStatus
	Set   bool
}

// IsSet returns true if OptListPortoutRequestFilterStatus was set.
func (o OptListPortoutRequestFilterStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListPortoutRequestFilterStatus) Reset() {
	var v ListPortoutRequestFilterStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListPortoutRequestFilterStatus) SetTo(v ListPortoutRequestFilterStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListPortoutRequestFilterStatus) Get() (v ListPortoutRequestFilterStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListPortoutRequestFilterStatus) Or(d ListPortoutRequestFilterStatus) ListPortoutRequestFilterStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListVerificationCodesSort returns new OptListVerificationCodesSort with value set to v.
func NewOptListVerificationCodesSort(v ListVerificationCodesSort) OptListVerificationCodesSort {
	return OptListVerificationCodesSort{
		Value: v,
		Set:   true,
	}
}

// OptListVerificationCodesSort is optional ListVerificationCodesSort.
type OptListVerificationCodesSort struct {
	Value ListVerificationCodesSort
	Set   bool
}

// IsSet returns true if OptListVerificationCodesSort was set.
func (o OptListVerificationCodesSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListVerificationCodesSort) Reset() {
	var v ListVerificationCodesSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListVerificationCodesSort) SetTo(v ListVerificationCodesSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListVerificationCodesSort) Get() (v ListVerificationCodesSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListVerificationCodesSort) Or(d ListVerificationCodesSort) ListVerificationCodesSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLogMessageMeta returns new OptLogMessageMeta with value set to v.
func NewOptLogMessageMeta(v LogMessageMeta) OptLogMessageMeta {
	return OptLogMessageMeta{
		Value: v,
		Set:   true,
	}
}

// OptLogMessageMeta is optional LogMessageMeta.
type OptLogMessageMeta struct {
	Value LogMessageMeta
	Set   bool
}

// IsSet returns true if OptLogMessageMeta was set.
func (o OptLogMessageMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLogMessageMeta) Reset() {
	var v LogMessageMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLogMessageMeta) SetTo(v LogMessageMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLogMessageMeta) Get() (v LogMessageMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLogMessageMeta) Or(d LogMessageMeta) LogMessageMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLogMessageSource returns new OptLogMessageSource with value set to v.
func NewOptLogMessageSource(v LogMessageSource) OptLogMessageSource {
	return OptLogMessageSource{
		Value: v,
		Set:   true,
	}
}

// OptLogMessageSource is optional LogMessageSource.
type OptLogMessageSource struct {
	Value LogMessageSource
	Set   bool
}

// IsSet returns true if OptLogMessageSource was set.
func (o OptLogMessageSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLogMessageSource) Reset() {
	var v LogMessageSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLogMessageSource) SetTo(v LogMessageSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLogMessageSource) Get() (v LogMessageSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLogMessageSource) Or(d LogMessageSource) LogMessageSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLogoURL returns new OptLogoURL with value set to v.
func NewOptLogoURL(v LogoURL) OptLogoURL {
	return OptLogoURL{
		Value: v,
		Set:   true,
	}
}

// OptLogoURL is optional LogoURL.
type OptLogoURL struct {
	Value LogoURL
	Set   bool
}

// IsSet returns true if OptLogoURL was set.
func (o OptLogoURL) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLogoURL) Reset() {
	var v LogoURL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLogoURL) SetTo(v LogoURL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLogoURL) Get() (v LogoURL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLogoURL) Or(d LogoURL) LogoURL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLoopcount returns new OptLoopcount with value set to v.
func NewOptLoopcount(v Loopcount) OptLoopcount {
	return OptLoopcount{
		Value: v,
		Set:   true,
	}
}

// OptLoopcount is optional Loopcount.
type OptLoopcount struct {
	Value Loopcount
	Set   bool
}

// IsSet returns true if OptLoopcount was set.
func (o OptLoopcount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLoopcount) Reset() {
	var v Loopcount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLoopcount) SetTo(v Loopcount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLoopcount) Get() (v Loopcount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLoopcount) Or(d Loopcount) Loopcount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMediaFeatures returns new OptMediaFeatures with value set to v.
func NewOptMediaFeatures(v MediaFeatures) OptMediaFeatures {
	return OptMediaFeatures{
		Value: v,
		Set:   true,
	}
}

// OptMediaFeatures is optional MediaFeatures.
type OptMediaFeatures struct {
	Value MediaFeatures
	Set   bool
}

// IsSet returns true if OptMediaFeatures was set.
func (o OptMediaFeatures) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMediaFeatures) Reset() {
	var v MediaFeatures
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMediaFeatures) SetTo(v MediaFeatures) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMediaFeatures) Get() (v MediaFeatures, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMediaFeatures) Or(d MediaFeatures) MediaFeatures {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessagingHostedNumberOrder returns new OptMessagingHostedNumberOrder with value set to v.
func NewOptMessagingHostedNumberOrder(v MessagingHostedNumberOrder) OptMessagingHostedNumberOrder {
	return OptMessagingHostedNumberOrder{
		Value: v,
		Set:   true,
	}
}

// OptMessagingHostedNumberOrder is optional MessagingHostedNumberOrder.
type OptMessagingHostedNumberOrder struct {
	Value MessagingHostedNumberOrder
	Set   bool
}

// IsSet returns true if OptMessagingHostedNumberOrder was set.
func (o OptMessagingHostedNumberOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessagingHostedNumberOrder) Reset() {
	var v MessagingHostedNumberOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessagingHostedNumberOrder) SetTo(v MessagingHostedNumberOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessagingHostedNumberOrder) Get() (v MessagingHostedNumberOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessagingHostedNumberOrder) Or(d MessagingHostedNumberOrder) MessagingHostedNumberOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessagingHostedNumberOrderStatus returns new OptMessagingHostedNumberOrderStatus with value set to v.
func NewOptMessagingHostedNumberOrderStatus(v MessagingHostedNumberOrderStatus) OptMessagingHostedNumberOrderStatus {
	return OptMessagingHostedNumberOrderStatus{
		Value: v,
		Set:   true,
	}
}

// OptMessagingHostedNumberOrderStatus is optional MessagingHostedNumberOrderStatus.
type OptMessagingHostedNumberOrderStatus struct {
	Value MessagingHostedNumberOrderStatus
	Set   bool
}

// IsSet returns true if OptMessagingHostedNumberOrderStatus was set.
func (o OptMessagingHostedNumberOrderStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessagingHostedNumberOrderStatus) Reset() {
	var v MessagingHostedNumberOrderStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessagingHostedNumberOrderStatus) SetTo(v MessagingHostedNumberOrderStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessagingHostedNumberOrderStatus) Get() (v MessagingHostedNumberOrderStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessagingHostedNumberOrderStatus) Or(d MessagingHostedNumberOrderStatus) MessagingHostedNumberOrderStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMetaResponse returns new OptMetaResponse with value set to v.
func NewOptMetaResponse(v MetaResponse) OptMetaResponse {
	return OptMetaResponse{
		Value: v,
		Set:   true,
	}
}

// OptMetaResponse is optional MetaResponse.
type OptMetaResponse struct {
	Value MetaResponse
	Set   bool
}

// IsSet returns true if OptMetaResponse was set.
func (o OptMetaResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMetaResponse) Reset() {
	var v MetaResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMetaResponse) SetTo(v MetaResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMetaResponse) Get() (v MetaResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMetaResponse) Or(d MetaResponse) MetaResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMetadata returns new OptMetadata with value set to v.
func NewOptMetadata(v Metadata) OptMetadata {
	return OptMetadata{
		Value: v,
		Set:   true,
	}
}

// OptMetadata is optional Metadata.
type OptMetadata struct {
	Value Metadata
	Set   bool
}

// IsSet returns true if OptMetadata was set.
func (o OptMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMetadata) Reset() {
	var v Metadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMetadata) SetTo(v Metadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMetadata) Get() (v Metadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMetadata) Or(d Metadata) Metadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNetwork returns new OptNetwork with value set to v.
func NewOptNetwork(v Network) OptNetwork {
	return OptNetwork{
		Value: v,
		Set:   true,
	}
}

// OptNetwork is optional Network.
type OptNetwork struct {
	Value Network
	Set   bool
}

// IsSet returns true if OptNetwork was set.
func (o OptNetwork) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNetwork) Reset() {
	var v Network
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNetwork) SetTo(v Network) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNetwork) Get() (v Network, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNetwork) Or(d Network) Network {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNetworkInterfaceRegion returns new OptNetworkInterfaceRegion with value set to v.
func NewOptNetworkInterfaceRegion(v NetworkInterfaceRegion) OptNetworkInterfaceRegion {
	return OptNetworkInterfaceRegion{
		Value: v,
		Set:   true,
	}
}

// OptNetworkInterfaceRegion is optional NetworkInterfaceRegion.
type OptNetworkInterfaceRegion struct {
	Value NetworkInterfaceRegion
	Set   bool
}

// IsSet returns true if OptNetworkInterfaceRegion was set.
func (o OptNetworkInterfaceRegion) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNetworkInterfaceRegion) Reset() {
	var v NetworkInterfaceRegion
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNetworkInterfaceRegion) SetTo(v NetworkInterfaceRegion) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNetworkInterfaceRegion) Get() (v NetworkInterfaceRegion, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNetworkInterfaceRegion) Or(d NetworkInterfaceRegion) NetworkInterfaceRegion {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNewParticipantResource returns new OptNewParticipantResource with value set to v.
func NewOptNewParticipantResource(v NewParticipantResource) OptNewParticipantResource {
	return OptNewParticipantResource{
		Value: v,
		Set:   true,
	}
}

// OptNewParticipantResource is optional NewParticipantResource.
type OptNewParticipantResource struct {
	Value NewParticipantResource
	Set   bool
}

// IsSet returns true if OptNewParticipantResource was set.
func (o OptNewParticipantResource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNewParticipantResource) Reset() {
	var v NewParticipantResource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNewParticipantResource) SetTo(v NewParticipantResource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNewParticipantResource) Get() (v NewParticipantResource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNewParticipantResource) Or(d NewParticipantResource) NewParticipantResource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNewParticipantResourceStatus returns new OptNewParticipantResourceStatus with value set to v.
func NewOptNewParticipantResourceStatus(v NewParticipantResourceStatus) OptNewParticipantResourceStatus {
	return OptNewParticipantResourceStatus{
		Value: v,
		Set:   true,
	}
}

// OptNewParticipantResourceStatus is optional NewParticipantResourceStatus.
type OptNewParticipantResourceStatus struct {
	Value NewParticipantResourceStatus
	Set   bool
}

// IsSet returns true if OptNewParticipantResourceStatus was set.
func (o OptNewParticipantResourceStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNewParticipantResourceStatus) Reset() {
	var v NewParticipantResourceStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNewParticipantResourceStatus) SetTo(v NewParticipantResourceStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNewParticipantResourceStatus) Get() (v NewParticipantResourceStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNewParticipantResourceStatus) Or(d NewParticipantResourceStatus) NewParticipantResourceStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilConferenceSid returns new OptNilConferenceSid with value set to v.
func NewOptNilConferenceSid(v ConferenceSid) OptNilConferenceSid {
	return OptNilConferenceSid{
		Value: v,
		Set:   true,
	}
}

// OptNilConferenceSid is optional nullable ConferenceSid.
type OptNilConferenceSid struct {
	Value ConferenceSid
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilConferenceSid was set.
func (o OptNilConferenceSid) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilConferenceSid) Reset() {
	var v ConferenceSid
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilConferenceSid) SetTo(v ConferenceSid) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilConferenceSid) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilConferenceSid) SetToNull() {
	o.Set = true
	o.Null = true
	var v ConferenceSid
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilConferenceSid) Get() (v ConferenceSid, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilConferenceSid) Or(d ConferenceSid) ConferenceSid {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDateTime returns new OptNilDateTime with value set to v.
func NewOptNilDateTime(v time.Time) OptNilDateTime {
	return OptNilDateTime{
		Value: v,
		Set:   true,
	}
}

// OptNilDateTime is optional nullable time.Time.
type OptNilDateTime struct {
	Value time.Time
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDateTime was set.
func (o OptNilDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDateTime) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDateTime) SetToNull() {
	o.Set = true
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDateTime) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilHTTPResponse returns new OptNilHTTPResponse with value set to v.
func NewOptNilHTTPResponse(v HTTPResponse) OptNilHTTPResponse {
	return OptNilHTTPResponse{
		Value: v,
		Set:   true,
	}
}

// OptNilHTTPResponse is optional nullable HTTPResponse.
type OptNilHTTPResponse struct {
	Value HTTPResponse
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilHTTPResponse was set.
func (o OptNilHTTPResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilHTTPResponse) Reset() {
	var v HTTPResponse
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilHTTPResponse) SetTo(v HTTPResponse) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilHTTPResponse) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilHTTPResponse) SetToNull() {
	o.Set = true
	o.Null = true
	var v HTTPResponse
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilHTTPResponse) Get() (v HTTPResponse, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilHTTPResponse) Or(d HTTPResponse) HTTPResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt returns new OptNilInt with value set to v.
func NewOptNilInt(v int) OptNilInt {
	return OptNilInt{
		Value: v,
		Set:   true,
	}
}

// OptNilInt is optional nullable int.
type OptNilInt struct {
	Value int
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt was set.
func (o OptNilInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt) SetTo(v int) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInt) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInt) SetToNull() {
	o.Set = true
	o.Null = true
	var v int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilMessagingFeatureSet returns new OptNilMessagingFeatureSet with value set to v.
func NewOptNilMessagingFeatureSet(v MessagingFeatureSet) OptNilMessagingFeatureSet {
	return OptNilMessagingFeatureSet{
		Value: v,
		Set:   true,
	}
}

// OptNilMessagingFeatureSet is optional nullable MessagingFeatureSet.
type OptNilMessagingFeatureSet struct {
	Value MessagingFeatureSet
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilMessagingFeatureSet was set.
func (o OptNilMessagingFeatureSet) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilMessagingFeatureSet) Reset() {
	var v MessagingFeatureSet
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilMessagingFeatureSet) SetTo(v MessagingFeatureSet) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilMessagingFeatureSet) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilMessagingFeatureSet) SetToNull() {
	o.Set = true
	o.Null = true
	var v MessagingFeatureSet
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilMessagingFeatureSet) Get() (v MessagingFeatureSet, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilMessagingFeatureSet) Or(d MessagingFeatureSet) MessagingFeatureSet {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilOutboundMessagePayloadCost returns new OptNilOutboundMessagePayloadCost with value set to v.
func NewOptNilOutboundMessagePayloadCost(v OutboundMessagePayloadCost) OptNilOutboundMessagePayloadCost {
	return OptNilOutboundMessagePayloadCost{
		Value: v,
		Set:   true,
	}
}

// OptNilOutboundMessagePayloadCost is optional nullable OutboundMessagePayloadCost.
type OptNilOutboundMessagePayloadCost struct {
	Value OutboundMessagePayloadCost
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilOutboundMessagePayloadCost was set.
func (o OptNilOutboundMessagePayloadCost) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilOutboundMessagePayloadCost) Reset() {
	var v OutboundMessagePayloadCost
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilOutboundMessagePayloadCost) SetTo(v OutboundMessagePayloadCost) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilOutboundMessagePayloadCost) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilOutboundMessagePayloadCost) SetToNull() {
	o.Set = true
	o.Null = true
	var v OutboundMessagePayloadCost
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilOutboundMessagePayloadCost) Get() (v OutboundMessagePayloadCost, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilOutboundMessagePayloadCost) Or(d OutboundMessagePayloadCost) OutboundMessagePayloadCost {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTexmlErrorCode returns new OptNilTexmlErrorCode with value set to v.
func NewOptNilTexmlErrorCode(v TexmlErrorCode) OptNilTexmlErrorCode {
	return OptNilTexmlErrorCode{
		Value: v,
		Set:   true,
	}
}

// OptNilTexmlErrorCode is optional nullable TexmlErrorCode.
type OptNilTexmlErrorCode struct {
	Value TexmlErrorCode
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTexmlErrorCode was set.
func (o OptNilTexmlErrorCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTexmlErrorCode) Reset() {
	var v TexmlErrorCode
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTexmlErrorCode) SetTo(v TexmlErrorCode) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTexmlErrorCode) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilTexmlErrorCode) SetToNull() {
	o.Set = true
	o.Null = true
	var v TexmlErrorCode
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTexmlErrorCode) Get() (v TexmlErrorCode, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTexmlErrorCode) Or(d TexmlErrorCode) TexmlErrorCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTexmlPriceUnit returns new OptNilTexmlPriceUnit with value set to v.
func NewOptNilTexmlPriceUnit(v TexmlPriceUnit) OptNilTexmlPriceUnit {
	return OptNilTexmlPriceUnit{
		Value: v,
		Set:   true,
	}
}

// OptNilTexmlPriceUnit is optional nullable TexmlPriceUnit.
type OptNilTexmlPriceUnit struct {
	Value TexmlPriceUnit
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTexmlPriceUnit was set.
func (o OptNilTexmlPriceUnit) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTexmlPriceUnit) Reset() {
	var v TexmlPriceUnit
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTexmlPriceUnit) SetTo(v TexmlPriceUnit) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTexmlPriceUnit) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilTexmlPriceUnit) SetToNull() {
	o.Set = true
	o.Null = true
	var v TexmlPriceUnit
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTexmlPriceUnit) Get() (v TexmlPriceUnit, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTexmlPriceUnit) Or(d TexmlPriceUnit) TexmlPriceUnit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTexmlRecordingDuration returns new OptNilTexmlRecordingDuration with value set to v.
func NewOptNilTexmlRecordingDuration(v TexmlRecordingDuration) OptNilTexmlRecordingDuration {
	return OptNilTexmlRecordingDuration{
		Value: v,
		Set:   true,
	}
}

// OptNilTexmlRecordingDuration is optional nullable TexmlRecordingDuration.
type OptNilTexmlRecordingDuration struct {
	Value TexmlRecordingDuration
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTexmlRecordingDuration was set.
func (o OptNilTexmlRecordingDuration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTexmlRecordingDuration) Reset() {
	var v TexmlRecordingDuration
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTexmlRecordingDuration) SetTo(v TexmlRecordingDuration) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTexmlRecordingDuration) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilTexmlRecordingDuration) SetToNull() {
	o.Set = true
	o.Null = true
	var v TexmlRecordingDuration
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTexmlRecordingDuration) Get() (v TexmlRecordingDuration, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTexmlRecordingDuration) Or(d TexmlRecordingDuration) TexmlRecordingDuration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTexmlRecordingPrice returns new OptNilTexmlRecordingPrice with value set to v.
func NewOptNilTexmlRecordingPrice(v TexmlRecordingPrice) OptNilTexmlRecordingPrice {
	return OptNilTexmlRecordingPrice{
		Value: v,
		Set:   true,
	}
}

// OptNilTexmlRecordingPrice is optional nullable TexmlRecordingPrice.
type OptNilTexmlRecordingPrice struct {
	Value TexmlRecordingPrice
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTexmlRecordingPrice was set.
func (o OptNilTexmlRecordingPrice) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTexmlRecordingPrice) Reset() {
	var v TexmlRecordingPrice
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTexmlRecordingPrice) SetTo(v TexmlRecordingPrice) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTexmlRecordingPrice) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilTexmlRecordingPrice) SetToNull() {
	o.Set = true
	o.Null = true
	var v TexmlRecordingPrice
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTexmlRecordingPrice) Get() (v TexmlRecordingPrice, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTexmlRecordingPrice) Or(d TexmlRecordingPrice) TexmlRecordingPrice {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilURI returns new OptNilURI with value set to v.
func NewOptNilURI(v url.URL) OptNilURI {
	return OptNilURI{
		Value: v,
		Set:   true,
	}
}

// OptNilURI is optional nullable url.URL.
type OptNilURI struct {
	Value url.URL
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilURI was set.
func (o OptNilURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilURI) SetTo(v url.URL) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilURI) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilURI) SetToNull() {
	o.Set = true
	o.Null = true
	var v url.URL
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilURI) Get() (v url.URL, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilUUID returns new OptNilUUID with value set to v.
func NewOptNilUUID(v uuid.UUID) OptNilUUID {
	return OptNilUUID{
		Value: v,
		Set:   true,
	}
}

// OptNilUUID is optional nullable uuid.UUID.
type OptNilUUID struct {
	Value uuid.UUID
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilUUID was set.
func (o OptNilUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilUUID) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilUUID) SetToNull() {
	o.Set = true
	o.Null = true
	var v uuid.UUID
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilUUID) Get() (v uuid.UUID, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNoiseSuppressionDirection returns new OptNoiseSuppressionDirection with value set to v.
func NewOptNoiseSuppressionDirection(v NoiseSuppressionDirection) OptNoiseSuppressionDirection {
	return OptNoiseSuppressionDirection{
		Value: v,
		Set:   true,
	}
}

// OptNoiseSuppressionDirection is optional NoiseSuppressionDirection.
type OptNoiseSuppressionDirection struct {
	Value NoiseSuppressionDirection
	Set   bool
}

// IsSet returns true if OptNoiseSuppressionDirection was set.
func (o OptNoiseSuppressionDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNoiseSuppressionDirection) Reset() {
	var v NoiseSuppressionDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNoiseSuppressionDirection) SetTo(v NoiseSuppressionDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNoiseSuppressionDirection) Get() (v NoiseSuppressionDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNoiseSuppressionDirection) Or(d NoiseSuppressionDirection) NoiseSuppressionDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNotificationChannel returns new OptNotificationChannel with value set to v.
func NewOptNotificationChannel(v NotificationChannel) OptNotificationChannel {
	return OptNotificationChannel{
		Value: v,
		Set:   true,
	}
}

// OptNotificationChannel is optional NotificationChannel.
type OptNotificationChannel struct {
	Value NotificationChannel
	Set   bool
}

// IsSet returns true if OptNotificationChannel was set.
func (o OptNotificationChannel) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNotificationChannel) Reset() {
	var v NotificationChannel
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNotificationChannel) SetTo(v NotificationChannel) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNotificationChannel) Get() (v NotificationChannel, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNotificationChannel) Or(d NotificationChannel) NotificationChannel {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNotificationChannelChannelTypeID returns new OptNotificationChannelChannelTypeID with value set to v.
func NewOptNotificationChannelChannelTypeID(v NotificationChannelChannelTypeID) OptNotificationChannelChannelTypeID {
	return OptNotificationChannelChannelTypeID{
		Value: v,
		Set:   true,
	}
}

// OptNotificationChannelChannelTypeID is optional NotificationChannelChannelTypeID.
type OptNotificationChannelChannelTypeID struct {
	Value NotificationChannelChannelTypeID
	Set   bool
}

// IsSet returns true if OptNotificationChannelChannelTypeID was set.
func (o OptNotificationChannelChannelTypeID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNotificationChannelChannelTypeID) Reset() {
	var v NotificationChannelChannelTypeID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNotificationChannelChannelTypeID) SetTo(v NotificationChannelChannelTypeID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNotificationChannelChannelTypeID) Get() (v NotificationChannelChannelTypeID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNotificationChannelChannelTypeID) Or(d NotificationChannelChannelTypeID) NotificationChannelChannelTypeID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNumberHealthMetrics returns new OptNumberHealthMetrics with value set to v.
func NewOptNumberHealthMetrics(v NumberHealthMetrics) OptNumberHealthMetrics {
	return OptNumberHealthMetrics{
		Value: v,
		Set:   true,
	}
}

// OptNumberHealthMetrics is optional NumberHealthMetrics.
type OptNumberHealthMetrics struct {
	Value NumberHealthMetrics
	Set   bool
}

// IsSet returns true if OptNumberHealthMetrics was set.
func (o OptNumberHealthMetrics) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNumberHealthMetrics) Reset() {
	var v NumberHealthMetrics
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNumberHealthMetrics) SetTo(v NumberHealthMetrics) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNumberHealthMetrics) Get() (v NumberHealthMetrics, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNumberHealthMetrics) Or(d NumberHealthMetrics) NumberHealthMetrics {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNumberLookupRecord returns new OptNumberLookupRecord with value set to v.
func NewOptNumberLookupRecord(v NumberLookupRecord) OptNumberLookupRecord {
	return OptNumberLookupRecord{
		Value: v,
		Set:   true,
	}
}

// OptNumberLookupRecord is optional NumberLookupRecord.
type OptNumberLookupRecord struct {
	Value NumberLookupRecord
	Set   bool
}

// IsSet returns true if OptNumberLookupRecord was set.
func (o OptNumberLookupRecord) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNumberLookupRecord) Reset() {
	var v NumberLookupRecord
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNumberLookupRecord) SetTo(v NumberLookupRecord) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNumberLookupRecord) Get() (v NumberLookupRecord, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNumberLookupRecord) Or(d NumberLookupRecord) NumberLookupRecord {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNumberLookupType returns new OptNumberLookupType with value set to v.
func NewOptNumberLookupType(v NumberLookupType) OptNumberLookupType {
	return OptNumberLookupType{
		Value: v,
		Set:   true,
	}
}

// OptNumberLookupType is optional NumberLookupType.
type OptNumberLookupType struct {
	Value NumberLookupType
	Set   bool
}

// IsSet returns true if OptNumberLookupType was set.
func (o OptNumberLookupType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNumberLookupType) Reset() {
	var v NumberLookupType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNumberLookupType) SetTo(v NumberLookupType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNumberLookupType) Get() (v NumberLookupType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNumberLookupType) Or(d NumberLookupType) NumberLookupType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNumberOrderDocument returns new OptNumberOrderDocument with value set to v.
func NewOptNumberOrderDocument(v NumberOrderDocument) OptNumberOrderDocument {
	return OptNumberOrderDocument{
		Value: v,
		Set:   true,
	}
}

// OptNumberOrderDocument is optional NumberOrderDocument.
type OptNumberOrderDocument struct {
	Value NumberOrderDocument
	Set   bool
}

// IsSet returns true if OptNumberOrderDocument was set.
func (o OptNumberOrderDocument) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNumberOrderDocument) Reset() {
	var v NumberOrderDocument
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNumberOrderDocument) SetTo(v NumberOrderDocument) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNumberOrderDocument) Get() (v NumberOrderDocument, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNumberOrderDocument) Or(d NumberOrderDocument) NumberOrderDocument {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNumberOrderDocumentRequirementType returns new OptNumberOrderDocumentRequirementType with value set to v.
func NewOptNumberOrderDocumentRequirementType(v NumberOrderDocumentRequirementType) OptNumberOrderDocumentRequirementType {
	return OptNumberOrderDocumentRequirementType{
		Value: v,
		Set:   true,
	}
}

// OptNumberOrderDocumentRequirementType is optional NumberOrderDocumentRequirementType.
type OptNumberOrderDocumentRequirementType struct {
	Value NumberOrderDocumentRequirementType
	Set   bool
}

// IsSet returns true if OptNumberOrderDocumentRequirementType was set.
func (o OptNumberOrderDocumentRequirementType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNumberOrderDocumentRequirementType) Reset() {
	var v NumberOrderDocumentRequirementType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNumberOrderDocumentRequirementType) SetTo(v NumberOrderDocumentRequirementType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNumberOrderDocumentRequirementType) Get() (v NumberOrderDocumentRequirementType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNumberOrderDocumentRequirementType) Or(d NumberOrderDocumentRequirementType) NumberOrderDocumentRequirementType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNumberOrderPhoneNumber returns new OptNumberOrderPhoneNumber with value set to v.
func NewOptNumberOrderPhoneNumber(v NumberOrderPhoneNumber) OptNumberOrderPhoneNumber {
	return OptNumberOrderPhoneNumber{
		Value: v,
		Set:   true,
	}
}

// OptNumberOrderPhoneNumber is optional NumberOrderPhoneNumber.
type OptNumberOrderPhoneNumber struct {
	Value NumberOrderPhoneNumber
	Set   bool
}

// IsSet returns true if OptNumberOrderPhoneNumber was set.
func (o OptNumberOrderPhoneNumber) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNumberOrderPhoneNumber) Reset() {
	var v NumberOrderPhoneNumber
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNumberOrderPhoneNumber) SetTo(v NumberOrderPhoneNumber) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNumberOrderPhoneNumber) Get() (v NumberOrderPhoneNumber, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNumberOrderPhoneNumber) Or(d NumberOrderPhoneNumber) NumberOrderPhoneNumber {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNumberOrderPhoneNumberPhoneNumberType returns new OptNumberOrderPhoneNumberPhoneNumberType with value set to v.
func NewOptNumberOrderPhoneNumberPhoneNumberType(v NumberOrderPhoneNumberPhoneNumberType) OptNumberOrderPhoneNumberPhoneNumberType {
	return OptNumberOrderPhoneNumberPhoneNumberType{
		Value: v,
		Set:   true,
	}
}

// OptNumberOrderPhoneNumberPhoneNumberType is optional NumberOrderPhoneNumberPhoneNumberType.
type OptNumberOrderPhoneNumberPhoneNumberType struct {
	Value NumberOrderPhoneNumberPhoneNumberType
	Set   bool
}

// IsSet returns true if OptNumberOrderPhoneNumberPhoneNumberType was set.
func (o OptNumberOrderPhoneNumberPhoneNumberType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNumberOrderPhoneNumberPhoneNumberType) Reset() {
	var v NumberOrderPhoneNumberPhoneNumberType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNumberOrderPhoneNumberPhoneNumberType) SetTo(v NumberOrderPhoneNumberPhoneNumberType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNumberOrderPhoneNumberPhoneNumberType) Get() (v NumberOrderPhoneNumberPhoneNumberType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNumberOrderPhoneNumberPhoneNumberType) Or(d NumberOrderPhoneNumberPhoneNumberType) NumberOrderPhoneNumberPhoneNumberType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNumberOrderPhoneNumberStatus returns new OptNumberOrderPhoneNumberStatus with value set to v.
func NewOptNumberOrderPhoneNumberStatus(v NumberOrderPhoneNumberStatus) OptNumberOrderPhoneNumberStatus {
	return OptNumberOrderPhoneNumberStatus{
		Value: v,
		Set:   true,
	}
}

// OptNumberOrderPhoneNumberStatus is optional NumberOrderPhoneNumberStatus.
type OptNumberOrderPhoneNumberStatus struct {
	Value NumberOrderPhoneNumberStatus
	Set   bool
}

// IsSet returns true if OptNumberOrderPhoneNumberStatus was set.
func (o OptNumberOrderPhoneNumberStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNumberOrderPhoneNumberStatus) Reset() {
	var v NumberOrderPhoneNumberStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNumberOrderPhoneNumberStatus) SetTo(v NumberOrderPhoneNumberStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNumberOrderPhoneNumberStatus) Get() (v NumberOrderPhoneNumberStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNumberOrderPhoneNumberStatus) Or(d NumberOrderPhoneNumberStatus) NumberOrderPhoneNumberStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNumberReservation returns new OptNumberReservation with value set to v.
func NewOptNumberReservation(v NumberReservation) OptNumberReservation {
	return OptNumberReservation{
		Value: v,
		Set:   true,
	}
}

// OptNumberReservation is optional NumberReservation.
type OptNumberReservation struct {
	Value NumberReservation
	Set   bool
}

// IsSet returns true if OptNumberReservation was set.
func (o OptNumberReservation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNumberReservation) Reset() {
	var v NumberReservation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNumberReservation) SetTo(v NumberReservation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNumberReservation) Get() (v NumberReservation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNumberReservation) Or(d NumberReservation) NumberReservation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNumberReservationStatus returns new OptNumberReservationStatus with value set to v.
func NewOptNumberReservationStatus(v NumberReservationStatus) OptNumberReservationStatus {
	return OptNumberReservationStatus{
		Value: v,
		Set:   true,
	}
}

// OptNumberReservationStatus is optional NumberReservationStatus.
type OptNumberReservationStatus struct {
	Value NumberReservationStatus
	Set   bool
}

// IsSet returns true if OptNumberReservationStatus was set.
func (o OptNumberReservationStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNumberReservationStatus) Reset() {
	var v NumberReservationStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNumberReservationStatus) SetTo(v NumberReservationStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNumberReservationStatus) Get() (v NumberReservationStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNumberReservationStatus) Or(d NumberReservationStatus) NumberReservationStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOutboundCallRecording returns new OptOutboundCallRecording with value set to v.
func NewOptOutboundCallRecording(v OutboundCallRecording) OptOutboundCallRecording {
	return OptOutboundCallRecording{
		Value: v,
		Set:   true,
	}
}

// OptOutboundCallRecording is optional OutboundCallRecording.
type OptOutboundCallRecording struct {
	Value OutboundCallRecording
	Set   bool
}

// IsSet returns true if OptOutboundCallRecording was set.
func (o OptOutboundCallRecording) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOutboundCallRecording) Reset() {
	var v OutboundCallRecording
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOutboundCallRecording) SetTo(v OutboundCallRecording) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOutboundCallRecording) Get() (v OutboundCallRecording, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOutboundCallRecording) Or(d OutboundCallRecording) OutboundCallRecording {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOutboundCallRecordingCallRecordingChannels returns new OptOutboundCallRecordingCallRecordingChannels with value set to v.
func NewOptOutboundCallRecordingCallRecordingChannels(v OutboundCallRecordingCallRecordingChannels) OptOutboundCallRecordingCallRecordingChannels {
	return OptOutboundCallRecordingCallRecordingChannels{
		Value: v,
		Set:   true,
	}
}

// OptOutboundCallRecordingCallRecordingChannels is optional OutboundCallRecordingCallRecordingChannels.
type OptOutboundCallRecordingCallRecordingChannels struct {
	Value OutboundCallRecordingCallRecordingChannels
	Set   bool
}

// IsSet returns true if OptOutboundCallRecordingCallRecordingChannels was set.
func (o OptOutboundCallRecordingCallRecordingChannels) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOutboundCallRecordingCallRecordingChannels) Reset() {
	var v OutboundCallRecordingCallRecordingChannels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOutboundCallRecordingCallRecordingChannels) SetTo(v OutboundCallRecordingCallRecordingChannels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOutboundCallRecordingCallRecordingChannels) Get() (v OutboundCallRecordingCallRecordingChannels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOutboundCallRecordingCallRecordingChannels) Or(d OutboundCallRecordingCallRecordingChannels) OutboundCallRecordingCallRecordingChannels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOutboundCallRecordingCallRecordingFormat returns new OptOutboundCallRecordingCallRecordingFormat with value set to v.
func NewOptOutboundCallRecordingCallRecordingFormat(v OutboundCallRecordingCallRecordingFormat) OptOutboundCallRecordingCallRecordingFormat {
	return OptOutboundCallRecordingCallRecordingFormat{
		Value: v,
		Set:   true,
	}
}

// OptOutboundCallRecordingCallRecordingFormat is optional OutboundCallRecordingCallRecordingFormat.
type OptOutboundCallRecordingCallRecordingFormat struct {
	Value OutboundCallRecordingCallRecordingFormat
	Set   bool
}

// IsSet returns true if OptOutboundCallRecordingCallRecordingFormat was set.
func (o OptOutboundCallRecordingCallRecordingFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOutboundCallRecordingCallRecordingFormat) Reset() {
	var v OutboundCallRecordingCallRecordingFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOutboundCallRecordingCallRecordingFormat) SetTo(v OutboundCallRecordingCallRecordingFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOutboundCallRecordingCallRecordingFormat) Get() (v OutboundCallRecordingCallRecordingFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOutboundCallRecordingCallRecordingFormat) Or(d OutboundCallRecordingCallRecordingFormat) OutboundCallRecordingCallRecordingFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOutboundCallRecordingCallRecordingType returns new OptOutboundCallRecordingCallRecordingType with value set to v.
func NewOptOutboundCallRecordingCallRecordingType(v OutboundCallRecordingCallRecordingType) OptOutboundCallRecordingCallRecordingType {
	return OptOutboundCallRecordingCallRecordingType{
		Value: v,
		Set:   true,
	}
}

// OptOutboundCallRecordingCallRecordingType is optional OutboundCallRecordingCallRecordingType.
type OptOutboundCallRecordingCallRecordingType struct {
	Value OutboundCallRecordingCallRecordingType
	Set   bool
}

// IsSet returns true if OptOutboundCallRecordingCallRecordingType was set.
func (o OptOutboundCallRecordingCallRecordingType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOutboundCallRecordingCallRecordingType) Reset() {
	var v OutboundCallRecordingCallRecordingType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOutboundCallRecordingCallRecordingType) SetTo(v OutboundCallRecordingCallRecordingType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOutboundCallRecordingCallRecordingType) Get() (v OutboundCallRecordingCallRecordingType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOutboundCallRecordingCallRecordingType) Or(d OutboundCallRecordingCallRecordingType) OutboundCallRecordingCallRecordingType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOutboundMessagePayload returns new OptOutboundMessagePayload with value set to v.
func NewOptOutboundMessagePayload(v OutboundMessagePayload) OptOutboundMessagePayload {
	return OptOutboundMessagePayload{
		Value: v,
		Set:   true,
	}
}

// OptOutboundMessagePayload is optional OutboundMessagePayload.
type OptOutboundMessagePayload struct {
	Value OutboundMessagePayload
	Set   bool
}

// IsSet returns true if OptOutboundMessagePayload was set.
func (o OptOutboundMessagePayload) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOutboundMessagePayload) Reset() {
	var v OutboundMessagePayload
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOutboundMessagePayload) SetTo(v OutboundMessagePayload) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOutboundMessagePayload) Get() (v OutboundMessagePayload, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOutboundMessagePayload) Or(d OutboundMessagePayload) OutboundMessagePayload {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOutboundMessagePayloadDirection returns new OptOutboundMessagePayloadDirection with value set to v.
func NewOptOutboundMessagePayloadDirection(v OutboundMessagePayloadDirection) OptOutboundMessagePayloadDirection {
	return OptOutboundMessagePayloadDirection{
		Value: v,
		Set:   true,
	}
}

// OptOutboundMessagePayloadDirection is optional OutboundMessagePayloadDirection.
type OptOutboundMessagePayloadDirection struct {
	Value OutboundMessagePayloadDirection
	Set   bool
}

// IsSet returns true if OptOutboundMessagePayloadDirection was set.
func (o OptOutboundMessagePayloadDirection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOutboundMessagePayloadDirection) Reset() {
	var v OutboundMessagePayloadDirection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOutboundMessagePayloadDirection) SetTo(v OutboundMessagePayloadDirection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOutboundMessagePayloadDirection) Get() (v OutboundMessagePayloadDirection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOutboundMessagePayloadDirection) Or(d OutboundMessagePayloadDirection) OutboundMessagePayloadDirection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOutboundMessagePayloadFrom returns new OptOutboundMessagePayloadFrom with value set to v.
func NewOptOutboundMessagePayloadFrom(v OutboundMessagePayloadFrom) OptOutboundMessagePayloadFrom {
	return OptOutboundMessagePayloadFrom{
		Value: v,
		Set:   true,
	}
}

// OptOutboundMessagePayloadFrom is optional OutboundMessagePayloadFrom.
type OptOutboundMessagePayloadFrom struct {
	Value OutboundMessagePayloadFrom
	Set   bool
}

// IsSet returns true if OptOutboundMessagePayloadFrom was set.
func (o OptOutboundMessagePayloadFrom) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOutboundMessagePayloadFrom) Reset() {
	var v OutboundMessagePayloadFrom
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOutboundMessagePayloadFrom) SetTo(v OutboundMessagePayloadFrom) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOutboundMessagePayloadFrom) Get() (v OutboundMessagePayloadFrom, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOutboundMessagePayloadFrom) Or(d OutboundMessagePayloadFrom) OutboundMessagePayloadFrom {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOutboundMessagePayloadFromLineType returns new OptOutboundMessagePayloadFromLineType with value set to v.
func NewOptOutboundMessagePayloadFromLineType(v OutboundMessagePayloadFromLineType) OptOutboundMessagePayloadFromLineType {
	return OptOutboundMessagePayloadFromLineType{
		Value: v,
		Set:   true,
	}
}

// OptOutboundMessagePayloadFromLineType is optional OutboundMessagePayloadFromLineType.
type OptOutboundMessagePayloadFromLineType struct {
	Value OutboundMessagePayloadFromLineType
	Set   bool
}

// IsSet returns true if OptOutboundMessagePayloadFromLineType was set.
func (o OptOutboundMessagePayloadFromLineType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOutboundMessagePayloadFromLineType) Reset() {
	var v OutboundMessagePayloadFromLineType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOutboundMessagePayloadFromLineType) SetTo(v OutboundMessagePayloadFromLineType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOutboundMessagePayloadFromLineType) Get() (v OutboundMessagePayloadFromLineType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOutboundMessagePayloadFromLineType) Or(d OutboundMessagePayloadFromLineType) OutboundMessagePayloadFromLineType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOutboundMessagePayloadRecordType returns new OptOutboundMessagePayloadRecordType with value set to v.
func NewOptOutboundMessagePayloadRecordType(v OutboundMessagePayloadRecordType) OptOutboundMessagePayloadRecordType {
	return OptOutboundMessagePayloadRecordType{
		Value: v,
		Set:   true,
	}
}

// OptOutboundMessagePayloadRecordType is optional OutboundMessagePayloadRecordType.
type OptOutboundMessagePayloadRecordType struct {
	Value OutboundMessagePayloadRecordType
	Set   bool
}

// IsSet returns true if OptOutboundMessagePayloadRecordType was set.
func (o OptOutboundMessagePayloadRecordType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOutboundMessagePayloadRecordType) Reset() {
	var v OutboundMessagePayloadRecordType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOutboundMessagePayloadRecordType) SetTo(v OutboundMessagePayloadRecordType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOutboundMessagePayloadRecordType) Get() (v OutboundMessagePayloadRecordType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOutboundMessagePayloadRecordType) Or(d OutboundMessagePayloadRecordType) OutboundMessagePayloadRecordType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOutboundMessagePayloadToItemLineType returns new OptOutboundMessagePayloadToItemLineType with value set to v.
func NewOptOutboundMessagePayloadToItemLineType(v OutboundMessagePayloadToItemLineType) OptOutboundMessagePayloadToItemLineType {
	return OptOutboundMessagePayloadToItemLineType{
		Value: v,
		Set:   true,
	}
}

// OptOutboundMessagePayloadToItemLineType is optional OutboundMessagePayloadToItemLineType.
type OptOutboundMessagePayloadToItemLineType struct {
	Value OutboundMessagePayloadToItemLineType
	Set   bool
}

// IsSet returns true if OptOutboundMessagePayloadToItemLineType was set.
func (o OptOutboundMessagePayloadToItemLineType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOutboundMessagePayloadToItemLineType) Reset() {
	var v OutboundMessagePayloadToItemLineType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOutboundMessagePayloadToItemLineType) SetTo(v OutboundMessagePayloadToItemLineType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOutboundMessagePayloadToItemLineType) Get() (v OutboundMessagePayloadToItemLineType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOutboundMessagePayloadToItemLineType) Or(d OutboundMessagePayloadToItemLineType) OutboundMessagePayloadToItemLineType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOutboundMessagePayloadToItemStatus returns new OptOutboundMessagePayloadToItemStatus with value set to v.
func NewOptOutboundMessagePayloadToItemStatus(v OutboundMessagePayloadToItemStatus) OptOutboundMessagePayloadToItemStatus {
	return OptOutboundMessagePayloadToItemStatus{
		Value: v,
		Set:   true,
	}
}

// OptOutboundMessagePayloadToItemStatus is optional OutboundMessagePayloadToItemStatus.
type OptOutboundMessagePayloadToItemStatus struct {
	Value OutboundMessagePayloadToItemStatus
	Set   bool
}

// IsSet returns true if OptOutboundMessagePayloadToItemStatus was set.
func (o OptOutboundMessagePayloadToItemStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOutboundMessagePayloadToItemStatus) Reset() {
	var v OutboundMessagePayloadToItemStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOutboundMessagePayloadToItemStatus) SetTo(v OutboundMessagePayloadToItemStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOutboundMessagePayloadToItemStatus) Get() (v OutboundMessagePayloadToItemStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOutboundMessagePayloadToItemStatus) Or(d OutboundMessagePayloadToItemStatus) OutboundMessagePayloadToItemStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOutboundMessagePayloadType returns new OptOutboundMessagePayloadType with value set to v.
func NewOptOutboundMessagePayloadType(v OutboundMessagePayloadType) OptOutboundMessagePayloadType {
	return OptOutboundMessagePayloadType{
		Value: v,
		Set:   true,
	}
}

// OptOutboundMessagePayloadType is optional OutboundMessagePayloadType.
type OptOutboundMessagePayloadType struct {
	Value OutboundMessagePayloadType
	Set   bool
}

// IsSet returns true if OptOutboundMessagePayloadType was set.
func (o OptOutboundMessagePayloadType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOutboundMessagePayloadType) Reset() {
	var v OutboundMessagePayloadType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOutboundMessagePayloadType) SetTo(v OutboundMessagePayloadType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOutboundMessagePayloadType) Get() (v OutboundMessagePayloadType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOutboundMessagePayloadType) Or(d OutboundMessagePayloadType) OutboundMessagePayloadType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOutboundVoiceProfile returns new OptOutboundVoiceProfile with value set to v.
func NewOptOutboundVoiceProfile(v OutboundVoiceProfile) OptOutboundVoiceProfile {
	return OptOutboundVoiceProfile{
		Value: v,
		Set:   true,
	}
}

// OptOutboundVoiceProfile is optional OutboundVoiceProfile.
type OptOutboundVoiceProfile struct {
	Value OutboundVoiceProfile
	Set   bool
}

// IsSet returns true if OptOutboundVoiceProfile was set.
func (o OptOutboundVoiceProfile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOutboundVoiceProfile) Reset() {
	var v OutboundVoiceProfile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOutboundVoiceProfile) SetTo(v OutboundVoiceProfile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOutboundVoiceProfile) Get() (v OutboundVoiceProfile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOutboundVoiceProfile) Or(d OutboundVoiceProfile) OutboundVoiceProfile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOutboundVoiceProfileId returns new OptOutboundVoiceProfileId with value set to v.
func NewOptOutboundVoiceProfileId(v OutboundVoiceProfileId) OptOutboundVoiceProfileId {
	return OptOutboundVoiceProfileId{
		Value: v,
		Set:   true,
	}
}

// OptOutboundVoiceProfileId is optional OutboundVoiceProfileId.
type OptOutboundVoiceProfileId struct {
	Value OutboundVoiceProfileId
	Set   bool
}

// IsSet returns true if OptOutboundVoiceProfileId was set.
func (o OptOutboundVoiceProfileId) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOutboundVoiceProfileId) Reset() {
	var v OutboundVoiceProfileId
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOutboundVoiceProfileId) SetTo(v OutboundVoiceProfileId) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOutboundVoiceProfileId) Get() (v OutboundVoiceProfileId, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOutboundVoiceProfileId) Or(d OutboundVoiceProfileId) OutboundVoiceProfileId {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaginationMeta returns new OptPaginationMeta with value set to v.
func NewOptPaginationMeta(v PaginationMeta) OptPaginationMeta {
	return OptPaginationMeta{
		Value: v,
		Set:   true,
	}
}

// OptPaginationMeta is optional PaginationMeta.
type OptPaginationMeta struct {
	Value PaginationMeta
	Set   bool
}

// IsSet returns true if OptPaginationMeta was set.
func (o OptPaginationMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaginationMeta) Reset() {
	var v PaginationMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaginationMeta) SetTo(v PaginationMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaginationMeta) Get() (v PaginationMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaginationMeta) Or(d PaginationMeta) PaginationMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaginationMetaSimple returns new OptPaginationMetaSimple with value set to v.
func NewOptPaginationMetaSimple(v PaginationMetaSimple) OptPaginationMetaSimple {
	return OptPaginationMetaSimple{
		Value: v,
		Set:   true,
	}
}

// OptPaginationMetaSimple is optional PaginationMetaSimple.
type OptPaginationMetaSimple struct {
	Value PaginationMetaSimple
	Set   bool
}

// IsSet returns true if OptPaginationMetaSimple was set.
func (o OptPaginationMetaSimple) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaginationMetaSimple) Reset() {
	var v PaginationMetaSimple
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaginationMetaSimple) SetTo(v PaginationMetaSimple) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaginationMetaSimple) Get() (v PaginationMetaSimple, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaginationMetaSimple) Or(d PaginationMetaSimple) PaginationMetaSimple {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptParticipantResource returns new OptParticipantResource with value set to v.
func NewOptParticipantResource(v ParticipantResource) OptParticipantResource {
	return OptParticipantResource{
		Value: v,
		Set:   true,
	}
}

// OptParticipantResource is optional ParticipantResource.
type OptParticipantResource struct {
	Value ParticipantResource
	Set   bool
}

// IsSet returns true if OptParticipantResource was set.
func (o OptParticipantResource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptParticipantResource) Reset() {
	var v ParticipantResource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptParticipantResource) SetTo(v ParticipantResource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptParticipantResource) Get() (v ParticipantResource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptParticipantResource) Or(d ParticipantResource) ParticipantResource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptParticipantResourceIndex returns new OptParticipantResourceIndex with value set to v.
func NewOptParticipantResourceIndex(v ParticipantResourceIndex) OptParticipantResourceIndex {
	return OptParticipantResourceIndex{
		Value: v,
		Set:   true,
	}
}

// OptParticipantResourceIndex is optional ParticipantResourceIndex.
type OptParticipantResourceIndex struct {
	Value ParticipantResourceIndex
	Set   bool
}

// IsSet returns true if OptParticipantResourceIndex was set.
func (o OptParticipantResourceIndex) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptParticipantResourceIndex) Reset() {
	var v ParticipantResourceIndex
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptParticipantResourceIndex) SetTo(v ParticipantResourceIndex) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptParticipantResourceIndex) Get() (v ParticipantResourceIndex, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptParticipantResourceIndex) Or(d ParticipantResourceIndex) ParticipantResourceIndex {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptParticipantResourceStatus returns new OptParticipantResourceStatus with value set to v.
func NewOptParticipantResourceStatus(v ParticipantResourceStatus) OptParticipantResourceStatus {
	return OptParticipantResourceStatus{
		Value: v,
		Set:   true,
	}
}

// OptParticipantResourceStatus is optional ParticipantResourceStatus.
type OptParticipantResourceStatus struct {
	Value ParticipantResourceStatus
	Set   bool
}

// IsSet returns true if OptParticipantResourceStatus was set.
func (o OptParticipantResourceStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptParticipantResourceStatus) Reset() {
	var v ParticipantResourceStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptParticipantResourceStatus) SetTo(v ParticipantResourceStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptParticipantResourceStatus) Get() (v ParticipantResourceStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptParticipantResourceStatus) Or(d ParticipantResourceStatus) ParticipantResourceStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneNumberDeletedDetailed returns new OptPhoneNumberDeletedDetailed with value set to v.
func NewOptPhoneNumberDeletedDetailed(v PhoneNumberDeletedDetailed) OptPhoneNumberDeletedDetailed {
	return OptPhoneNumberDeletedDetailed{
		Value: v,
		Set:   true,
	}
}

// OptPhoneNumberDeletedDetailed is optional PhoneNumberDeletedDetailed.
type OptPhoneNumberDeletedDetailed struct {
	Value PhoneNumberDeletedDetailed
	Set   bool
}

// IsSet returns true if OptPhoneNumberDeletedDetailed was set.
func (o OptPhoneNumberDeletedDetailed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneNumberDeletedDetailed) Reset() {
	var v PhoneNumberDeletedDetailed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneNumberDeletedDetailed) SetTo(v PhoneNumberDeletedDetailed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneNumberDeletedDetailed) Get() (v PhoneNumberDeletedDetailed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneNumberDeletedDetailed) Or(d PhoneNumberDeletedDetailed) PhoneNumberDeletedDetailed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneNumberDeletedDetailedNumberLevelRouting returns new OptPhoneNumberDeletedDetailedNumberLevelRouting with value set to v.
func NewOptPhoneNumberDeletedDetailedNumberLevelRouting(v PhoneNumberDeletedDetailedNumberLevelRouting) OptPhoneNumberDeletedDetailedNumberLevelRouting {
	return OptPhoneNumberDeletedDetailedNumberLevelRouting{
		Value: v,
		Set:   true,
	}
}

// OptPhoneNumberDeletedDetailedNumberLevelRouting is optional PhoneNumberDeletedDetailedNumberLevelRouting.
type OptPhoneNumberDeletedDetailedNumberLevelRouting struct {
	Value PhoneNumberDeletedDetailedNumberLevelRouting
	Set   bool
}

// IsSet returns true if OptPhoneNumberDeletedDetailedNumberLevelRouting was set.
func (o OptPhoneNumberDeletedDetailedNumberLevelRouting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneNumberDeletedDetailedNumberLevelRouting) Reset() {
	var v PhoneNumberDeletedDetailedNumberLevelRouting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneNumberDeletedDetailedNumberLevelRouting) SetTo(v PhoneNumberDeletedDetailedNumberLevelRouting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneNumberDeletedDetailedNumberLevelRouting) Get() (v PhoneNumberDeletedDetailedNumberLevelRouting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneNumberDeletedDetailedNumberLevelRouting) Or(d PhoneNumberDeletedDetailedNumberLevelRouting) PhoneNumberDeletedDetailedNumberLevelRouting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneNumberDeletedDetailedPhoneNumberType returns new OptPhoneNumberDeletedDetailedPhoneNumberType with value set to v.
func NewOptPhoneNumberDeletedDetailedPhoneNumberType(v PhoneNumberDeletedDetailedPhoneNumberType) OptPhoneNumberDeletedDetailedPhoneNumberType {
	return OptPhoneNumberDeletedDetailedPhoneNumberType{
		Value: v,
		Set:   true,
	}
}

// OptPhoneNumberDeletedDetailedPhoneNumberType is optional PhoneNumberDeletedDetailedPhoneNumberType.
type OptPhoneNumberDeletedDetailedPhoneNumberType struct {
	Value PhoneNumberDeletedDetailedPhoneNumberType
	Set   bool
}

// IsSet returns true if OptPhoneNumberDeletedDetailedPhoneNumberType was set.
func (o OptPhoneNumberDeletedDetailedPhoneNumberType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneNumberDeletedDetailedPhoneNumberType) Reset() {
	var v PhoneNumberDeletedDetailedPhoneNumberType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneNumberDeletedDetailedPhoneNumberType) SetTo(v PhoneNumberDeletedDetailedPhoneNumberType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneNumberDeletedDetailedPhoneNumberType) Get() (v PhoneNumberDeletedDetailedPhoneNumberType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneNumberDeletedDetailedPhoneNumberType) Or(d PhoneNumberDeletedDetailedPhoneNumberType) PhoneNumberDeletedDetailedPhoneNumberType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneNumberDeletedDetailedStatus returns new OptPhoneNumberDeletedDetailedStatus with value set to v.
func NewOptPhoneNumberDeletedDetailedStatus(v PhoneNumberDeletedDetailedStatus) OptPhoneNumberDeletedDetailedStatus {
	return OptPhoneNumberDeletedDetailedStatus{
		Value: v,
		Set:   true,
	}
}

// OptPhoneNumberDeletedDetailedStatus is optional PhoneNumberDeletedDetailedStatus.
type OptPhoneNumberDeletedDetailedStatus struct {
	Value PhoneNumberDeletedDetailedStatus
	Set   bool
}

// IsSet returns true if OptPhoneNumberDeletedDetailedStatus was set.
func (o OptPhoneNumberDeletedDetailedStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneNumberDeletedDetailedStatus) Reset() {
	var v PhoneNumberDeletedDetailedStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneNumberDeletedDetailedStatus) SetTo(v PhoneNumberDeletedDetailedStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneNumberDeletedDetailedStatus) Get() (v PhoneNumberDeletedDetailedStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneNumberDeletedDetailedStatus) Or(d PhoneNumberDeletedDetailedStatus) PhoneNumberDeletedDetailedStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneNumberDetailed returns new OptPhoneNumberDetailed with value set to v.
func NewOptPhoneNumberDetailed(v PhoneNumberDetailed) OptPhoneNumberDetailed {
	return OptPhoneNumberDetailed{
		Value: v,
		Set:   true,
	}
}

// OptPhoneNumberDetailed is optional PhoneNumberDetailed.
type OptPhoneNumberDetailed struct {
	Value PhoneNumberDetailed
	Set   bool
}

// IsSet returns true if OptPhoneNumberDetailed was set.
func (o OptPhoneNumberDetailed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneNumberDetailed) Reset() {
	var v PhoneNumberDetailed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneNumberDetailed) SetTo(v PhoneNumberDetailed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneNumberDetailed) Get() (v PhoneNumberDetailed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneNumberDetailed) Or(d PhoneNumberDetailed) PhoneNumberDetailed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneNumberDetailedInboundCallScreening returns new OptPhoneNumberDetailedInboundCallScreening with value set to v.
func NewOptPhoneNumberDetailedInboundCallScreening(v PhoneNumberDetailedInboundCallScreening) OptPhoneNumberDetailedInboundCallScreening {
	return OptPhoneNumberDetailedInboundCallScreening{
		Value: v,
		Set:   true,
	}
}

// OptPhoneNumberDetailedInboundCallScreening is optional PhoneNumberDetailedInboundCallScreening.
type OptPhoneNumberDetailedInboundCallScreening struct {
	Value PhoneNumberDetailedInboundCallScreening
	Set   bool
}

// IsSet returns true if OptPhoneNumberDetailedInboundCallScreening was set.
func (o OptPhoneNumberDetailedInboundCallScreening) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneNumberDetailedInboundCallScreening) Reset() {
	var v PhoneNumberDetailedInboundCallScreening
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneNumberDetailedInboundCallScreening) SetTo(v PhoneNumberDetailedInboundCallScreening) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneNumberDetailedInboundCallScreening) Get() (v PhoneNumberDetailedInboundCallScreening, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneNumberDetailedInboundCallScreening) Or(d PhoneNumberDetailedInboundCallScreening) PhoneNumberDetailedInboundCallScreening {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneNumberDetailedNumberLevelRouting returns new OptPhoneNumberDetailedNumberLevelRouting with value set to v.
func NewOptPhoneNumberDetailedNumberLevelRouting(v PhoneNumberDetailedNumberLevelRouting) OptPhoneNumberDetailedNumberLevelRouting {
	return OptPhoneNumberDetailedNumberLevelRouting{
		Value: v,
		Set:   true,
	}
}

// OptPhoneNumberDetailedNumberLevelRouting is optional PhoneNumberDetailedNumberLevelRouting.
type OptPhoneNumberDetailedNumberLevelRouting struct {
	Value PhoneNumberDetailedNumberLevelRouting
	Set   bool
}

// IsSet returns true if OptPhoneNumberDetailedNumberLevelRouting was set.
func (o OptPhoneNumberDetailedNumberLevelRouting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneNumberDetailedNumberLevelRouting) Reset() {
	var v PhoneNumberDetailedNumberLevelRouting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneNumberDetailedNumberLevelRouting) SetTo(v PhoneNumberDetailedNumberLevelRouting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneNumberDetailedNumberLevelRouting) Get() (v PhoneNumberDetailedNumberLevelRouting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneNumberDetailedNumberLevelRouting) Or(d PhoneNumberDetailedNumberLevelRouting) PhoneNumberDetailedNumberLevelRouting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneNumberDetailedPhoneNumberType returns new OptPhoneNumberDetailedPhoneNumberType with value set to v.
func NewOptPhoneNumberDetailedPhoneNumberType(v PhoneNumberDetailedPhoneNumberType) OptPhoneNumberDetailedPhoneNumberType {
	return OptPhoneNumberDetailedPhoneNumberType{
		Value: v,
		Set:   true,
	}
}

// OptPhoneNumberDetailedPhoneNumberType is optional PhoneNumberDetailedPhoneNumberType.
type OptPhoneNumberDetailedPhoneNumberType struct {
	Value PhoneNumberDetailedPhoneNumberType
	Set   bool
}

// IsSet returns true if OptPhoneNumberDetailedPhoneNumberType was set.
func (o OptPhoneNumberDetailedPhoneNumberType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneNumberDetailedPhoneNumberType) Reset() {
	var v PhoneNumberDetailedPhoneNumberType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneNumberDetailedPhoneNumberType) SetTo(v PhoneNumberDetailedPhoneNumberType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneNumberDetailedPhoneNumberType) Get() (v PhoneNumberDetailedPhoneNumberType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneNumberDetailedPhoneNumberType) Or(d PhoneNumberDetailedPhoneNumberType) PhoneNumberDetailedPhoneNumberType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneNumberDetailedStatus returns new OptPhoneNumberDetailedStatus with value set to v.
func NewOptPhoneNumberDetailedStatus(v PhoneNumberDetailedStatus) OptPhoneNumberDetailedStatus {
	return OptPhoneNumberDetailedStatus{
		Value: v,
		Set:   true,
	}
}

// OptPhoneNumberDetailedStatus is optional PhoneNumberDetailedStatus.
type OptPhoneNumberDetailedStatus struct {
	Value PhoneNumberDetailedStatus
	Set   bool
}

// IsSet returns true if OptPhoneNumberDetailedStatus was set.
func (o OptPhoneNumberDetailedStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneNumberDetailedStatus) Reset() {
	var v PhoneNumberDetailedStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneNumberDetailedStatus) SetTo(v PhoneNumberDetailedStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneNumberDetailedStatus) Get() (v PhoneNumberDetailedStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneNumberDetailedStatus) Or(d PhoneNumberDetailedStatus) PhoneNumberDetailedStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneNumberWithMessagingSettings returns new OptPhoneNumberWithMessagingSettings with value set to v.
func NewOptPhoneNumberWithMessagingSettings(v PhoneNumberWithMessagingSettings) OptPhoneNumberWithMessagingSettings {
	return OptPhoneNumberWithMessagingSettings{
		Value: v,
		Set:   true,
	}
}

// OptPhoneNumberWithMessagingSettings is optional PhoneNumberWithMessagingSettings.
type OptPhoneNumberWithMessagingSettings struct {
	Value PhoneNumberWithMessagingSettings
	Set   bool
}

// IsSet returns true if OptPhoneNumberWithMessagingSettings was set.
func (o OptPhoneNumberWithMessagingSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneNumberWithMessagingSettings) Reset() {
	var v PhoneNumberWithMessagingSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneNumberWithMessagingSettings) SetTo(v PhoneNumberWithMessagingSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneNumberWithMessagingSettings) Get() (v PhoneNumberWithMessagingSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneNumberWithMessagingSettings) Or(d PhoneNumberWithMessagingSettings) PhoneNumberWithMessagingSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneNumberWithMessagingSettingsFeatures returns new OptPhoneNumberWithMessagingSettingsFeatures with value set to v.
func NewOptPhoneNumberWithMessagingSettingsFeatures(v PhoneNumberWithMessagingSettingsFeatures) OptPhoneNumberWithMessagingSettingsFeatures {
	return OptPhoneNumberWithMessagingSettingsFeatures{
		Value: v,
		Set:   true,
	}
}

// OptPhoneNumberWithMessagingSettingsFeatures is optional PhoneNumberWithMessagingSettingsFeatures.
type OptPhoneNumberWithMessagingSettingsFeatures struct {
	Value PhoneNumberWithMessagingSettingsFeatures
	Set   bool
}

// IsSet returns true if OptPhoneNumberWithMessagingSettingsFeatures was set.
func (o OptPhoneNumberWithMessagingSettingsFeatures) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneNumberWithMessagingSettingsFeatures) Reset() {
	var v PhoneNumberWithMessagingSettingsFeatures
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneNumberWithMessagingSettingsFeatures) SetTo(v PhoneNumberWithMessagingSettingsFeatures) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneNumberWithMessagingSettingsFeatures) Get() (v PhoneNumberWithMessagingSettingsFeatures, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneNumberWithMessagingSettingsFeatures) Or(d PhoneNumberWithMessagingSettingsFeatures) PhoneNumberWithMessagingSettingsFeatures {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneNumberWithMessagingSettingsRecordType returns new OptPhoneNumberWithMessagingSettingsRecordType with value set to v.
func NewOptPhoneNumberWithMessagingSettingsRecordType(v PhoneNumberWithMessagingSettingsRecordType) OptPhoneNumberWithMessagingSettingsRecordType {
	return OptPhoneNumberWithMessagingSettingsRecordType{
		Value: v,
		Set:   true,
	}
}

// OptPhoneNumberWithMessagingSettingsRecordType is optional PhoneNumberWithMessagingSettingsRecordType.
type OptPhoneNumberWithMessagingSettingsRecordType struct {
	Value PhoneNumberWithMessagingSettingsRecordType
	Set   bool
}

// IsSet returns true if OptPhoneNumberWithMessagingSettingsRecordType was set.
func (o OptPhoneNumberWithMessagingSettingsRecordType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneNumberWithMessagingSettingsRecordType) Reset() {
	var v PhoneNumberWithMessagingSettingsRecordType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneNumberWithMessagingSettingsRecordType) SetTo(v PhoneNumberWithMessagingSettingsRecordType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneNumberWithMessagingSettingsRecordType) Get() (v PhoneNumberWithMessagingSettingsRecordType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneNumberWithMessagingSettingsRecordType) Or(d PhoneNumberWithMessagingSettingsRecordType) PhoneNumberWithMessagingSettingsRecordType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneNumberWithMessagingSettingsType returns new OptPhoneNumberWithMessagingSettingsType with value set to v.
func NewOptPhoneNumberWithMessagingSettingsType(v PhoneNumberWithMessagingSettingsType) OptPhoneNumberWithMessagingSettingsType {
	return OptPhoneNumberWithMessagingSettingsType{
		Value: v,
		Set:   true,
	}
}

// OptPhoneNumberWithMessagingSettingsType is optional PhoneNumberWithMessagingSettingsType.
type OptPhoneNumberWithMessagingSettingsType struct {
	Value PhoneNumberWithMessagingSettingsType
	Set   bool
}

// IsSet returns true if OptPhoneNumberWithMessagingSettingsType was set.
func (o OptPhoneNumberWithMessagingSettingsType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneNumberWithMessagingSettingsType) Reset() {
	var v PhoneNumberWithMessagingSettingsType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneNumberWithMessagingSettingsType) SetTo(v PhoneNumberWithMessagingSettingsType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneNumberWithMessagingSettingsType) Get() (v PhoneNumberWithMessagingSettingsType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneNumberWithMessagingSettingsType) Or(d PhoneNumberWithMessagingSettingsType) PhoneNumberWithMessagingSettingsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneNumberWithVoiceSettings returns new OptPhoneNumberWithVoiceSettings with value set to v.
func NewOptPhoneNumberWithVoiceSettings(v PhoneNumberWithVoiceSettings) OptPhoneNumberWithVoiceSettings {
	return OptPhoneNumberWithVoiceSettings{
		Value: v,
		Set:   true,
	}
}

// OptPhoneNumberWithVoiceSettings is optional PhoneNumberWithVoiceSettings.
type OptPhoneNumberWithVoiceSettings struct {
	Value PhoneNumberWithVoiceSettings
	Set   bool
}

// IsSet returns true if OptPhoneNumberWithVoiceSettings was set.
func (o OptPhoneNumberWithVoiceSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneNumberWithVoiceSettings) Reset() {
	var v PhoneNumberWithVoiceSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneNumberWithVoiceSettings) SetTo(v PhoneNumberWithVoiceSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneNumberWithVoiceSettings) Get() (v PhoneNumberWithVoiceSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneNumberWithVoiceSettings) Or(d PhoneNumberWithVoiceSettings) PhoneNumberWithVoiceSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneNumberWithVoiceSettingsInboundCallScreening returns new OptPhoneNumberWithVoiceSettingsInboundCallScreening with value set to v.
func NewOptPhoneNumberWithVoiceSettingsInboundCallScreening(v PhoneNumberWithVoiceSettingsInboundCallScreening) OptPhoneNumberWithVoiceSettingsInboundCallScreening {
	return OptPhoneNumberWithVoiceSettingsInboundCallScreening{
		Value: v,
		Set:   true,
	}
}

// OptPhoneNumberWithVoiceSettingsInboundCallScreening is optional PhoneNumberWithVoiceSettingsInboundCallScreening.
type OptPhoneNumberWithVoiceSettingsInboundCallScreening struct {
	Value PhoneNumberWithVoiceSettingsInboundCallScreening
	Set   bool
}

// IsSet returns true if OptPhoneNumberWithVoiceSettingsInboundCallScreening was set.
func (o OptPhoneNumberWithVoiceSettingsInboundCallScreening) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneNumberWithVoiceSettingsInboundCallScreening) Reset() {
	var v PhoneNumberWithVoiceSettingsInboundCallScreening
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneNumberWithVoiceSettingsInboundCallScreening) SetTo(v PhoneNumberWithVoiceSettingsInboundCallScreening) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneNumberWithVoiceSettingsInboundCallScreening) Get() (v PhoneNumberWithVoiceSettingsInboundCallScreening, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneNumberWithVoiceSettingsInboundCallScreening) Or(d PhoneNumberWithVoiceSettingsInboundCallScreening) PhoneNumberWithVoiceSettingsInboundCallScreening {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneNumberWithVoiceSettingsUsagePaymentMethod returns new OptPhoneNumberWithVoiceSettingsUsagePaymentMethod with value set to v.
func NewOptPhoneNumberWithVoiceSettingsUsagePaymentMethod(v PhoneNumberWithVoiceSettingsUsagePaymentMethod) OptPhoneNumberWithVoiceSettingsUsagePaymentMethod {
	return OptPhoneNumberWithVoiceSettingsUsagePaymentMethod{
		Value: v,
		Set:   true,
	}
}

// OptPhoneNumberWithVoiceSettingsUsagePaymentMethod is optional PhoneNumberWithVoiceSettingsUsagePaymentMethod.
type OptPhoneNumberWithVoiceSettingsUsagePaymentMethod struct {
	Value PhoneNumberWithVoiceSettingsUsagePaymentMethod
	Set   bool
}

// IsSet returns true if OptPhoneNumberWithVoiceSettingsUsagePaymentMethod was set.
func (o OptPhoneNumberWithVoiceSettingsUsagePaymentMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneNumberWithVoiceSettingsUsagePaymentMethod) Reset() {
	var v PhoneNumberWithVoiceSettingsUsagePaymentMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneNumberWithVoiceSettingsUsagePaymentMethod) SetTo(v PhoneNumberWithVoiceSettingsUsagePaymentMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneNumberWithVoiceSettingsUsagePaymentMethod) Get() (v PhoneNumberWithVoiceSettingsUsagePaymentMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneNumberWithVoiceSettingsUsagePaymentMethod) Or(d PhoneNumberWithVoiceSettingsUsagePaymentMethod) PhoneNumberWithVoiceSettingsUsagePaymentMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneNumbersItemGoogleVerificationStatus returns new OptPhoneNumbersItemGoogleVerificationStatus with value set to v.
func NewOptPhoneNumbersItemGoogleVerificationStatus(v PhoneNumbersItemGoogleVerificationStatus) OptPhoneNumbersItemGoogleVerificationStatus {
	return OptPhoneNumbersItemGoogleVerificationStatus{
		Value: v,
		Set:   true,
	}
}

// OptPhoneNumbersItemGoogleVerificationStatus is optional PhoneNumbersItemGoogleVerificationStatus.
type OptPhoneNumbersItemGoogleVerificationStatus struct {
	Value PhoneNumbersItemGoogleVerificationStatus
	Set   bool
}

// IsSet returns true if OptPhoneNumbersItemGoogleVerificationStatus was set.
func (o OptPhoneNumbersItemGoogleVerificationStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneNumbersItemGoogleVerificationStatus) Reset() {
	var v PhoneNumbersItemGoogleVerificationStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneNumbersItemGoogleVerificationStatus) SetTo(v PhoneNumbersItemGoogleVerificationStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneNumbersItemGoogleVerificationStatus) Get() (v PhoneNumbersItemGoogleVerificationStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneNumbersItemGoogleVerificationStatus) Or(d PhoneNumbersItemGoogleVerificationStatus) PhoneNumbersItemGoogleVerificationStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneNumbersJob returns new OptPhoneNumbersJob with value set to v.
func NewOptPhoneNumbersJob(v PhoneNumbersJob) OptPhoneNumbersJob {
	return OptPhoneNumbersJob{
		Value: v,
		Set:   true,
	}
}

// OptPhoneNumbersJob is optional PhoneNumbersJob.
type OptPhoneNumbersJob struct {
	Value PhoneNumbersJob
	Set   bool
}

// IsSet returns true if OptPhoneNumbersJob was set.
func (o OptPhoneNumbersJob) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneNumbersJob) Reset() {
	var v PhoneNumbersJob
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneNumbersJob) SetTo(v PhoneNumbersJob) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneNumbersJob) Get() (v PhoneNumbersJob, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneNumbersJob) Or(d PhoneNumbersJob) PhoneNumbersJob {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneNumbersJobStatus returns new OptPhoneNumbersJobStatus with value set to v.
func NewOptPhoneNumbersJobStatus(v PhoneNumbersJobStatus) OptPhoneNumbersJobStatus {
	return OptPhoneNumbersJobStatus{
		Value: v,
		Set:   true,
	}
}

// OptPhoneNumbersJobStatus is optional PhoneNumbersJobStatus.
type OptPhoneNumbersJobStatus struct {
	Value PhoneNumbersJobStatus
	Set   bool
}

// IsSet returns true if OptPhoneNumbersJobStatus was set.
func (o OptPhoneNumbersJobStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneNumbersJobStatus) Reset() {
	var v PhoneNumbersJobStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneNumbersJobStatus) SetTo(v PhoneNumbersJobStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneNumbersJobStatus) Get() (v PhoneNumbersJobStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneNumbersJobStatus) Or(d PhoneNumbersJobStatus) PhoneNumbersJobStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhoneNumbersJobType returns new OptPhoneNumbersJobType with value set to v.
func NewOptPhoneNumbersJobType(v PhoneNumbersJobType) OptPhoneNumbersJobType {
	return OptPhoneNumbersJobType{
		Value: v,
		Set:   true,
	}
}

// OptPhoneNumbersJobType is optional PhoneNumbersJobType.
type OptPhoneNumbersJobType struct {
	Value PhoneNumbersJobType
	Set   bool
}

// IsSet returns true if OptPhoneNumbersJobType was set.
func (o OptPhoneNumbersJobType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhoneNumbersJobType) Reset() {
	var v PhoneNumbersJobType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhoneNumbersJobType) SetTo(v PhoneNumbersJobType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhoneNumbersJobType) Get() (v PhoneNumbersJobType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhoneNumbersJobType) Or(d PhoneNumbersJobType) PhoneNumbersJobType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlayAudioUrlRequestAudioType returns new OptPlayAudioUrlRequestAudioType with value set to v.
func NewOptPlayAudioUrlRequestAudioType(v PlayAudioUrlRequestAudioType) OptPlayAudioUrlRequestAudioType {
	return OptPlayAudioUrlRequestAudioType{
		Value: v,
		Set:   true,
	}
}

// OptPlayAudioUrlRequestAudioType is optional PlayAudioUrlRequestAudioType.
type OptPlayAudioUrlRequestAudioType struct {
	Value PlayAudioUrlRequestAudioType
	Set   bool
}

// IsSet returns true if OptPlayAudioUrlRequestAudioType was set.
func (o OptPlayAudioUrlRequestAudioType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlayAudioUrlRequestAudioType) Reset() {
	var v PlayAudioUrlRequestAudioType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlayAudioUrlRequestAudioType) SetTo(v PlayAudioUrlRequestAudioType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlayAudioUrlRequestAudioType) Get() (v PlayAudioUrlRequestAudioType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlayAudioUrlRequestAudioType) Or(d PlayAudioUrlRequestAudioType) PlayAudioUrlRequestAudioType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlayBeep returns new OptPlayBeep with value set to v.
func NewOptPlayBeep(v PlayBeep) OptPlayBeep {
	return OptPlayBeep{
		Value: v,
		Set:   true,
	}
}

// OptPlayBeep is optional PlayBeep.
type OptPlayBeep struct {
	Value PlayBeep
	Set   bool
}

// IsSet returns true if OptPlayBeep was set.
func (o OptPlayBeep) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlayBeep) Reset() {
	var v PlayBeep
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlayBeep) SetTo(v PlayBeep) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlayBeep) Get() (v PlayBeep, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlayBeep) Or(d PlayBeep) PlayBeep {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortability returns new OptPortability with value set to v.
func NewOptPortability(v Portability) OptPortability {
	return OptPortability{
		Value: v,
		Set:   true,
	}
}

// OptPortability is optional Portability.
type OptPortability struct {
	Value Portability
	Set   bool
}

// IsSet returns true if OptPortability was set.
func (o OptPortability) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortability) Reset() {
	var v Portability
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortability) SetTo(v Portability) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortability) Get() (v Portability, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortability) Or(d Portability) Portability {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortabilityPortedStatus returns new OptPortabilityPortedStatus with value set to v.
func NewOptPortabilityPortedStatus(v PortabilityPortedStatus) OptPortabilityPortedStatus {
	return OptPortabilityPortedStatus{
		Value: v,
		Set:   true,
	}
}

// OptPortabilityPortedStatus is optional PortabilityPortedStatus.
type OptPortabilityPortedStatus struct {
	Value PortabilityPortedStatus
	Set   bool
}

// IsSet returns true if OptPortabilityPortedStatus was set.
func (o OptPortabilityPortedStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortabilityPortedStatus) Reset() {
	var v PortabilityPortedStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortabilityPortedStatus) SetTo(v PortabilityPortedStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortabilityPortedStatus) Get() (v PortabilityPortedStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortabilityPortedStatus) Or(d PortabilityPortedStatus) PortabilityPortedStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortabilityStatus returns new OptPortabilityStatus with value set to v.
func NewOptPortabilityStatus(v PortabilityStatus) OptPortabilityStatus {
	return OptPortabilityStatus{
		Value: v,
		Set:   true,
	}
}

// OptPortabilityStatus is optional PortabilityStatus.
type OptPortabilityStatus struct {
	Value PortabilityStatus
	Set   bool
}

// IsSet returns true if OptPortabilityStatus was set.
func (o OptPortabilityStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortabilityStatus) Reset() {
	var v PortabilityStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortabilityStatus) SetTo(v PortabilityStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortabilityStatus) Get() (v PortabilityStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortabilityStatus) Or(d PortabilityStatus) PortabilityStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingAdditionalDocumentDocumentType returns new OptPortingAdditionalDocumentDocumentType with value set to v.
func NewOptPortingAdditionalDocumentDocumentType(v PortingAdditionalDocumentDocumentType) OptPortingAdditionalDocumentDocumentType {
	return OptPortingAdditionalDocumentDocumentType{
		Value: v,
		Set:   true,
	}
}

// OptPortingAdditionalDocumentDocumentType is optional PortingAdditionalDocumentDocumentType.
type OptPortingAdditionalDocumentDocumentType struct {
	Value PortingAdditionalDocumentDocumentType
	Set   bool
}

// IsSet returns true if OptPortingAdditionalDocumentDocumentType was set.
func (o OptPortingAdditionalDocumentDocumentType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingAdditionalDocumentDocumentType) Reset() {
	var v PortingAdditionalDocumentDocumentType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingAdditionalDocumentDocumentType) SetTo(v PortingAdditionalDocumentDocumentType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingAdditionalDocumentDocumentType) Get() (v PortingAdditionalDocumentDocumentType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingAdditionalDocumentDocumentType) Or(d PortingAdditionalDocumentDocumentType) PortingAdditionalDocumentDocumentType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingLOAConfiguration returns new OptPortingLOAConfiguration with value set to v.
func NewOptPortingLOAConfiguration(v PortingLOAConfiguration) OptPortingLOAConfiguration {
	return OptPortingLOAConfiguration{
		Value: v,
		Set:   true,
	}
}

// OptPortingLOAConfiguration is optional PortingLOAConfiguration.
type OptPortingLOAConfiguration struct {
	Value PortingLOAConfiguration
	Set   bool
}

// IsSet returns true if OptPortingLOAConfiguration was set.
func (o OptPortingLOAConfiguration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingLOAConfiguration) Reset() {
	var v PortingLOAConfiguration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingLOAConfiguration) SetTo(v PortingLOAConfiguration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingLOAConfiguration) Get() (v PortingLOAConfiguration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingLOAConfiguration) Or(d PortingLOAConfiguration) PortingLOAConfiguration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingLOAConfigurationAddress returns new OptPortingLOAConfigurationAddress with value set to v.
func NewOptPortingLOAConfigurationAddress(v PortingLOAConfigurationAddress) OptPortingLOAConfigurationAddress {
	return OptPortingLOAConfigurationAddress{
		Value: v,
		Set:   true,
	}
}

// OptPortingLOAConfigurationAddress is optional PortingLOAConfigurationAddress.
type OptPortingLOAConfigurationAddress struct {
	Value PortingLOAConfigurationAddress
	Set   bool
}

// IsSet returns true if OptPortingLOAConfigurationAddress was set.
func (o OptPortingLOAConfigurationAddress) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingLOAConfigurationAddress) Reset() {
	var v PortingLOAConfigurationAddress
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingLOAConfigurationAddress) SetTo(v PortingLOAConfigurationAddress) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingLOAConfigurationAddress) Get() (v PortingLOAConfigurationAddress, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingLOAConfigurationAddress) Or(d PortingLOAConfigurationAddress) PortingLOAConfigurationAddress {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingLOAConfigurationContact returns new OptPortingLOAConfigurationContact with value set to v.
func NewOptPortingLOAConfigurationContact(v PortingLOAConfigurationContact) OptPortingLOAConfigurationContact {
	return OptPortingLOAConfigurationContact{
		Value: v,
		Set:   true,
	}
}

// OptPortingLOAConfigurationContact is optional PortingLOAConfigurationContact.
type OptPortingLOAConfigurationContact struct {
	Value PortingLOAConfigurationContact
	Set   bool
}

// IsSet returns true if OptPortingLOAConfigurationContact was set.
func (o OptPortingLOAConfigurationContact) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingLOAConfigurationContact) Reset() {
	var v PortingLOAConfigurationContact
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingLOAConfigurationContact) SetTo(v PortingLOAConfigurationContact) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingLOAConfigurationContact) Get() (v PortingLOAConfigurationContact, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingLOAConfigurationContact) Or(d PortingLOAConfigurationContact) PortingLOAConfigurationContact {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingLOAConfigurationLogo returns new OptPortingLOAConfigurationLogo with value set to v.
func NewOptPortingLOAConfigurationLogo(v PortingLOAConfigurationLogo) OptPortingLOAConfigurationLogo {
	return OptPortingLOAConfigurationLogo{
		Value: v,
		Set:   true,
	}
}

// OptPortingLOAConfigurationLogo is optional PortingLOAConfigurationLogo.
type OptPortingLOAConfigurationLogo struct {
	Value PortingLOAConfigurationLogo
	Set   bool
}

// IsSet returns true if OptPortingLOAConfigurationLogo was set.
func (o OptPortingLOAConfigurationLogo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingLOAConfigurationLogo) Reset() {
	var v PortingLOAConfigurationLogo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingLOAConfigurationLogo) SetTo(v PortingLOAConfigurationLogo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingLOAConfigurationLogo) Get() (v PortingLOAConfigurationLogo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingLOAConfigurationLogo) Or(d PortingLOAConfigurationLogo) PortingLOAConfigurationLogo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingLOAConfigurationLogoContentType returns new OptPortingLOAConfigurationLogoContentType with value set to v.
func NewOptPortingLOAConfigurationLogoContentType(v PortingLOAConfigurationLogoContentType) OptPortingLOAConfigurationLogoContentType {
	return OptPortingLOAConfigurationLogoContentType{
		Value: v,
		Set:   true,
	}
}

// OptPortingLOAConfigurationLogoContentType is optional PortingLOAConfigurationLogoContentType.
type OptPortingLOAConfigurationLogoContentType struct {
	Value PortingLOAConfigurationLogoContentType
	Set   bool
}

// IsSet returns true if OptPortingLOAConfigurationLogoContentType was set.
func (o OptPortingLOAConfigurationLogoContentType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingLOAConfigurationLogoContentType) Reset() {
	var v PortingLOAConfigurationLogoContentType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingLOAConfigurationLogoContentType) SetTo(v PortingLOAConfigurationLogoContentType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingLOAConfigurationLogoContentType) Get() (v PortingLOAConfigurationLogoContentType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingLOAConfigurationLogoContentType) Or(d PortingLOAConfigurationLogoContentType) PortingLOAConfigurationLogoContentType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrder returns new OptPortingOrder with value set to v.
func NewOptPortingOrder(v PortingOrder) OptPortingOrder {
	return OptPortingOrder{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrder is optional PortingOrder.
type OptPortingOrder struct {
	Value PortingOrder
	Set   bool
}

// IsSet returns true if OptPortingOrder was set.
func (o OptPortingOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrder) Reset() {
	var v PortingOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrder) SetTo(v PortingOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrder) Get() (v PortingOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrder) Or(d PortingOrder) PortingOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrderActivationSettings returns new OptPortingOrderActivationSettings with value set to v.
func NewOptPortingOrderActivationSettings(v PortingOrderActivationSettings) OptPortingOrderActivationSettings {
	return OptPortingOrderActivationSettings{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrderActivationSettings is optional PortingOrderActivationSettings.
type OptPortingOrderActivationSettings struct {
	Value PortingOrderActivationSettings
	Set   bool
}

// IsSet returns true if OptPortingOrderActivationSettings was set.
func (o OptPortingOrderActivationSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrderActivationSettings) Reset() {
	var v PortingOrderActivationSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrderActivationSettings) SetTo(v PortingOrderActivationSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrderActivationSettings) Get() (v PortingOrderActivationSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrderActivationSettings) Or(d PortingOrderActivationSettings) PortingOrderActivationSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrderActivationStatus returns new OptPortingOrderActivationStatus with value set to v.
func NewOptPortingOrderActivationStatus(v PortingOrderActivationStatus) OptPortingOrderActivationStatus {
	return OptPortingOrderActivationStatus{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrderActivationStatus is optional PortingOrderActivationStatus.
type OptPortingOrderActivationStatus struct {
	Value PortingOrderActivationStatus
	Set   bool
}

// IsSet returns true if OptPortingOrderActivationStatus was set.
func (o OptPortingOrderActivationStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrderActivationStatus) Reset() {
	var v PortingOrderActivationStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrderActivationStatus) SetTo(v PortingOrderActivationStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrderActivationStatus) Get() (v PortingOrderActivationStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrderActivationStatus) Or(d PortingOrderActivationStatus) PortingOrderActivationStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrderDocuments returns new OptPortingOrderDocuments with value set to v.
func NewOptPortingOrderDocuments(v PortingOrderDocuments) OptPortingOrderDocuments {
	return OptPortingOrderDocuments{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrderDocuments is optional PortingOrderDocuments.
type OptPortingOrderDocuments struct {
	Value PortingOrderDocuments
	Set   bool
}

// IsSet returns true if OptPortingOrderDocuments was set.
func (o OptPortingOrderDocuments) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrderDocuments) Reset() {
	var v PortingOrderDocuments
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrderDocuments) SetTo(v PortingOrderDocuments) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrderDocuments) Get() (v PortingOrderDocuments, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrderDocuments) Or(d PortingOrderDocuments) PortingOrderDocuments {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrderEndUser returns new OptPortingOrderEndUser with value set to v.
func NewOptPortingOrderEndUser(v PortingOrderEndUser) OptPortingOrderEndUser {
	return OptPortingOrderEndUser{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrderEndUser is optional PortingOrderEndUser.
type OptPortingOrderEndUser struct {
	Value PortingOrderEndUser
	Set   bool
}

// IsSet returns true if OptPortingOrderEndUser was set.
func (o OptPortingOrderEndUser) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrderEndUser) Reset() {
	var v PortingOrderEndUser
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrderEndUser) SetTo(v PortingOrderEndUser) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrderEndUser) Get() (v PortingOrderEndUser, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrderEndUser) Or(d PortingOrderEndUser) PortingOrderEndUser {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrderEndUserAdmin returns new OptPortingOrderEndUserAdmin with value set to v.
func NewOptPortingOrderEndUserAdmin(v PortingOrderEndUserAdmin) OptPortingOrderEndUserAdmin {
	return OptPortingOrderEndUserAdmin{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrderEndUserAdmin is optional PortingOrderEndUserAdmin.
type OptPortingOrderEndUserAdmin struct {
	Value PortingOrderEndUserAdmin
	Set   bool
}

// IsSet returns true if OptPortingOrderEndUserAdmin was set.
func (o OptPortingOrderEndUserAdmin) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrderEndUserAdmin) Reset() {
	var v PortingOrderEndUserAdmin
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrderEndUserAdmin) SetTo(v PortingOrderEndUserAdmin) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrderEndUserAdmin) Get() (v PortingOrderEndUserAdmin, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrderEndUserAdmin) Or(d PortingOrderEndUserAdmin) PortingOrderEndUserAdmin {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrderEndUserLocation returns new OptPortingOrderEndUserLocation with value set to v.
func NewOptPortingOrderEndUserLocation(v PortingOrderEndUserLocation) OptPortingOrderEndUserLocation {
	return OptPortingOrderEndUserLocation{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrderEndUserLocation is optional PortingOrderEndUserLocation.
type OptPortingOrderEndUserLocation struct {
	Value PortingOrderEndUserLocation
	Set   bool
}

// IsSet returns true if OptPortingOrderEndUserLocation was set.
func (o OptPortingOrderEndUserLocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrderEndUserLocation) Reset() {
	var v PortingOrderEndUserLocation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrderEndUserLocation) SetTo(v PortingOrderEndUserLocation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrderEndUserLocation) Get() (v PortingOrderEndUserLocation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrderEndUserLocation) Or(d PortingOrderEndUserLocation) PortingOrderEndUserLocation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrderMisc returns new OptPortingOrderMisc with value set to v.
func NewOptPortingOrderMisc(v PortingOrderMisc) OptPortingOrderMisc {
	return OptPortingOrderMisc{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrderMisc is optional PortingOrderMisc.
type OptPortingOrderMisc struct {
	Value PortingOrderMisc
	Set   bool
}

// IsSet returns true if OptPortingOrderMisc was set.
func (o OptPortingOrderMisc) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrderMisc) Reset() {
	var v PortingOrderMisc
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrderMisc) SetTo(v PortingOrderMisc) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrderMisc) Get() (v PortingOrderMisc, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrderMisc) Or(d PortingOrderMisc) PortingOrderMisc {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrderMiscRemainingNumbersAction returns new OptPortingOrderMiscRemainingNumbersAction with value set to v.
func NewOptPortingOrderMiscRemainingNumbersAction(v PortingOrderMiscRemainingNumbersAction) OptPortingOrderMiscRemainingNumbersAction {
	return OptPortingOrderMiscRemainingNumbersAction{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrderMiscRemainingNumbersAction is optional PortingOrderMiscRemainingNumbersAction.
type OptPortingOrderMiscRemainingNumbersAction struct {
	Value PortingOrderMiscRemainingNumbersAction
	Set   bool
}

// IsSet returns true if OptPortingOrderMiscRemainingNumbersAction was set.
func (o OptPortingOrderMiscRemainingNumbersAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrderMiscRemainingNumbersAction) Reset() {
	var v PortingOrderMiscRemainingNumbersAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrderMiscRemainingNumbersAction) SetTo(v PortingOrderMiscRemainingNumbersAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrderMiscRemainingNumbersAction) Get() (v PortingOrderMiscRemainingNumbersAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrderMiscRemainingNumbersAction) Or(d PortingOrderMiscRemainingNumbersAction) PortingOrderMiscRemainingNumbersAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrderPhoneNumberConfiguration returns new OptPortingOrderPhoneNumberConfiguration with value set to v.
func NewOptPortingOrderPhoneNumberConfiguration(v PortingOrderPhoneNumberConfiguration) OptPortingOrderPhoneNumberConfiguration {
	return OptPortingOrderPhoneNumberConfiguration{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrderPhoneNumberConfiguration is optional PortingOrderPhoneNumberConfiguration.
type OptPortingOrderPhoneNumberConfiguration struct {
	Value PortingOrderPhoneNumberConfiguration
	Set   bool
}

// IsSet returns true if OptPortingOrderPhoneNumberConfiguration was set.
func (o OptPortingOrderPhoneNumberConfiguration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrderPhoneNumberConfiguration) Reset() {
	var v PortingOrderPhoneNumberConfiguration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrderPhoneNumberConfiguration) SetTo(v PortingOrderPhoneNumberConfiguration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrderPhoneNumberConfiguration) Get() (v PortingOrderPhoneNumberConfiguration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrderPhoneNumberConfiguration) Or(d PortingOrderPhoneNumberConfiguration) PortingOrderPhoneNumberConfiguration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrderPhoneNumberType returns new OptPortingOrderPhoneNumberType with value set to v.
func NewOptPortingOrderPhoneNumberType(v PortingOrderPhoneNumberType) OptPortingOrderPhoneNumberType {
	return OptPortingOrderPhoneNumberType{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrderPhoneNumberType is optional PortingOrderPhoneNumberType.
type OptPortingOrderPhoneNumberType struct {
	Value PortingOrderPhoneNumberType
	Set   bool
}

// IsSet returns true if OptPortingOrderPhoneNumberType was set.
func (o OptPortingOrderPhoneNumberType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrderPhoneNumberType) Reset() {
	var v PortingOrderPhoneNumberType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrderPhoneNumberType) SetTo(v PortingOrderPhoneNumberType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrderPhoneNumberType) Get() (v PortingOrderPhoneNumberType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrderPhoneNumberType) Or(d PortingOrderPhoneNumberType) PortingOrderPhoneNumberType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrderRequirementDetailFieldType returns new OptPortingOrderRequirementDetailFieldType with value set to v.
func NewOptPortingOrderRequirementDetailFieldType(v PortingOrderRequirementDetailFieldType) OptPortingOrderRequirementDetailFieldType {
	return OptPortingOrderRequirementDetailFieldType{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrderRequirementDetailFieldType is optional PortingOrderRequirementDetailFieldType.
type OptPortingOrderRequirementDetailFieldType struct {
	Value PortingOrderRequirementDetailFieldType
	Set   bool
}

// IsSet returns true if OptPortingOrderRequirementDetailFieldType was set.
func (o OptPortingOrderRequirementDetailFieldType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrderRequirementDetailFieldType) Reset() {
	var v PortingOrderRequirementDetailFieldType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrderRequirementDetailFieldType) SetTo(v PortingOrderRequirementDetailFieldType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrderRequirementDetailFieldType) Get() (v PortingOrderRequirementDetailFieldType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrderRequirementDetailFieldType) Or(d PortingOrderRequirementDetailFieldType) PortingOrderRequirementDetailFieldType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrderRequirementDetailRequirementType returns new OptPortingOrderRequirementDetailRequirementType with value set to v.
func NewOptPortingOrderRequirementDetailRequirementType(v PortingOrderRequirementDetailRequirementType) OptPortingOrderRequirementDetailRequirementType {
	return OptPortingOrderRequirementDetailRequirementType{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrderRequirementDetailRequirementType is optional PortingOrderRequirementDetailRequirementType.
type OptPortingOrderRequirementDetailRequirementType struct {
	Value PortingOrderRequirementDetailRequirementType
	Set   bool
}

// IsSet returns true if OptPortingOrderRequirementDetailRequirementType was set.
func (o OptPortingOrderRequirementDetailRequirementType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrderRequirementDetailRequirementType) Reset() {
	var v PortingOrderRequirementDetailRequirementType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrderRequirementDetailRequirementType) SetTo(v PortingOrderRequirementDetailRequirementType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrderRequirementDetailRequirementType) Get() (v PortingOrderRequirementDetailRequirementType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrderRequirementDetailRequirementType) Or(d PortingOrderRequirementDetailRequirementType) PortingOrderRequirementDetailRequirementType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrderRequirementDetailRequirementTypeAcceptanceCriteria returns new OptPortingOrderRequirementDetailRequirementTypeAcceptanceCriteria with value set to v.
func NewOptPortingOrderRequirementDetailRequirementTypeAcceptanceCriteria(v PortingOrderRequirementDetailRequirementTypeAcceptanceCriteria) OptPortingOrderRequirementDetailRequirementTypeAcceptanceCriteria {
	return OptPortingOrderRequirementDetailRequirementTypeAcceptanceCriteria{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrderRequirementDetailRequirementTypeAcceptanceCriteria is optional PortingOrderRequirementDetailRequirementTypeAcceptanceCriteria.
type OptPortingOrderRequirementDetailRequirementTypeAcceptanceCriteria struct {
	Value PortingOrderRequirementDetailRequirementTypeAcceptanceCriteria
	Set   bool
}

// IsSet returns true if OptPortingOrderRequirementDetailRequirementTypeAcceptanceCriteria was set.
func (o OptPortingOrderRequirementDetailRequirementTypeAcceptanceCriteria) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrderRequirementDetailRequirementTypeAcceptanceCriteria) Reset() {
	var v PortingOrderRequirementDetailRequirementTypeAcceptanceCriteria
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrderRequirementDetailRequirementTypeAcceptanceCriteria) SetTo(v PortingOrderRequirementDetailRequirementTypeAcceptanceCriteria) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrderRequirementDetailRequirementTypeAcceptanceCriteria) Get() (v PortingOrderRequirementDetailRequirementTypeAcceptanceCriteria, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrderRequirementDetailRequirementTypeAcceptanceCriteria) Or(d PortingOrderRequirementDetailRequirementTypeAcceptanceCriteria) PortingOrderRequirementDetailRequirementTypeAcceptanceCriteria {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrderRequirementFieldType returns new OptPortingOrderRequirementFieldType with value set to v.
func NewOptPortingOrderRequirementFieldType(v PortingOrderRequirementFieldType) OptPortingOrderRequirementFieldType {
	return OptPortingOrderRequirementFieldType{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrderRequirementFieldType is optional PortingOrderRequirementFieldType.
type OptPortingOrderRequirementFieldType struct {
	Value PortingOrderRequirementFieldType
	Set   bool
}

// IsSet returns true if OptPortingOrderRequirementFieldType was set.
func (o OptPortingOrderRequirementFieldType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrderRequirementFieldType) Reset() {
	var v PortingOrderRequirementFieldType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrderRequirementFieldType) SetTo(v PortingOrderRequirementFieldType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrderRequirementFieldType) Get() (v PortingOrderRequirementFieldType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrderRequirementFieldType) Or(d PortingOrderRequirementFieldType) PortingOrderRequirementFieldType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrderSharingToken returns new OptPortingOrderSharingToken with value set to v.
func NewOptPortingOrderSharingToken(v PortingOrderSharingToken) OptPortingOrderSharingToken {
	return OptPortingOrderSharingToken{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrderSharingToken is optional PortingOrderSharingToken.
type OptPortingOrderSharingToken struct {
	Value PortingOrderSharingToken
	Set   bool
}

// IsSet returns true if OptPortingOrderSharingToken was set.
func (o OptPortingOrderSharingToken) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrderSharingToken) Reset() {
	var v PortingOrderSharingToken
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrderSharingToken) SetTo(v PortingOrderSharingToken) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrderSharingToken) Get() (v PortingOrderSharingToken, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrderSharingToken) Or(d PortingOrderSharingToken) PortingOrderSharingToken {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrderStatus returns new OptPortingOrderStatus with value set to v.
func NewOptPortingOrderStatus(v PortingOrderStatus) OptPortingOrderStatus {
	return OptPortingOrderStatus{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrderStatus is optional PortingOrderStatus.
type OptPortingOrderStatus struct {
	Value PortingOrderStatus
	Set   bool
}

// IsSet returns true if OptPortingOrderStatus was set.
func (o OptPortingOrderStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrderStatus) Reset() {
	var v PortingOrderStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrderStatus) SetTo(v PortingOrderStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrderStatus) Get() (v PortingOrderStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrderStatus) Or(d PortingOrderStatus) PortingOrderStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrderStatusValue returns new OptPortingOrderStatusValue with value set to v.
func NewOptPortingOrderStatusValue(v PortingOrderStatusValue) OptPortingOrderStatusValue {
	return OptPortingOrderStatusValue{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrderStatusValue is optional PortingOrderStatusValue.
type OptPortingOrderStatusValue struct {
	Value PortingOrderStatusValue
	Set   bool
}

// IsSet returns true if OptPortingOrderStatusValue was set.
func (o OptPortingOrderStatusValue) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrderStatusValue) Reset() {
	var v PortingOrderStatusValue
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrderStatusValue) SetTo(v PortingOrderStatusValue) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrderStatusValue) Get() (v PortingOrderStatusValue, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrderStatusValue) Or(d PortingOrderStatusValue) PortingOrderStatusValue {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrderType returns new OptPortingOrderType with value set to v.
func NewOptPortingOrderType(v PortingOrderType) OptPortingOrderType {
	return OptPortingOrderType{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrderType is optional PortingOrderType.
type OptPortingOrderType struct {
	Value PortingOrderType
	Set   bool
}

// IsSet returns true if OptPortingOrderType was set.
func (o OptPortingOrderType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrderType) Reset() {
	var v PortingOrderType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrderType) SetTo(v PortingOrderType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrderType) Get() (v PortingOrderType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrderType) Or(d PortingOrderType) PortingOrderType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrderUserFeedback returns new OptPortingOrderUserFeedback with value set to v.
func NewOptPortingOrderUserFeedback(v PortingOrderUserFeedback) OptPortingOrderUserFeedback {
	return OptPortingOrderUserFeedback{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrderUserFeedback is optional PortingOrderUserFeedback.
type OptPortingOrderUserFeedback struct {
	Value PortingOrderUserFeedback
	Set   bool
}

// IsSet returns true if OptPortingOrderUserFeedback was set.
func (o OptPortingOrderUserFeedback) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrderUserFeedback) Reset() {
	var v PortingOrderUserFeedback
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrderUserFeedback) SetTo(v PortingOrderUserFeedback) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrderUserFeedback) Get() (v PortingOrderUserFeedback, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrderUserFeedback) Or(d PortingOrderUserFeedback) PortingOrderUserFeedback {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrdersActivationJob returns new OptPortingOrdersActivationJob with value set to v.
func NewOptPortingOrdersActivationJob(v PortingOrdersActivationJob) OptPortingOrdersActivationJob {
	return OptPortingOrdersActivationJob{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrdersActivationJob is optional PortingOrdersActivationJob.
type OptPortingOrdersActivationJob struct {
	Value PortingOrdersActivationJob
	Set   bool
}

// IsSet returns true if OptPortingOrdersActivationJob was set.
func (o OptPortingOrdersActivationJob) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrdersActivationJob) Reset() {
	var v PortingOrdersActivationJob
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrdersActivationJob) SetTo(v PortingOrdersActivationJob) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrdersActivationJob) Get() (v PortingOrdersActivationJob, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrdersActivationJob) Or(d PortingOrdersActivationJob) PortingOrdersActivationJob {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrdersActivationJobActivationType returns new OptPortingOrdersActivationJobActivationType with value set to v.
func NewOptPortingOrdersActivationJobActivationType(v PortingOrdersActivationJobActivationType) OptPortingOrdersActivationJobActivationType {
	return OptPortingOrdersActivationJobActivationType{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrdersActivationJobActivationType is optional PortingOrdersActivationJobActivationType.
type OptPortingOrdersActivationJobActivationType struct {
	Value PortingOrdersActivationJobActivationType
	Set   bool
}

// IsSet returns true if OptPortingOrdersActivationJobActivationType was set.
func (o OptPortingOrdersActivationJobActivationType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrdersActivationJobActivationType) Reset() {
	var v PortingOrdersActivationJobActivationType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrdersActivationJobActivationType) SetTo(v PortingOrdersActivationJobActivationType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrdersActivationJobActivationType) Get() (v PortingOrdersActivationJobActivationType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrdersActivationJobActivationType) Or(d PortingOrdersActivationJobActivationType) PortingOrdersActivationJobActivationType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrdersActivationJobStatus returns new OptPortingOrdersActivationJobStatus with value set to v.
func NewOptPortingOrdersActivationJobStatus(v PortingOrdersActivationJobStatus) OptPortingOrdersActivationJobStatus {
	return OptPortingOrdersActivationJobStatus{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrdersActivationJobStatus is optional PortingOrdersActivationJobStatus.
type OptPortingOrdersActivationJobStatus struct {
	Value PortingOrdersActivationJobStatus
	Set   bool
}

// IsSet returns true if OptPortingOrdersActivationJobStatus was set.
func (o OptPortingOrdersActivationJobStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrdersActivationJobStatus) Reset() {
	var v PortingOrdersActivationJobStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrdersActivationJobStatus) SetTo(v PortingOrdersActivationJobStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrdersActivationJobStatus) Get() (v PortingOrdersActivationJobStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrdersActivationJobStatus) Or(d PortingOrdersActivationJobStatus) PortingOrdersActivationJobStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrdersComment returns new OptPortingOrdersComment with value set to v.
func NewOptPortingOrdersComment(v PortingOrdersComment) OptPortingOrdersComment {
	return OptPortingOrdersComment{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrdersComment is optional PortingOrdersComment.
type OptPortingOrdersComment struct {
	Value PortingOrdersComment
	Set   bool
}

// IsSet returns true if OptPortingOrdersComment was set.
func (o OptPortingOrdersComment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrdersComment) Reset() {
	var v PortingOrdersComment
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrdersComment) SetTo(v PortingOrdersComment) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrdersComment) Get() (v PortingOrdersComment, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrdersComment) Or(d PortingOrdersComment) PortingOrdersComment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrdersCommentUserType returns new OptPortingOrdersCommentUserType with value set to v.
func NewOptPortingOrdersCommentUserType(v PortingOrdersCommentUserType) OptPortingOrdersCommentUserType {
	return OptPortingOrdersCommentUserType{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrdersCommentUserType is optional PortingOrdersCommentUserType.
type OptPortingOrdersCommentUserType struct {
	Value PortingOrdersCommentUserType
	Set   bool
}

// IsSet returns true if OptPortingOrdersCommentUserType was set.
func (o OptPortingOrdersCommentUserType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrdersCommentUserType) Reset() {
	var v PortingOrdersCommentUserType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrdersCommentUserType) SetTo(v PortingOrdersCommentUserType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrdersCommentUserType) Get() (v PortingOrdersCommentUserType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrdersCommentUserType) Or(d PortingOrdersCommentUserType) PortingOrdersCommentUserType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingOrdersExceptionTypeCode returns new OptPortingOrdersExceptionTypeCode with value set to v.
func NewOptPortingOrdersExceptionTypeCode(v PortingOrdersExceptionTypeCode) OptPortingOrdersExceptionTypeCode {
	return OptPortingOrdersExceptionTypeCode{
		Value: v,
		Set:   true,
	}
}

// OptPortingOrdersExceptionTypeCode is optional PortingOrdersExceptionTypeCode.
type OptPortingOrdersExceptionTypeCode struct {
	Value PortingOrdersExceptionTypeCode
	Set   bool
}

// IsSet returns true if OptPortingOrdersExceptionTypeCode was set.
func (o OptPortingOrdersExceptionTypeCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingOrdersExceptionTypeCode) Reset() {
	var v PortingOrdersExceptionTypeCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingOrdersExceptionTypeCode) SetTo(v PortingOrdersExceptionTypeCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingOrdersExceptionTypeCode) Get() (v PortingOrdersExceptionTypeCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingOrdersExceptionTypeCode) Or(d PortingOrdersExceptionTypeCode) PortingOrdersExceptionTypeCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingPhoneNumberPhoneNumberType returns new OptPortingPhoneNumberPhoneNumberType with value set to v.
func NewOptPortingPhoneNumberPhoneNumberType(v PortingPhoneNumberPhoneNumberType) OptPortingPhoneNumberPhoneNumberType {
	return OptPortingPhoneNumberPhoneNumberType{
		Value: v,
		Set:   true,
	}
}

// OptPortingPhoneNumberPhoneNumberType is optional PortingPhoneNumberPhoneNumberType.
type OptPortingPhoneNumberPhoneNumberType struct {
	Value PortingPhoneNumberPhoneNumberType
	Set   bool
}

// IsSet returns true if OptPortingPhoneNumberPhoneNumberType was set.
func (o OptPortingPhoneNumberPhoneNumberType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingPhoneNumberPhoneNumberType) Reset() {
	var v PortingPhoneNumberPhoneNumberType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingPhoneNumberPhoneNumberType) SetTo(v PortingPhoneNumberPhoneNumberType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingPhoneNumberPhoneNumberType) Get() (v PortingPhoneNumberPhoneNumberType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingPhoneNumberPhoneNumberType) Or(d PortingPhoneNumberPhoneNumberType) PortingPhoneNumberPhoneNumberType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingPhoneNumberPortingOrderStatus returns new OptPortingPhoneNumberPortingOrderStatus with value set to v.
func NewOptPortingPhoneNumberPortingOrderStatus(v PortingPhoneNumberPortingOrderStatus) OptPortingPhoneNumberPortingOrderStatus {
	return OptPortingPhoneNumberPortingOrderStatus{
		Value: v,
		Set:   true,
	}
}

// OptPortingPhoneNumberPortingOrderStatus is optional PortingPhoneNumberPortingOrderStatus.
type OptPortingPhoneNumberPortingOrderStatus struct {
	Value PortingPhoneNumberPortingOrderStatus
	Set   bool
}

// IsSet returns true if OptPortingPhoneNumberPortingOrderStatus was set.
func (o OptPortingPhoneNumberPortingOrderStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingPhoneNumberPortingOrderStatus) Reset() {
	var v PortingPhoneNumberPortingOrderStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingPhoneNumberPortingOrderStatus) SetTo(v PortingPhoneNumberPortingOrderStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingPhoneNumberPortingOrderStatus) Get() (v PortingPhoneNumberPortingOrderStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingPhoneNumberPortingOrderStatus) Or(d PortingPhoneNumberPortingOrderStatus) PortingPhoneNumberPortingOrderStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingPhoneNumberRequirementsStatus returns new OptPortingPhoneNumberRequirementsStatus with value set to v.
func NewOptPortingPhoneNumberRequirementsStatus(v PortingPhoneNumberRequirementsStatus) OptPortingPhoneNumberRequirementsStatus {
	return OptPortingPhoneNumberRequirementsStatus{
		Value: v,
		Set:   true,
	}
}

// OptPortingPhoneNumberRequirementsStatus is optional PortingPhoneNumberRequirementsStatus.
type OptPortingPhoneNumberRequirementsStatus struct {
	Value PortingPhoneNumberRequirementsStatus
	Set   bool
}

// IsSet returns true if OptPortingPhoneNumberRequirementsStatus was set.
func (o OptPortingPhoneNumberRequirementsStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingPhoneNumberRequirementsStatus) Reset() {
	var v PortingPhoneNumberRequirementsStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingPhoneNumberRequirementsStatus) SetTo(v PortingPhoneNumberRequirementsStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingPhoneNumberRequirementsStatus) Get() (v PortingPhoneNumberRequirementsStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingPhoneNumberRequirementsStatus) Or(d PortingPhoneNumberRequirementsStatus) PortingPhoneNumberRequirementsStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingReport returns new OptPortingReport with value set to v.
func NewOptPortingReport(v PortingReport) OptPortingReport {
	return OptPortingReport{
		Value: v,
		Set:   true,
	}
}

// OptPortingReport is optional PortingReport.
type OptPortingReport struct {
	Value PortingReport
	Set   bool
}

// IsSet returns true if OptPortingReport was set.
func (o OptPortingReport) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingReport) Reset() {
	var v PortingReport
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingReport) SetTo(v PortingReport) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingReport) Get() (v PortingReport, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingReport) Or(d PortingReport) PortingReport {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingReportParams returns new OptPortingReportParams with value set to v.
func NewOptPortingReportParams(v PortingReportParams) OptPortingReportParams {
	return OptPortingReportParams{
		Value: v,
		Set:   true,
	}
}

// OptPortingReportParams is optional PortingReportParams.
type OptPortingReportParams struct {
	Value PortingReportParams
	Set   bool
}

// IsSet returns true if OptPortingReportParams was set.
func (o OptPortingReportParams) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingReportParams) Reset() {
	var v PortingReportParams
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingReportParams) SetTo(v PortingReportParams) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingReportParams) Get() (v PortingReportParams, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingReportParams) Or(d PortingReportParams) PortingReportParams {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingReportReportType returns new OptPortingReportReportType with value set to v.
func NewOptPortingReportReportType(v PortingReportReportType) OptPortingReportReportType {
	return OptPortingReportReportType{
		Value: v,
		Set:   true,
	}
}

// OptPortingReportReportType is optional PortingReportReportType.
type OptPortingReportReportType struct {
	Value PortingReportReportType
	Set   bool
}

// IsSet returns true if OptPortingReportReportType was set.
func (o OptPortingReportReportType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingReportReportType) Reset() {
	var v PortingReportReportType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingReportReportType) SetTo(v PortingReportReportType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingReportReportType) Get() (v PortingReportReportType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingReportReportType) Or(d PortingReportReportType) PortingReportReportType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortingReportStatus returns new OptPortingReportStatus with value set to v.
func NewOptPortingReportStatus(v PortingReportStatus) OptPortingReportStatus {
	return OptPortingReportStatus{
		Value: v,
		Set:   true,
	}
}

// OptPortingReportStatus is optional PortingReportStatus.
type OptPortingReportStatus struct {
	Value PortingReportStatus
	Set   bool
}

// IsSet returns true if OptPortingReportStatus was set.
func (o OptPortingReportStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortingReportStatus) Reset() {
	var v PortingReportStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortingReportStatus) SetTo(v PortingReportStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortingReportStatus) Get() (v PortingReportStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortingReportStatus) Or(d PortingReportStatus) PortingReportStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortoutComment returns new OptPortoutComment with value set to v.
func NewOptPortoutComment(v PortoutComment) OptPortoutComment {
	return OptPortoutComment{
		Value: v,
		Set:   true,
	}
}

// OptPortoutComment is optional PortoutComment.
type OptPortoutComment struct {
	Value PortoutComment
	Set   bool
}

// IsSet returns true if OptPortoutComment was set.
func (o OptPortoutComment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortoutComment) Reset() {
	var v PortoutComment
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortoutComment) SetTo(v PortoutComment) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortoutComment) Get() (v PortoutComment, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortoutComment) Or(d PortoutComment) PortoutComment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortoutDetails returns new OptPortoutDetails with value set to v.
func NewOptPortoutDetails(v PortoutDetails) OptPortoutDetails {
	return OptPortoutDetails{
		Value: v,
		Set:   true,
	}
}

// OptPortoutDetails is optional PortoutDetails.
type OptPortoutDetails struct {
	Value PortoutDetails
	Set   bool
}

// IsSet returns true if OptPortoutDetails was set.
func (o OptPortoutDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortoutDetails) Reset() {
	var v PortoutDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortoutDetails) SetTo(v PortoutDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortoutDetails) Get() (v PortoutDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortoutDetails) Or(d PortoutDetails) PortoutDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPortoutDetailsStatus returns new OptPortoutDetailsStatus with value set to v.
func NewOptPortoutDetailsStatus(v PortoutDetailsStatus) OptPortoutDetailsStatus {
	return OptPortoutDetailsStatus{
		Value: v,
		Set:   true,
	}
}

// OptPortoutDetailsStatus is optional PortoutDetailsStatus.
type OptPortoutDetailsStatus struct {
	Value PortoutDetailsStatus
	Set   bool
}

// IsSet returns true if OptPortoutDetailsStatus was set.
func (o OptPortoutDetailsStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPortoutDetailsStatus) Reset() {
	var v PortoutDetailsStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPortoutDetailsStatus) SetTo(v PortoutDetailsStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPortoutDetailsStatus) Get() (v PortoutDetailsStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPortoutDetailsStatus) Or(d PortoutDetailsStatus) PortoutDetailsStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPrivateWirelessGateway returns new OptPrivateWirelessGateway with value set to v.
func NewOptPrivateWirelessGateway(v PrivateWirelessGateway) OptPrivateWirelessGateway {
	return OptPrivateWirelessGateway{
		Value: v,
		Set:   true,
	}
}

// OptPrivateWirelessGateway is optional PrivateWirelessGateway.
type OptPrivateWirelessGateway struct {
	Value PrivateWirelessGateway
	Set   bool
}

// IsSet returns true if OptPrivateWirelessGateway was set.
func (o OptPrivateWirelessGateway) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPrivateWirelessGateway) Reset() {
	var v PrivateWirelessGateway
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPrivateWirelessGateway) SetTo(v PrivateWirelessGateway) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPrivateWirelessGateway) Get() (v PrivateWirelessGateway, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPrivateWirelessGateway) Or(d PrivateWirelessGateway) PrivateWirelessGateway {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPrivateWirelessGatewayStatus returns new OptPrivateWirelessGatewayStatus with value set to v.
func NewOptPrivateWirelessGatewayStatus(v PrivateWirelessGatewayStatus) OptPrivateWirelessGatewayStatus {
	return OptPrivateWirelessGatewayStatus{
		Value: v,
		Set:   true,
	}
}

// OptPrivateWirelessGatewayStatus is optional PrivateWirelessGatewayStatus.
type OptPrivateWirelessGatewayStatus struct {
	Value PrivateWirelessGatewayStatus
	Set   bool
}

// IsSet returns true if OptPrivateWirelessGatewayStatus was set.
func (o OptPrivateWirelessGatewayStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPrivateWirelessGatewayStatus) Reset() {
	var v PrivateWirelessGatewayStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPrivateWirelessGatewayStatus) SetTo(v PrivateWirelessGatewayStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPrivateWirelessGatewayStatus) Get() (v PrivateWirelessGatewayStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPrivateWirelessGatewayStatus) Or(d PrivateWirelessGatewayStatus) PrivateWirelessGatewayStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPrivateWirelessGatewayStatusValue returns new OptPrivateWirelessGatewayStatusValue with value set to v.
func NewOptPrivateWirelessGatewayStatusValue(v PrivateWirelessGatewayStatusValue) OptPrivateWirelessGatewayStatusValue {
	return OptPrivateWirelessGatewayStatusValue{
		Value: v,
		Set:   true,
	}
}

// OptPrivateWirelessGatewayStatusValue is optional PrivateWirelessGatewayStatusValue.
type OptPrivateWirelessGatewayStatusValue struct {
	Value PrivateWirelessGatewayStatusValue
	Set   bool
}

// IsSet returns true if OptPrivateWirelessGatewayStatusValue was set.
func (o OptPrivateWirelessGatewayStatusValue) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPrivateWirelessGatewayStatusValue) Reset() {
	var v PrivateWirelessGatewayStatusValue
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPrivateWirelessGatewayStatusValue) SetTo(v PrivateWirelessGatewayStatusValue) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPrivateWirelessGatewayStatusValue) Get() (v PrivateWirelessGatewayStatusValue, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPrivateWirelessGatewayStatusValue) Or(d PrivateWirelessGatewayStatusValue) PrivateWirelessGatewayStatusValue {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptQueueCall returns new OptQueueCall with value set to v.
func NewOptQueueCall(v QueueCall) OptQueueCall {
	return OptQueueCall{
		Value: v,
		Set:   true,
	}
}

// OptQueueCall is optional QueueCall.
type OptQueueCall struct {
	Value QueueCall
	Set   bool
}

// IsSet returns true if OptQueueCall was set.
func (o OptQueueCall) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptQueueCall) Reset() {
	var v QueueCall
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptQueueCall) SetTo(v QueueCall) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptQueueCall) Get() (v QueueCall, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptQueueCall) Or(d QueueCall) QueueCall {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReadCommentResponseData returns new OptReadCommentResponseData with value set to v.
func NewOptReadCommentResponseData(v ReadCommentResponseData) OptReadCommentResponseData {
	return OptReadCommentResponseData{
		Value: v,
		Set:   true,
	}
}

// OptReadCommentResponseData is optional ReadCommentResponseData.
type OptReadCommentResponseData struct {
	Value ReadCommentResponseData
	Set   bool
}

// IsSet returns true if OptReadCommentResponseData was set.
func (o OptReadCommentResponseData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReadCommentResponseData) Reset() {
	var v ReadCommentResponseData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReadCommentResponseData) SetTo(v ReadCommentResponseData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReadCommentResponseData) Get() (v ReadCommentResponseData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReadCommentResponseData) Or(d ReadCommentResponseData) ReadCommentResponseData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReadCommentResponseDataCommentRecordType returns new OptReadCommentResponseDataCommentRecordType with value set to v.
func NewOptReadCommentResponseDataCommentRecordType(v ReadCommentResponseDataCommentRecordType) OptReadCommentResponseDataCommentRecordType {
	return OptReadCommentResponseDataCommentRecordType{
		Value: v,
		Set:   true,
	}
}

// OptReadCommentResponseDataCommentRecordType is optional ReadCommentResponseDataCommentRecordType.
type OptReadCommentResponseDataCommentRecordType struct {
	Value ReadCommentResponseDataCommentRecordType
	Set   bool
}

// IsSet returns true if OptReadCommentResponseDataCommentRecordType was set.
func (o OptReadCommentResponseDataCommentRecordType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReadCommentResponseDataCommentRecordType) Reset() {
	var v ReadCommentResponseDataCommentRecordType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReadCommentResponseDataCommentRecordType) SetTo(v ReadCommentResponseDataCommentRecordType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReadCommentResponseDataCommentRecordType) Get() (v ReadCommentResponseDataCommentRecordType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReadCommentResponseDataCommentRecordType) Or(d ReadCommentResponseDataCommentRecordType) ReadCommentResponseDataCommentRecordType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReadCommentResponseDataCommenterType returns new OptReadCommentResponseDataCommenterType with value set to v.
func NewOptReadCommentResponseDataCommenterType(v ReadCommentResponseDataCommenterType) OptReadCommentResponseDataCommenterType {
	return OptReadCommentResponseDataCommenterType{
		Value: v,
		Set:   true,
	}
}

// OptReadCommentResponseDataCommenterType is optional ReadCommentResponseDataCommenterType.
type OptReadCommentResponseDataCommenterType struct {
	Value ReadCommentResponseDataCommenterType
	Set   bool
}

// IsSet returns true if OptReadCommentResponseDataCommenterType was set.
func (o OptReadCommentResponseDataCommenterType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReadCommentResponseDataCommenterType) Reset() {
	var v ReadCommentResponseDataCommenterType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReadCommentResponseDataCommenterType) SetTo(v ReadCommentResponseDataCommenterType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReadCommentResponseDataCommenterType) Get() (v ReadCommentResponseDataCommenterType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReadCommentResponseDataCommenterType) Or(d ReadCommentResponseDataCommenterType) ReadCommentResponseDataCommenterType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordingResponseData returns new OptRecordingResponseData with value set to v.
func NewOptRecordingResponseData(v RecordingResponseData) OptRecordingResponseData {
	return OptRecordingResponseData{
		Value: v,
		Set:   true,
	}
}

// OptRecordingResponseData is optional RecordingResponseData.
type OptRecordingResponseData struct {
	Value RecordingResponseData
	Set   bool
}

// IsSet returns true if OptRecordingResponseData was set.
func (o OptRecordingResponseData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordingResponseData) Reset() {
	var v RecordingResponseData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordingResponseData) SetTo(v RecordingResponseData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordingResponseData) Get() (v RecordingResponseData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordingResponseData) Or(d RecordingResponseData) RecordingResponseData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordingResponseDataChannels returns new OptRecordingResponseDataChannels with value set to v.
func NewOptRecordingResponseDataChannels(v RecordingResponseDataChannels) OptRecordingResponseDataChannels {
	return OptRecordingResponseDataChannels{
		Value: v,
		Set:   true,
	}
}

// OptRecordingResponseDataChannels is optional RecordingResponseDataChannels.
type OptRecordingResponseDataChannels struct {
	Value RecordingResponseDataChannels
	Set   bool
}

// IsSet returns true if OptRecordingResponseDataChannels was set.
func (o OptRecordingResponseDataChannels) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordingResponseDataChannels) Reset() {
	var v RecordingResponseDataChannels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordingResponseDataChannels) SetTo(v RecordingResponseDataChannels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordingResponseDataChannels) Get() (v RecordingResponseDataChannels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordingResponseDataChannels) Or(d RecordingResponseDataChannels) RecordingResponseDataChannels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordingResponseDataDownloadUrls returns new OptRecordingResponseDataDownloadUrls with value set to v.
func NewOptRecordingResponseDataDownloadUrls(v RecordingResponseDataDownloadUrls) OptRecordingResponseDataDownloadUrls {
	return OptRecordingResponseDataDownloadUrls{
		Value: v,
		Set:   true,
	}
}

// OptRecordingResponseDataDownloadUrls is optional RecordingResponseDataDownloadUrls.
type OptRecordingResponseDataDownloadUrls struct {
	Value RecordingResponseDataDownloadUrls
	Set   bool
}

// IsSet returns true if OptRecordingResponseDataDownloadUrls was set.
func (o OptRecordingResponseDataDownloadUrls) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordingResponseDataDownloadUrls) Reset() {
	var v RecordingResponseDataDownloadUrls
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordingResponseDataDownloadUrls) SetTo(v RecordingResponseDataDownloadUrls) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordingResponseDataDownloadUrls) Get() (v RecordingResponseDataDownloadUrls, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordingResponseDataDownloadUrls) Or(d RecordingResponseDataDownloadUrls) RecordingResponseDataDownloadUrls {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordingResponseDataRecordType returns new OptRecordingResponseDataRecordType with value set to v.
func NewOptRecordingResponseDataRecordType(v RecordingResponseDataRecordType) OptRecordingResponseDataRecordType {
	return OptRecordingResponseDataRecordType{
		Value: v,
		Set:   true,
	}
}

// OptRecordingResponseDataRecordType is optional RecordingResponseDataRecordType.
type OptRecordingResponseDataRecordType struct {
	Value RecordingResponseDataRecordType
	Set   bool
}

// IsSet returns true if OptRecordingResponseDataRecordType was set.
func (o OptRecordingResponseDataRecordType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordingResponseDataRecordType) Reset() {
	var v RecordingResponseDataRecordType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordingResponseDataRecordType) SetTo(v RecordingResponseDataRecordType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordingResponseDataRecordType) Get() (v RecordingResponseDataRecordType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordingResponseDataRecordType) Or(d RecordingResponseDataRecordType) RecordingResponseDataRecordType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordingResponseDataSource returns new OptRecordingResponseDataSource with value set to v.
func NewOptRecordingResponseDataSource(v RecordingResponseDataSource) OptRecordingResponseDataSource {
	return OptRecordingResponseDataSource{
		Value: v,
		Set:   true,
	}
}

// OptRecordingResponseDataSource is optional RecordingResponseDataSource.
type OptRecordingResponseDataSource struct {
	Value RecordingResponseDataSource
	Set   bool
}

// IsSet returns true if OptRecordingResponseDataSource was set.
func (o OptRecordingResponseDataSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordingResponseDataSource) Reset() {
	var v RecordingResponseDataSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordingResponseDataSource) SetTo(v RecordingResponseDataSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordingResponseDataSource) Get() (v RecordingResponseDataSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordingResponseDataSource) Or(d RecordingResponseDataSource) RecordingResponseDataSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordingResponseDataStatus returns new OptRecordingResponseDataStatus with value set to v.
func NewOptRecordingResponseDataStatus(v RecordingResponseDataStatus) OptRecordingResponseDataStatus {
	return OptRecordingResponseDataStatus{
		Value: v,
		Set:   true,
	}
}

// OptRecordingResponseDataStatus is optional RecordingResponseDataStatus.
type OptRecordingResponseDataStatus struct {
	Value RecordingResponseDataStatus
	Set   bool
}

// IsSet returns true if OptRecordingResponseDataStatus was set.
func (o OptRecordingResponseDataStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordingResponseDataStatus) Reset() {
	var v RecordingResponseDataStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordingResponseDataStatus) SetTo(v RecordingResponseDataStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordingResponseDataStatus) Get() (v RecordingResponseDataStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordingResponseDataStatus) Or(d RecordingResponseDataStatus) RecordingResponseDataStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordingSource returns new OptRecordingSource with value set to v.
func NewOptRecordingSource(v RecordingSource) OptRecordingSource {
	return OptRecordingSource{
		Value: v,
		Set:   true,
	}
}

// OptRecordingSource is optional RecordingSource.
type OptRecordingSource struct {
	Value RecordingSource
	Set   bool
}

// IsSet returns true if OptRecordingSource was set.
func (o OptRecordingSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordingSource) Reset() {
	var v RecordingSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordingSource) SetTo(v RecordingSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordingSource) Get() (v RecordingSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordingSource) Or(d RecordingSource) RecordingSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordingStatusCallbackEvent returns new OptRecordingStatusCallbackEvent with value set to v.
func NewOptRecordingStatusCallbackEvent(v RecordingStatusCallbackEvent) OptRecordingStatusCallbackEvent {
	return OptRecordingStatusCallbackEvent{
		Value: v,
		Set:   true,
	}
}

// OptRecordingStatusCallbackEvent is optional RecordingStatusCallbackEvent.
type OptRecordingStatusCallbackEvent struct {
	Value RecordingStatusCallbackEvent
	Set   bool
}

// IsSet returns true if OptRecordingStatusCallbackEvent was set.
func (o OptRecordingStatusCallbackEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordingStatusCallbackEvent) Reset() {
	var v RecordingStatusCallbackEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordingStatusCallbackEvent) SetTo(v RecordingStatusCallbackEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordingStatusCallbackEvent) Get() (v RecordingStatusCallbackEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordingStatusCallbackEvent) Or(d RecordingStatusCallbackEvent) RecordingStatusCallbackEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordingTrack returns new OptRecordingTrack with value set to v.
func NewOptRecordingTrack(v RecordingTrack) OptRecordingTrack {
	return OptRecordingTrack{
		Value: v,
		Set:   true,
	}
}

// OptRecordingTrack is optional RecordingTrack.
type OptRecordingTrack struct {
	Value RecordingTrack
	Set   bool
}

// IsSet returns true if OptRecordingTrack was set.
func (o OptRecordingTrack) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordingTrack) Reset() {
	var v RecordingTrack
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordingTrack) SetTo(v RecordingTrack) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordingTrack) Get() (v RecordingTrack, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordingTrack) Or(d RecordingTrack) RecordingTrack {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordingTranscription returns new OptRecordingTranscription with value set to v.
func NewOptRecordingTranscription(v RecordingTranscription) OptRecordingTranscription {
	return OptRecordingTranscription{
		Value: v,
		Set:   true,
	}
}

// OptRecordingTranscription is optional RecordingTranscription.
type OptRecordingTranscription struct {
	Value RecordingTranscription
	Set   bool
}

// IsSet returns true if OptRecordingTranscription was set.
func (o OptRecordingTranscription) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordingTranscription) Reset() {
	var v RecordingTranscription
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordingTranscription) SetTo(v RecordingTranscription) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordingTranscription) Get() (v RecordingTranscription, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordingTranscription) Or(d RecordingTranscription) RecordingTranscription {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordingTranscriptionRecordType returns new OptRecordingTranscriptionRecordType with value set to v.
func NewOptRecordingTranscriptionRecordType(v RecordingTranscriptionRecordType) OptRecordingTranscriptionRecordType {
	return OptRecordingTranscriptionRecordType{
		Value: v,
		Set:   true,
	}
}

// OptRecordingTranscriptionRecordType is optional RecordingTranscriptionRecordType.
type OptRecordingTranscriptionRecordType struct {
	Value RecordingTranscriptionRecordType
	Set   bool
}

// IsSet returns true if OptRecordingTranscriptionRecordType was set.
func (o OptRecordingTranscriptionRecordType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordingTranscriptionRecordType) Reset() {
	var v RecordingTranscriptionRecordType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordingTranscriptionRecordType) SetTo(v RecordingTranscriptionRecordType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordingTranscriptionRecordType) Get() (v RecordingTranscriptionRecordType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordingTranscriptionRecordType) Or(d RecordingTranscriptionRecordType) RecordingTranscriptionRecordType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordingTranscriptionStatus returns new OptRecordingTranscriptionStatus with value set to v.
func NewOptRecordingTranscriptionStatus(v RecordingTranscriptionStatus) OptRecordingTranscriptionStatus {
	return OptRecordingTranscriptionStatus{
		Value: v,
		Set:   true,
	}
}

// OptRecordingTranscriptionStatus is optional RecordingTranscriptionStatus.
type OptRecordingTranscriptionStatus struct {
	Value RecordingTranscriptionStatus
	Set   bool
}

// IsSet returns true if OptRecordingTranscriptionStatus was set.
func (o OptRecordingTranscriptionStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordingTranscriptionStatus) Reset() {
	var v RecordingTranscriptionStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordingTranscriptionStatus) SetTo(v RecordingTranscriptionStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordingTranscriptionStatus) Get() (v RecordingTranscriptionStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordingTranscriptionStatus) Or(d RecordingTranscriptionStatus) RecordingTranscriptionStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRegion returns new OptRegion with value set to v.
func NewOptRegion(v Region) OptRegion {
	return OptRegion{
		Value: v,
		Set:   true,
	}
}

// OptRegion is optional Region.
type OptRegion struct {
	Value Region
	Set   bool
}

// IsSet returns true if OptRegion was set.
func (o OptRegion) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRegion) Reset() {
	var v Region
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRegion) SetTo(v Region) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRegion) Get() (v Region, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRegion) Or(d Region) Region {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRegionInformationRegionType returns new OptRegionInformationRegionType with value set to v.
func NewOptRegionInformationRegionType(v RegionInformationRegionType) OptRegionInformationRegionType {
	return OptRegionInformationRegionType{
		Value: v,
		Set:   true,
	}
}

// OptRegionInformationRegionType is optional RegionInformationRegionType.
type OptRegionInformationRegionType struct {
	Value RegionInformationRegionType
	Set   bool
}

// IsSet returns true if OptRegionInformationRegionType was set.
func (o OptRegionInformationRegionType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRegionInformationRegionType) Reset() {
	var v RegionInformationRegionType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRegionInformationRegionType) SetTo(v RegionInformationRegionType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRegionInformationRegionType) Get() (v RegionInformationRegionType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRegionInformationRegionType) Or(d RegionInformationRegionType) RegionInformationRegionType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRegisterCallResponseData returns new OptRegisterCallResponseData with value set to v.
func NewOptRegisterCallResponseData(v RegisterCallResponseData) OptRegisterCallResponseData {
	return OptRegisterCallResponseData{
		Value: v,
		Set:   true,
	}
}

// OptRegisterCallResponseData is optional RegisterCallResponseData.
type OptRegisterCallResponseData struct {
	Value RegisterCallResponseData
	Set   bool
}

// IsSet returns true if OptRegisterCallResponseData was set.
func (o OptRegisterCallResponseData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRegisterCallResponseData) Reset() {
	var v RegisterCallResponseData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRegisterCallResponseData) SetTo(v RegisterCallResponseData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRegisterCallResponseData) Get() (v RegisterCallResponseData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRegisterCallResponseData) Or(d RegisterCallResponseData) RegisterCallResponseData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria returns new OptRegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria with value set to v.
func NewOptRegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria(v RegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria) OptRegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria {
	return OptRegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria{
		Value: v,
		Set:   true,
	}
}

// OptRegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria is optional RegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria.
type OptRegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria struct {
	Value RegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria
	Set   bool
}

// IsSet returns true if OptRegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria was set.
func (o OptRegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptRegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria) Reset() {
	var v RegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria) SetTo(v RegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria) Get() (v RegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria) Or(d RegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria) RegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReservedPhoneNumberStatus returns new OptReservedPhoneNumberStatus with value set to v.
func NewOptReservedPhoneNumberStatus(v ReservedPhoneNumberStatus) OptReservedPhoneNumberStatus {
	return OptReservedPhoneNumberStatus{
		Value: v,
		Set:   true,
	}
}

// OptReservedPhoneNumberStatus is optional ReservedPhoneNumberStatus.
type OptReservedPhoneNumberStatus struct {
	Value ReservedPhoneNumberStatus
	Set   bool
}

// IsSet returns true if OptReservedPhoneNumberStatus was set.
func (o OptReservedPhoneNumberStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReservedPhoneNumberStatus) Reset() {
	var v ReservedPhoneNumberStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReservedPhoneNumberStatus) SetTo(v ReservedPhoneNumberStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReservedPhoneNumberStatus) Get() (v ReservedPhoneNumberStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReservedPhoneNumberStatus) Or(d ReservedPhoneNumberStatus) ReservedPhoneNumberStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRoomRecording returns new OptRoomRecording with value set to v.
func NewOptRoomRecording(v RoomRecording) OptRoomRecording {
	return OptRoomRecording{
		Value: v,
		Set:   true,
	}
}

// OptRoomRecording is optional RoomRecording.
type OptRoomRecording struct {
	Value RoomRecording
	Set   bool
}

// IsSet returns true if OptRoomRecording was set.
func (o OptRoomRecording) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRoomRecording) Reset() {
	var v RoomRecording
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRoomRecording) SetTo(v RoomRecording) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRoomRecording) Get() (v RoomRecording, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRoomRecording) Or(d RoomRecording) RoomRecording {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRoomRecordingStatus returns new OptRoomRecordingStatus with value set to v.
func NewOptRoomRecordingStatus(v RoomRecordingStatus) OptRoomRecordingStatus {
	return OptRoomRecordingStatus{
		Value: v,
		Set:   true,
	}
}

// OptRoomRecordingStatus is optional RoomRecordingStatus.
type OptRoomRecordingStatus struct {
	Value RoomRecordingStatus
	Set   bool
}

// IsSet returns true if OptRoomRecordingStatus was set.
func (o OptRoomRecordingStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRoomRecordingStatus) Reset() {
	var v RoomRecordingStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRoomRecordingStatus) SetTo(v RoomRecordingStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRoomRecordingStatus) Get() (v RoomRecordingStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRoomRecordingStatus) Or(d RoomRecordingStatus) RoomRecordingStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRoomRecordingType returns new OptRoomRecordingType with value set to v.
func NewOptRoomRecordingType(v RoomRecordingType) OptRoomRecordingType {
	return OptRoomRecordingType{
		Value: v,
		Set:   true,
	}
}

// OptRoomRecordingType is optional RoomRecordingType.
type OptRoomRecordingType struct {
	Value RoomRecordingType
	Set   bool
}

// IsSet returns true if OptRoomRecordingType was set.
func (o OptRoomRecordingType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRoomRecordingType) Reset() {
	var v RoomRecordingType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRoomRecordingType) SetTo(v RoomRecordingType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRoomRecordingType) Get() (v RoomRecordingType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRoomRecordingType) Or(d RoomRecordingType) RoomRecordingType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSendPortingVerificationCodesReq returns new OptSendPortingVerificationCodesReq with value set to v.
func NewOptSendPortingVerificationCodesReq(v SendPortingVerificationCodesReq) OptSendPortingVerificationCodesReq {
	return OptSendPortingVerificationCodesReq{
		Value: v,
		Set:   true,
	}
}

// OptSendPortingVerificationCodesReq is optional SendPortingVerificationCodesReq.
type OptSendPortingVerificationCodesReq struct {
	Value SendPortingVerificationCodesReq
	Set   bool
}

// IsSet returns true if OptSendPortingVerificationCodesReq was set.
func (o OptSendPortingVerificationCodesReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSendPortingVerificationCodesReq) Reset() {
	var v SendPortingVerificationCodesReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSendPortingVerificationCodesReq) SetTo(v SendPortingVerificationCodesReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSendPortingVerificationCodesReq) Get() (v SendPortingVerificationCodesReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSendPortingVerificationCodesReq) Or(d SendPortingVerificationCodesReq) SendPortingVerificationCodesReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSendPortingVerificationCodesReqVerificationMethod returns new OptSendPortingVerificationCodesReqVerificationMethod with value set to v.
func NewOptSendPortingVerificationCodesReqVerificationMethod(v SendPortingVerificationCodesReqVerificationMethod) OptSendPortingVerificationCodesReqVerificationMethod {
	return OptSendPortingVerificationCodesReqVerificationMethod{
		Value: v,
		Set:   true,
	}
}

// OptSendPortingVerificationCodesReqVerificationMethod is optional SendPortingVerificationCodesReqVerificationMethod.
type OptSendPortingVerificationCodesReqVerificationMethod struct {
	Value SendPortingVerificationCodesReqVerificationMethod
	Set   bool
}

// IsSet returns true if OptSendPortingVerificationCodesReqVerificationMethod was set.
func (o OptSendPortingVerificationCodesReqVerificationMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSendPortingVerificationCodesReqVerificationMethod) Reset() {
	var v SendPortingVerificationCodesReqVerificationMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSendPortingVerificationCodesReqVerificationMethod) SetTo(v SendPortingVerificationCodesReqVerificationMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSendPortingVerificationCodesReqVerificationMethod) Get() (v SendPortingVerificationCodesReqVerificationMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSendPortingVerificationCodesReqVerificationMethod) Or(d SendPortingVerificationCodesReqVerificationMethod) SendPortingVerificationCodesReqVerificationMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServicePlan returns new OptServicePlan with value set to v.
func NewOptServicePlan(v ServicePlan) OptServicePlan {
	return OptServicePlan{
		Value: v,
		Set:   true,
	}
}

// OptServicePlan is optional ServicePlan.
type OptServicePlan struct {
	Value ServicePlan
	Set   bool
}

// IsSet returns true if OptServicePlan was set.
func (o OptServicePlan) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServicePlan) Reset() {
	var v ServicePlan
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServicePlan) SetTo(v ServicePlan) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServicePlan) Get() (v ServicePlan, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServicePlan) Or(d ServicePlan) ServicePlan {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSharePortingOrderReqPermissions returns new OptSharePortingOrderReqPermissions with value set to v.
func NewOptSharePortingOrderReqPermissions(v SharePortingOrderReqPermissions) OptSharePortingOrderReqPermissions {
	return OptSharePortingOrderReqPermissions{
		Value: v,
		Set:   true,
	}
}

// OptSharePortingOrderReqPermissions is optional SharePortingOrderReqPermissions.
type OptSharePortingOrderReqPermissions struct {
	Value SharePortingOrderReqPermissions
	Set   bool
}

// IsSet returns true if OptSharePortingOrderReqPermissions was set.
func (o OptSharePortingOrderReqPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSharePortingOrderReqPermissions) Reset() {
	var v SharePortingOrderReqPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSharePortingOrderReqPermissions) SetTo(v SharePortingOrderReqPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSharePortingOrderReqPermissions) Get() (v SharePortingOrderReqPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSharePortingOrderReqPermissions) Or(d SharePortingOrderReqPermissions) SharePortingOrderReqPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptShowPortingOrderMeta returns new OptShowPortingOrderMeta with value set to v.
func NewOptShowPortingOrderMeta(v ShowPortingOrderMeta) OptShowPortingOrderMeta {
	return OptShowPortingOrderMeta{
		Value: v,
		Set:   true,
	}
}

// OptShowPortingOrderMeta is optional ShowPortingOrderMeta.
type OptShowPortingOrderMeta struct {
	Value ShowPortingOrderMeta
	Set   bool
}

// IsSet returns true if OptShowPortingOrderMeta was set.
func (o OptShowPortingOrderMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptShowPortingOrderMeta) Reset() {
	var v ShowPortingOrderMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptShowPortingOrderMeta) SetTo(v ShowPortingOrderMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptShowPortingOrderMeta) Get() (v ShowPortingOrderMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptShowPortingOrderMeta) Or(d ShowPortingOrderMeta) ShowPortingOrderMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSimplifiedOTAUpdateStatus returns new OptSimplifiedOTAUpdateStatus with value set to v.
func NewOptSimplifiedOTAUpdateStatus(v SimplifiedOTAUpdateStatus) OptSimplifiedOTAUpdateStatus {
	return OptSimplifiedOTAUpdateStatus{
		Value: v,
		Set:   true,
	}
}

// OptSimplifiedOTAUpdateStatus is optional SimplifiedOTAUpdateStatus.
type OptSimplifiedOTAUpdateStatus struct {
	Value SimplifiedOTAUpdateStatus
	Set   bool
}

// IsSet returns true if OptSimplifiedOTAUpdateStatus was set.
func (o OptSimplifiedOTAUpdateStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSimplifiedOTAUpdateStatus) Reset() {
	var v SimplifiedOTAUpdateStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSimplifiedOTAUpdateStatus) SetTo(v SimplifiedOTAUpdateStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSimplifiedOTAUpdateStatus) Get() (v SimplifiedOTAUpdateStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSimplifiedOTAUpdateStatus) Or(d SimplifiedOTAUpdateStatus) SimplifiedOTAUpdateStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSimplifiedOTAUpdateType returns new OptSimplifiedOTAUpdateType with value set to v.
func NewOptSimplifiedOTAUpdateType(v SimplifiedOTAUpdateType) OptSimplifiedOTAUpdateType {
	return OptSimplifiedOTAUpdateType{
		Value: v,
		Set:   true,
	}
}

// OptSimplifiedOTAUpdateType is optional SimplifiedOTAUpdateType.
type OptSimplifiedOTAUpdateType struct {
	Value SimplifiedOTAUpdateType
	Set   bool
}

// IsSet returns true if OptSimplifiedOTAUpdateType was set.
func (o OptSimplifiedOTAUpdateType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSimplifiedOTAUpdateType) Reset() {
	var v SimplifiedOTAUpdateType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSimplifiedOTAUpdateType) SetTo(v SimplifiedOTAUpdateType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSimplifiedOTAUpdateType) Get() (v SimplifiedOTAUpdateType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSimplifiedOTAUpdateType) Or(d SimplifiedOTAUpdateType) SimplifiedOTAUpdateType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSlimListPhoneNumbersFilterStatus returns new OptSlimListPhoneNumbersFilterStatus with value set to v.
func NewOptSlimListPhoneNumbersFilterStatus(v SlimListPhoneNumbersFilterStatus) OptSlimListPhoneNumbersFilterStatus {
	return OptSlimListPhoneNumbersFilterStatus{
		Value: v,
		Set:   true,
	}
}

// OptSlimListPhoneNumbersFilterStatus is optional SlimListPhoneNumbersFilterStatus.
type OptSlimListPhoneNumbersFilterStatus struct {
	Value SlimListPhoneNumbersFilterStatus
	Set   bool
}

// IsSet returns true if OptSlimListPhoneNumbersFilterStatus was set.
func (o OptSlimListPhoneNumbersFilterStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSlimListPhoneNumbersFilterStatus) Reset() {
	var v SlimListPhoneNumbersFilterStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSlimListPhoneNumbersFilterStatus) SetTo(v SlimListPhoneNumbersFilterStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSlimListPhoneNumbersFilterStatus) Get() (v SlimListPhoneNumbersFilterStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSlimListPhoneNumbersFilterStatus) Or(d SlimListPhoneNumbersFilterStatus) SlimListPhoneNumbersFilterStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSlimListPhoneNumbersFilterVoiceUsagePaymentMethod returns new OptSlimListPhoneNumbersFilterVoiceUsagePaymentMethod with value set to v.
func NewOptSlimListPhoneNumbersFilterVoiceUsagePaymentMethod(v SlimListPhoneNumbersFilterVoiceUsagePaymentMethod) OptSlimListPhoneNumbersFilterVoiceUsagePaymentMethod {
	return OptSlimListPhoneNumbersFilterVoiceUsagePaymentMethod{
		Value: v,
		Set:   true,
	}
}

// OptSlimListPhoneNumbersFilterVoiceUsagePaymentMethod is optional SlimListPhoneNumbersFilterVoiceUsagePaymentMethod.
type OptSlimListPhoneNumbersFilterVoiceUsagePaymentMethod struct {
	Value SlimListPhoneNumbersFilterVoiceUsagePaymentMethod
	Set   bool
}

// IsSet returns true if OptSlimListPhoneNumbersFilterVoiceUsagePaymentMethod was set.
func (o OptSlimListPhoneNumbersFilterVoiceUsagePaymentMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSlimListPhoneNumbersFilterVoiceUsagePaymentMethod) Reset() {
	var v SlimListPhoneNumbersFilterVoiceUsagePaymentMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSlimListPhoneNumbersFilterVoiceUsagePaymentMethod) SetTo(v SlimListPhoneNumbersFilterVoiceUsagePaymentMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSlimListPhoneNumbersFilterVoiceUsagePaymentMethod) Get() (v SlimListPhoneNumbersFilterVoiceUsagePaymentMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSlimListPhoneNumbersFilterVoiceUsagePaymentMethod) Or(d SlimListPhoneNumbersFilterVoiceUsagePaymentMethod) SlimListPhoneNumbersFilterVoiceUsagePaymentMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSlimListPhoneNumbersSort returns new OptSlimListPhoneNumbersSort with value set to v.
func NewOptSlimListPhoneNumbersSort(v SlimListPhoneNumbersSort) OptSlimListPhoneNumbersSort {
	return OptSlimListPhoneNumbersSort{
		Value: v,
		Set:   true,
	}
}

// OptSlimListPhoneNumbersSort is optional SlimListPhoneNumbersSort.
type OptSlimListPhoneNumbersSort struct {
	Value SlimListPhoneNumbersSort
	Set   bool
}

// IsSet returns true if OptSlimListPhoneNumbersSort was set.
func (o OptSlimListPhoneNumbersSort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSlimListPhoneNumbersSort) Reset() {
	var v SlimListPhoneNumbersSort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSlimListPhoneNumbersSort) SetTo(v SlimListPhoneNumbersSort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSlimListPhoneNumbersSort) Get() (v SlimListPhoneNumbersSort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSlimListPhoneNumbersSort) Or(d SlimListPhoneNumbersSort) SlimListPhoneNumbersSort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSlimPhoneNumberDetailedInboundCallScreening returns new OptSlimPhoneNumberDetailedInboundCallScreening with value set to v.
func NewOptSlimPhoneNumberDetailedInboundCallScreening(v SlimPhoneNumberDetailedInboundCallScreening) OptSlimPhoneNumberDetailedInboundCallScreening {
	return OptSlimPhoneNumberDetailedInboundCallScreening{
		Value: v,
		Set:   true,
	}
}

// OptSlimPhoneNumberDetailedInboundCallScreening is optional SlimPhoneNumberDetailedInboundCallScreening.
type OptSlimPhoneNumberDetailedInboundCallScreening struct {
	Value SlimPhoneNumberDetailedInboundCallScreening
	Set   bool
}

// IsSet returns true if OptSlimPhoneNumberDetailedInboundCallScreening was set.
func (o OptSlimPhoneNumberDetailedInboundCallScreening) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSlimPhoneNumberDetailedInboundCallScreening) Reset() {
	var v SlimPhoneNumberDetailedInboundCallScreening
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSlimPhoneNumberDetailedInboundCallScreening) SetTo(v SlimPhoneNumberDetailedInboundCallScreening) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSlimPhoneNumberDetailedInboundCallScreening) Get() (v SlimPhoneNumberDetailedInboundCallScreening, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSlimPhoneNumberDetailedInboundCallScreening) Or(d SlimPhoneNumberDetailedInboundCallScreening) SlimPhoneNumberDetailedInboundCallScreening {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSlimPhoneNumberDetailedNumberLevelRouting returns new OptSlimPhoneNumberDetailedNumberLevelRouting with value set to v.
func NewOptSlimPhoneNumberDetailedNumberLevelRouting(v SlimPhoneNumberDetailedNumberLevelRouting) OptSlimPhoneNumberDetailedNumberLevelRouting {
	return OptSlimPhoneNumberDetailedNumberLevelRouting{
		Value: v,
		Set:   true,
	}
}

// OptSlimPhoneNumberDetailedNumberLevelRouting is optional SlimPhoneNumberDetailedNumberLevelRouting.
type OptSlimPhoneNumberDetailedNumberLevelRouting struct {
	Value SlimPhoneNumberDetailedNumberLevelRouting
	Set   bool
}

// IsSet returns true if OptSlimPhoneNumberDetailedNumberLevelRouting was set.
func (o OptSlimPhoneNumberDetailedNumberLevelRouting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSlimPhoneNumberDetailedNumberLevelRouting) Reset() {
	var v SlimPhoneNumberDetailedNumberLevelRouting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSlimPhoneNumberDetailedNumberLevelRouting) SetTo(v SlimPhoneNumberDetailedNumberLevelRouting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSlimPhoneNumberDetailedNumberLevelRouting) Get() (v SlimPhoneNumberDetailedNumberLevelRouting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSlimPhoneNumberDetailedNumberLevelRouting) Or(d SlimPhoneNumberDetailedNumberLevelRouting) SlimPhoneNumberDetailedNumberLevelRouting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSlimPhoneNumberDetailedPhoneNumberType returns new OptSlimPhoneNumberDetailedPhoneNumberType with value set to v.
func NewOptSlimPhoneNumberDetailedPhoneNumberType(v SlimPhoneNumberDetailedPhoneNumberType) OptSlimPhoneNumberDetailedPhoneNumberType {
	return OptSlimPhoneNumberDetailedPhoneNumberType{
		Value: v,
		Set:   true,
	}
}

// OptSlimPhoneNumberDetailedPhoneNumberType is optional SlimPhoneNumberDetailedPhoneNumberType.
type OptSlimPhoneNumberDetailedPhoneNumberType struct {
	Value SlimPhoneNumberDetailedPhoneNumberType
	Set   bool
}

// IsSet returns true if OptSlimPhoneNumberDetailedPhoneNumberType was set.
func (o OptSlimPhoneNumberDetailedPhoneNumberType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSlimPhoneNumberDetailedPhoneNumberType) Reset() {
	var v SlimPhoneNumberDetailedPhoneNumberType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSlimPhoneNumberDetailedPhoneNumberType) SetTo(v SlimPhoneNumberDetailedPhoneNumberType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSlimPhoneNumberDetailedPhoneNumberType) Get() (v SlimPhoneNumberDetailedPhoneNumberType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSlimPhoneNumberDetailedPhoneNumberType) Or(d SlimPhoneNumberDetailedPhoneNumberType) SlimPhoneNumberDetailedPhoneNumberType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSlimPhoneNumberDetailedStatus returns new OptSlimPhoneNumberDetailedStatus with value set to v.
func NewOptSlimPhoneNumberDetailedStatus(v SlimPhoneNumberDetailedStatus) OptSlimPhoneNumberDetailedStatus {
	return OptSlimPhoneNumberDetailedStatus{
		Value: v,
		Set:   true,
	}
}

// OptSlimPhoneNumberDetailedStatus is optional SlimPhoneNumberDetailedStatus.
type OptSlimPhoneNumberDetailedStatus struct {
	Value SlimPhoneNumberDetailedStatus
	Set   bool
}

// IsSet returns true if OptSlimPhoneNumberDetailedStatus was set.
func (o OptSlimPhoneNumberDetailedStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSlimPhoneNumberDetailedStatus) Reset() {
	var v SlimPhoneNumberDetailedStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSlimPhoneNumberDetailedStatus) SetTo(v SlimPhoneNumberDetailedStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSlimPhoneNumberDetailedStatus) Get() (v SlimPhoneNumberDetailedStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSlimPhoneNumberDetailedStatus) Or(d SlimPhoneNumberDetailedStatus) SlimPhoneNumberDetailedStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSortApplication returns new OptSortApplication with value set to v.
func NewOptSortApplication(v SortApplication) OptSortApplication {
	return OptSortApplication{
		Value: v,
		Set:   true,
	}
}

// OptSortApplication is optional SortApplication.
type OptSortApplication struct {
	Value SortApplication
	Set   bool
}

// IsSet returns true if OptSortApplication was set.
func (o OptSortApplication) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSortApplication) Reset() {
	var v SortApplication
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSortApplication) SetTo(v SortApplication) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSortApplication) Get() (v SortApplication, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSortApplication) Or(d SortApplication) SortApplication {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSortConnection returns new OptSortConnection with value set to v.
func NewOptSortConnection(v SortConnection) OptSortConnection {
	return OptSortConnection{
		Value: v,
		Set:   true,
	}
}

// OptSortConnection is optional SortConnection.
type OptSortConnection struct {
	Value SortConnection
	Set   bool
}

// IsSet returns true if OptSortConnection was set.
func (o OptSortConnection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSortConnection) Reset() {
	var v SortConnection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSortConnection) SetTo(v SortConnection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSortConnection) Get() (v SortConnection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSortConnection) Or(d SortConnection) SortConnection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSortOutboundVoiceProfile returns new OptSortOutboundVoiceProfile with value set to v.
func NewOptSortOutboundVoiceProfile(v SortOutboundVoiceProfile) OptSortOutboundVoiceProfile {
	return OptSortOutboundVoiceProfile{
		Value: v,
		Set:   true,
	}
}

// OptSortOutboundVoiceProfile is optional SortOutboundVoiceProfile.
type OptSortOutboundVoiceProfile struct {
	Value SortOutboundVoiceProfile
	Set   bool
}

// IsSet returns true if OptSortOutboundVoiceProfile was set.
func (o OptSortOutboundVoiceProfile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSortOutboundVoiceProfile) Reset() {
	var v SortOutboundVoiceProfile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSortOutboundVoiceProfile) SetTo(v SortOutboundVoiceProfile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSortOutboundVoiceProfile) Get() (v SortOutboundVoiceProfile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSortOutboundVoiceProfile) Or(d SortOutboundVoiceProfile) SortOutboundVoiceProfile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSoundModifications returns new OptSoundModifications with value set to v.
func NewOptSoundModifications(v SoundModifications) OptSoundModifications {
	return OptSoundModifications{
		Value: v,
		Set:   true,
	}
}

// OptSoundModifications is optional SoundModifications.
type OptSoundModifications struct {
	Value SoundModifications
	Set   bool
}

// IsSet returns true if OptSoundModifications was set.
func (o OptSoundModifications) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSoundModifications) Reset() {
	var v SoundModifications
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSoundModifications) SetTo(v SoundModifications) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSoundModifications) Get() (v SoundModifications, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSoundModifications) Or(d SoundModifications) SoundModifications {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSourceResponse returns new OptSourceResponse with value set to v.
func NewOptSourceResponse(v SourceResponse) OptSourceResponse {
	return OptSourceResponse{
		Value: v,
		Set:   true,
	}
}

// OptSourceResponse is optional SourceResponse.
type OptSourceResponse struct {
	Value SourceResponse
	Set   bool
}

// IsSet returns true if OptSourceResponse was set.
func (o OptSourceResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSourceResponse) Reset() {
	var v SourceResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSourceResponse) SetTo(v SourceResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSourceResponse) Get() (v SourceResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSourceResponse) Or(d SourceResponse) SourceResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSpeakRequestLanguage returns new OptSpeakRequestLanguage with value set to v.
func NewOptSpeakRequestLanguage(v SpeakRequestLanguage) OptSpeakRequestLanguage {
	return OptSpeakRequestLanguage{
		Value: v,
		Set:   true,
	}
}

// OptSpeakRequestLanguage is optional SpeakRequestLanguage.
type OptSpeakRequestLanguage struct {
	Value SpeakRequestLanguage
	Set   bool
}

// IsSet returns true if OptSpeakRequestLanguage was set.
func (o OptSpeakRequestLanguage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSpeakRequestLanguage) Reset() {
	var v SpeakRequestLanguage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSpeakRequestLanguage) SetTo(v SpeakRequestLanguage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSpeakRequestLanguage) Get() (v SpeakRequestLanguage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSpeakRequestLanguage) Or(d SpeakRequestLanguage) SpeakRequestLanguage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSpeakRequestPayloadType returns new OptSpeakRequestPayloadType with value set to v.
func NewOptSpeakRequestPayloadType(v SpeakRequestPayloadType) OptSpeakRequestPayloadType {
	return OptSpeakRequestPayloadType{
		Value: v,
		Set:   true,
	}
}

// OptSpeakRequestPayloadType is optional SpeakRequestPayloadType.
type OptSpeakRequestPayloadType struct {
	Value SpeakRequestPayloadType
	Set   bool
}

// IsSet returns true if OptSpeakRequestPayloadType was set.
func (o OptSpeakRequestPayloadType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSpeakRequestPayloadType) Reset() {
	var v SpeakRequestPayloadType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSpeakRequestPayloadType) SetTo(v SpeakRequestPayloadType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSpeakRequestPayloadType) Get() (v SpeakRequestPayloadType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSpeakRequestPayloadType) Or(d SpeakRequestPayloadType) SpeakRequestPayloadType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSpeakRequestServiceLevel returns new OptSpeakRequestServiceLevel with value set to v.
func NewOptSpeakRequestServiceLevel(v SpeakRequestServiceLevel) OptSpeakRequestServiceLevel {
	return OptSpeakRequestServiceLevel{
		Value: v,
		Set:   true,
	}
}

// OptSpeakRequestServiceLevel is optional SpeakRequestServiceLevel.
type OptSpeakRequestServiceLevel struct {
	Value SpeakRequestServiceLevel
	Set   bool
}

// IsSet returns true if OptSpeakRequestServiceLevel was set.
func (o OptSpeakRequestServiceLevel) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSpeakRequestServiceLevel) Reset() {
	var v SpeakRequestServiceLevel
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSpeakRequestServiceLevel) SetTo(v SpeakRequestServiceLevel) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSpeakRequestServiceLevel) Get() (v SpeakRequestServiceLevel, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSpeakRequestServiceLevel) Or(d SpeakRequestServiceLevel) SpeakRequestServiceLevel {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStartForkingRequestStreamType returns new OptStartForkingRequestStreamType with value set to v.
func NewOptStartForkingRequestStreamType(v StartForkingRequestStreamType) OptStartForkingRequestStreamType {
	return OptStartForkingRequestStreamType{
		Value: v,
		Set:   true,
	}
}

// OptStartForkingRequestStreamType is optional StartForkingRequestStreamType.
type OptStartForkingRequestStreamType struct {
	Value StartForkingRequestStreamType
	Set   bool
}

// IsSet returns true if OptStartForkingRequestStreamType was set.
func (o OptStartForkingRequestStreamType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStartForkingRequestStreamType) Reset() {
	var v StartForkingRequestStreamType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStartForkingRequestStreamType) SetTo(v StartForkingRequestStreamType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStartForkingRequestStreamType) Get() (v StartForkingRequestStreamType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStartForkingRequestStreamType) Or(d StartForkingRequestStreamType) StartForkingRequestStreamType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStartRecordingRequestRecordingTrack returns new OptStartRecordingRequestRecordingTrack with value set to v.
func NewOptStartRecordingRequestRecordingTrack(v StartRecordingRequestRecordingTrack) OptStartRecordingRequestRecordingTrack {
	return OptStartRecordingRequestRecordingTrack{
		Value: v,
		Set:   true,
	}
}

// OptStartRecordingRequestRecordingTrack is optional StartRecordingRequestRecordingTrack.
type OptStartRecordingRequestRecordingTrack struct {
	Value StartRecordingRequestRecordingTrack
	Set   bool
}

// IsSet returns true if OptStartRecordingRequestRecordingTrack was set.
func (o OptStartRecordingRequestRecordingTrack) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStartRecordingRequestRecordingTrack) Reset() {
	var v StartRecordingRequestRecordingTrack
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStartRecordingRequestRecordingTrack) SetTo(v StartRecordingRequestRecordingTrack) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStartRecordingRequestRecordingTrack) Get() (v StartRecordingRequestRecordingTrack, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStartRecordingRequestRecordingTrack) Or(d StartRecordingRequestRecordingTrack) StartRecordingRequestRecordingTrack {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStartRecordingRequestTrim returns new OptStartRecordingRequestTrim with value set to v.
func NewOptStartRecordingRequestTrim(v StartRecordingRequestTrim) OptStartRecordingRequestTrim {
	return OptStartRecordingRequestTrim{
		Value: v,
		Set:   true,
	}
}

// OptStartRecordingRequestTrim is optional StartRecordingRequestTrim.
type OptStartRecordingRequestTrim struct {
	Value StartRecordingRequestTrim
	Set   bool
}

// IsSet returns true if OptStartRecordingRequestTrim was set.
func (o OptStartRecordingRequestTrim) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStartRecordingRequestTrim) Reset() {
	var v StartRecordingRequestTrim
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStartRecordingRequestTrim) SetTo(v StartRecordingRequestTrim) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStartRecordingRequestTrim) Get() (v StartRecordingRequestTrim, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStartRecordingRequestTrim) Or(d StartRecordingRequestTrim) StartRecordingRequestTrim {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStartStreamingRequestStreamTrack returns new OptStartStreamingRequestStreamTrack with value set to v.
func NewOptStartStreamingRequestStreamTrack(v StartStreamingRequestStreamTrack) OptStartStreamingRequestStreamTrack {
	return OptStartStreamingRequestStreamTrack{
		Value: v,
		Set:   true,
	}
}

// OptStartStreamingRequestStreamTrack is optional StartStreamingRequestStreamTrack.
type OptStartStreamingRequestStreamTrack struct {
	Value StartStreamingRequestStreamTrack
	Set   bool
}

// IsSet returns true if OptStartStreamingRequestStreamTrack was set.
func (o OptStartStreamingRequestStreamTrack) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStartStreamingRequestStreamTrack) Reset() {
	var v StartStreamingRequestStreamTrack
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStartStreamingRequestStreamTrack) SetTo(v StartStreamingRequestStreamTrack) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStartStreamingRequestStreamTrack) Get() (v StartStreamingRequestStreamTrack, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStartStreamingRequestStreamTrack) Or(d StartStreamingRequestStreamTrack) StartStreamingRequestStreamTrack {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStatus returns new OptStatus with value set to v.
func NewOptStatus(v Status) OptStatus {
	return OptStatus{
		Value: v,
		Set:   true,
	}
}

// OptStatus is optional Status.
type OptStatus struct {
	Value Status
	Set   bool
}

// IsSet returns true if OptStatus was set.
func (o OptStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStatus) Reset() {
	var v Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStatus) SetTo(v Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStatus) Get() (v Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStatus) Or(d Status) Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStopForkingRequestStreamType returns new OptStopForkingRequestStreamType with value set to v.
func NewOptStopForkingRequestStreamType(v StopForkingRequestStreamType) OptStopForkingRequestStreamType {
	return OptStopForkingRequestStreamType{
		Value: v,
		Set:   true,
	}
}

// OptStopForkingRequestStreamType is optional StopForkingRequestStreamType.
type OptStopForkingRequestStreamType struct {
	Value StopForkingRequestStreamType
	Set   bool
}

// IsSet returns true if OptStopForkingRequestStreamType was set.
func (o OptStopForkingRequestStreamType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStopForkingRequestStreamType) Reset() {
	var v StopForkingRequestStreamType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStopForkingRequestStreamType) SetTo(v StopForkingRequestStreamType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStopForkingRequestStreamType) Get() (v StopForkingRequestStreamType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStopForkingRequestStreamType) Or(d StopForkingRequestStreamType) StopForkingRequestStreamType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStringInt returns new OptStringInt with value set to v.
func NewOptStringInt(v int) OptStringInt {
	return OptStringInt{
		Value: v,
		Set:   true,
	}
}

// OptStringInt is optional int.
type OptStringInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptStringInt was set.
func (o OptStringInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStringInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStringInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStringInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStringInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStringInt64 returns new OptStringInt64 with value set to v.
func NewOptStringInt64(v int64) OptStringInt64 {
	return OptStringInt64{
		Value: v,
		Set:   true,
	}
}

// OptStringInt64 is optional int64.
type OptStringInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptStringInt64 was set.
func (o OptStringInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStringInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStringInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStringInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStringInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubNumberOrderRegulatoryRequirementWithValueFieldType returns new OptSubNumberOrderRegulatoryRequirementWithValueFieldType with value set to v.
func NewOptSubNumberOrderRegulatoryRequirementWithValueFieldType(v SubNumberOrderRegulatoryRequirementWithValueFieldType) OptSubNumberOrderRegulatoryRequirementWithValueFieldType {
	return OptSubNumberOrderRegulatoryRequirementWithValueFieldType{
		Value: v,
		Set:   true,
	}
}

// OptSubNumberOrderRegulatoryRequirementWithValueFieldType is optional SubNumberOrderRegulatoryRequirementWithValueFieldType.
type OptSubNumberOrderRegulatoryRequirementWithValueFieldType struct {
	Value SubNumberOrderRegulatoryRequirementWithValueFieldType
	Set   bool
}

// IsSet returns true if OptSubNumberOrderRegulatoryRequirementWithValueFieldType was set.
func (o OptSubNumberOrderRegulatoryRequirementWithValueFieldType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubNumberOrderRegulatoryRequirementWithValueFieldType) Reset() {
	var v SubNumberOrderRegulatoryRequirementWithValueFieldType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubNumberOrderRegulatoryRequirementWithValueFieldType) SetTo(v SubNumberOrderRegulatoryRequirementWithValueFieldType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubNumberOrderRegulatoryRequirementWithValueFieldType) Get() (v SubNumberOrderRegulatoryRequirementWithValueFieldType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubNumberOrderRegulatoryRequirementWithValueFieldType) Or(d SubNumberOrderRegulatoryRequirementWithValueFieldType) SubNumberOrderRegulatoryRequirementWithValueFieldType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTelephonyCredential returns new OptTelephonyCredential with value set to v.
func NewOptTelephonyCredential(v TelephonyCredential) OptTelephonyCredential {
	return OptTelephonyCredential{
		Value: v,
		Set:   true,
	}
}

// OptTelephonyCredential is optional TelephonyCredential.
type OptTelephonyCredential struct {
	Value TelephonyCredential
	Set   bool
}

// IsSet returns true if OptTelephonyCredential was set.
func (o OptTelephonyCredential) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTelephonyCredential) Reset() {
	var v TelephonyCredential
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTelephonyCredential) SetTo(v TelephonyCredential) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTelephonyCredential) Get() (v TelephonyCredential, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTelephonyCredential) Or(d TelephonyCredential) TelephonyCredential {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlApplication returns new OptTexmlApplication with value set to v.
func NewOptTexmlApplication(v TexmlApplication) OptTexmlApplication {
	return OptTexmlApplication{
		Value: v,
		Set:   true,
	}
}

// OptTexmlApplication is optional TexmlApplication.
type OptTexmlApplication struct {
	Value TexmlApplication
	Set   bool
}

// IsSet returns true if OptTexmlApplication was set.
func (o OptTexmlApplication) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlApplication) Reset() {
	var v TexmlApplication
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlApplication) SetTo(v TexmlApplication) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlApplication) Get() (v TexmlApplication, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlApplication) Or(d TexmlApplication) TexmlApplication {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlApplicationInbound returns new OptTexmlApplicationInbound with value set to v.
func NewOptTexmlApplicationInbound(v TexmlApplicationInbound) OptTexmlApplicationInbound {
	return OptTexmlApplicationInbound{
		Value: v,
		Set:   true,
	}
}

// OptTexmlApplicationInbound is optional TexmlApplicationInbound.
type OptTexmlApplicationInbound struct {
	Value TexmlApplicationInbound
	Set   bool
}

// IsSet returns true if OptTexmlApplicationInbound was set.
func (o OptTexmlApplicationInbound) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlApplicationInbound) Reset() {
	var v TexmlApplicationInbound
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlApplicationInbound) SetTo(v TexmlApplicationInbound) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlApplicationInbound) Get() (v TexmlApplicationInbound, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlApplicationInbound) Or(d TexmlApplicationInbound) TexmlApplicationInbound {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlApplicationInboundSipSubdomainReceiveSettings returns new OptTexmlApplicationInboundSipSubdomainReceiveSettings with value set to v.
func NewOptTexmlApplicationInboundSipSubdomainReceiveSettings(v TexmlApplicationInboundSipSubdomainReceiveSettings) OptTexmlApplicationInboundSipSubdomainReceiveSettings {
	return OptTexmlApplicationInboundSipSubdomainReceiveSettings{
		Value: v,
		Set:   true,
	}
}

// OptTexmlApplicationInboundSipSubdomainReceiveSettings is optional TexmlApplicationInboundSipSubdomainReceiveSettings.
type OptTexmlApplicationInboundSipSubdomainReceiveSettings struct {
	Value TexmlApplicationInboundSipSubdomainReceiveSettings
	Set   bool
}

// IsSet returns true if OptTexmlApplicationInboundSipSubdomainReceiveSettings was set.
func (o OptTexmlApplicationInboundSipSubdomainReceiveSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlApplicationInboundSipSubdomainReceiveSettings) Reset() {
	var v TexmlApplicationInboundSipSubdomainReceiveSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlApplicationInboundSipSubdomainReceiveSettings) SetTo(v TexmlApplicationInboundSipSubdomainReceiveSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlApplicationInboundSipSubdomainReceiveSettings) Get() (v TexmlApplicationInboundSipSubdomainReceiveSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlApplicationInboundSipSubdomainReceiveSettings) Or(d TexmlApplicationInboundSipSubdomainReceiveSettings) TexmlApplicationInboundSipSubdomainReceiveSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlApplicationOutbound returns new OptTexmlApplicationOutbound with value set to v.
func NewOptTexmlApplicationOutbound(v TexmlApplicationOutbound) OptTexmlApplicationOutbound {
	return OptTexmlApplicationOutbound{
		Value: v,
		Set:   true,
	}
}

// OptTexmlApplicationOutbound is optional TexmlApplicationOutbound.
type OptTexmlApplicationOutbound struct {
	Value TexmlApplicationOutbound
	Set   bool
}

// IsSet returns true if OptTexmlApplicationOutbound was set.
func (o OptTexmlApplicationOutbound) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlApplicationOutbound) Reset() {
	var v TexmlApplicationOutbound
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlApplicationOutbound) SetTo(v TexmlApplicationOutbound) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlApplicationOutbound) Get() (v TexmlApplicationOutbound, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlApplicationOutbound) Or(d TexmlApplicationOutbound) TexmlApplicationOutbound {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlApplicationStatusCallbackMethod returns new OptTexmlApplicationStatusCallbackMethod with value set to v.
func NewOptTexmlApplicationStatusCallbackMethod(v TexmlApplicationStatusCallbackMethod) OptTexmlApplicationStatusCallbackMethod {
	return OptTexmlApplicationStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptTexmlApplicationStatusCallbackMethod is optional TexmlApplicationStatusCallbackMethod.
type OptTexmlApplicationStatusCallbackMethod struct {
	Value TexmlApplicationStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptTexmlApplicationStatusCallbackMethod was set.
func (o OptTexmlApplicationStatusCallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlApplicationStatusCallbackMethod) Reset() {
	var v TexmlApplicationStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlApplicationStatusCallbackMethod) SetTo(v TexmlApplicationStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlApplicationStatusCallbackMethod) Get() (v TexmlApplicationStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlApplicationStatusCallbackMethod) Or(d TexmlApplicationStatusCallbackMethod) TexmlApplicationStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlApplicationVoiceMethod returns new OptTexmlApplicationVoiceMethod with value set to v.
func NewOptTexmlApplicationVoiceMethod(v TexmlApplicationVoiceMethod) OptTexmlApplicationVoiceMethod {
	return OptTexmlApplicationVoiceMethod{
		Value: v,
		Set:   true,
	}
}

// OptTexmlApplicationVoiceMethod is optional TexmlApplicationVoiceMethod.
type OptTexmlApplicationVoiceMethod struct {
	Value TexmlApplicationVoiceMethod
	Set   bool
}

// IsSet returns true if OptTexmlApplicationVoiceMethod was set.
func (o OptTexmlApplicationVoiceMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlApplicationVoiceMethod) Reset() {
	var v TexmlApplicationVoiceMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlApplicationVoiceMethod) SetTo(v TexmlApplicationVoiceMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlApplicationVoiceMethod) Get() (v TexmlApplicationVoiceMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlApplicationVoiceMethod) Or(d TexmlApplicationVoiceMethod) TexmlApplicationVoiceMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlCreateCallRecordingRequestBody returns new OptTexmlCreateCallRecordingRequestBody with value set to v.
func NewOptTexmlCreateCallRecordingRequestBody(v TexmlCreateCallRecordingRequestBody) OptTexmlCreateCallRecordingRequestBody {
	return OptTexmlCreateCallRecordingRequestBody{
		Value: v,
		Set:   true,
	}
}

// OptTexmlCreateCallRecordingRequestBody is optional TexmlCreateCallRecordingRequestBody.
type OptTexmlCreateCallRecordingRequestBody struct {
	Value TexmlCreateCallRecordingRequestBody
	Set   bool
}

// IsSet returns true if OptTexmlCreateCallRecordingRequestBody was set.
func (o OptTexmlCreateCallRecordingRequestBody) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlCreateCallRecordingRequestBody) Reset() {
	var v TexmlCreateCallRecordingRequestBody
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlCreateCallRecordingRequestBody) SetTo(v TexmlCreateCallRecordingRequestBody) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlCreateCallRecordingRequestBody) Get() (v TexmlCreateCallRecordingRequestBody, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlCreateCallRecordingRequestBody) Or(d TexmlCreateCallRecordingRequestBody) TexmlCreateCallRecordingRequestBody {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlRecordingChannels returns new OptTexmlRecordingChannels with value set to v.
func NewOptTexmlRecordingChannels(v TexmlRecordingChannels) OptTexmlRecordingChannels {
	return OptTexmlRecordingChannels{
		Value: v,
		Set:   true,
	}
}

// OptTexmlRecordingChannels is optional TexmlRecordingChannels.
type OptTexmlRecordingChannels struct {
	Value TexmlRecordingChannels
	Set   bool
}

// IsSet returns true if OptTexmlRecordingChannels was set.
func (o OptTexmlRecordingChannels) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlRecordingChannels) Reset() {
	var v TexmlRecordingChannels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlRecordingChannels) SetTo(v TexmlRecordingChannels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlRecordingChannels) Get() (v TexmlRecordingChannels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlRecordingChannels) Or(d TexmlRecordingChannels) TexmlRecordingChannels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlRecordingMediaUrl returns new OptTexmlRecordingMediaUrl with value set to v.
func NewOptTexmlRecordingMediaUrl(v TexmlRecordingMediaUrl) OptTexmlRecordingMediaUrl {
	return OptTexmlRecordingMediaUrl{
		Value: v,
		Set:   true,
	}
}

// OptTexmlRecordingMediaUrl is optional TexmlRecordingMediaUrl.
type OptTexmlRecordingMediaUrl struct {
	Value TexmlRecordingMediaUrl
	Set   bool
}

// IsSet returns true if OptTexmlRecordingMediaUrl was set.
func (o OptTexmlRecordingMediaUrl) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlRecordingMediaUrl) Reset() {
	var v TexmlRecordingMediaUrl
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlRecordingMediaUrl) SetTo(v TexmlRecordingMediaUrl) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlRecordingMediaUrl) Get() (v TexmlRecordingMediaUrl, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlRecordingMediaUrl) Or(d TexmlRecordingMediaUrl) TexmlRecordingMediaUrl {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlRecordingStatus returns new OptTexmlRecordingStatus with value set to v.
func NewOptTexmlRecordingStatus(v TexmlRecordingStatus) OptTexmlRecordingStatus {
	return OptTexmlRecordingStatus{
		Value: v,
		Set:   true,
	}
}

// OptTexmlRecordingStatus is optional TexmlRecordingStatus.
type OptTexmlRecordingStatus struct {
	Value TexmlRecordingStatus
	Set   bool
}

// IsSet returns true if OptTexmlRecordingStatus was set.
func (o OptTexmlRecordingStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlRecordingStatus) Reset() {
	var v TexmlRecordingStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlRecordingStatus) SetTo(v TexmlRecordingStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlRecordingStatus) Get() (v TexmlRecordingStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlRecordingStatus) Or(d TexmlRecordingStatus) TexmlRecordingStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlRecordingSubresourcesUris returns new OptTexmlRecordingSubresourcesUris with value set to v.
func NewOptTexmlRecordingSubresourcesUris(v TexmlRecordingSubresourcesUris) OptTexmlRecordingSubresourcesUris {
	return OptTexmlRecordingSubresourcesUris{
		Value: v,
		Set:   true,
	}
}

// OptTexmlRecordingSubresourcesUris is optional TexmlRecordingSubresourcesUris.
type OptTexmlRecordingSubresourcesUris struct {
	Value TexmlRecordingSubresourcesUris
	Set   bool
}

// IsSet returns true if OptTexmlRecordingSubresourcesUris was set.
func (o OptTexmlRecordingSubresourcesUris) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlRecordingSubresourcesUris) Reset() {
	var v TexmlRecordingSubresourcesUris
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlRecordingSubresourcesUris) SetTo(v TexmlRecordingSubresourcesUris) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlRecordingSubresourcesUris) Get() (v TexmlRecordingSubresourcesUris, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlRecordingSubresourcesUris) Or(d TexmlRecordingSubresourcesUris) TexmlRecordingSubresourcesUris {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlRecordingTranscriptionStatus returns new OptTexmlRecordingTranscriptionStatus with value set to v.
func NewOptTexmlRecordingTranscriptionStatus(v TexmlRecordingTranscriptionStatus) OptTexmlRecordingTranscriptionStatus {
	return OptTexmlRecordingTranscriptionStatus{
		Value: v,
		Set:   true,
	}
}

// OptTexmlRecordingTranscriptionStatus is optional TexmlRecordingTranscriptionStatus.
type OptTexmlRecordingTranscriptionStatus struct {
	Value TexmlRecordingTranscriptionStatus
	Set   bool
}

// IsSet returns true if OptTexmlRecordingTranscriptionStatus was set.
func (o OptTexmlRecordingTranscriptionStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlRecordingTranscriptionStatus) Reset() {
	var v TexmlRecordingTranscriptionStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlRecordingTranscriptionStatus) SetTo(v TexmlRecordingTranscriptionStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlRecordingTranscriptionStatus) Get() (v TexmlRecordingTranscriptionStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlRecordingTranscriptionStatus) Or(d TexmlRecordingTranscriptionStatus) TexmlRecordingTranscriptionStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlSid returns new OptTexmlSid with value set to v.
func NewOptTexmlSid(v TexmlSid) OptTexmlSid {
	return OptTexmlSid{
		Value: v,
		Set:   true,
	}
}

// OptTexmlSid is optional TexmlSid.
type OptTexmlSid struct {
	Value TexmlSid
	Set   bool
}

// IsSet returns true if OptTexmlSid was set.
func (o OptTexmlSid) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlSid) Reset() {
	var v TexmlSid
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlSid) SetTo(v TexmlSid) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlSid) Get() (v TexmlSid, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlSid) Or(d TexmlSid) TexmlSid {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlStatusCallback returns new OptTexmlStatusCallback with value set to v.
func NewOptTexmlStatusCallback(v TexmlStatusCallback) OptTexmlStatusCallback {
	return OptTexmlStatusCallback{
		Value: v,
		Set:   true,
	}
}

// OptTexmlStatusCallback is optional TexmlStatusCallback.
type OptTexmlStatusCallback struct {
	Value TexmlStatusCallback
	Set   bool
}

// IsSet returns true if OptTexmlStatusCallback was set.
func (o OptTexmlStatusCallback) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlStatusCallback) Reset() {
	var v TexmlStatusCallback
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlStatusCallback) SetTo(v TexmlStatusCallback) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlStatusCallback) Get() (v TexmlStatusCallback, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlStatusCallback) Or(d TexmlStatusCallback) TexmlStatusCallback {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlStatusCallbackMethod returns new OptTexmlStatusCallbackMethod with value set to v.
func NewOptTexmlStatusCallbackMethod(v TexmlStatusCallbackMethod) OptTexmlStatusCallbackMethod {
	return OptTexmlStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptTexmlStatusCallbackMethod is optional TexmlStatusCallbackMethod.
type OptTexmlStatusCallbackMethod struct {
	Value TexmlStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptTexmlStatusCallbackMethod was set.
func (o OptTexmlStatusCallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlStatusCallbackMethod) Reset() {
	var v TexmlStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlStatusCallbackMethod) SetTo(v TexmlStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlStatusCallbackMethod) Get() (v TexmlStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlStatusCallbackMethod) Or(d TexmlStatusCallbackMethod) TexmlStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlUpdateCallRecordingRequestBody returns new OptTexmlUpdateCallRecordingRequestBody with value set to v.
func NewOptTexmlUpdateCallRecordingRequestBody(v TexmlUpdateCallRecordingRequestBody) OptTexmlUpdateCallRecordingRequestBody {
	return OptTexmlUpdateCallRecordingRequestBody{
		Value: v,
		Set:   true,
	}
}

// OptTexmlUpdateCallRecordingRequestBody is optional TexmlUpdateCallRecordingRequestBody.
type OptTexmlUpdateCallRecordingRequestBody struct {
	Value TexmlUpdateCallRecordingRequestBody
	Set   bool
}

// IsSet returns true if OptTexmlUpdateCallRecordingRequestBody was set.
func (o OptTexmlUpdateCallRecordingRequestBody) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlUpdateCallRecordingRequestBody) Reset() {
	var v TexmlUpdateCallRecordingRequestBody
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlUpdateCallRecordingRequestBody) SetTo(v TexmlUpdateCallRecordingRequestBody) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlUpdateCallRecordingRequestBody) Get() (v TexmlUpdateCallRecordingRequestBody, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlUpdateCallRecordingRequestBody) Or(d TexmlUpdateCallRecordingRequestBody) TexmlUpdateCallRecordingRequestBody {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTexmlUpdateCallRecordingRequestBodyStatus returns new OptTexmlUpdateCallRecordingRequestBodyStatus with value set to v.
func NewOptTexmlUpdateCallRecordingRequestBodyStatus(v TexmlUpdateCallRecordingRequestBodyStatus) OptTexmlUpdateCallRecordingRequestBodyStatus {
	return OptTexmlUpdateCallRecordingRequestBodyStatus{
		Value: v,
		Set:   true,
	}
}

// OptTexmlUpdateCallRecordingRequestBodyStatus is optional TexmlUpdateCallRecordingRequestBodyStatus.
type OptTexmlUpdateCallRecordingRequestBodyStatus struct {
	Value TexmlUpdateCallRecordingRequestBodyStatus
	Set   bool
}

// IsSet returns true if OptTexmlUpdateCallRecordingRequestBodyStatus was set.
func (o OptTexmlUpdateCallRecordingRequestBodyStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTexmlUpdateCallRecordingRequestBodyStatus) Reset() {
	var v TexmlUpdateCallRecordingRequestBodyStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTexmlUpdateCallRecordingRequestBodyStatus) SetTo(v TexmlUpdateCallRecordingRequestBodyStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTexmlUpdateCallRecordingRequestBodyStatus) Get() (v TexmlUpdateCallRecordingRequestBodyStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTexmlUpdateCallRecordingRequestBodyStatus) Or(d TexmlUpdateCallRecordingRequestBodyStatus) TexmlUpdateCallRecordingRequestBodyStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTrafficType returns new OptTrafficType with value set to v.
func NewOptTrafficType(v TrafficType) OptTrafficType {
	return OptTrafficType{
		Value: v,
		Set:   true,
	}
}

// OptTrafficType is optional TrafficType.
type OptTrafficType struct {
	Value TrafficType
	Set   bool
}

// IsSet returns true if OptTrafficType was set.
func (o OptTrafficType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTrafficType) Reset() {
	var v TrafficType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTrafficType) SetTo(v TrafficType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTrafficType) Get() (v TrafficType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTrafficType) Or(d TrafficType) TrafficType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTranscriptionStartRequestLanguage returns new OptTranscriptionStartRequestLanguage with value set to v.
func NewOptTranscriptionStartRequestLanguage(v TranscriptionStartRequestLanguage) OptTranscriptionStartRequestLanguage {
	return OptTranscriptionStartRequestLanguage{
		Value: v,
		Set:   true,
	}
}

// OptTranscriptionStartRequestLanguage is optional TranscriptionStartRequestLanguage.
type OptTranscriptionStartRequestLanguage struct {
	Value TranscriptionStartRequestLanguage
	Set   bool
}

// IsSet returns true if OptTranscriptionStartRequestLanguage was set.
func (o OptTranscriptionStartRequestLanguage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTranscriptionStartRequestLanguage) Reset() {
	var v TranscriptionStartRequestLanguage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTranscriptionStartRequestLanguage) SetTo(v TranscriptionStartRequestLanguage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTranscriptionStartRequestLanguage) Get() (v TranscriptionStartRequestLanguage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTranscriptionStartRequestLanguage) Or(d TranscriptionStartRequestLanguage) TranscriptionStartRequestLanguage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTranscriptionStartRequestTranscriptionEngine returns new OptTranscriptionStartRequestTranscriptionEngine with value set to v.
func NewOptTranscriptionStartRequestTranscriptionEngine(v TranscriptionStartRequestTranscriptionEngine) OptTranscriptionStartRequestTranscriptionEngine {
	return OptTranscriptionStartRequestTranscriptionEngine{
		Value: v,
		Set:   true,
	}
}

// OptTranscriptionStartRequestTranscriptionEngine is optional TranscriptionStartRequestTranscriptionEngine.
type OptTranscriptionStartRequestTranscriptionEngine struct {
	Value TranscriptionStartRequestTranscriptionEngine
	Set   bool
}

// IsSet returns true if OptTranscriptionStartRequestTranscriptionEngine was set.
func (o OptTranscriptionStartRequestTranscriptionEngine) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTranscriptionStartRequestTranscriptionEngine) Reset() {
	var v TranscriptionStartRequestTranscriptionEngine
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTranscriptionStartRequestTranscriptionEngine) SetTo(v TranscriptionStartRequestTranscriptionEngine) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTranscriptionStartRequestTranscriptionEngine) Get() (v TranscriptionStartRequestTranscriptionEngine, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTranscriptionStartRequestTranscriptionEngine) Or(d TranscriptionStartRequestTranscriptionEngine) TranscriptionStartRequestTranscriptionEngine {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTransferCallRequestAnsweringMachineDetection returns new OptTransferCallRequestAnsweringMachineDetection with value set to v.
func NewOptTransferCallRequestAnsweringMachineDetection(v TransferCallRequestAnsweringMachineDetection) OptTransferCallRequestAnsweringMachineDetection {
	return OptTransferCallRequestAnsweringMachineDetection{
		Value: v,
		Set:   true,
	}
}

// OptTransferCallRequestAnsweringMachineDetection is optional TransferCallRequestAnsweringMachineDetection.
type OptTransferCallRequestAnsweringMachineDetection struct {
	Value TransferCallRequestAnsweringMachineDetection
	Set   bool
}

// IsSet returns true if OptTransferCallRequestAnsweringMachineDetection was set.
func (o OptTransferCallRequestAnsweringMachineDetection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTransferCallRequestAnsweringMachineDetection) Reset() {
	var v TransferCallRequestAnsweringMachineDetection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTransferCallRequestAnsweringMachineDetection) SetTo(v TransferCallRequestAnsweringMachineDetection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTransferCallRequestAnsweringMachineDetection) Get() (v TransferCallRequestAnsweringMachineDetection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTransferCallRequestAnsweringMachineDetection) Or(d TransferCallRequestAnsweringMachineDetection) TransferCallRequestAnsweringMachineDetection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTransferCallRequestAnsweringMachineDetectionConfig returns new OptTransferCallRequestAnsweringMachineDetectionConfig with value set to v.
func NewOptTransferCallRequestAnsweringMachineDetectionConfig(v TransferCallRequestAnsweringMachineDetectionConfig) OptTransferCallRequestAnsweringMachineDetectionConfig {
	return OptTransferCallRequestAnsweringMachineDetectionConfig{
		Value: v,
		Set:   true,
	}
}

// OptTransferCallRequestAnsweringMachineDetectionConfig is optional TransferCallRequestAnsweringMachineDetectionConfig.
type OptTransferCallRequestAnsweringMachineDetectionConfig struct {
	Value TransferCallRequestAnsweringMachineDetectionConfig
	Set   bool
}

// IsSet returns true if OptTransferCallRequestAnsweringMachineDetectionConfig was set.
func (o OptTransferCallRequestAnsweringMachineDetectionConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTransferCallRequestAnsweringMachineDetectionConfig) Reset() {
	var v TransferCallRequestAnsweringMachineDetectionConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTransferCallRequestAnsweringMachineDetectionConfig) SetTo(v TransferCallRequestAnsweringMachineDetectionConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTransferCallRequestAnsweringMachineDetectionConfig) Get() (v TransferCallRequestAnsweringMachineDetectionConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTransferCallRequestAnsweringMachineDetectionConfig) Or(d TransferCallRequestAnsweringMachineDetectionConfig) TransferCallRequestAnsweringMachineDetectionConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTransferCallRequestMediaEncryption returns new OptTransferCallRequestMediaEncryption with value set to v.
func NewOptTransferCallRequestMediaEncryption(v TransferCallRequestMediaEncryption) OptTransferCallRequestMediaEncryption {
	return OptTransferCallRequestMediaEncryption{
		Value: v,
		Set:   true,
	}
}

// OptTransferCallRequestMediaEncryption is optional TransferCallRequestMediaEncryption.
type OptTransferCallRequestMediaEncryption struct {
	Value TransferCallRequestMediaEncryption
	Set   bool
}

// IsSet returns true if OptTransferCallRequestMediaEncryption was set.
func (o OptTransferCallRequestMediaEncryption) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTransferCallRequestMediaEncryption) Reset() {
	var v TransferCallRequestMediaEncryption
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTransferCallRequestMediaEncryption) SetTo(v TransferCallRequestMediaEncryption) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTransferCallRequestMediaEncryption) Get() (v TransferCallRequestMediaEncryption, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTransferCallRequestMediaEncryption) Or(d TransferCallRequestMediaEncryption) TransferCallRequestMediaEncryption {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTransferCallRequestSipTransportProtocol returns new OptTransferCallRequestSipTransportProtocol with value set to v.
func NewOptTransferCallRequestSipTransportProtocol(v TransferCallRequestSipTransportProtocol) OptTransferCallRequestSipTransportProtocol {
	return OptTransferCallRequestSipTransportProtocol{
		Value: v,
		Set:   true,
	}
}

// OptTransferCallRequestSipTransportProtocol is optional TransferCallRequestSipTransportProtocol.
type OptTransferCallRequestSipTransportProtocol struct {
	Value TransferCallRequestSipTransportProtocol
	Set   bool
}

// IsSet returns true if OptTransferCallRequestSipTransportProtocol was set.
func (o OptTransferCallRequestSipTransportProtocol) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTransferCallRequestSipTransportProtocol) Reset() {
	var v TransferCallRequestSipTransportProtocol
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTransferCallRequestSipTransportProtocol) SetTo(v TransferCallRequestSipTransportProtocol) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTransferCallRequestSipTransportProtocol) Get() (v TransferCallRequestSipTransportProtocol, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTransferCallRequestSipTransportProtocol) Or(d TransferCallRequestSipTransportProtocol) TransferCallRequestSipTransportProtocol {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTransferCallRequestWebhookURLMethod returns new OptTransferCallRequestWebhookURLMethod with value set to v.
func NewOptTransferCallRequestWebhookURLMethod(v TransferCallRequestWebhookURLMethod) OptTransferCallRequestWebhookURLMethod {
	return OptTransferCallRequestWebhookURLMethod{
		Value: v,
		Set:   true,
	}
}

// OptTransferCallRequestWebhookURLMethod is optional TransferCallRequestWebhookURLMethod.
type OptTransferCallRequestWebhookURLMethod struct {
	Value TransferCallRequestWebhookURLMethod
	Set   bool
}

// IsSet returns true if OptTransferCallRequestWebhookURLMethod was set.
func (o OptTransferCallRequestWebhookURLMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTransferCallRequestWebhookURLMethod) Reset() {
	var v TransferCallRequestWebhookURLMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTransferCallRequestWebhookURLMethod) SetTo(v TransferCallRequestWebhookURLMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTransferCallRequestWebhookURLMethod) Get() (v TransferCallRequestWebhookURLMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTransferCallRequestWebhookURLMethod) Or(d TransferCallRequestWebhookURLMethod) TransferCallRequestWebhookURLMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTwimlRecordingChannels returns new OptTwimlRecordingChannels with value set to v.
func NewOptTwimlRecordingChannels(v TwimlRecordingChannels) OptTwimlRecordingChannels {
	return OptTwimlRecordingChannels{
		Value: v,
		Set:   true,
	}
}

// OptTwimlRecordingChannels is optional TwimlRecordingChannels.
type OptTwimlRecordingChannels struct {
	Value TwimlRecordingChannels
	Set   bool
}

// IsSet returns true if OptTwimlRecordingChannels was set.
func (o OptTwimlRecordingChannels) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTwimlRecordingChannels) Reset() {
	var v TwimlRecordingChannels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTwimlRecordingChannels) SetTo(v TwimlRecordingChannels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTwimlRecordingChannels) Get() (v TwimlRecordingChannels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTwimlRecordingChannels) Or(d TwimlRecordingChannels) TwimlRecordingChannels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUnprocessableEntityErrorMeta returns new OptUnprocessableEntityErrorMeta with value set to v.
func NewOptUnprocessableEntityErrorMeta(v UnprocessableEntityErrorMeta) OptUnprocessableEntityErrorMeta {
	return OptUnprocessableEntityErrorMeta{
		Value: v,
		Set:   true,
	}
}

// OptUnprocessableEntityErrorMeta is optional UnprocessableEntityErrorMeta.
type OptUnprocessableEntityErrorMeta struct {
	Value UnprocessableEntityErrorMeta
	Set   bool
}

// IsSet returns true if OptUnprocessableEntityErrorMeta was set.
func (o OptUnprocessableEntityErrorMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUnprocessableEntityErrorMeta) Reset() {
	var v UnprocessableEntityErrorMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUnprocessableEntityErrorMeta) SetTo(v UnprocessableEntityErrorMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUnprocessableEntityErrorMeta) Get() (v UnprocessableEntityErrorMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUnprocessableEntityErrorMeta) Or(d UnprocessableEntityErrorMeta) UnprocessableEntityErrorMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUnprocessableEntityErrorSource returns new OptUnprocessableEntityErrorSource with value set to v.
func NewOptUnprocessableEntityErrorSource(v UnprocessableEntityErrorSource) OptUnprocessableEntityErrorSource {
	return OptUnprocessableEntityErrorSource{
		Value: v,
		Set:   true,
	}
}

// OptUnprocessableEntityErrorSource is optional UnprocessableEntityErrorSource.
type OptUnprocessableEntityErrorSource struct {
	Value UnprocessableEntityErrorSource
	Set   bool
}

// IsSet returns true if OptUnprocessableEntityErrorSource was set.
func (o OptUnprocessableEntityErrorSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUnprocessableEntityErrorSource) Reset() {
	var v UnprocessableEntityErrorSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUnprocessableEntityErrorSource) SetTo(v UnprocessableEntityErrorSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUnprocessableEntityErrorSource) Get() (v UnprocessableEntityErrorSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUnprocessableEntityErrorSource) Or(d UnprocessableEntityErrorSource) UnprocessableEntityErrorSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateCallControlApplicationRequestDtmfType returns new OptUpdateCallControlApplicationRequestDtmfType with value set to v.
func NewOptUpdateCallControlApplicationRequestDtmfType(v UpdateCallControlApplicationRequestDtmfType) OptUpdateCallControlApplicationRequestDtmfType {
	return OptUpdateCallControlApplicationRequestDtmfType{
		Value: v,
		Set:   true,
	}
}

// OptUpdateCallControlApplicationRequestDtmfType is optional UpdateCallControlApplicationRequestDtmfType.
type OptUpdateCallControlApplicationRequestDtmfType struct {
	Value UpdateCallControlApplicationRequestDtmfType
	Set   bool
}

// IsSet returns true if OptUpdateCallControlApplicationRequestDtmfType was set.
func (o OptUpdateCallControlApplicationRequestDtmfType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateCallControlApplicationRequestDtmfType) Reset() {
	var v UpdateCallControlApplicationRequestDtmfType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateCallControlApplicationRequestDtmfType) SetTo(v UpdateCallControlApplicationRequestDtmfType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateCallControlApplicationRequestDtmfType) Get() (v UpdateCallControlApplicationRequestDtmfType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateCallControlApplicationRequestDtmfType) Or(d UpdateCallControlApplicationRequestDtmfType) UpdateCallControlApplicationRequestDtmfType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateCallControlApplicationRequestWebhookAPIVersion returns new OptUpdateCallControlApplicationRequestWebhookAPIVersion with value set to v.
func NewOptUpdateCallControlApplicationRequestWebhookAPIVersion(v UpdateCallControlApplicationRequestWebhookAPIVersion) OptUpdateCallControlApplicationRequestWebhookAPIVersion {
	return OptUpdateCallControlApplicationRequestWebhookAPIVersion{
		Value: v,
		Set:   true,
	}
}

// OptUpdateCallControlApplicationRequestWebhookAPIVersion is optional UpdateCallControlApplicationRequestWebhookAPIVersion.
type OptUpdateCallControlApplicationRequestWebhookAPIVersion struct {
	Value UpdateCallControlApplicationRequestWebhookAPIVersion
	Set   bool
}

// IsSet returns true if OptUpdateCallControlApplicationRequestWebhookAPIVersion was set.
func (o OptUpdateCallControlApplicationRequestWebhookAPIVersion) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateCallControlApplicationRequestWebhookAPIVersion) Reset() {
	var v UpdateCallControlApplicationRequestWebhookAPIVersion
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateCallControlApplicationRequestWebhookAPIVersion) SetTo(v UpdateCallControlApplicationRequestWebhookAPIVersion) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateCallControlApplicationRequestWebhookAPIVersion) Get() (v UpdateCallControlApplicationRequestWebhookAPIVersion, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateCallControlApplicationRequestWebhookAPIVersion) Or(d UpdateCallControlApplicationRequestWebhookAPIVersion) UpdateCallControlApplicationRequestWebhookAPIVersion {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateCallRequestFallbackMethod returns new OptUpdateCallRequestFallbackMethod with value set to v.
func NewOptUpdateCallRequestFallbackMethod(v UpdateCallRequestFallbackMethod) OptUpdateCallRequestFallbackMethod {
	return OptUpdateCallRequestFallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptUpdateCallRequestFallbackMethod is optional UpdateCallRequestFallbackMethod.
type OptUpdateCallRequestFallbackMethod struct {
	Value UpdateCallRequestFallbackMethod
	Set   bool
}

// IsSet returns true if OptUpdateCallRequestFallbackMethod was set.
func (o OptUpdateCallRequestFallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateCallRequestFallbackMethod) Reset() {
	var v UpdateCallRequestFallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateCallRequestFallbackMethod) SetTo(v UpdateCallRequestFallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateCallRequestFallbackMethod) Get() (v UpdateCallRequestFallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateCallRequestFallbackMethod) Or(d UpdateCallRequestFallbackMethod) UpdateCallRequestFallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateCallRequestMethod returns new OptUpdateCallRequestMethod with value set to v.
func NewOptUpdateCallRequestMethod(v UpdateCallRequestMethod) OptUpdateCallRequestMethod {
	return OptUpdateCallRequestMethod{
		Value: v,
		Set:   true,
	}
}

// OptUpdateCallRequestMethod is optional UpdateCallRequestMethod.
type OptUpdateCallRequestMethod struct {
	Value UpdateCallRequestMethod
	Set   bool
}

// IsSet returns true if OptUpdateCallRequestMethod was set.
func (o OptUpdateCallRequestMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateCallRequestMethod) Reset() {
	var v UpdateCallRequestMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateCallRequestMethod) SetTo(v UpdateCallRequestMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateCallRequestMethod) Get() (v UpdateCallRequestMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateCallRequestMethod) Or(d UpdateCallRequestMethod) UpdateCallRequestMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateCallRequestStatusCallbackMethod returns new OptUpdateCallRequestStatusCallbackMethod with value set to v.
func NewOptUpdateCallRequestStatusCallbackMethod(v UpdateCallRequestStatusCallbackMethod) OptUpdateCallRequestStatusCallbackMethod {
	return OptUpdateCallRequestStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptUpdateCallRequestStatusCallbackMethod is optional UpdateCallRequestStatusCallbackMethod.
type OptUpdateCallRequestStatusCallbackMethod struct {
	Value UpdateCallRequestStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptUpdateCallRequestStatusCallbackMethod was set.
func (o OptUpdateCallRequestStatusCallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateCallRequestStatusCallbackMethod) Reset() {
	var v UpdateCallRequestStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateCallRequestStatusCallbackMethod) SetTo(v UpdateCallRequestStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateCallRequestStatusCallbackMethod) Get() (v UpdateCallRequestStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateCallRequestStatusCallbackMethod) Or(d UpdateCallRequestStatusCallbackMethod) UpdateCallRequestStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateCommandResult returns new OptUpdateCommandResult with value set to v.
func NewOptUpdateCommandResult(v UpdateCommandResult) OptUpdateCommandResult {
	return OptUpdateCommandResult{
		Value: v,
		Set:   true,
	}
}

// OptUpdateCommandResult is optional UpdateCommandResult.
type OptUpdateCommandResult struct {
	Value UpdateCommandResult
	Set   bool
}

// IsSet returns true if OptUpdateCommandResult was set.
func (o OptUpdateCommandResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateCommandResult) Reset() {
	var v UpdateCommandResult
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateCommandResult) SetTo(v UpdateCommandResult) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateCommandResult) Get() (v UpdateCommandResult, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateCommandResult) Or(d UpdateCommandResult) UpdateCommandResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateConferenceParticipantRequestAnnounceMethod returns new OptUpdateConferenceParticipantRequestAnnounceMethod with value set to v.
func NewOptUpdateConferenceParticipantRequestAnnounceMethod(v UpdateConferenceParticipantRequestAnnounceMethod) OptUpdateConferenceParticipantRequestAnnounceMethod {
	return OptUpdateConferenceParticipantRequestAnnounceMethod{
		Value: v,
		Set:   true,
	}
}

// OptUpdateConferenceParticipantRequestAnnounceMethod is optional UpdateConferenceParticipantRequestAnnounceMethod.
type OptUpdateConferenceParticipantRequestAnnounceMethod struct {
	Value UpdateConferenceParticipantRequestAnnounceMethod
	Set   bool
}

// IsSet returns true if OptUpdateConferenceParticipantRequestAnnounceMethod was set.
func (o OptUpdateConferenceParticipantRequestAnnounceMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateConferenceParticipantRequestAnnounceMethod) Reset() {
	var v UpdateConferenceParticipantRequestAnnounceMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateConferenceParticipantRequestAnnounceMethod) SetTo(v UpdateConferenceParticipantRequestAnnounceMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateConferenceParticipantRequestAnnounceMethod) Get() (v UpdateConferenceParticipantRequestAnnounceMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateConferenceParticipantRequestAnnounceMethod) Or(d UpdateConferenceParticipantRequestAnnounceMethod) UpdateConferenceParticipantRequestAnnounceMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateConferenceParticipantRequestHoldMethod returns new OptUpdateConferenceParticipantRequestHoldMethod with value set to v.
func NewOptUpdateConferenceParticipantRequestHoldMethod(v UpdateConferenceParticipantRequestHoldMethod) OptUpdateConferenceParticipantRequestHoldMethod {
	return OptUpdateConferenceParticipantRequestHoldMethod{
		Value: v,
		Set:   true,
	}
}

// OptUpdateConferenceParticipantRequestHoldMethod is optional UpdateConferenceParticipantRequestHoldMethod.
type OptUpdateConferenceParticipantRequestHoldMethod struct {
	Value UpdateConferenceParticipantRequestHoldMethod
	Set   bool
}

// IsSet returns true if OptUpdateConferenceParticipantRequestHoldMethod was set.
func (o OptUpdateConferenceParticipantRequestHoldMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateConferenceParticipantRequestHoldMethod) Reset() {
	var v UpdateConferenceParticipantRequestHoldMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateConferenceParticipantRequestHoldMethod) SetTo(v UpdateConferenceParticipantRequestHoldMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateConferenceParticipantRequestHoldMethod) Get() (v UpdateConferenceParticipantRequestHoldMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateConferenceParticipantRequestHoldMethod) Or(d UpdateConferenceParticipantRequestHoldMethod) UpdateConferenceParticipantRequestHoldMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateConferenceRequestAnnounceMethod returns new OptUpdateConferenceRequestAnnounceMethod with value set to v.
func NewOptUpdateConferenceRequestAnnounceMethod(v UpdateConferenceRequestAnnounceMethod) OptUpdateConferenceRequestAnnounceMethod {
	return OptUpdateConferenceRequestAnnounceMethod{
		Value: v,
		Set:   true,
	}
}

// OptUpdateConferenceRequestAnnounceMethod is optional UpdateConferenceRequestAnnounceMethod.
type OptUpdateConferenceRequestAnnounceMethod struct {
	Value UpdateConferenceRequestAnnounceMethod
	Set   bool
}

// IsSet returns true if OptUpdateConferenceRequestAnnounceMethod was set.
func (o OptUpdateConferenceRequestAnnounceMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateConferenceRequestAnnounceMethod) Reset() {
	var v UpdateConferenceRequestAnnounceMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateConferenceRequestAnnounceMethod) SetTo(v UpdateConferenceRequestAnnounceMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateConferenceRequestAnnounceMethod) Get() (v UpdateConferenceRequestAnnounceMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateConferenceRequestAnnounceMethod) Or(d UpdateConferenceRequestAnnounceMethod) UpdateConferenceRequestAnnounceMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateNumberOrderDocumentRequestRequirementType returns new OptUpdateNumberOrderDocumentRequestRequirementType with value set to v.
func NewOptUpdateNumberOrderDocumentRequestRequirementType(v UpdateNumberOrderDocumentRequestRequirementType) OptUpdateNumberOrderDocumentRequestRequirementType {
	return OptUpdateNumberOrderDocumentRequestRequirementType{
		Value: v,
		Set:   true,
	}
}

// OptUpdateNumberOrderDocumentRequestRequirementType is optional UpdateNumberOrderDocumentRequestRequirementType.
type OptUpdateNumberOrderDocumentRequestRequirementType struct {
	Value UpdateNumberOrderDocumentRequestRequirementType
	Set   bool
}

// IsSet returns true if OptUpdateNumberOrderDocumentRequestRequirementType was set.
func (o OptUpdateNumberOrderDocumentRequestRequirementType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateNumberOrderDocumentRequestRequirementType) Reset() {
	var v UpdateNumberOrderDocumentRequestRequirementType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateNumberOrderDocumentRequestRequirementType) SetTo(v UpdateNumberOrderDocumentRequestRequirementType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateNumberOrderDocumentRequestRequirementType) Get() (v UpdateNumberOrderDocumentRequestRequirementType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateNumberOrderDocumentRequestRequirementType) Or(d UpdateNumberOrderDocumentRequestRequirementType) UpdateNumberOrderDocumentRequestRequirementType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateOutboundChannelsDefErrorsItemMeta returns new OptUpdateOutboundChannelsDefErrorsItemMeta with value set to v.
func NewOptUpdateOutboundChannelsDefErrorsItemMeta(v UpdateOutboundChannelsDefErrorsItemMeta) OptUpdateOutboundChannelsDefErrorsItemMeta {
	return OptUpdateOutboundChannelsDefErrorsItemMeta{
		Value: v,
		Set:   true,
	}
}

// OptUpdateOutboundChannelsDefErrorsItemMeta is optional UpdateOutboundChannelsDefErrorsItemMeta.
type OptUpdateOutboundChannelsDefErrorsItemMeta struct {
	Value UpdateOutboundChannelsDefErrorsItemMeta
	Set   bool
}

// IsSet returns true if OptUpdateOutboundChannelsDefErrorsItemMeta was set.
func (o OptUpdateOutboundChannelsDefErrorsItemMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateOutboundChannelsDefErrorsItemMeta) Reset() {
	var v UpdateOutboundChannelsDefErrorsItemMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateOutboundChannelsDefErrorsItemMeta) SetTo(v UpdateOutboundChannelsDefErrorsItemMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateOutboundChannelsDefErrorsItemMeta) Get() (v UpdateOutboundChannelsDefErrorsItemMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateOutboundChannelsDefErrorsItemMeta) Or(d UpdateOutboundChannelsDefErrorsItemMeta) UpdateOutboundChannelsDefErrorsItemMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateOutboundChannelsDefErrorsItemSource returns new OptUpdateOutboundChannelsDefErrorsItemSource with value set to v.
func NewOptUpdateOutboundChannelsDefErrorsItemSource(v UpdateOutboundChannelsDefErrorsItemSource) OptUpdateOutboundChannelsDefErrorsItemSource {
	return OptUpdateOutboundChannelsDefErrorsItemSource{
		Value: v,
		Set:   true,
	}
}

// OptUpdateOutboundChannelsDefErrorsItemSource is optional UpdateOutboundChannelsDefErrorsItemSource.
type OptUpdateOutboundChannelsDefErrorsItemSource struct {
	Value UpdateOutboundChannelsDefErrorsItemSource
	Set   bool
}

// IsSet returns true if OptUpdateOutboundChannelsDefErrorsItemSource was set.
func (o OptUpdateOutboundChannelsDefErrorsItemSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateOutboundChannelsDefErrorsItemSource) Reset() {
	var v UpdateOutboundChannelsDefErrorsItemSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateOutboundChannelsDefErrorsItemSource) SetTo(v UpdateOutboundChannelsDefErrorsItemSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateOutboundChannelsDefErrorsItemSource) Get() (v UpdateOutboundChannelsDefErrorsItemSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateOutboundChannelsDefErrorsItemSource) Or(d UpdateOutboundChannelsDefErrorsItemSource) UpdateOutboundChannelsDefErrorsItemSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateOutboundChannelsOKData returns new OptUpdateOutboundChannelsOKData with value set to v.
func NewOptUpdateOutboundChannelsOKData(v UpdateOutboundChannelsOKData) OptUpdateOutboundChannelsOKData {
	return OptUpdateOutboundChannelsOKData{
		Value: v,
		Set:   true,
	}
}

// OptUpdateOutboundChannelsOKData is optional UpdateOutboundChannelsOKData.
type OptUpdateOutboundChannelsOKData struct {
	Value UpdateOutboundChannelsOKData
	Set   bool
}

// IsSet returns true if OptUpdateOutboundChannelsOKData was set.
func (o OptUpdateOutboundChannelsOKData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateOutboundChannelsOKData) Reset() {
	var v UpdateOutboundChannelsOKData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateOutboundChannelsOKData) SetTo(v UpdateOutboundChannelsOKData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateOutboundChannelsOKData) Get() (v UpdateOutboundChannelsOKData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateOutboundChannelsOKData) Or(d UpdateOutboundChannelsOKData) UpdateOutboundChannelsOKData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdatePhoneNumberRequestNumberLevelRouting returns new OptUpdatePhoneNumberRequestNumberLevelRouting with value set to v.
func NewOptUpdatePhoneNumberRequestNumberLevelRouting(v UpdatePhoneNumberRequestNumberLevelRouting) OptUpdatePhoneNumberRequestNumberLevelRouting {
	return OptUpdatePhoneNumberRequestNumberLevelRouting{
		Value: v,
		Set:   true,
	}
}

// OptUpdatePhoneNumberRequestNumberLevelRouting is optional UpdatePhoneNumberRequestNumberLevelRouting.
type OptUpdatePhoneNumberRequestNumberLevelRouting struct {
	Value UpdatePhoneNumberRequestNumberLevelRouting
	Set   bool
}

// IsSet returns true if OptUpdatePhoneNumberRequestNumberLevelRouting was set.
func (o OptUpdatePhoneNumberRequestNumberLevelRouting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdatePhoneNumberRequestNumberLevelRouting) Reset() {
	var v UpdatePhoneNumberRequestNumberLevelRouting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdatePhoneNumberRequestNumberLevelRouting) SetTo(v UpdatePhoneNumberRequestNumberLevelRouting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdatePhoneNumberRequestNumberLevelRouting) Get() (v UpdatePhoneNumberRequestNumberLevelRouting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdatePhoneNumberRequestNumberLevelRouting) Or(d UpdatePhoneNumberRequestNumberLevelRouting) UpdatePhoneNumberRequestNumberLevelRouting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdatePhoneNumberVoiceSettingsRequest returns new OptUpdatePhoneNumberVoiceSettingsRequest with value set to v.
func NewOptUpdatePhoneNumberVoiceSettingsRequest(v UpdatePhoneNumberVoiceSettingsRequest) OptUpdatePhoneNumberVoiceSettingsRequest {
	return OptUpdatePhoneNumberVoiceSettingsRequest{
		Value: v,
		Set:   true,
	}
}

// OptUpdatePhoneNumberVoiceSettingsRequest is optional UpdatePhoneNumberVoiceSettingsRequest.
type OptUpdatePhoneNumberVoiceSettingsRequest struct {
	Value UpdatePhoneNumberVoiceSettingsRequest
	Set   bool
}

// IsSet returns true if OptUpdatePhoneNumberVoiceSettingsRequest was set.
func (o OptUpdatePhoneNumberVoiceSettingsRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdatePhoneNumberVoiceSettingsRequest) Reset() {
	var v UpdatePhoneNumberVoiceSettingsRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdatePhoneNumberVoiceSettingsRequest) SetTo(v UpdatePhoneNumberVoiceSettingsRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdatePhoneNumberVoiceSettingsRequest) Get() (v UpdatePhoneNumberVoiceSettingsRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdatePhoneNumberVoiceSettingsRequest) Or(d UpdatePhoneNumberVoiceSettingsRequest) UpdatePhoneNumberVoiceSettingsRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdatePhoneNumberVoiceSettingsRequestInboundCallScreening returns new OptUpdatePhoneNumberVoiceSettingsRequestInboundCallScreening with value set to v.
func NewOptUpdatePhoneNumberVoiceSettingsRequestInboundCallScreening(v UpdatePhoneNumberVoiceSettingsRequestInboundCallScreening) OptUpdatePhoneNumberVoiceSettingsRequestInboundCallScreening {
	return OptUpdatePhoneNumberVoiceSettingsRequestInboundCallScreening{
		Value: v,
		Set:   true,
	}
}

// OptUpdatePhoneNumberVoiceSettingsRequestInboundCallScreening is optional UpdatePhoneNumberVoiceSettingsRequestInboundCallScreening.
type OptUpdatePhoneNumberVoiceSettingsRequestInboundCallScreening struct {
	Value UpdatePhoneNumberVoiceSettingsRequestInboundCallScreening
	Set   bool
}

// IsSet returns true if OptUpdatePhoneNumberVoiceSettingsRequestInboundCallScreening was set.
func (o OptUpdatePhoneNumberVoiceSettingsRequestInboundCallScreening) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdatePhoneNumberVoiceSettingsRequestInboundCallScreening) Reset() {
	var v UpdatePhoneNumberVoiceSettingsRequestInboundCallScreening
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdatePhoneNumberVoiceSettingsRequestInboundCallScreening) SetTo(v UpdatePhoneNumberVoiceSettingsRequestInboundCallScreening) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdatePhoneNumberVoiceSettingsRequestInboundCallScreening) Get() (v UpdatePhoneNumberVoiceSettingsRequestInboundCallScreening, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdatePhoneNumberVoiceSettingsRequestInboundCallScreening) Or(d UpdatePhoneNumberVoiceSettingsRequestInboundCallScreening) UpdatePhoneNumberVoiceSettingsRequestInboundCallScreening {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod returns new OptUpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod with value set to v.
func NewOptUpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod(v UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod) OptUpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod {
	return OptUpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod{
		Value: v,
		Set:   true,
	}
}

// OptUpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod is optional UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod.
type OptUpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod struct {
	Value UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod
	Set   bool
}

// IsSet returns true if OptUpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod was set.
func (o OptUpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod) Reset() {
	var v UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod) SetTo(v UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod) Get() (v UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod) Or(d UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod) UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdatePortingOrderActivationSettings returns new OptUpdatePortingOrderActivationSettings with value set to v.
func NewOptUpdatePortingOrderActivationSettings(v UpdatePortingOrderActivationSettings) OptUpdatePortingOrderActivationSettings {
	return OptUpdatePortingOrderActivationSettings{
		Value: v,
		Set:   true,
	}
}

// OptUpdatePortingOrderActivationSettings is optional UpdatePortingOrderActivationSettings.
type OptUpdatePortingOrderActivationSettings struct {
	Value UpdatePortingOrderActivationSettings
	Set   bool
}

// IsSet returns true if OptUpdatePortingOrderActivationSettings was set.
func (o OptUpdatePortingOrderActivationSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdatePortingOrderActivationSettings) Reset() {
	var v UpdatePortingOrderActivationSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdatePortingOrderActivationSettings) SetTo(v UpdatePortingOrderActivationSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdatePortingOrderActivationSettings) Get() (v UpdatePortingOrderActivationSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdatePortingOrderActivationSettings) Or(d UpdatePortingOrderActivationSettings) UpdatePortingOrderActivationSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdatePortingOrderResponseMeta returns new OptUpdatePortingOrderResponseMeta with value set to v.
func NewOptUpdatePortingOrderResponseMeta(v UpdatePortingOrderResponseMeta) OptUpdatePortingOrderResponseMeta {
	return OptUpdatePortingOrderResponseMeta{
		Value: v,
		Set:   true,
	}
}

// OptUpdatePortingOrderResponseMeta is optional UpdatePortingOrderResponseMeta.
type OptUpdatePortingOrderResponseMeta struct {
	Value UpdatePortingOrderResponseMeta
	Set   bool
}

// IsSet returns true if OptUpdatePortingOrderResponseMeta was set.
func (o OptUpdatePortingOrderResponseMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdatePortingOrderResponseMeta) Reset() {
	var v UpdatePortingOrderResponseMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdatePortingOrderResponseMeta) SetTo(v UpdatePortingOrderResponseMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdatePortingOrderResponseMeta) Get() (v UpdatePortingOrderResponseMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdatePortingOrderResponseMeta) Or(d UpdatePortingOrderResponseMeta) UpdatePortingOrderResponseMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateTexmlApplicationRequestInbound returns new OptUpdateTexmlApplicationRequestInbound with value set to v.
func NewOptUpdateTexmlApplicationRequestInbound(v UpdateTexmlApplicationRequestInbound) OptUpdateTexmlApplicationRequestInbound {
	return OptUpdateTexmlApplicationRequestInbound{
		Value: v,
		Set:   true,
	}
}

// OptUpdateTexmlApplicationRequestInbound is optional UpdateTexmlApplicationRequestInbound.
type OptUpdateTexmlApplicationRequestInbound struct {
	Value UpdateTexmlApplicationRequestInbound
	Set   bool
}

// IsSet returns true if OptUpdateTexmlApplicationRequestInbound was set.
func (o OptUpdateTexmlApplicationRequestInbound) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateTexmlApplicationRequestInbound) Reset() {
	var v UpdateTexmlApplicationRequestInbound
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateTexmlApplicationRequestInbound) SetTo(v UpdateTexmlApplicationRequestInbound) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateTexmlApplicationRequestInbound) Get() (v UpdateTexmlApplicationRequestInbound, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateTexmlApplicationRequestInbound) Or(d UpdateTexmlApplicationRequestInbound) UpdateTexmlApplicationRequestInbound {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings returns new OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings with value set to v.
func NewOptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings(v UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings {
	return OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings{
		Value: v,
		Set:   true,
	}
}

// OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings is optional UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings.
type OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings struct {
	Value UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings
	Set   bool
}

// IsSet returns true if OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings was set.
func (o OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) Reset() {
	var v UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) SetTo(v UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) Get() (v UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) Or(d UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateTexmlApplicationRequestOutbound returns new OptUpdateTexmlApplicationRequestOutbound with value set to v.
func NewOptUpdateTexmlApplicationRequestOutbound(v UpdateTexmlApplicationRequestOutbound) OptUpdateTexmlApplicationRequestOutbound {
	return OptUpdateTexmlApplicationRequestOutbound{
		Value: v,
		Set:   true,
	}
}

// OptUpdateTexmlApplicationRequestOutbound is optional UpdateTexmlApplicationRequestOutbound.
type OptUpdateTexmlApplicationRequestOutbound struct {
	Value UpdateTexmlApplicationRequestOutbound
	Set   bool
}

// IsSet returns true if OptUpdateTexmlApplicationRequestOutbound was set.
func (o OptUpdateTexmlApplicationRequestOutbound) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateTexmlApplicationRequestOutbound) Reset() {
	var v UpdateTexmlApplicationRequestOutbound
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateTexmlApplicationRequestOutbound) SetTo(v UpdateTexmlApplicationRequestOutbound) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateTexmlApplicationRequestOutbound) Get() (v UpdateTexmlApplicationRequestOutbound, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateTexmlApplicationRequestOutbound) Or(d UpdateTexmlApplicationRequestOutbound) UpdateTexmlApplicationRequestOutbound {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateTexmlApplicationRequestStatusCallbackMethod returns new OptUpdateTexmlApplicationRequestStatusCallbackMethod with value set to v.
func NewOptUpdateTexmlApplicationRequestStatusCallbackMethod(v UpdateTexmlApplicationRequestStatusCallbackMethod) OptUpdateTexmlApplicationRequestStatusCallbackMethod {
	return OptUpdateTexmlApplicationRequestStatusCallbackMethod{
		Value: v,
		Set:   true,
	}
}

// OptUpdateTexmlApplicationRequestStatusCallbackMethod is optional UpdateTexmlApplicationRequestStatusCallbackMethod.
type OptUpdateTexmlApplicationRequestStatusCallbackMethod struct {
	Value UpdateTexmlApplicationRequestStatusCallbackMethod
	Set   bool
}

// IsSet returns true if OptUpdateTexmlApplicationRequestStatusCallbackMethod was set.
func (o OptUpdateTexmlApplicationRequestStatusCallbackMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateTexmlApplicationRequestStatusCallbackMethod) Reset() {
	var v UpdateTexmlApplicationRequestStatusCallbackMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateTexmlApplicationRequestStatusCallbackMethod) SetTo(v UpdateTexmlApplicationRequestStatusCallbackMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateTexmlApplicationRequestStatusCallbackMethod) Get() (v UpdateTexmlApplicationRequestStatusCallbackMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateTexmlApplicationRequestStatusCallbackMethod) Or(d UpdateTexmlApplicationRequestStatusCallbackMethod) UpdateTexmlApplicationRequestStatusCallbackMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateTexmlApplicationRequestVoiceMethod returns new OptUpdateTexmlApplicationRequestVoiceMethod with value set to v.
func NewOptUpdateTexmlApplicationRequestVoiceMethod(v UpdateTexmlApplicationRequestVoiceMethod) OptUpdateTexmlApplicationRequestVoiceMethod {
	return OptUpdateTexmlApplicationRequestVoiceMethod{
		Value: v,
		Set:   true,
	}
}

// OptUpdateTexmlApplicationRequestVoiceMethod is optional UpdateTexmlApplicationRequestVoiceMethod.
type OptUpdateTexmlApplicationRequestVoiceMethod struct {
	Value UpdateTexmlApplicationRequestVoiceMethod
	Set   bool
}

// IsSet returns true if OptUpdateTexmlApplicationRequestVoiceMethod was set.
func (o OptUpdateTexmlApplicationRequestVoiceMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateTexmlApplicationRequestVoiceMethod) Reset() {
	var v UpdateTexmlApplicationRequestVoiceMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateTexmlApplicationRequestVoiceMethod) SetTo(v UpdateTexmlApplicationRequestVoiceMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateTexmlApplicationRequestVoiceMethod) Get() (v UpdateTexmlApplicationRequestVoiceMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateTexmlApplicationRequestVoiceMethod) Or(d UpdateTexmlApplicationRequestVoiceMethod) UpdateTexmlApplicationRequestVoiceMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateVerifyProfileCallRequest returns new OptUpdateVerifyProfileCallRequest with value set to v.
func NewOptUpdateVerifyProfileCallRequest(v UpdateVerifyProfileCallRequest) OptUpdateVerifyProfileCallRequest {
	return OptUpdateVerifyProfileCallRequest{
		Value: v,
		Set:   true,
	}
}

// OptUpdateVerifyProfileCallRequest is optional UpdateVerifyProfileCallRequest.
type OptUpdateVerifyProfileCallRequest struct {
	Value UpdateVerifyProfileCallRequest
	Set   bool
}

// IsSet returns true if OptUpdateVerifyProfileCallRequest was set.
func (o OptUpdateVerifyProfileCallRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateVerifyProfileCallRequest) Reset() {
	var v UpdateVerifyProfileCallRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateVerifyProfileCallRequest) SetTo(v UpdateVerifyProfileCallRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateVerifyProfileCallRequest) Get() (v UpdateVerifyProfileCallRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateVerifyProfileCallRequest) Or(d UpdateVerifyProfileCallRequest) UpdateVerifyProfileCallRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateVerifyProfileFlashcallRequest returns new OptUpdateVerifyProfileFlashcallRequest with value set to v.
func NewOptUpdateVerifyProfileFlashcallRequest(v UpdateVerifyProfileFlashcallRequest) OptUpdateVerifyProfileFlashcallRequest {
	return OptUpdateVerifyProfileFlashcallRequest{
		Value: v,
		Set:   true,
	}
}

// OptUpdateVerifyProfileFlashcallRequest is optional UpdateVerifyProfileFlashcallRequest.
type OptUpdateVerifyProfileFlashcallRequest struct {
	Value UpdateVerifyProfileFlashcallRequest
	Set   bool
}

// IsSet returns true if OptUpdateVerifyProfileFlashcallRequest was set.
func (o OptUpdateVerifyProfileFlashcallRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateVerifyProfileFlashcallRequest) Reset() {
	var v UpdateVerifyProfileFlashcallRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateVerifyProfileFlashcallRequest) SetTo(v UpdateVerifyProfileFlashcallRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateVerifyProfileFlashcallRequest) Get() (v UpdateVerifyProfileFlashcallRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateVerifyProfileFlashcallRequest) Or(d UpdateVerifyProfileFlashcallRequest) UpdateVerifyProfileFlashcallRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateVerifyProfileSMSRequest returns new OptUpdateVerifyProfileSMSRequest with value set to v.
func NewOptUpdateVerifyProfileSMSRequest(v UpdateVerifyProfileSMSRequest) OptUpdateVerifyProfileSMSRequest {
	return OptUpdateVerifyProfileSMSRequest{
		Value: v,
		Set:   true,
	}
}

// OptUpdateVerifyProfileSMSRequest is optional UpdateVerifyProfileSMSRequest.
type OptUpdateVerifyProfileSMSRequest struct {
	Value UpdateVerifyProfileSMSRequest
	Set   bool
}

// IsSet returns true if OptUpdateVerifyProfileSMSRequest was set.
func (o OptUpdateVerifyProfileSMSRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateVerifyProfileSMSRequest) Reset() {
	var v UpdateVerifyProfileSMSRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateVerifyProfileSMSRequest) SetTo(v UpdateVerifyProfileSMSRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateVerifyProfileSMSRequest) Get() (v UpdateVerifyProfileSMSRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateVerifyProfileSMSRequest) Or(d UpdateVerifyProfileSMSRequest) UpdateVerifyProfileSMSRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdatedAt returns new OptUpdatedAt with value set to v.
func NewOptUpdatedAt(v UpdatedAt) OptUpdatedAt {
	return OptUpdatedAt{
		Value: v,
		Set:   true,
	}
}

// OptUpdatedAt is optional UpdatedAt.
type OptUpdatedAt struct {
	Value UpdatedAt
	Set   bool
}

// IsSet returns true if OptUpdatedAt was set.
func (o OptUpdatedAt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdatedAt) Reset() {
	var v UpdatedAt
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdatedAt) SetTo(v UpdatedAt) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdatedAt) Get() (v UpdatedAt, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdatedAt) Or(d UpdatedAt) UpdatedAt {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUsagePaymentMethod returns new OptUsagePaymentMethod with value set to v.
func NewOptUsagePaymentMethod(v UsagePaymentMethod) OptUsagePaymentMethod {
	return OptUsagePaymentMethod{
		Value: v,
		Set:   true,
	}
}

// OptUsagePaymentMethod is optional UsagePaymentMethod.
type OptUsagePaymentMethod struct {
	Value UsagePaymentMethod
	Set   bool
}

// IsSet returns true if OptUsagePaymentMethod was set.
func (o OptUsagePaymentMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUsagePaymentMethod) Reset() {
	var v UsagePaymentMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUsagePaymentMethod) SetTo(v UsagePaymentMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUsagePaymentMethod) Get() (v UsagePaymentMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUsagePaymentMethod) Or(d UsagePaymentMethod) UsagePaymentMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserBalance returns new OptUserBalance with value set to v.
func NewOptUserBalance(v UserBalance) OptUserBalance {
	return OptUserBalance{
		Value: v,
		Set:   true,
	}
}

// OptUserBalance is optional UserBalance.
type OptUserBalance struct {
	Value UserBalance
	Set   bool
}

// IsSet returns true if OptUserBalance was set.
func (o OptUserBalance) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserBalance) Reset() {
	var v UserBalance
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserBalance) SetTo(v UserBalance) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserBalance) Get() (v UserBalance, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserBalance) Or(d UserBalance) UserBalance {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserBalanceRecordType returns new OptUserBalanceRecordType with value set to v.
func NewOptUserBalanceRecordType(v UserBalanceRecordType) OptUserBalanceRecordType {
	return OptUserBalanceRecordType{
		Value: v,
		Set:   true,
	}
}

// OptUserBalanceRecordType is optional UserBalanceRecordType.
type OptUserBalanceRecordType struct {
	Value UserBalanceRecordType
	Set   bool
}

// IsSet returns true if OptUserBalanceRecordType was set.
func (o OptUserBalanceRecordType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserBalanceRecordType) Reset() {
	var v UserBalanceRecordType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserBalanceRecordType) SetTo(v UserBalanceRecordType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserBalanceRecordType) Get() (v UserBalanceRecordType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserBalanceRecordType) Or(d UserBalanceRecordType) UserBalanceRecordType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerificationProfileRecordType returns new OptVerificationProfileRecordType with value set to v.
func NewOptVerificationProfileRecordType(v VerificationProfileRecordType) OptVerificationProfileRecordType {
	return OptVerificationProfileRecordType{
		Value: v,
		Set:   true,
	}
}

// OptVerificationProfileRecordType is optional VerificationProfileRecordType.
type OptVerificationProfileRecordType struct {
	Value VerificationProfileRecordType
	Set   bool
}

// IsSet returns true if OptVerificationProfileRecordType was set.
func (o OptVerificationProfileRecordType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerificationProfileRecordType) Reset() {
	var v VerificationProfileRecordType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerificationProfileRecordType) SetTo(v VerificationProfileRecordType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerificationProfileRecordType) Get() (v VerificationProfileRecordType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerificationProfileRecordType) Or(d VerificationProfileRecordType) VerificationProfileRecordType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerificationRecordType returns new OptVerificationRecordType with value set to v.
func NewOptVerificationRecordType(v VerificationRecordType) OptVerificationRecordType {
	return OptVerificationRecordType{
		Value: v,
		Set:   true,
	}
}

// OptVerificationRecordType is optional VerificationRecordType.
type OptVerificationRecordType struct {
	Value VerificationRecordType
	Set   bool
}

// IsSet returns true if OptVerificationRecordType was set.
func (o OptVerificationRecordType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerificationRecordType) Reset() {
	var v VerificationRecordType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerificationRecordType) SetTo(v VerificationRecordType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerificationRecordType) Get() (v VerificationRecordType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerificationRecordType) Or(d VerificationRecordType) VerificationRecordType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerificationStatus returns new OptVerificationStatus with value set to v.
func NewOptVerificationStatus(v VerificationStatus) OptVerificationStatus {
	return OptVerificationStatus{
		Value: v,
		Set:   true,
	}
}

// OptVerificationStatus is optional VerificationStatus.
type OptVerificationStatus struct {
	Value VerificationStatus
	Set   bool
}

// IsSet returns true if OptVerificationStatus was set.
func (o OptVerificationStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerificationStatus) Reset() {
	var v VerificationStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerificationStatus) SetTo(v VerificationStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerificationStatus) Get() (v VerificationStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerificationStatus) Or(d VerificationStatus) VerificationStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerificationType returns new OptVerificationType with value set to v.
func NewOptVerificationType(v VerificationType) OptVerificationType {
	return OptVerificationType{
		Value: v,
		Set:   true,
	}
}

// OptVerificationType is optional VerificationType.
type OptVerificationType struct {
	Value VerificationType
	Set   bool
}

// IsSet returns true if OptVerificationType was set.
func (o OptVerificationType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerificationType) Reset() {
	var v VerificationType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerificationType) SetTo(v VerificationType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerificationType) Get() (v VerificationType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerificationType) Or(d VerificationType) VerificationType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerifiedCallsDisplayProfile returns new OptVerifiedCallsDisplayProfile with value set to v.
func NewOptVerifiedCallsDisplayProfile(v VerifiedCallsDisplayProfile) OptVerifiedCallsDisplayProfile {
	return OptVerifiedCallsDisplayProfile{
		Value: v,
		Set:   true,
	}
}

// OptVerifiedCallsDisplayProfile is optional VerifiedCallsDisplayProfile.
type OptVerifiedCallsDisplayProfile struct {
	Value VerifiedCallsDisplayProfile
	Set   bool
}

// IsSet returns true if OptVerifiedCallsDisplayProfile was set.
func (o OptVerifiedCallsDisplayProfile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerifiedCallsDisplayProfile) Reset() {
	var v VerifiedCallsDisplayProfile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerifiedCallsDisplayProfile) SetTo(v VerifiedCallsDisplayProfile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerifiedCallsDisplayProfile) Get() (v VerifiedCallsDisplayProfile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerifiedCallsDisplayProfile) Or(d VerifiedCallsDisplayProfile) VerifiedCallsDisplayProfile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerifiedCallsDisplayProfileBusinessIdentity returns new OptVerifiedCallsDisplayProfileBusinessIdentity with value set to v.
func NewOptVerifiedCallsDisplayProfileBusinessIdentity(v VerifiedCallsDisplayProfileBusinessIdentity) OptVerifiedCallsDisplayProfileBusinessIdentity {
	return OptVerifiedCallsDisplayProfileBusinessIdentity{
		Value: v,
		Set:   true,
	}
}

// OptVerifiedCallsDisplayProfileBusinessIdentity is optional VerifiedCallsDisplayProfileBusinessIdentity.
type OptVerifiedCallsDisplayProfileBusinessIdentity struct {
	Value VerifiedCallsDisplayProfileBusinessIdentity
	Set   bool
}

// IsSet returns true if OptVerifiedCallsDisplayProfileBusinessIdentity was set.
func (o OptVerifiedCallsDisplayProfileBusinessIdentity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerifiedCallsDisplayProfileBusinessIdentity) Reset() {
	var v VerifiedCallsDisplayProfileBusinessIdentity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerifiedCallsDisplayProfileBusinessIdentity) SetTo(v VerifiedCallsDisplayProfileBusinessIdentity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerifiedCallsDisplayProfileBusinessIdentity) Get() (v VerifiedCallsDisplayProfileBusinessIdentity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerifiedCallsDisplayProfileBusinessIdentity) Or(d VerifiedCallsDisplayProfileBusinessIdentity) VerifiedCallsDisplayProfileBusinessIdentity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus returns new OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus with value set to v.
func NewOptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus(v VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus) OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus {
	return OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus{
		Value: v,
		Set:   true,
	}
}

// OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus is optional VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus.
type OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus struct {
	Value VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus
	Set   bool
}

// IsSet returns true if OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus was set.
func (o OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus) Reset() {
	var v VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus) SetTo(v VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus) Get() (v VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus) Or(d VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus) VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus returns new OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus with value set to v.
func NewOptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus(v VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus) OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus {
	return OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus{
		Value: v,
		Set:   true,
	}
}

// OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus is optional VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus.
type OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus struct {
	Value VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus
	Set   bool
}

// IsSet returns true if OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus was set.
func (o OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus) Reset() {
	var v VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus) SetTo(v VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus) Get() (v VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus) Or(d VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus) VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerifiedCallsDisplayProfileStatus returns new OptVerifiedCallsDisplayProfileStatus with value set to v.
func NewOptVerifiedCallsDisplayProfileStatus(v VerifiedCallsDisplayProfileStatus) OptVerifiedCallsDisplayProfileStatus {
	return OptVerifiedCallsDisplayProfileStatus{
		Value: v,
		Set:   true,
	}
}

// OptVerifiedCallsDisplayProfileStatus is optional VerifiedCallsDisplayProfileStatus.
type OptVerifiedCallsDisplayProfileStatus struct {
	Value VerifiedCallsDisplayProfileStatus
	Set   bool
}

// IsSet returns true if OptVerifiedCallsDisplayProfileStatus was set.
func (o OptVerifiedCallsDisplayProfileStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerifiedCallsDisplayProfileStatus) Reset() {
	var v VerifiedCallsDisplayProfileStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerifiedCallsDisplayProfileStatus) SetTo(v VerifiedCallsDisplayProfileStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerifiedCallsDisplayProfileStatus) Get() (v VerifiedCallsDisplayProfileStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerifiedCallsDisplayProfileStatus) Or(d VerifiedCallsDisplayProfileStatus) VerifiedCallsDisplayProfileStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerifiedNumberRecordType returns new OptVerifiedNumberRecordType with value set to v.
func NewOptVerifiedNumberRecordType(v VerifiedNumberRecordType) OptVerifiedNumberRecordType {
	return OptVerifiedNumberRecordType{
		Value: v,
		Set:   true,
	}
}

// OptVerifiedNumberRecordType is optional VerifiedNumberRecordType.
type OptVerifiedNumberRecordType struct {
	Value VerifiedNumberRecordType
	Set   bool
}

// IsSet returns true if OptVerifiedNumberRecordType was set.
func (o OptVerifiedNumberRecordType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerifiedNumberRecordType) Reset() {
	var v VerifiedNumberRecordType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerifiedNumberRecordType) SetTo(v VerifiedNumberRecordType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerifiedNumberRecordType) Get() (v VerifiedNumberRecordType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerifiedNumberRecordType) Or(d VerifiedNumberRecordType) VerifiedNumberRecordType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerifiedNumberResponse returns new OptVerifiedNumberResponse with value set to v.
func NewOptVerifiedNumberResponse(v VerifiedNumberResponse) OptVerifiedNumberResponse {
	return OptVerifiedNumberResponse{
		Value: v,
		Set:   true,
	}
}

// OptVerifiedNumberResponse is optional VerifiedNumberResponse.
type OptVerifiedNumberResponse struct {
	Value VerifiedNumberResponse
	Set   bool
}

// IsSet returns true if OptVerifiedNumberResponse was set.
func (o OptVerifiedNumberResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerifiedNumberResponse) Reset() {
	var v VerifiedNumberResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerifiedNumberResponse) SetTo(v VerifiedNumberResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerifiedNumberResponse) Get() (v VerifiedNumberResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerifiedNumberResponse) Or(d VerifiedNumberResponse) VerifiedNumberResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerifyProfileCallResponse returns new OptVerifyProfileCallResponse with value set to v.
func NewOptVerifyProfileCallResponse(v VerifyProfileCallResponse) OptVerifyProfileCallResponse {
	return OptVerifyProfileCallResponse{
		Value: v,
		Set:   true,
	}
}

// OptVerifyProfileCallResponse is optional VerifyProfileCallResponse.
type OptVerifyProfileCallResponse struct {
	Value VerifyProfileCallResponse
	Set   bool
}

// IsSet returns true if OptVerifyProfileCallResponse was set.
func (o OptVerifyProfileCallResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerifyProfileCallResponse) Reset() {
	var v VerifyProfileCallResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerifyProfileCallResponse) SetTo(v VerifyProfileCallResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerifyProfileCallResponse) Get() (v VerifyProfileCallResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerifyProfileCallResponse) Or(d VerifyProfileCallResponse) VerifyProfileCallResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerifyProfileFlashcallResponse returns new OptVerifyProfileFlashcallResponse with value set to v.
func NewOptVerifyProfileFlashcallResponse(v VerifyProfileFlashcallResponse) OptVerifyProfileFlashcallResponse {
	return OptVerifyProfileFlashcallResponse{
		Value: v,
		Set:   true,
	}
}

// OptVerifyProfileFlashcallResponse is optional VerifyProfileFlashcallResponse.
type OptVerifyProfileFlashcallResponse struct {
	Value VerifyProfileFlashcallResponse
	Set   bool
}

// IsSet returns true if OptVerifyProfileFlashcallResponse was set.
func (o OptVerifyProfileFlashcallResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerifyProfileFlashcallResponse) Reset() {
	var v VerifyProfileFlashcallResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerifyProfileFlashcallResponse) SetTo(v VerifyProfileFlashcallResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerifyProfileFlashcallResponse) Get() (v VerifyProfileFlashcallResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerifyProfileFlashcallResponse) Or(d VerifyProfileFlashcallResponse) VerifyProfileFlashcallResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerifyProfileResponse returns new OptVerifyProfileResponse with value set to v.
func NewOptVerifyProfileResponse(v VerifyProfileResponse) OptVerifyProfileResponse {
	return OptVerifyProfileResponse{
		Value: v,
		Set:   true,
	}
}

// OptVerifyProfileResponse is optional VerifyProfileResponse.
type OptVerifyProfileResponse struct {
	Value VerifyProfileResponse
	Set   bool
}

// IsSet returns true if OptVerifyProfileResponse was set.
func (o OptVerifyProfileResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerifyProfileResponse) Reset() {
	var v VerifyProfileResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerifyProfileResponse) SetTo(v VerifyProfileResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerifyProfileResponse) Get() (v VerifyProfileResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerifyProfileResponse) Or(d VerifyProfileResponse) VerifyProfileResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVerifyProfileSMSResponse returns new OptVerifyProfileSMSResponse with value set to v.
func NewOptVerifyProfileSMSResponse(v VerifyProfileSMSResponse) OptVerifyProfileSMSResponse {
	return OptVerifyProfileSMSResponse{
		Value: v,
		Set:   true,
	}
}

// OptVerifyProfileSMSResponse is optional VerifyProfileSMSResponse.
type OptVerifyProfileSMSResponse struct {
	Value VerifyProfileSMSResponse
	Set   bool
}

// IsSet returns true if OptVerifyProfileSMSResponse was set.
func (o OptVerifyProfileSMSResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVerifyProfileSMSResponse) Reset() {
	var v VerifyProfileSMSResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVerifyProfileSMSResponse) SetTo(v VerifyProfileSMSResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVerifyProfileSMSResponse) Get() (v VerifyProfileSMSResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVerifyProfileSMSResponse) Or(d VerifyProfileSMSResponse) VerifyProfileSMSResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookDelivery returns new OptWebhookDelivery with value set to v.
func NewOptWebhookDelivery(v WebhookDelivery) OptWebhookDelivery {
	return OptWebhookDelivery{
		Value: v,
		Set:   true,
	}
}

// OptWebhookDelivery is optional WebhookDelivery.
type OptWebhookDelivery struct {
	Value WebhookDelivery
	Set   bool
}

// IsSet returns true if OptWebhookDelivery was set.
func (o OptWebhookDelivery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookDelivery) Reset() {
	var v WebhookDelivery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookDelivery) SetTo(v WebhookDelivery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookDelivery) Get() (v WebhookDelivery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookDelivery) Or(d WebhookDelivery) WebhookDelivery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookDeliveryStatus returns new OptWebhookDeliveryStatus with value set to v.
func NewOptWebhookDeliveryStatus(v WebhookDeliveryStatus) OptWebhookDeliveryStatus {
	return OptWebhookDeliveryStatus{
		Value: v,
		Set:   true,
	}
}

// OptWebhookDeliveryStatus is optional WebhookDeliveryStatus.
type OptWebhookDeliveryStatus struct {
	Value WebhookDeliveryStatus
	Set   bool
}

// IsSet returns true if OptWebhookDeliveryStatus was set.
func (o OptWebhookDeliveryStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookDeliveryStatus) Reset() {
	var v WebhookDeliveryStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookDeliveryStatus) SetTo(v WebhookDeliveryStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookDeliveryStatus) Get() (v WebhookDeliveryStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookDeliveryStatus) Or(d WebhookDeliveryStatus) WebhookDeliveryStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookDeliveryWebhook returns new OptWebhookDeliveryWebhook with value set to v.
func NewOptWebhookDeliveryWebhook(v WebhookDeliveryWebhook) OptWebhookDeliveryWebhook {
	return OptWebhookDeliveryWebhook{
		Value: v,
		Set:   true,
	}
}

// OptWebhookDeliveryWebhook is optional WebhookDeliveryWebhook.
type OptWebhookDeliveryWebhook struct {
	Value WebhookDeliveryWebhook
	Set   bool
}

// IsSet returns true if OptWebhookDeliveryWebhook was set.
func (o OptWebhookDeliveryWebhook) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookDeliveryWebhook) Reset() {
	var v WebhookDeliveryWebhook
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookDeliveryWebhook) SetTo(v WebhookDeliveryWebhook) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookDeliveryWebhook) Get() (v WebhookDeliveryWebhook, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookDeliveryWebhook) Or(d WebhookDeliveryWebhook) WebhookDeliveryWebhook {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookDeliveryWebhookPayload returns new OptWebhookDeliveryWebhookPayload with value set to v.
func NewOptWebhookDeliveryWebhookPayload(v WebhookDeliveryWebhookPayload) OptWebhookDeliveryWebhookPayload {
	return OptWebhookDeliveryWebhookPayload{
		Value: v,
		Set:   true,
	}
}

// OptWebhookDeliveryWebhookPayload is optional WebhookDeliveryWebhookPayload.
type OptWebhookDeliveryWebhookPayload struct {
	Value WebhookDeliveryWebhookPayload
	Set   bool
}

// IsSet returns true if OptWebhookDeliveryWebhookPayload was set.
func (o OptWebhookDeliveryWebhookPayload) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookDeliveryWebhookPayload) Reset() {
	var v WebhookDeliveryWebhookPayload
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookDeliveryWebhookPayload) SetTo(v WebhookDeliveryWebhookPayload) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookDeliveryWebhookPayload) Get() (v WebhookDeliveryWebhookPayload, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookDeliveryWebhookPayload) Or(d WebhookDeliveryWebhookPayload) WebhookDeliveryWebhookPayload {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookDeliveryWebhookRecordType returns new OptWebhookDeliveryWebhookRecordType with value set to v.
func NewOptWebhookDeliveryWebhookRecordType(v WebhookDeliveryWebhookRecordType) OptWebhookDeliveryWebhookRecordType {
	return OptWebhookDeliveryWebhookRecordType{
		Value: v,
		Set:   true,
	}
}

// OptWebhookDeliveryWebhookRecordType is optional WebhookDeliveryWebhookRecordType.
type OptWebhookDeliveryWebhookRecordType struct {
	Value WebhookDeliveryWebhookRecordType
	Set   bool
}

// IsSet returns true if OptWebhookDeliveryWebhookRecordType was set.
func (o OptWebhookDeliveryWebhookRecordType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookDeliveryWebhookRecordType) Reset() {
	var v WebhookDeliveryWebhookRecordType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookDeliveryWebhookRecordType) SetTo(v WebhookDeliveryWebhookRecordType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookDeliveryWebhookRecordType) Get() (v WebhookDeliveryWebhookRecordType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookDeliveryWebhookRecordType) Or(d WebhookDeliveryWebhookRecordType) WebhookDeliveryWebhookRecordType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/OutboundCallRecording
type OutboundCallRecording struct {
	// Specifies which calls are recorded.
	CallRecordingType OptOutboundCallRecordingCallRecordingType `json:"call_recording_type"`
	// When call_recording_type is 'by_caller_phone_number', only outbound calls using one of these
	// numbers will be recorded. Numbers must be specified in E164 format.
	CallRecordingCallerPhoneNumbers []string `json:"call_recording_caller_phone_numbers"`
	// When using 'dual' channels, the final audio file will be a stereo recording with the first leg on
	// channel A, and the rest on channel B.
	CallRecordingChannels OptOutboundCallRecordingCallRecordingChannels `json:"call_recording_channels"`
	// The audio file format for calls being recorded.
	CallRecordingFormat OptOutboundCallRecordingCallRecordingFormat `json:"call_recording_format"`
}

// GetCallRecordingType returns the value of CallRecordingType.
func (s *OutboundCallRecording) GetCallRecordingType() OptOutboundCallRecordingCallRecordingType {
	return s.CallRecordingType
}

// GetCallRecordingCallerPhoneNumbers returns the value of CallRecordingCallerPhoneNumbers.
func (s *OutboundCallRecording) GetCallRecordingCallerPhoneNumbers() []string {
	return s.CallRecordingCallerPhoneNumbers
}

// GetCallRecordingChannels returns the value of CallRecordingChannels.
func (s *OutboundCallRecording) GetCallRecordingChannels() OptOutboundCallRecordingCallRecordingChannels {
	return s.CallRecordingChannels
}

// GetCallRecordingFormat returns the value of CallRecordingFormat.
func (s *OutboundCallRecording) GetCallRecordingFormat() OptOutboundCallRecordingCallRecordingFormat {
	return s.CallRecordingFormat
}

// SetCallRecordingType sets the value of CallRecordingType.
func (s *OutboundCallRecording) SetCallRecordingType(val OptOutboundCallRecordingCallRecordingType) {
	s.CallRecordingType = val
}

// SetCallRecordingCallerPhoneNumbers sets the value of CallRecordingCallerPhoneNumbers.
func (s *OutboundCallRecording) SetCallRecordingCallerPhoneNumbers(val []string) {
	s.CallRecordingCallerPhoneNumbers = val
}

// SetCallRecordingChannels sets the value of CallRecordingChannels.
func (s *OutboundCallRecording) SetCallRecordingChannels(val OptOutboundCallRecordingCallRecordingChannels) {
	s.CallRecordingChannels = val
}

// SetCallRecordingFormat sets the value of CallRecordingFormat.
func (s *OutboundCallRecording) SetCallRecordingFormat(val OptOutboundCallRecordingCallRecordingFormat) {
	s.CallRecordingFormat = val
}

// When using 'dual' channels, the final audio file will be a stereo recording with the first leg on
// channel A, and the rest on channel B.
type OutboundCallRecordingCallRecordingChannels string

const (
	OutboundCallRecordingCallRecordingChannelsSingle OutboundCallRecordingCallRecordingChannels = "single"
	OutboundCallRecordingCallRecordingChannelsDual   OutboundCallRecordingCallRecordingChannels = "dual"
)

// AllValues returns all OutboundCallRecordingCallRecordingChannels values.
func (OutboundCallRecordingCallRecordingChannels) AllValues() []OutboundCallRecordingCallRecordingChannels {
	return []OutboundCallRecordingCallRecordingChannels{
		OutboundCallRecordingCallRecordingChannelsSingle,
		OutboundCallRecordingCallRecordingChannelsDual,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OutboundCallRecordingCallRecordingChannels) MarshalText() ([]byte, error) {
	switch s {
	case OutboundCallRecordingCallRecordingChannelsSingle:
		return []byte(s), nil
	case OutboundCallRecordingCallRecordingChannelsDual:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OutboundCallRecordingCallRecordingChannels) UnmarshalText(data []byte) error {
	switch OutboundCallRecordingCallRecordingChannels(data) {
	case OutboundCallRecordingCallRecordingChannelsSingle:
		*s = OutboundCallRecordingCallRecordingChannelsSingle
		return nil
	case OutboundCallRecordingCallRecordingChannelsDual:
		*s = OutboundCallRecordingCallRecordingChannelsDual
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The audio file format for calls being recorded.
type OutboundCallRecordingCallRecordingFormat string

const (
	OutboundCallRecordingCallRecordingFormatWav OutboundCallRecordingCallRecordingFormat = "wav"
	OutboundCallRecordingCallRecordingFormatMp3 OutboundCallRecordingCallRecordingFormat = "mp3"
)

// AllValues returns all OutboundCallRecordingCallRecordingFormat values.
func (OutboundCallRecordingCallRecordingFormat) AllValues() []OutboundCallRecordingCallRecordingFormat {
	return []OutboundCallRecordingCallRecordingFormat{
		OutboundCallRecordingCallRecordingFormatWav,
		OutboundCallRecordingCallRecordingFormatMp3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OutboundCallRecordingCallRecordingFormat) MarshalText() ([]byte, error) {
	switch s {
	case OutboundCallRecordingCallRecordingFormatWav:
		return []byte(s), nil
	case OutboundCallRecordingCallRecordingFormatMp3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OutboundCallRecordingCallRecordingFormat) UnmarshalText(data []byte) error {
	switch OutboundCallRecordingCallRecordingFormat(data) {
	case OutboundCallRecordingCallRecordingFormatWav:
		*s = OutboundCallRecordingCallRecordingFormatWav
		return nil
	case OutboundCallRecordingCallRecordingFormatMp3:
		*s = OutboundCallRecordingCallRecordingFormatMp3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Specifies which calls are recorded.
type OutboundCallRecordingCallRecordingType string

const (
	OutboundCallRecordingCallRecordingTypeAll                 OutboundCallRecordingCallRecordingType = "all"
	OutboundCallRecordingCallRecordingTypeNone                OutboundCallRecordingCallRecordingType = "none"
	OutboundCallRecordingCallRecordingTypeByCallerPhoneNumber OutboundCallRecordingCallRecordingType = "by_caller_phone_number"
)

// AllValues returns all OutboundCallRecordingCallRecordingType values.
func (OutboundCallRecordingCallRecordingType) AllValues() []OutboundCallRecordingCallRecordingType {
	return []OutboundCallRecordingCallRecordingType{
		OutboundCallRecordingCallRecordingTypeAll,
		OutboundCallRecordingCallRecordingTypeNone,
		OutboundCallRecordingCallRecordingTypeByCallerPhoneNumber,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OutboundCallRecordingCallRecordingType) MarshalText() ([]byte, error) {
	switch s {
	case OutboundCallRecordingCallRecordingTypeAll:
		return []byte(s), nil
	case OutboundCallRecordingCallRecordingTypeNone:
		return []byte(s), nil
	case OutboundCallRecordingCallRecordingTypeByCallerPhoneNumber:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OutboundCallRecordingCallRecordingType) UnmarshalText(data []byte) error {
	switch OutboundCallRecordingCallRecordingType(data) {
	case OutboundCallRecordingCallRecordingTypeAll:
		*s = OutboundCallRecordingCallRecordingTypeAll
		return nil
	case OutboundCallRecordingCallRecordingTypeNone:
		*s = OutboundCallRecordingCallRecordingTypeNone
		return nil
	case OutboundCallRecordingCallRecordingTypeByCallerPhoneNumber:
		*s = OutboundCallRecordingCallRecordingTypeByCallerPhoneNumber
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/OutboundMessagePayload
type OutboundMessagePayload struct {
	// Identifies the type of the resource.
	RecordType OptOutboundMessagePayloadRecordType `json:"record_type"`
	// The direction of the message. Inbound messages are sent to you whereas outbound messages are sent
	// from you.
	Direction OptOutboundMessagePayloadDirection `json:"direction"`
	// Identifies the type of resource.
	ID OptUUID `json:"id"`
	// The type of message.
	Type OptOutboundMessagePayloadType `json:"type"`
	// Unique identifier for a messaging profile.
	MessagingProfileID OptString `json:"messaging_profile_id"`
	// The id of the organization the messaging profile belongs to.
	OrganizationID OptUUID                        `json:"organization_id"`
	From           OptOutboundMessagePayloadFrom  `json:"from"`
	To             []OutboundMessagePayloadToItem `json:"to"`
	// Message body (i.e., content) as a non-empty string.
	// **Required for SMS**.
	Text OptString `json:"text"`
	// Subject of multimedia message.
	Subject OptNilString                      `json:"subject"`
	Media   []OutboundMessagePayloadMediaItem `json:"media"`
	// The URL where webhooks related to this message will be sent.
	WebhookURL OptNilString `json:"webhook_url"`
	// The failover URL where webhooks related to this message will be sent if sending to the primary URL
	// fails.
	WebhookFailoverURL OptNilString `json:"webhook_failover_url"`
	// Encoding scheme used for the message body.
	Encoding OptString `json:"encoding"`
	// Number of parts into which the message's body must be split.
	Parts OptInt `json:"parts"`
	// Tags associated with the resource.
	Tags []string                         `json:"tags"`
	Cost OptNilOutboundMessagePayloadCost `json:"cost"`
	// ISO 8601 formatted date indicating when the message request was received.
	ReceivedAt OptDateTime `json:"received_at"`
	// ISO 8601 formatted date indicating when the message was sent.
	SentAt OptDateTime `json:"sent_at"`
	// ISO 8601 formatted date indicating when the message was finalized.
	CompletedAt OptDateTime `json:"completed_at"`
	// Message must be out of the queue by this time or else it will be discarded and marked as
	// 'sending_failed'. Once the message moves out of the queue, this field will be nulled.
	ValidUntil OptNilDateTime `json:"valid_until"`
	// These errors may point at addressees when referring to unsuccessful/unconfirmed delivery statuses.
	Errors []Error `json:"errors"`
}

// GetRecordType returns the value of RecordType.
func (s *OutboundMessagePayload) GetRecordType() OptOutboundMessagePayloadRecordType {
	return s.RecordType
}

// GetDirection returns the value of Direction.
func (s *OutboundMessagePayload) GetDirection() OptOutboundMessagePayloadDirection {
	return s.Direction
}

// GetID returns the value of ID.
func (s *OutboundMessagePayload) GetID() OptUUID {
	return s.ID
}

// GetType returns the value of Type.
func (s *OutboundMessagePayload) GetType() OptOutboundMessagePayloadType {
	return s.Type
}

// GetMessagingProfileID returns the value of MessagingProfileID.
func (s *OutboundMessagePayload) GetMessagingProfileID() OptString {
	return s.MessagingProfileID
}

// GetOrganizationID returns the value of OrganizationID.
func (s *OutboundMessagePayload) GetOrganizationID() OptUUID {
	return s.OrganizationID
}

// GetFrom returns the value of From.
func (s *OutboundMessagePayload) GetFrom() OptOutboundMessagePayloadFrom {
	return s.From
}

// GetTo returns the value of To.
func (s *OutboundMessagePayload) GetTo() []OutboundMessagePayloadToItem {
	return s.To
}

// GetText returns the value of Text.
func (s *OutboundMessagePayload) GetText() OptString {
	return s.Text
}

// GetSubject returns the value of Subject.
func (s *OutboundMessagePayload) GetSubject() OptNilString {
	return s.Subject
}

// GetMedia returns the value of Media.
func (s *OutboundMessagePayload) GetMedia() []OutboundMessagePayloadMediaItem {
	return s.Media
}

// GetWebhookURL returns the value of WebhookURL.
func (s *OutboundMessagePayload) GetWebhookURL() OptNilString {
	return s.WebhookURL
}

// GetWebhookFailoverURL returns the value of WebhookFailoverURL.
func (s *OutboundMessagePayload) GetWebhookFailoverURL() OptNilString {
	return s.WebhookFailoverURL
}

// GetEncoding returns the value of Encoding.
func (s *OutboundMessagePayload) GetEncoding() OptString {
	return s.Encoding
}

// GetParts returns the value of Parts.
func (s *OutboundMessagePayload) GetParts() OptInt {
	return s.Parts
}

// GetTags returns the value of Tags.
func (s *OutboundMessagePayload) GetTags() []string {
	return s.Tags
}

// GetCost returns the value of Cost.
func (s *OutboundMessagePayload) GetCost() OptNilOutboundMessagePayloadCost {
	return s.Cost
}

// GetReceivedAt returns the value of ReceivedAt.
func (s *OutboundMessagePayload) GetReceivedAt() OptDateTime {
	return s.ReceivedAt
}

// GetSentAt returns the value of SentAt.
func (s *OutboundMessagePayload) GetSentAt() OptDateTime {
	return s.SentAt
}

// GetCompletedAt returns the value of CompletedAt.
func (s *OutboundMessagePayload) GetCompletedAt() OptDateTime {
	return s.CompletedAt
}

// GetValidUntil returns the value of ValidUntil.
func (s *OutboundMessagePayload) GetValidUntil() OptNilDateTime {
	return s.ValidUntil
}

// GetErrors returns the value of Errors.
func (s *OutboundMessagePayload) GetErrors() []Error {
	return s.Errors
}

// SetRecordType sets the value of RecordType.
func (s *OutboundMessagePayload) SetRecordType(val OptOutboundMessagePayloadRecordType) {
	s.RecordType = val
}

// SetDirection sets the value of Direction.
func (s *OutboundMessagePayload) SetDirection(val OptOutboundMessagePayloadDirection) {
	s.Direction = val
}

// SetID sets the value of ID.
func (s *OutboundMessagePayload) SetID(val OptUUID) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *OutboundMessagePayload) SetType(val OptOutboundMessagePayloadType) {
	s.Type = val
}

// SetMessagingProfileID sets the value of MessagingProfileID.
func (s *OutboundMessagePayload) SetMessagingProfileID(val OptString) {
	s.MessagingProfileID = val
}

// SetOrganizationID sets the value of OrganizationID.
func (s *OutboundMessagePayload) SetOrganizationID(val OptUUID) {
	s.OrganizationID = val
}

// SetFrom sets the value of From.
func (s *OutboundMessagePayload) SetFrom(val OptOutboundMessagePayloadFrom) {
	s.From = val
}

// SetTo sets the value of To.
func (s *OutboundMessagePayload) SetTo(val []OutboundMessagePayloadToItem) {
	s.To = val
}

// SetText sets the value of Text.
func (s *OutboundMessagePayload) SetText(val OptString) {
	s.Text = val
}

// SetSubject sets the value of Subject.
func (s *OutboundMessagePayload) SetSubject(val OptNilString) {
	s.Subject = val
}

// SetMedia sets the value of Media.
func (s *OutboundMessagePayload) SetMedia(val []OutboundMessagePayloadMediaItem) {
	s.Media = val
}

// SetWebhookURL sets the value of WebhookURL.
func (s *OutboundMessagePayload) SetWebhookURL(val OptNilString) {
	s.WebhookURL = val
}

// SetWebhookFailoverURL sets the value of WebhookFailoverURL.
func (s *OutboundMessagePayload) SetWebhookFailoverURL(val OptNilString) {
	s.WebhookFailoverURL = val
}

// SetEncoding sets the value of Encoding.
func (s *OutboundMessagePayload) SetEncoding(val OptString) {
	s.Encoding = val
}

// SetParts sets the value of Parts.
func (s *OutboundMessagePayload) SetParts(val OptInt) {
	s.Parts = val
}

// SetTags sets the value of Tags.
func (s *OutboundMessagePayload) SetTags(val []string) {
	s.Tags = val
}

// SetCost sets the value of Cost.
func (s *OutboundMessagePayload) SetCost(val OptNilOutboundMessagePayloadCost) {
	s.Cost = val
}

// SetReceivedAt sets the value of ReceivedAt.
func (s *OutboundMessagePayload) SetReceivedAt(val OptDateTime) {
	s.ReceivedAt = val
}

// SetSentAt sets the value of SentAt.
func (s *OutboundMessagePayload) SetSentAt(val OptDateTime) {
	s.SentAt = val
}

// SetCompletedAt sets the value of CompletedAt.
func (s *OutboundMessagePayload) SetCompletedAt(val OptDateTime) {
	s.CompletedAt = val
}

// SetValidUntil sets the value of ValidUntil.
func (s *OutboundMessagePayload) SetValidUntil(val OptNilDateTime) {
	s.ValidUntil = val
}

// SetErrors sets the value of Errors.
func (s *OutboundMessagePayload) SetErrors(val []Error) {
	s.Errors = val
}

type OutboundMessagePayloadCost struct {
	// The amount deducted from your account.
	Amount OptString `json:"amount"`
	// The ISO 4217 currency identifier.
	Currency OptString `json:"currency"`
}

// GetAmount returns the value of Amount.
func (s *OutboundMessagePayloadCost) GetAmount() OptString {
	return s.Amount
}

// GetCurrency returns the value of Currency.
func (s *OutboundMessagePayloadCost) GetCurrency() OptString {
	return s.Currency
}

// SetAmount sets the value of Amount.
func (s *OutboundMessagePayloadCost) SetAmount(val OptString) {
	s.Amount = val
}

// SetCurrency sets the value of Currency.
func (s *OutboundMessagePayloadCost) SetCurrency(val OptString) {
	s.Currency = val
}

// The direction of the message. Inbound messages are sent to you whereas outbound messages are sent
// from you.
type OutboundMessagePayloadDirection string

const (
	OutboundMessagePayloadDirectionOutbound OutboundMessagePayloadDirection = "outbound"
)

// AllValues returns all OutboundMessagePayloadDirection values.
func (OutboundMessagePayloadDirection) AllValues() []OutboundMessagePayloadDirection {
	return []OutboundMessagePayloadDirection{
		OutboundMessagePayloadDirectionOutbound,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OutboundMessagePayloadDirection) MarshalText() ([]byte, error) {
	switch s {
	case OutboundMessagePayloadDirectionOutbound:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OutboundMessagePayloadDirection) UnmarshalText(data []byte) error {
	switch OutboundMessagePayloadDirection(data) {
	case OutboundMessagePayloadDirectionOutbound:
		*s = OutboundMessagePayloadDirectionOutbound
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type OutboundMessagePayloadFrom struct {
	// Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code).
	PhoneNumber OptString `json:"phone_number"`
	// The carrier of the receiver.
	Carrier OptString `json:"carrier"`
	// The line-type of the receiver.
	LineType OptOutboundMessagePayloadFromLineType `json:"line_type"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *OutboundMessagePayloadFrom) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetCarrier returns the value of Carrier.
func (s *OutboundMessagePayloadFrom) GetCarrier() OptString {
	return s.Carrier
}

// GetLineType returns the value of LineType.
func (s *OutboundMessagePayloadFrom) GetLineType() OptOutboundMessagePayloadFromLineType {
	return s.LineType
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *OutboundMessagePayloadFrom) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetCarrier sets the value of Carrier.
func (s *OutboundMessagePayloadFrom) SetCarrier(val OptString) {
	s.Carrier = val
}

// SetLineType sets the value of LineType.
func (s *OutboundMessagePayloadFrom) SetLineType(val OptOutboundMessagePayloadFromLineType) {
	s.LineType = val
}

// The line-type of the receiver.
type OutboundMessagePayloadFromLineType string

const (
	OutboundMessagePayloadFromLineTypeWireline        OutboundMessagePayloadFromLineType = "Wireline"
	OutboundMessagePayloadFromLineTypeWireless        OutboundMessagePayloadFromLineType = "Wireless"
	OutboundMessagePayloadFromLineTypeVoWiFi          OutboundMessagePayloadFromLineType = "VoWiFi"
	OutboundMessagePayloadFromLineTypeVoIP            OutboundMessagePayloadFromLineType = "VoIP"
	OutboundMessagePayloadFromLineTypePrePaidWireless OutboundMessagePayloadFromLineType = "Pre-Paid Wireless"
	OutboundMessagePayloadFromLineTypeEmpty           OutboundMessagePayloadFromLineType = ""
)

// AllValues returns all OutboundMessagePayloadFromLineType values.
func (OutboundMessagePayloadFromLineType) AllValues() []OutboundMessagePayloadFromLineType {
	return []OutboundMessagePayloadFromLineType{
		OutboundMessagePayloadFromLineTypeWireline,
		OutboundMessagePayloadFromLineTypeWireless,
		OutboundMessagePayloadFromLineTypeVoWiFi,
		OutboundMessagePayloadFromLineTypeVoIP,
		OutboundMessagePayloadFromLineTypePrePaidWireless,
		OutboundMessagePayloadFromLineTypeEmpty,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OutboundMessagePayloadFromLineType) MarshalText() ([]byte, error) {
	switch s {
	case OutboundMessagePayloadFromLineTypeWireline:
		return []byte(s), nil
	case OutboundMessagePayloadFromLineTypeWireless:
		return []byte(s), nil
	case OutboundMessagePayloadFromLineTypeVoWiFi:
		return []byte(s), nil
	case OutboundMessagePayloadFromLineTypeVoIP:
		return []byte(s), nil
	case OutboundMessagePayloadFromLineTypePrePaidWireless:
		return []byte(s), nil
	case OutboundMessagePayloadFromLineTypeEmpty:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OutboundMessagePayloadFromLineType) UnmarshalText(data []byte) error {
	switch OutboundMessagePayloadFromLineType(data) {
	case OutboundMessagePayloadFromLineTypeWireline:
		*s = OutboundMessagePayloadFromLineTypeWireline
		return nil
	case OutboundMessagePayloadFromLineTypeWireless:
		*s = OutboundMessagePayloadFromLineTypeWireless
		return nil
	case OutboundMessagePayloadFromLineTypeVoWiFi:
		*s = OutboundMessagePayloadFromLineTypeVoWiFi
		return nil
	case OutboundMessagePayloadFromLineTypeVoIP:
		*s = OutboundMessagePayloadFromLineTypeVoIP
		return nil
	case OutboundMessagePayloadFromLineTypePrePaidWireless:
		*s = OutboundMessagePayloadFromLineTypePrePaidWireless
		return nil
	case OutboundMessagePayloadFromLineTypeEmpty:
		*s = OutboundMessagePayloadFromLineTypeEmpty
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type OutboundMessagePayloadMediaItem struct {
	// The url of the media requested to be sent.
	URL OptString `json:"url"`
	// The MIME type of the requested media.
	ContentType OptNilString `json:"content_type"`
	// The SHA256 hash of the requested media.
	SHA256 OptNilString `json:"sha256"`
	// The size of the requested media.
	Size OptNilInt `json:"size"`
}

// GetURL returns the value of URL.
func (s *OutboundMessagePayloadMediaItem) GetURL() OptString {
	return s.URL
}

// GetContentType returns the value of ContentType.
func (s *OutboundMessagePayloadMediaItem) GetContentType() OptNilString {
	return s.ContentType
}

// GetSHA256 returns the value of SHA256.
func (s *OutboundMessagePayloadMediaItem) GetSHA256() OptNilString {
	return s.SHA256
}

// GetSize returns the value of Size.
func (s *OutboundMessagePayloadMediaItem) GetSize() OptNilInt {
	return s.Size
}

// SetURL sets the value of URL.
func (s *OutboundMessagePayloadMediaItem) SetURL(val OptString) {
	s.URL = val
}

// SetContentType sets the value of ContentType.
func (s *OutboundMessagePayloadMediaItem) SetContentType(val OptNilString) {
	s.ContentType = val
}

// SetSHA256 sets the value of SHA256.
func (s *OutboundMessagePayloadMediaItem) SetSHA256(val OptNilString) {
	s.SHA256 = val
}

// SetSize sets the value of Size.
func (s *OutboundMessagePayloadMediaItem) SetSize(val OptNilInt) {
	s.Size = val
}

// Identifies the type of the resource.
type OutboundMessagePayloadRecordType string

const (
	OutboundMessagePayloadRecordTypeMessage OutboundMessagePayloadRecordType = "message"
)

// AllValues returns all OutboundMessagePayloadRecordType values.
func (OutboundMessagePayloadRecordType) AllValues() []OutboundMessagePayloadRecordType {
	return []OutboundMessagePayloadRecordType{
		OutboundMessagePayloadRecordTypeMessage,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OutboundMessagePayloadRecordType) MarshalText() ([]byte, error) {
	switch s {
	case OutboundMessagePayloadRecordTypeMessage:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OutboundMessagePayloadRecordType) UnmarshalText(data []byte) error {
	switch OutboundMessagePayloadRecordType(data) {
	case OutboundMessagePayloadRecordTypeMessage:
		*s = OutboundMessagePayloadRecordTypeMessage
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type OutboundMessagePayloadToItem struct {
	// Receiving address (+E.164 formatted phone number or short code).
	PhoneNumber OptString `json:"phone_number"`
	// The delivery status of the message.
	Status OptOutboundMessagePayloadToItemStatus `json:"status"`
	// The carrier of the receiver.
	Carrier OptString `json:"carrier"`
	// The line-type of the receiver.
	LineType OptOutboundMessagePayloadToItemLineType `json:"line_type"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *OutboundMessagePayloadToItem) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetStatus returns the value of Status.
func (s *OutboundMessagePayloadToItem) GetStatus() OptOutboundMessagePayloadToItemStatus {
	return s.Status
}

// GetCarrier returns the value of Carrier.
func (s *OutboundMessagePayloadToItem) GetCarrier() OptString {
	return s.Carrier
}

// GetLineType returns the value of LineType.
func (s *OutboundMessagePayloadToItem) GetLineType() OptOutboundMessagePayloadToItemLineType {
	return s.LineType
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *OutboundMessagePayloadToItem) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetStatus sets the value of Status.
func (s *OutboundMessagePayloadToItem) SetStatus(val OptOutboundMessagePayloadToItemStatus) {
	s.Status = val
}

// SetCarrier sets the value of Carrier.
func (s *OutboundMessagePayloadToItem) SetCarrier(val OptString) {
	s.Carrier = val
}

// SetLineType sets the value of LineType.
func (s *OutboundMessagePayloadToItem) SetLineType(val OptOutboundMessagePayloadToItemLineType) {
	s.LineType = val
}

// The line-type of the receiver.
type OutboundMessagePayloadToItemLineType string

const (
	OutboundMessagePayloadToItemLineTypeWireline        OutboundMessagePayloadToItemLineType = "Wireline"
	OutboundMessagePayloadToItemLineTypeWireless        OutboundMessagePayloadToItemLineType = "Wireless"
	OutboundMessagePayloadToItemLineTypeVoWiFi          OutboundMessagePayloadToItemLineType = "VoWiFi"
	OutboundMessagePayloadToItemLineTypeVoIP            OutboundMessagePayloadToItemLineType = "VoIP"
	OutboundMessagePayloadToItemLineTypePrePaidWireless OutboundMessagePayloadToItemLineType = "Pre-Paid Wireless"
	OutboundMessagePayloadToItemLineTypeEmpty           OutboundMessagePayloadToItemLineType = ""
)

// AllValues returns all OutboundMessagePayloadToItemLineType values.
func (OutboundMessagePayloadToItemLineType) AllValues() []OutboundMessagePayloadToItemLineType {
	return []OutboundMessagePayloadToItemLineType{
		OutboundMessagePayloadToItemLineTypeWireline,
		OutboundMessagePayloadToItemLineTypeWireless,
		OutboundMessagePayloadToItemLineTypeVoWiFi,
		OutboundMessagePayloadToItemLineTypeVoIP,
		OutboundMessagePayloadToItemLineTypePrePaidWireless,
		OutboundMessagePayloadToItemLineTypeEmpty,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OutboundMessagePayloadToItemLineType) MarshalText() ([]byte, error) {
	switch s {
	case OutboundMessagePayloadToItemLineTypeWireline:
		return []byte(s), nil
	case OutboundMessagePayloadToItemLineTypeWireless:
		return []byte(s), nil
	case OutboundMessagePayloadToItemLineTypeVoWiFi:
		return []byte(s), nil
	case OutboundMessagePayloadToItemLineTypeVoIP:
		return []byte(s), nil
	case OutboundMessagePayloadToItemLineTypePrePaidWireless:
		return []byte(s), nil
	case OutboundMessagePayloadToItemLineTypeEmpty:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OutboundMessagePayloadToItemLineType) UnmarshalText(data []byte) error {
	switch OutboundMessagePayloadToItemLineType(data) {
	case OutboundMessagePayloadToItemLineTypeWireline:
		*s = OutboundMessagePayloadToItemLineTypeWireline
		return nil
	case OutboundMessagePayloadToItemLineTypeWireless:
		*s = OutboundMessagePayloadToItemLineTypeWireless
		return nil
	case OutboundMessagePayloadToItemLineTypeVoWiFi:
		*s = OutboundMessagePayloadToItemLineTypeVoWiFi
		return nil
	case OutboundMessagePayloadToItemLineTypeVoIP:
		*s = OutboundMessagePayloadToItemLineTypeVoIP
		return nil
	case OutboundMessagePayloadToItemLineTypePrePaidWireless:
		*s = OutboundMessagePayloadToItemLineTypePrePaidWireless
		return nil
	case OutboundMessagePayloadToItemLineTypeEmpty:
		*s = OutboundMessagePayloadToItemLineTypeEmpty
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The delivery status of the message.
type OutboundMessagePayloadToItemStatus string

const (
	OutboundMessagePayloadToItemStatusQueued              OutboundMessagePayloadToItemStatus = "queued"
	OutboundMessagePayloadToItemStatusSending             OutboundMessagePayloadToItemStatus = "sending"
	OutboundMessagePayloadToItemStatusSent                OutboundMessagePayloadToItemStatus = "sent"
	OutboundMessagePayloadToItemStatusExpired             OutboundMessagePayloadToItemStatus = "expired"
	OutboundMessagePayloadToItemStatusSendingFailed       OutboundMessagePayloadToItemStatus = "sending_failed"
	OutboundMessagePayloadToItemStatusDeliveryUnconfirmed OutboundMessagePayloadToItemStatus = "delivery_unconfirmed"
	OutboundMessagePayloadToItemStatusDelivered           OutboundMessagePayloadToItemStatus = "delivered"
	OutboundMessagePayloadToItemStatusDeliveryFailed      OutboundMessagePayloadToItemStatus = "delivery_failed"
)

// AllValues returns all OutboundMessagePayloadToItemStatus values.
func (OutboundMessagePayloadToItemStatus) AllValues() []OutboundMessagePayloadToItemStatus {
	return []OutboundMessagePayloadToItemStatus{
		OutboundMessagePayloadToItemStatusQueued,
		OutboundMessagePayloadToItemStatusSending,
		OutboundMessagePayloadToItemStatusSent,
		OutboundMessagePayloadToItemStatusExpired,
		OutboundMessagePayloadToItemStatusSendingFailed,
		OutboundMessagePayloadToItemStatusDeliveryUnconfirmed,
		OutboundMessagePayloadToItemStatusDelivered,
		OutboundMessagePayloadToItemStatusDeliveryFailed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OutboundMessagePayloadToItemStatus) MarshalText() ([]byte, error) {
	switch s {
	case OutboundMessagePayloadToItemStatusQueued:
		return []byte(s), nil
	case OutboundMessagePayloadToItemStatusSending:
		return []byte(s), nil
	case OutboundMessagePayloadToItemStatusSent:
		return []byte(s), nil
	case OutboundMessagePayloadToItemStatusExpired:
		return []byte(s), nil
	case OutboundMessagePayloadToItemStatusSendingFailed:
		return []byte(s), nil
	case OutboundMessagePayloadToItemStatusDeliveryUnconfirmed:
		return []byte(s), nil
	case OutboundMessagePayloadToItemStatusDelivered:
		return []byte(s), nil
	case OutboundMessagePayloadToItemStatusDeliveryFailed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OutboundMessagePayloadToItemStatus) UnmarshalText(data []byte) error {
	switch OutboundMessagePayloadToItemStatus(data) {
	case OutboundMessagePayloadToItemStatusQueued:
		*s = OutboundMessagePayloadToItemStatusQueued
		return nil
	case OutboundMessagePayloadToItemStatusSending:
		*s = OutboundMessagePayloadToItemStatusSending
		return nil
	case OutboundMessagePayloadToItemStatusSent:
		*s = OutboundMessagePayloadToItemStatusSent
		return nil
	case OutboundMessagePayloadToItemStatusExpired:
		*s = OutboundMessagePayloadToItemStatusExpired
		return nil
	case OutboundMessagePayloadToItemStatusSendingFailed:
		*s = OutboundMessagePayloadToItemStatusSendingFailed
		return nil
	case OutboundMessagePayloadToItemStatusDeliveryUnconfirmed:
		*s = OutboundMessagePayloadToItemStatusDeliveryUnconfirmed
		return nil
	case OutboundMessagePayloadToItemStatusDelivered:
		*s = OutboundMessagePayloadToItemStatusDelivered
		return nil
	case OutboundMessagePayloadToItemStatusDeliveryFailed:
		*s = OutboundMessagePayloadToItemStatusDeliveryFailed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The type of message.
type OutboundMessagePayloadType string

const (
	OutboundMessagePayloadTypeSMS OutboundMessagePayloadType = "SMS"
	OutboundMessagePayloadTypeMMS OutboundMessagePayloadType = "MMS"
)

// AllValues returns all OutboundMessagePayloadType values.
func (OutboundMessagePayloadType) AllValues() []OutboundMessagePayloadType {
	return []OutboundMessagePayloadType{
		OutboundMessagePayloadTypeSMS,
		OutboundMessagePayloadTypeMMS,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OutboundMessagePayloadType) MarshalText() ([]byte, error) {
	switch s {
	case OutboundMessagePayloadTypeSMS:
		return []byte(s), nil
	case OutboundMessagePayloadTypeMMS:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OutboundMessagePayloadType) UnmarshalText(data []byte) error {
	switch OutboundMessagePayloadType(data) {
	case OutboundMessagePayloadTypeSMS:
		*s = OutboundMessagePayloadTypeSMS
		return nil
	case OutboundMessagePayloadTypeMMS:
		*s = OutboundMessagePayloadTypeMMS
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/OutboundVoiceProfile
type OutboundVoiceProfile struct {
	// Identifies the resource.
	ID OptStringInt64 `json:"id"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	// A user-supplied name to help with organization.
	Name string `json:"name"`
	// Amount of connections associated with this outbound voice profile.
	ConnectionsCount OptInt         `json:"connections_count"`
	TrafficType      OptTrafficType `json:"traffic_type"`
	ServicePlan      OptServicePlan `json:"service_plan"`
	// Must be no more than your global concurrent call limit. Null means no limit.
	ConcurrentCallLimit OptNilInt `json:"concurrent_call_limit"`
	// Specifies whether the outbound voice profile can be used. Disabled profiles will result in
	// outbound calls being blocked for the associated Connections.
	Enabled            OptBool               `json:"enabled"`
	Tags               []string              `json:"tags"`
	UsagePaymentMethod OptUsagePaymentMethod `json:"usage_payment_method"`
	// The list of destinations you want to be able to call using this outbound voice profile formatted
	// in alpha2.
	WhitelistedDestinations []string `json:"whitelisted_destinations"`
	// Maximum rate (price per minute) for a Destination to be allowed when making outbound calls.
	MaxDestinationRate OptFloat64 `json:"max_destination_rate"`
	// The maximum amount of usage charges, in USD, you want Telnyx to allow on this outbound voice
	// profile in a day before disallowing new calls.
	DailySpendLimit OptString `json:"daily_spend_limit"`
	// Specifies whether to enforce the daily_spend_limit on this outbound voice profile.
	DailySpendLimitEnabled OptBool                  `json:"daily_spend_limit_enabled"`
	CallRecording          OptOutboundCallRecording `json:"call_recording"`
	// The ID of the billing group associated with the outbound proflile. Defaults to null (for no group
	// assigned).
	BillingGroupID OptNilUUID `json:"billing_group_id"`
	// ISO 8601 formatted date-time indicating when the resource was created.
	CreatedAt OptString `json:"created_at"`
	// ISO 8601 formatted date-time indicating when the resource was updated.
	UpdatedAt OptString `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *OutboundVoiceProfile) GetID() OptStringInt64 {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *OutboundVoiceProfile) GetRecordType() OptString {
	return s.RecordType
}

// GetName returns the value of Name.
func (s *OutboundVoiceProfile) GetName() string {
	return s.Name
}

// GetConnectionsCount returns the value of ConnectionsCount.
func (s *OutboundVoiceProfile) GetConnectionsCount() OptInt {
	return s.ConnectionsCount
}

// GetTrafficType returns the value of TrafficType.
func (s *OutboundVoiceProfile) GetTrafficType() OptTrafficType {
	return s.TrafficType
}

// GetServicePlan returns the value of ServicePlan.
func (s *OutboundVoiceProfile) GetServicePlan() OptServicePlan {
	return s.ServicePlan
}

// GetConcurrentCallLimit returns the value of ConcurrentCallLimit.
func (s *OutboundVoiceProfile) GetConcurrentCallLimit() OptNilInt {
	return s.ConcurrentCallLimit
}

// GetEnabled returns the value of Enabled.
func (s *OutboundVoiceProfile) GetEnabled() OptBool {
	return s.Enabled
}

// GetTags returns the value of Tags.
func (s *OutboundVoiceProfile) GetTags() []string {
	return s.Tags
}

// GetUsagePaymentMethod returns the value of UsagePaymentMethod.
func (s *OutboundVoiceProfile) GetUsagePaymentMethod() OptUsagePaymentMethod {
	return s.UsagePaymentMethod
}

// GetWhitelistedDestinations returns the value of WhitelistedDestinations.
func (s *OutboundVoiceProfile) GetWhitelistedDestinations() []string {
	return s.WhitelistedDestinations
}

// GetMaxDestinationRate returns the value of MaxDestinationRate.
func (s *OutboundVoiceProfile) GetMaxDestinationRate() OptFloat64 {
	return s.MaxDestinationRate
}

// GetDailySpendLimit returns the value of DailySpendLimit.
func (s *OutboundVoiceProfile) GetDailySpendLimit() OptString {
	return s.DailySpendLimit
}

// GetDailySpendLimitEnabled returns the value of DailySpendLimitEnabled.
func (s *OutboundVoiceProfile) GetDailySpendLimitEnabled() OptBool {
	return s.DailySpendLimitEnabled
}

// GetCallRecording returns the value of CallRecording.
func (s *OutboundVoiceProfile) GetCallRecording() OptOutboundCallRecording {
	return s.CallRecording
}

// GetBillingGroupID returns the value of BillingGroupID.
func (s *OutboundVoiceProfile) GetBillingGroupID() OptNilUUID {
	return s.BillingGroupID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *OutboundVoiceProfile) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *OutboundVoiceProfile) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *OutboundVoiceProfile) SetID(val OptStringInt64) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *OutboundVoiceProfile) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetName sets the value of Name.
func (s *OutboundVoiceProfile) SetName(val string) {
	s.Name = val
}

// SetConnectionsCount sets the value of ConnectionsCount.
func (s *OutboundVoiceProfile) SetConnectionsCount(val OptInt) {
	s.ConnectionsCount = val
}

// SetTrafficType sets the value of TrafficType.
func (s *OutboundVoiceProfile) SetTrafficType(val OptTrafficType) {
	s.TrafficType = val
}

// SetServicePlan sets the value of ServicePlan.
func (s *OutboundVoiceProfile) SetServicePlan(val OptServicePlan) {
	s.ServicePlan = val
}

// SetConcurrentCallLimit sets the value of ConcurrentCallLimit.
func (s *OutboundVoiceProfile) SetConcurrentCallLimit(val OptNilInt) {
	s.ConcurrentCallLimit = val
}

// SetEnabled sets the value of Enabled.
func (s *OutboundVoiceProfile) SetEnabled(val OptBool) {
	s.Enabled = val
}

// SetTags sets the value of Tags.
func (s *OutboundVoiceProfile) SetTags(val []string) {
	s.Tags = val
}

// SetUsagePaymentMethod sets the value of UsagePaymentMethod.
func (s *OutboundVoiceProfile) SetUsagePaymentMethod(val OptUsagePaymentMethod) {
	s.UsagePaymentMethod = val
}

// SetWhitelistedDestinations sets the value of WhitelistedDestinations.
func (s *OutboundVoiceProfile) SetWhitelistedDestinations(val []string) {
	s.WhitelistedDestinations = val
}

// SetMaxDestinationRate sets the value of MaxDestinationRate.
func (s *OutboundVoiceProfile) SetMaxDestinationRate(val OptFloat64) {
	s.MaxDestinationRate = val
}

// SetDailySpendLimit sets the value of DailySpendLimit.
func (s *OutboundVoiceProfile) SetDailySpendLimit(val OptString) {
	s.DailySpendLimit = val
}

// SetDailySpendLimitEnabled sets the value of DailySpendLimitEnabled.
func (s *OutboundVoiceProfile) SetDailySpendLimitEnabled(val OptBool) {
	s.DailySpendLimitEnabled = val
}

// SetCallRecording sets the value of CallRecording.
func (s *OutboundVoiceProfile) SetCallRecording(val OptOutboundCallRecording) {
	s.CallRecording = val
}

// SetBillingGroupID sets the value of BillingGroupID.
func (s *OutboundVoiceProfile) SetBillingGroupID(val OptNilUUID) {
	s.BillingGroupID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *OutboundVoiceProfile) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *OutboundVoiceProfile) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

type OutboundVoiceProfileId int64

type OutboundVoiceProfileResponse struct {
	Data OptOutboundVoiceProfile `json:"data"`
}

// GetData returns the value of Data.
func (s *OutboundVoiceProfileResponse) GetData() OptOutboundVoiceProfile {
	return s.Data
}

// SetData sets the value of Data.
func (s *OutboundVoiceProfileResponse) SetData(val OptOutboundVoiceProfile) {
	s.Data = val
}

func (*OutboundVoiceProfileResponse) createVoiceProfileRes()         {}
func (*OutboundVoiceProfileResponse) deleteOutboundVoiceProfileRes() {}
func (*OutboundVoiceProfileResponse) getOutboundVoiceProfileRes()    {}
func (*OutboundVoiceProfileResponse) updateOutboundVoiceProfileRes() {}

// The summary of the resource that have been assigned to the Private Wireless Gateway.
// Ref: #/components/schemas/PWGAssignedResourcesSummary
type PWGAssignedResourcesSummary struct {
	// The type of the resource assigned to the Private Wireless Gateway.
	RecordType OptString `json:"record_type"`
	// The current count of a resource type assigned to the Private Wireless Gateway.
	Count OptInt `json:"count"`
}

// GetRecordType returns the value of RecordType.
func (s *PWGAssignedResourcesSummary) GetRecordType() OptString {
	return s.RecordType
}

// GetCount returns the value of Count.
func (s *PWGAssignedResourcesSummary) GetCount() OptInt {
	return s.Count
}

// SetRecordType sets the value of RecordType.
func (s *PWGAssignedResourcesSummary) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetCount sets the value of Count.
func (s *PWGAssignedResourcesSummary) SetCount(val OptInt) {
	s.Count = val
}

// Ref: #/components/schemas/PaginationMeta
type PaginationMeta struct {
	TotalPages   OptInt `json:"total_pages"`
	TotalResults OptInt `json:"total_results"`
	PageNumber   OptInt `json:"page_number"`
	PageSize     OptInt `json:"page_size"`
}

// GetTotalPages returns the value of TotalPages.
func (s *PaginationMeta) GetTotalPages() OptInt {
	return s.TotalPages
}

// GetTotalResults returns the value of TotalResults.
func (s *PaginationMeta) GetTotalResults() OptInt {
	return s.TotalResults
}

// GetPageNumber returns the value of PageNumber.
func (s *PaginationMeta) GetPageNumber() OptInt {
	return s.PageNumber
}

// GetPageSize returns the value of PageSize.
func (s *PaginationMeta) GetPageSize() OptInt {
	return s.PageSize
}

// SetTotalPages sets the value of TotalPages.
func (s *PaginationMeta) SetTotalPages(val OptInt) {
	s.TotalPages = val
}

// SetTotalResults sets the value of TotalResults.
func (s *PaginationMeta) SetTotalResults(val OptInt) {
	s.TotalResults = val
}

// SetPageNumber sets the value of PageNumber.
func (s *PaginationMeta) SetPageNumber(val OptInt) {
	s.PageNumber = val
}

// SetPageSize sets the value of PageSize.
func (s *PaginationMeta) SetPageSize(val OptInt) {
	s.PageSize = val
}

// Ref: #/components/schemas/PaginationMetaSimple
type PaginationMetaSimple struct {
	PageNumber   OptInt `json:"page_number"`
	PageSize     OptInt `json:"page_size"`
	TotalPages   OptInt `json:"total_pages"`
	TotalResults OptInt `json:"total_results"`
}

// GetPageNumber returns the value of PageNumber.
func (s *PaginationMetaSimple) GetPageNumber() OptInt {
	return s.PageNumber
}

// GetPageSize returns the value of PageSize.
func (s *PaginationMetaSimple) GetPageSize() OptInt {
	return s.PageSize
}

// GetTotalPages returns the value of TotalPages.
func (s *PaginationMetaSimple) GetTotalPages() OptInt {
	return s.TotalPages
}

// GetTotalResults returns the value of TotalResults.
func (s *PaginationMetaSimple) GetTotalResults() OptInt {
	return s.TotalResults
}

// SetPageNumber sets the value of PageNumber.
func (s *PaginationMetaSimple) SetPageNumber(val OptInt) {
	s.PageNumber = val
}

// SetPageSize sets the value of PageSize.
func (s *PaginationMetaSimple) SetPageSize(val OptInt) {
	s.PageSize = val
}

// SetTotalPages sets the value of TotalPages.
func (s *PaginationMetaSimple) SetTotalPages(val OptInt) {
	s.TotalPages = val
}

// SetTotalResults sets the value of TotalResults.
func (s *PaginationMetaSimple) SetTotalResults(val OptInt) {
	s.TotalResults = val
}

// Ref: #/components/schemas/ParticipantResource
type ParticipantResource struct {
	// The id of the account the resource belongs to.
	AccountSid OptString `json:"account_sid"`
	// The version of the API that was used to make the request.
	APIVersion OptString `json:"api_version"`
	// The identifier of this participant's call.
	CallSid OptString `json:"call_sid"`
	// The identifier of this participant's call.
	CallSidLegacy OptString `json:"call_sid_legacy"`
	// Whether the participant is coaching another call.
	Coaching OptBool `json:"coaching"`
	// The identifier of the coached participant's call.
	CoachingCallSid OptString `json:"coaching_call_sid"`
	// The identifier of the coached participant's call.
	CoachingCallSidLegacy OptString `json:"coaching_call_sid_legacy"`
	// The timestamp of when the resource was created.
	DateCreated OptString `json:"date_created"`
	// The timestamp of when the resource was last updated.
	DateUpdated OptString `json:"date_updated"`
	// Whether the conference ends when the participant leaves.
	EndConferenceOnExit OptBool `json:"end_conference_on_exit"`
	// Whether the participant is on hold.
	Hold OptBool `json:"hold"`
	// Whether the participant is muted.
	Muted OptBool `json:"muted"`
	// The status of the participant's call in the conference.
	Status OptParticipantResourceStatus `json:"status"`
	// The relative URI for this participant.
	URI OptString `json:"uri"`
}

// GetAccountSid returns the value of AccountSid.
func (s *ParticipantResource) GetAccountSid() OptString {
	return s.AccountSid
}

// GetAPIVersion returns the value of APIVersion.
func (s *ParticipantResource) GetAPIVersion() OptString {
	return s.APIVersion
}

// GetCallSid returns the value of CallSid.
func (s *ParticipantResource) GetCallSid() OptString {
	return s.CallSid
}

// GetCallSidLegacy returns the value of CallSidLegacy.
func (s *ParticipantResource) GetCallSidLegacy() OptString {
	return s.CallSidLegacy
}

// GetCoaching returns the value of Coaching.
func (s *ParticipantResource) GetCoaching() OptBool {
	return s.Coaching
}

// GetCoachingCallSid returns the value of CoachingCallSid.
func (s *ParticipantResource) GetCoachingCallSid() OptString {
	return s.CoachingCallSid
}

// GetCoachingCallSidLegacy returns the value of CoachingCallSidLegacy.
func (s *ParticipantResource) GetCoachingCallSidLegacy() OptString {
	return s.CoachingCallSidLegacy
}

// GetDateCreated returns the value of DateCreated.
func (s *ParticipantResource) GetDateCreated() OptString {
	return s.DateCreated
}

// GetDateUpdated returns the value of DateUpdated.
func (s *ParticipantResource) GetDateUpdated() OptString {
	return s.DateUpdated
}

// GetEndConferenceOnExit returns the value of EndConferenceOnExit.
func (s *ParticipantResource) GetEndConferenceOnExit() OptBool {
	return s.EndConferenceOnExit
}

// GetHold returns the value of Hold.
func (s *ParticipantResource) GetHold() OptBool {
	return s.Hold
}

// GetMuted returns the value of Muted.
func (s *ParticipantResource) GetMuted() OptBool {
	return s.Muted
}

// GetStatus returns the value of Status.
func (s *ParticipantResource) GetStatus() OptParticipantResourceStatus {
	return s.Status
}

// GetURI returns the value of URI.
func (s *ParticipantResource) GetURI() OptString {
	return s.URI
}

// SetAccountSid sets the value of AccountSid.
func (s *ParticipantResource) SetAccountSid(val OptString) {
	s.AccountSid = val
}

// SetAPIVersion sets the value of APIVersion.
func (s *ParticipantResource) SetAPIVersion(val OptString) {
	s.APIVersion = val
}

// SetCallSid sets the value of CallSid.
func (s *ParticipantResource) SetCallSid(val OptString) {
	s.CallSid = val
}

// SetCallSidLegacy sets the value of CallSidLegacy.
func (s *ParticipantResource) SetCallSidLegacy(val OptString) {
	s.CallSidLegacy = val
}

// SetCoaching sets the value of Coaching.
func (s *ParticipantResource) SetCoaching(val OptBool) {
	s.Coaching = val
}

// SetCoachingCallSid sets the value of CoachingCallSid.
func (s *ParticipantResource) SetCoachingCallSid(val OptString) {
	s.CoachingCallSid = val
}

// SetCoachingCallSidLegacy sets the value of CoachingCallSidLegacy.
func (s *ParticipantResource) SetCoachingCallSidLegacy(val OptString) {
	s.CoachingCallSidLegacy = val
}

// SetDateCreated sets the value of DateCreated.
func (s *ParticipantResource) SetDateCreated(val OptString) {
	s.DateCreated = val
}

// SetDateUpdated sets the value of DateUpdated.
func (s *ParticipantResource) SetDateUpdated(val OptString) {
	s.DateUpdated = val
}

// SetEndConferenceOnExit sets the value of EndConferenceOnExit.
func (s *ParticipantResource) SetEndConferenceOnExit(val OptBool) {
	s.EndConferenceOnExit = val
}

// SetHold sets the value of Hold.
func (s *ParticipantResource) SetHold(val OptBool) {
	s.Hold = val
}

// SetMuted sets the value of Muted.
func (s *ParticipantResource) SetMuted(val OptBool) {
	s.Muted = val
}

// SetStatus sets the value of Status.
func (s *ParticipantResource) SetStatus(val OptParticipantResourceStatus) {
	s.Status = val
}

// SetURI sets the value of URI.
func (s *ParticipantResource) SetURI(val OptString) {
	s.URI = val
}

// Ref: #/components/schemas/ParticipantResourceIndex
type ParticipantResourceIndex struct {
	Participants []ParticipantResource `json:"participants"`
	// The number of the last element on the page, zero-indexed.
	End OptInt `json:"end"`
	// /v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences/6dc6cc1a-1ba1-4351-86b8-4c22c95cd98f/Participants.json?page=0&pagesize=20.
	FirstPageURI OptString `json:"first_page_uri"`
	// /v2/texml/Accounts/61bf923e-5e4d-4595-a110-56190ea18a1b/Conferences/6dc6cc1a-1ba1-4351-86b8-4c22c95cd98f/Participants.json?Page=1&PageSize=1&PageToken=MTY4AjgyNDkwNzIxMQ.
	NextPageURI OptString `json:"next_page_uri"`
	// Current page number, zero-indexed.
	Page OptInt `json:"page"`
	// The number of items on the page.
	PageSize OptInt `json:"page_size"`
	// The number of the first element on the page, zero-indexed.
	Start OptInt `json:"start"`
	// The URI of the current page.
	URI OptString `json:"uri"`
}

// GetParticipants returns the value of Participants.
func (s *ParticipantResourceIndex) GetParticipants() []ParticipantResource {
	return s.Participants
}

// GetEnd returns the value of End.
func (s *ParticipantResourceIndex) GetEnd() OptInt {
	return s.End
}

// GetFirstPageURI returns the value of FirstPageURI.
func (s *ParticipantResourceIndex) GetFirstPageURI() OptString {
	return s.FirstPageURI
}

// GetNextPageURI returns the value of NextPageURI.
func (s *ParticipantResourceIndex) GetNextPageURI() OptString {
	return s.NextPageURI
}

// GetPage returns the value of Page.
func (s *ParticipantResourceIndex) GetPage() OptInt {
	return s.Page
}

// GetPageSize returns the value of PageSize.
func (s *ParticipantResourceIndex) GetPageSize() OptInt {
	return s.PageSize
}

// GetStart returns the value of Start.
func (s *ParticipantResourceIndex) GetStart() OptInt {
	return s.Start
}

// GetURI returns the value of URI.
func (s *ParticipantResourceIndex) GetURI() OptString {
	return s.URI
}

// SetParticipants sets the value of Participants.
func (s *ParticipantResourceIndex) SetParticipants(val []ParticipantResource) {
	s.Participants = val
}

// SetEnd sets the value of End.
func (s *ParticipantResourceIndex) SetEnd(val OptInt) {
	s.End = val
}

// SetFirstPageURI sets the value of FirstPageURI.
func (s *ParticipantResourceIndex) SetFirstPageURI(val OptString) {
	s.FirstPageURI = val
}

// SetNextPageURI sets the value of NextPageURI.
func (s *ParticipantResourceIndex) SetNextPageURI(val OptString) {
	s.NextPageURI = val
}

// SetPage sets the value of Page.
func (s *ParticipantResourceIndex) SetPage(val OptInt) {
	s.Page = val
}

// SetPageSize sets the value of PageSize.
func (s *ParticipantResourceIndex) SetPageSize(val OptInt) {
	s.PageSize = val
}

// SetStart sets the value of Start.
func (s *ParticipantResourceIndex) SetStart(val OptInt) {
	s.Start = val
}

// SetURI sets the value of URI.
func (s *ParticipantResourceIndex) SetURI(val OptString) {
	s.URI = val
}

// The status of the participant's call in the conference.
type ParticipantResourceStatus string

const (
	ParticipantResourceStatusConnecting ParticipantResourceStatus = "connecting"
	ParticipantResourceStatusConnected  ParticipantResourceStatus = "connected"
	ParticipantResourceStatusCompleted  ParticipantResourceStatus = "completed"
)

// AllValues returns all ParticipantResourceStatus values.
func (ParticipantResourceStatus) AllValues() []ParticipantResourceStatus {
	return []ParticipantResourceStatus{
		ParticipantResourceStatusConnecting,
		ParticipantResourceStatusConnected,
		ParticipantResourceStatusCompleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ParticipantResourceStatus) MarshalText() ([]byte, error) {
	switch s {
	case ParticipantResourceStatusConnecting:
		return []byte(s), nil
	case ParticipantResourceStatusConnected:
		return []byte(s), nil
	case ParticipantResourceStatusCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ParticipantResourceStatus) UnmarshalText(data []byte) error {
	switch ParticipantResourceStatus(data) {
	case ParticipantResourceStatusConnecting:
		*s = ParticipantResourceStatusConnecting
		return nil
	case ParticipantResourceStatusConnected:
		*s = ParticipantResourceStatusConnected
		return nil
	case ParticipantResourceStatusCompleted:
		*s = ParticipantResourceStatusCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PauseRecordingRequest
type PauseRecordingRequest struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetClientState returns the value of ClientState.
func (s *PauseRecordingRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *PauseRecordingRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetClientState sets the value of ClientState.
func (s *PauseRecordingRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *PauseRecordingRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

type PerformCredentialActionAction string

const (
	PerformCredentialActionActionActivate   PerformCredentialActionAction = "activate"
	PerformCredentialActionActionDeactivate PerformCredentialActionAction = "deactivate"
)

// AllValues returns all PerformCredentialActionAction values.
func (PerformCredentialActionAction) AllValues() []PerformCredentialActionAction {
	return []PerformCredentialActionAction{
		PerformCredentialActionActionActivate,
		PerformCredentialActionActionDeactivate,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PerformCredentialActionAction) MarshalText() ([]byte, error) {
	switch s {
	case PerformCredentialActionActionActivate:
		return []byte(s), nil
	case PerformCredentialActionActionDeactivate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PerformCredentialActionAction) UnmarshalText(data []byte) error {
	switch PerformCredentialActionAction(data) {
	case PerformCredentialActionActionActivate:
		*s = PerformCredentialActionActionActivate
		return nil
	case PerformCredentialActionActionDeactivate:
		*s = PerformCredentialActionActionDeactivate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// PerformCredentialActionBadRequest is response for PerformCredentialAction operation.
type PerformCredentialActionBadRequest struct{}

func (*PerformCredentialActionBadRequest) performCredentialActionRes() {}

// PerformCredentialActionNotFound is response for PerformCredentialAction operation.
type PerformCredentialActionNotFound struct{}

func (*PerformCredentialActionNotFound) performCredentialActionRes() {}

// PerformCredentialActionUnauthorized is response for PerformCredentialAction operation.
type PerformCredentialActionUnauthorized struct{}

func (*PerformCredentialActionUnauthorized) performCredentialActionRes() {}

// Ref: #/components/schemas/PhoneNumberDeletedDetailed
type PhoneNumberDeletedDetailed struct {
	ID OptIntId `json:"id"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	// The +E.164-formatted phone number associated with this record.
	PhoneNumber OptString `json:"phone_number"`
	// The phone number's current status.
	Status OptPhoneNumberDeletedDetailedStatus `json:"status"`
	// A list of user-assigned tags to help manage the phone number.
	Tags []string `json:"tags"`
	// If someone attempts to port your phone number away from Telnyx and your phone number has an
	// external PIN set, Telnyx will attempt to verify that you provided the correct external PIN to the
	// winning carrier. Note that not all carriers cooperate with this security mechanism.
	ExternalPin OptString `json:"external_pin"`
	// The user-assigned name of the connection to be associated with this phone number.
	ConnectionName OptString `json:"connection_name"`
	// Identifies the connection associated with the phone number.
	ConnectionID OptString `json:"connection_id"`
	// A customer reference string for customer look ups.
	CustomerReference OptString `json:"customer_reference"`
	// Identifies the messaging profile associated with the phone number.
	MessagingProfileID OptString `json:"messaging_profile_id"`
	// The name of the messaging profile associated with the phone number.
	MessagingProfileName OptString `json:"messaging_profile_name"`
	// Identifies the billing group associated with the phone number.
	BillingGroupID OptString `json:"billing_group_id"`
	// Indicates whether emergency services are enabled for this number.
	EmergencyEnabled OptBool `json:"emergency_enabled"`
	// Identifies the emergency address associated with the phone number.
	EmergencyAddressID OptStringInt64 `json:"emergency_address_id"`
	// Indicates if call forwarding will be enabled for this number if forwards_to and forwarding_type
	// are filled in. Defaults to true for backwards compatibility with APIV1 use of numbers endpoints.
	CallForwardingEnabled OptBool `json:"call_forwarding_enabled"`
	// Indicates whether a CNAM listing is enabled for this number.
	CnamListingEnabled OptBool `json:"cnam_listing_enabled"`
	// Indicates whether caller ID is enabled for this number.
	CallerIDNameEnabled OptBool `json:"caller_id_name_enabled"`
	// Indicates whether call recording is enabled for this number.
	CallRecordingEnabled OptBool `json:"call_recording_enabled"`
	// Indicates whether T38 Fax Gateway for inbound calls to this number.
	T38FaxGatewayEnabled OptBool `json:"t38_fax_gateway_enabled"`
	// ISO 8601 formatted date indicating the time the request was made to purchase the number.
	PurchasedAt OptString `json:"purchased_at"`
	// ISO 8601 formatted date indicating when the time it took to activate after the purchase.
	CreatedAt OptString `json:"created_at"`
	// ISO 8601 formatted date indicating when the resource was updated.
	UpdatedAt OptString `json:"updated_at"`
	// Deprecated field, the only value for this is 'disabled'. All routing for numbers should be
	// configured via connection settings.
	NumberLevelRouting OptPhoneNumberDeletedDetailedNumberLevelRouting `json:"number_level_routing"`
	// The phone number's type.
	PhoneNumberType OptPhoneNumberDeletedDetailedPhoneNumberType `json:"phone_number_type"`
}

// GetID returns the value of ID.
func (s *PhoneNumberDeletedDetailed) GetID() OptIntId {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *PhoneNumberDeletedDetailed) GetRecordType() OptString {
	return s.RecordType
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *PhoneNumberDeletedDetailed) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetStatus returns the value of Status.
func (s *PhoneNumberDeletedDetailed) GetStatus() OptPhoneNumberDeletedDetailedStatus {
	return s.Status
}

// GetTags returns the value of Tags.
func (s *PhoneNumberDeletedDetailed) GetTags() []string {
	return s.Tags
}

// GetExternalPin returns the value of ExternalPin.
func (s *PhoneNumberDeletedDetailed) GetExternalPin() OptString {
	return s.ExternalPin
}

// GetConnectionName returns the value of ConnectionName.
func (s *PhoneNumberDeletedDetailed) GetConnectionName() OptString {
	return s.ConnectionName
}

// GetConnectionID returns the value of ConnectionID.
func (s *PhoneNumberDeletedDetailed) GetConnectionID() OptString {
	return s.ConnectionID
}

// GetCustomerReference returns the value of CustomerReference.
func (s *PhoneNumberDeletedDetailed) GetCustomerReference() OptString {
	return s.CustomerReference
}

// GetMessagingProfileID returns the value of MessagingProfileID.
func (s *PhoneNumberDeletedDetailed) GetMessagingProfileID() OptString {
	return s.MessagingProfileID
}

// GetMessagingProfileName returns the value of MessagingProfileName.
func (s *PhoneNumberDeletedDetailed) GetMessagingProfileName() OptString {
	return s.MessagingProfileName
}

// GetBillingGroupID returns the value of BillingGroupID.
func (s *PhoneNumberDeletedDetailed) GetBillingGroupID() OptString {
	return s.BillingGroupID
}

// GetEmergencyEnabled returns the value of EmergencyEnabled.
func (s *PhoneNumberDeletedDetailed) GetEmergencyEnabled() OptBool {
	return s.EmergencyEnabled
}

// GetEmergencyAddressID returns the value of EmergencyAddressID.
func (s *PhoneNumberDeletedDetailed) GetEmergencyAddressID() OptStringInt64 {
	return s.EmergencyAddressID
}

// GetCallForwardingEnabled returns the value of CallForwardingEnabled.
func (s *PhoneNumberDeletedDetailed) GetCallForwardingEnabled() OptBool {
	return s.CallForwardingEnabled
}

// GetCnamListingEnabled returns the value of CnamListingEnabled.
func (s *PhoneNumberDeletedDetailed) GetCnamListingEnabled() OptBool {
	return s.CnamListingEnabled
}

// GetCallerIDNameEnabled returns the value of CallerIDNameEnabled.
func (s *PhoneNumberDeletedDetailed) GetCallerIDNameEnabled() OptBool {
	return s.CallerIDNameEnabled
}

// GetCallRecordingEnabled returns the value of CallRecordingEnabled.
func (s *PhoneNumberDeletedDetailed) GetCallRecordingEnabled() OptBool {
	return s.CallRecordingEnabled
}

// GetT38FaxGatewayEnabled returns the value of T38FaxGatewayEnabled.
func (s *PhoneNumberDeletedDetailed) GetT38FaxGatewayEnabled() OptBool {
	return s.T38FaxGatewayEnabled
}

// GetPurchasedAt returns the value of PurchasedAt.
func (s *PhoneNumberDeletedDetailed) GetPurchasedAt() OptString {
	return s.PurchasedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PhoneNumberDeletedDetailed) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PhoneNumberDeletedDetailed) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetNumberLevelRouting returns the value of NumberLevelRouting.
func (s *PhoneNumberDeletedDetailed) GetNumberLevelRouting() OptPhoneNumberDeletedDetailedNumberLevelRouting {
	return s.NumberLevelRouting
}

// GetPhoneNumberType returns the value of PhoneNumberType.
func (s *PhoneNumberDeletedDetailed) GetPhoneNumberType() OptPhoneNumberDeletedDetailedPhoneNumberType {
	return s.PhoneNumberType
}

// SetID sets the value of ID.
func (s *PhoneNumberDeletedDetailed) SetID(val OptIntId) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *PhoneNumberDeletedDetailed) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *PhoneNumberDeletedDetailed) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetStatus sets the value of Status.
func (s *PhoneNumberDeletedDetailed) SetStatus(val OptPhoneNumberDeletedDetailedStatus) {
	s.Status = val
}

// SetTags sets the value of Tags.
func (s *PhoneNumberDeletedDetailed) SetTags(val []string) {
	s.Tags = val
}

// SetExternalPin sets the value of ExternalPin.
func (s *PhoneNumberDeletedDetailed) SetExternalPin(val OptString) {
	s.ExternalPin = val
}

// SetConnectionName sets the value of ConnectionName.
func (s *PhoneNumberDeletedDetailed) SetConnectionName(val OptString) {
	s.ConnectionName = val
}

// SetConnectionID sets the value of ConnectionID.
func (s *PhoneNumberDeletedDetailed) SetConnectionID(val OptString) {
	s.ConnectionID = val
}

// SetCustomerReference sets the value of CustomerReference.
func (s *PhoneNumberDeletedDetailed) SetCustomerReference(val OptString) {
	s.CustomerReference = val
}

// SetMessagingProfileID sets the value of MessagingProfileID.
func (s *PhoneNumberDeletedDetailed) SetMessagingProfileID(val OptString) {
	s.MessagingProfileID = val
}

// SetMessagingProfileName sets the value of MessagingProfileName.
func (s *PhoneNumberDeletedDetailed) SetMessagingProfileName(val OptString) {
	s.MessagingProfileName = val
}

// SetBillingGroupID sets the value of BillingGroupID.
func (s *PhoneNumberDeletedDetailed) SetBillingGroupID(val OptString) {
	s.BillingGroupID = val
}

// SetEmergencyEnabled sets the value of EmergencyEnabled.
func (s *PhoneNumberDeletedDetailed) SetEmergencyEnabled(val OptBool) {
	s.EmergencyEnabled = val
}

// SetEmergencyAddressID sets the value of EmergencyAddressID.
func (s *PhoneNumberDeletedDetailed) SetEmergencyAddressID(val OptStringInt64) {
	s.EmergencyAddressID = val
}

// SetCallForwardingEnabled sets the value of CallForwardingEnabled.
func (s *PhoneNumberDeletedDetailed) SetCallForwardingEnabled(val OptBool) {
	s.CallForwardingEnabled = val
}

// SetCnamListingEnabled sets the value of CnamListingEnabled.
func (s *PhoneNumberDeletedDetailed) SetCnamListingEnabled(val OptBool) {
	s.CnamListingEnabled = val
}

// SetCallerIDNameEnabled sets the value of CallerIDNameEnabled.
func (s *PhoneNumberDeletedDetailed) SetCallerIDNameEnabled(val OptBool) {
	s.CallerIDNameEnabled = val
}

// SetCallRecordingEnabled sets the value of CallRecordingEnabled.
func (s *PhoneNumberDeletedDetailed) SetCallRecordingEnabled(val OptBool) {
	s.CallRecordingEnabled = val
}

// SetT38FaxGatewayEnabled sets the value of T38FaxGatewayEnabled.
func (s *PhoneNumberDeletedDetailed) SetT38FaxGatewayEnabled(val OptBool) {
	s.T38FaxGatewayEnabled = val
}

// SetPurchasedAt sets the value of PurchasedAt.
func (s *PhoneNumberDeletedDetailed) SetPurchasedAt(val OptString) {
	s.PurchasedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PhoneNumberDeletedDetailed) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PhoneNumberDeletedDetailed) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetNumberLevelRouting sets the value of NumberLevelRouting.
func (s *PhoneNumberDeletedDetailed) SetNumberLevelRouting(val OptPhoneNumberDeletedDetailedNumberLevelRouting) {
	s.NumberLevelRouting = val
}

// SetPhoneNumberType sets the value of PhoneNumberType.
func (s *PhoneNumberDeletedDetailed) SetPhoneNumberType(val OptPhoneNumberDeletedDetailedPhoneNumberType) {
	s.PhoneNumberType = val
}

// Deprecated field, the only value for this is 'disabled'. All routing for numbers should be
// configured via connection settings.
type PhoneNumberDeletedDetailedNumberLevelRouting string

const (
	PhoneNumberDeletedDetailedNumberLevelRoutingDisabled PhoneNumberDeletedDetailedNumberLevelRouting = "disabled"
)

// AllValues returns all PhoneNumberDeletedDetailedNumberLevelRouting values.
func (PhoneNumberDeletedDetailedNumberLevelRouting) AllValues() []PhoneNumberDeletedDetailedNumberLevelRouting {
	return []PhoneNumberDeletedDetailedNumberLevelRouting{
		PhoneNumberDeletedDetailedNumberLevelRoutingDisabled,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PhoneNumberDeletedDetailedNumberLevelRouting) MarshalText() ([]byte, error) {
	switch s {
	case PhoneNumberDeletedDetailedNumberLevelRoutingDisabled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PhoneNumberDeletedDetailedNumberLevelRouting) UnmarshalText(data []byte) error {
	switch PhoneNumberDeletedDetailedNumberLevelRouting(data) {
	case PhoneNumberDeletedDetailedNumberLevelRoutingDisabled:
		*s = PhoneNumberDeletedDetailedNumberLevelRoutingDisabled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The phone number's type.
type PhoneNumberDeletedDetailedPhoneNumberType string

const (
	PhoneNumberDeletedDetailedPhoneNumberTypeLocal      PhoneNumberDeletedDetailedPhoneNumberType = "local"
	PhoneNumberDeletedDetailedPhoneNumberTypeTollFree   PhoneNumberDeletedDetailedPhoneNumberType = "toll_free"
	PhoneNumberDeletedDetailedPhoneNumberTypeMobile     PhoneNumberDeletedDetailedPhoneNumberType = "mobile"
	PhoneNumberDeletedDetailedPhoneNumberTypeNational   PhoneNumberDeletedDetailedPhoneNumberType = "national"
	PhoneNumberDeletedDetailedPhoneNumberTypeSharedCost PhoneNumberDeletedDetailedPhoneNumberType = "shared_cost"
	PhoneNumberDeletedDetailedPhoneNumberTypeLandline   PhoneNumberDeletedDetailedPhoneNumberType = "landline"
)

// AllValues returns all PhoneNumberDeletedDetailedPhoneNumberType values.
func (PhoneNumberDeletedDetailedPhoneNumberType) AllValues() []PhoneNumberDeletedDetailedPhoneNumberType {
	return []PhoneNumberDeletedDetailedPhoneNumberType{
		PhoneNumberDeletedDetailedPhoneNumberTypeLocal,
		PhoneNumberDeletedDetailedPhoneNumberTypeTollFree,
		PhoneNumberDeletedDetailedPhoneNumberTypeMobile,
		PhoneNumberDeletedDetailedPhoneNumberTypeNational,
		PhoneNumberDeletedDetailedPhoneNumberTypeSharedCost,
		PhoneNumberDeletedDetailedPhoneNumberTypeLandline,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PhoneNumberDeletedDetailedPhoneNumberType) MarshalText() ([]byte, error) {
	switch s {
	case PhoneNumberDeletedDetailedPhoneNumberTypeLocal:
		return []byte(s), nil
	case PhoneNumberDeletedDetailedPhoneNumberTypeTollFree:
		return []byte(s), nil
	case PhoneNumberDeletedDetailedPhoneNumberTypeMobile:
		return []byte(s), nil
	case PhoneNumberDeletedDetailedPhoneNumberTypeNational:
		return []byte(s), nil
	case PhoneNumberDeletedDetailedPhoneNumberTypeSharedCost:
		return []byte(s), nil
	case PhoneNumberDeletedDetailedPhoneNumberTypeLandline:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PhoneNumberDeletedDetailedPhoneNumberType) UnmarshalText(data []byte) error {
	switch PhoneNumberDeletedDetailedPhoneNumberType(data) {
	case PhoneNumberDeletedDetailedPhoneNumberTypeLocal:
		*s = PhoneNumberDeletedDetailedPhoneNumberTypeLocal
		return nil
	case PhoneNumberDeletedDetailedPhoneNumberTypeTollFree:
		*s = PhoneNumberDeletedDetailedPhoneNumberTypeTollFree
		return nil
	case PhoneNumberDeletedDetailedPhoneNumberTypeMobile:
		*s = PhoneNumberDeletedDetailedPhoneNumberTypeMobile
		return nil
	case PhoneNumberDeletedDetailedPhoneNumberTypeNational:
		*s = PhoneNumberDeletedDetailedPhoneNumberTypeNational
		return nil
	case PhoneNumberDeletedDetailedPhoneNumberTypeSharedCost:
		*s = PhoneNumberDeletedDetailedPhoneNumberTypeSharedCost
		return nil
	case PhoneNumberDeletedDetailedPhoneNumberTypeLandline:
		*s = PhoneNumberDeletedDetailedPhoneNumberTypeLandline
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The phone number's current status.
type PhoneNumberDeletedDetailedStatus string

const (
	PhoneNumberDeletedDetailedStatusPurchasePending PhoneNumberDeletedDetailedStatus = "purchase-pending"
	PhoneNumberDeletedDetailedStatusPurchaseFailed  PhoneNumberDeletedDetailedStatus = "purchase-failed"
	PhoneNumberDeletedDetailedStatusPortPending     PhoneNumberDeletedDetailedStatus = "port-pending"
	PhoneNumberDeletedDetailedStatusPortFailed      PhoneNumberDeletedDetailedStatus = "port-failed"
	PhoneNumberDeletedDetailedStatusActive          PhoneNumberDeletedDetailedStatus = "active"
	PhoneNumberDeletedDetailedStatusDeleted         PhoneNumberDeletedDetailedStatus = "deleted"
	PhoneNumberDeletedDetailedStatusEmergencyOnly   PhoneNumberDeletedDetailedStatus = "emergency-only"
	PhoneNumberDeletedDetailedStatusPortedOut       PhoneNumberDeletedDetailedStatus = "ported-out"
	PhoneNumberDeletedDetailedStatusPortOutPending  PhoneNumberDeletedDetailedStatus = "port-out-pending"
)

// AllValues returns all PhoneNumberDeletedDetailedStatus values.
func (PhoneNumberDeletedDetailedStatus) AllValues() []PhoneNumberDeletedDetailedStatus {
	return []PhoneNumberDeletedDetailedStatus{
		PhoneNumberDeletedDetailedStatusPurchasePending,
		PhoneNumberDeletedDetailedStatusPurchaseFailed,
		PhoneNumberDeletedDetailedStatusPortPending,
		PhoneNumberDeletedDetailedStatusPortFailed,
		PhoneNumberDeletedDetailedStatusActive,
		PhoneNumberDeletedDetailedStatusDeleted,
		PhoneNumberDeletedDetailedStatusEmergencyOnly,
		PhoneNumberDeletedDetailedStatusPortedOut,
		PhoneNumberDeletedDetailedStatusPortOutPending,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PhoneNumberDeletedDetailedStatus) MarshalText() ([]byte, error) {
	switch s {
	case PhoneNumberDeletedDetailedStatusPurchasePending:
		return []byte(s), nil
	case PhoneNumberDeletedDetailedStatusPurchaseFailed:
		return []byte(s), nil
	case PhoneNumberDeletedDetailedStatusPortPending:
		return []byte(s), nil
	case PhoneNumberDeletedDetailedStatusPortFailed:
		return []byte(s), nil
	case PhoneNumberDeletedDetailedStatusActive:
		return []byte(s), nil
	case PhoneNumberDeletedDetailedStatusDeleted:
		return []byte(s), nil
	case PhoneNumberDeletedDetailedStatusEmergencyOnly:
		return []byte(s), nil
	case PhoneNumberDeletedDetailedStatusPortedOut:
		return []byte(s), nil
	case PhoneNumberDeletedDetailedStatusPortOutPending:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PhoneNumberDeletedDetailedStatus) UnmarshalText(data []byte) error {
	switch PhoneNumberDeletedDetailedStatus(data) {
	case PhoneNumberDeletedDetailedStatusPurchasePending:
		*s = PhoneNumberDeletedDetailedStatusPurchasePending
		return nil
	case PhoneNumberDeletedDetailedStatusPurchaseFailed:
		*s = PhoneNumberDeletedDetailedStatusPurchaseFailed
		return nil
	case PhoneNumberDeletedDetailedStatusPortPending:
		*s = PhoneNumberDeletedDetailedStatusPortPending
		return nil
	case PhoneNumberDeletedDetailedStatusPortFailed:
		*s = PhoneNumberDeletedDetailedStatusPortFailed
		return nil
	case PhoneNumberDeletedDetailedStatusActive:
		*s = PhoneNumberDeletedDetailedStatusActive
		return nil
	case PhoneNumberDeletedDetailedStatusDeleted:
		*s = PhoneNumberDeletedDetailedStatusDeleted
		return nil
	case PhoneNumberDeletedDetailedStatusEmergencyOnly:
		*s = PhoneNumberDeletedDetailedStatusEmergencyOnly
		return nil
	case PhoneNumberDeletedDetailedStatusPortedOut:
		*s = PhoneNumberDeletedDetailedStatusPortedOut
		return nil
	case PhoneNumberDeletedDetailedStatusPortOutPending:
		*s = PhoneNumberDeletedDetailedStatusPortOutPending
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PhoneNumberDetailed
type PhoneNumberDetailed struct {
	ID OptIntId `json:"id"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	// The +E.164-formatted phone number associated with this record.
	PhoneNumber OptString `json:"phone_number"`
	// The phone number's current status.
	Status OptPhoneNumberDetailedStatus `json:"status"`
	// A list of user-assigned tags to help manage the phone number.
	Tags []string `json:"tags"`
	// If someone attempts to port your phone number away from Telnyx and your phone number has an
	// external PIN set, Telnyx will attempt to verify that you provided the correct external PIN to the
	// winning carrier. Note that not all carriers cooperate with this security mechanism.
	ExternalPin OptString `json:"external_pin"`
	// The user-assigned name of the connection to be associated with this phone number.
	ConnectionName OptString `json:"connection_name"`
	// Identifies the connection associated with the phone number.
	ConnectionID OptString `json:"connection_id"`
	// A customer reference string for customer look ups.
	CustomerReference OptString `json:"customer_reference"`
	// Identifies the messaging profile associated with the phone number.
	MessagingProfileID OptString `json:"messaging_profile_id"`
	// The name of the messaging profile associated with the phone number.
	MessagingProfileName OptString `json:"messaging_profile_name"`
	// Identifies the billing group associated with the phone number.
	BillingGroupID OptString `json:"billing_group_id"`
	// Indicates whether emergency services are enabled for this number.
	EmergencyEnabled OptBool `json:"emergency_enabled"`
	// Identifies the emergency address associated with the phone number.
	EmergencyAddressID OptStringInt64 `json:"emergency_address_id"`
	// Indicates if call forwarding will be enabled for this number if forwards_to and forwarding_type
	// are filled in. Defaults to true for backwards compatibility with APIV1 use of numbers endpoints.
	CallForwardingEnabled OptBool `json:"call_forwarding_enabled"`
	// Indicates whether a CNAM listing is enabled for this number.
	CnamListingEnabled OptBool `json:"cnam_listing_enabled"`
	// Indicates whether caller ID is enabled for this number.
	CallerIDNameEnabled OptBool `json:"caller_id_name_enabled"`
	// Indicates whether call recording is enabled for this number.
	CallRecordingEnabled OptBool `json:"call_recording_enabled"`
	// Indicates whether T38 Fax Gateway for inbound calls to this number.
	T38FaxGatewayEnabled OptBool `json:"t38_fax_gateway_enabled"`
	// ISO 8601 formatted date indicating when the resource was purchased.
	PurchasedAt OptString `json:"purchased_at"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt OptString `json:"created_at"`
	// Deprecated field, the only value for this is 'disabled'. All routing for numbers should be
	// configured via connection settings.
	NumberLevelRouting OptPhoneNumberDetailedNumberLevelRouting `json:"number_level_routing"`
	// The phone number's type.
	// Note: For numbers purchased prior to July 2023 or when fetching a number's details immediately
	// after a purchase completes, the legacy values `tollfree`, `shortcode` or `longcode` may be
	// returned instead.
	PhoneNumberType OptPhoneNumberDetailedPhoneNumberType `json:"phone_number_type"`
	// The inbound_call_screening setting is a phone number configuration option variable that allows
	// users to configure their settings to block or flag fraudulent calls. It can be set to disabled,
	// reject_calls, or flag_calls. This feature has an additional per-number monthly cost associated
	// with it.
	InboundCallScreening OptPhoneNumberDetailedInboundCallScreening `json:"inbound_call_screening"`
}

// GetID returns the value of ID.
func (s *PhoneNumberDetailed) GetID() OptIntId {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *PhoneNumberDetailed) GetRecordType() OptString {
	return s.RecordType
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *PhoneNumberDetailed) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetStatus returns the value of Status.
func (s *PhoneNumberDetailed) GetStatus() OptPhoneNumberDetailedStatus {
	return s.Status
}

// GetTags returns the value of Tags.
func (s *PhoneNumberDetailed) GetTags() []string {
	return s.Tags
}

// GetExternalPin returns the value of ExternalPin.
func (s *PhoneNumberDetailed) GetExternalPin() OptString {
	return s.ExternalPin
}

// GetConnectionName returns the value of ConnectionName.
func (s *PhoneNumberDetailed) GetConnectionName() OptString {
	return s.ConnectionName
}

// GetConnectionID returns the value of ConnectionID.
func (s *PhoneNumberDetailed) GetConnectionID() OptString {
	return s.ConnectionID
}

// GetCustomerReference returns the value of CustomerReference.
func (s *PhoneNumberDetailed) GetCustomerReference() OptString {
	return s.CustomerReference
}

// GetMessagingProfileID returns the value of MessagingProfileID.
func (s *PhoneNumberDetailed) GetMessagingProfileID() OptString {
	return s.MessagingProfileID
}

// GetMessagingProfileName returns the value of MessagingProfileName.
func (s *PhoneNumberDetailed) GetMessagingProfileName() OptString {
	return s.MessagingProfileName
}

// GetBillingGroupID returns the value of BillingGroupID.
func (s *PhoneNumberDetailed) GetBillingGroupID() OptString {
	return s.BillingGroupID
}

// GetEmergencyEnabled returns the value of EmergencyEnabled.
func (s *PhoneNumberDetailed) GetEmergencyEnabled() OptBool {
	return s.EmergencyEnabled
}

// GetEmergencyAddressID returns the value of EmergencyAddressID.
func (s *PhoneNumberDetailed) GetEmergencyAddressID() OptStringInt64 {
	return s.EmergencyAddressID
}

// GetCallForwardingEnabled returns the value of CallForwardingEnabled.
func (s *PhoneNumberDetailed) GetCallForwardingEnabled() OptBool {
	return s.CallForwardingEnabled
}

// GetCnamListingEnabled returns the value of CnamListingEnabled.
func (s *PhoneNumberDetailed) GetCnamListingEnabled() OptBool {
	return s.CnamListingEnabled
}

// GetCallerIDNameEnabled returns the value of CallerIDNameEnabled.
func (s *PhoneNumberDetailed) GetCallerIDNameEnabled() OptBool {
	return s.CallerIDNameEnabled
}

// GetCallRecordingEnabled returns the value of CallRecordingEnabled.
func (s *PhoneNumberDetailed) GetCallRecordingEnabled() OptBool {
	return s.CallRecordingEnabled
}

// GetT38FaxGatewayEnabled returns the value of T38FaxGatewayEnabled.
func (s *PhoneNumberDetailed) GetT38FaxGatewayEnabled() OptBool {
	return s.T38FaxGatewayEnabled
}

// GetPurchasedAt returns the value of PurchasedAt.
func (s *PhoneNumberDetailed) GetPurchasedAt() OptString {
	return s.PurchasedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PhoneNumberDetailed) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetNumberLevelRouting returns the value of NumberLevelRouting.
func (s *PhoneNumberDetailed) GetNumberLevelRouting() OptPhoneNumberDetailedNumberLevelRouting {
	return s.NumberLevelRouting
}

// GetPhoneNumberType returns the value of PhoneNumberType.
func (s *PhoneNumberDetailed) GetPhoneNumberType() OptPhoneNumberDetailedPhoneNumberType {
	return s.PhoneNumberType
}

// GetInboundCallScreening returns the value of InboundCallScreening.
func (s *PhoneNumberDetailed) GetInboundCallScreening() OptPhoneNumberDetailedInboundCallScreening {
	return s.InboundCallScreening
}

// SetID sets the value of ID.
func (s *PhoneNumberDetailed) SetID(val OptIntId) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *PhoneNumberDetailed) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *PhoneNumberDetailed) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetStatus sets the value of Status.
func (s *PhoneNumberDetailed) SetStatus(val OptPhoneNumberDetailedStatus) {
	s.Status = val
}

// SetTags sets the value of Tags.
func (s *PhoneNumberDetailed) SetTags(val []string) {
	s.Tags = val
}

// SetExternalPin sets the value of ExternalPin.
func (s *PhoneNumberDetailed) SetExternalPin(val OptString) {
	s.ExternalPin = val
}

// SetConnectionName sets the value of ConnectionName.
func (s *PhoneNumberDetailed) SetConnectionName(val OptString) {
	s.ConnectionName = val
}

// SetConnectionID sets the value of ConnectionID.
func (s *PhoneNumberDetailed) SetConnectionID(val OptString) {
	s.ConnectionID = val
}

// SetCustomerReference sets the value of CustomerReference.
func (s *PhoneNumberDetailed) SetCustomerReference(val OptString) {
	s.CustomerReference = val
}

// SetMessagingProfileID sets the value of MessagingProfileID.
func (s *PhoneNumberDetailed) SetMessagingProfileID(val OptString) {
	s.MessagingProfileID = val
}

// SetMessagingProfileName sets the value of MessagingProfileName.
func (s *PhoneNumberDetailed) SetMessagingProfileName(val OptString) {
	s.MessagingProfileName = val
}

// SetBillingGroupID sets the value of BillingGroupID.
func (s *PhoneNumberDetailed) SetBillingGroupID(val OptString) {
	s.BillingGroupID = val
}

// SetEmergencyEnabled sets the value of EmergencyEnabled.
func (s *PhoneNumberDetailed) SetEmergencyEnabled(val OptBool) {
	s.EmergencyEnabled = val
}

// SetEmergencyAddressID sets the value of EmergencyAddressID.
func (s *PhoneNumberDetailed) SetEmergencyAddressID(val OptStringInt64) {
	s.EmergencyAddressID = val
}

// SetCallForwardingEnabled sets the value of CallForwardingEnabled.
func (s *PhoneNumberDetailed) SetCallForwardingEnabled(val OptBool) {
	s.CallForwardingEnabled = val
}

// SetCnamListingEnabled sets the value of CnamListingEnabled.
func (s *PhoneNumberDetailed) SetCnamListingEnabled(val OptBool) {
	s.CnamListingEnabled = val
}

// SetCallerIDNameEnabled sets the value of CallerIDNameEnabled.
func (s *PhoneNumberDetailed) SetCallerIDNameEnabled(val OptBool) {
	s.CallerIDNameEnabled = val
}

// SetCallRecordingEnabled sets the value of CallRecordingEnabled.
func (s *PhoneNumberDetailed) SetCallRecordingEnabled(val OptBool) {
	s.CallRecordingEnabled = val
}

// SetT38FaxGatewayEnabled sets the value of T38FaxGatewayEnabled.
func (s *PhoneNumberDetailed) SetT38FaxGatewayEnabled(val OptBool) {
	s.T38FaxGatewayEnabled = val
}

// SetPurchasedAt sets the value of PurchasedAt.
func (s *PhoneNumberDetailed) SetPurchasedAt(val OptString) {
	s.PurchasedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PhoneNumberDetailed) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetNumberLevelRouting sets the value of NumberLevelRouting.
func (s *PhoneNumberDetailed) SetNumberLevelRouting(val OptPhoneNumberDetailedNumberLevelRouting) {
	s.NumberLevelRouting = val
}

// SetPhoneNumberType sets the value of PhoneNumberType.
func (s *PhoneNumberDetailed) SetPhoneNumberType(val OptPhoneNumberDetailedPhoneNumberType) {
	s.PhoneNumberType = val
}

// SetInboundCallScreening sets the value of InboundCallScreening.
func (s *PhoneNumberDetailed) SetInboundCallScreening(val OptPhoneNumberDetailedInboundCallScreening) {
	s.InboundCallScreening = val
}

// The inbound_call_screening setting is a phone number configuration option variable that allows
// users to configure their settings to block or flag fraudulent calls. It can be set to disabled,
// reject_calls, or flag_calls. This feature has an additional per-number monthly cost associated
// with it.
type PhoneNumberDetailedInboundCallScreening string

const (
	PhoneNumberDetailedInboundCallScreeningDisabled    PhoneNumberDetailedInboundCallScreening = "disabled"
	PhoneNumberDetailedInboundCallScreeningRejectCalls PhoneNumberDetailedInboundCallScreening = "reject_calls"
	PhoneNumberDetailedInboundCallScreeningFlagCalls   PhoneNumberDetailedInboundCallScreening = "flag_calls"
)

// AllValues returns all PhoneNumberDetailedInboundCallScreening values.
func (PhoneNumberDetailedInboundCallScreening) AllValues() []PhoneNumberDetailedInboundCallScreening {
	return []PhoneNumberDetailedInboundCallScreening{
		PhoneNumberDetailedInboundCallScreeningDisabled,
		PhoneNumberDetailedInboundCallScreeningRejectCalls,
		PhoneNumberDetailedInboundCallScreeningFlagCalls,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PhoneNumberDetailedInboundCallScreening) MarshalText() ([]byte, error) {
	switch s {
	case PhoneNumberDetailedInboundCallScreeningDisabled:
		return []byte(s), nil
	case PhoneNumberDetailedInboundCallScreeningRejectCalls:
		return []byte(s), nil
	case PhoneNumberDetailedInboundCallScreeningFlagCalls:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PhoneNumberDetailedInboundCallScreening) UnmarshalText(data []byte) error {
	switch PhoneNumberDetailedInboundCallScreening(data) {
	case PhoneNumberDetailedInboundCallScreeningDisabled:
		*s = PhoneNumberDetailedInboundCallScreeningDisabled
		return nil
	case PhoneNumberDetailedInboundCallScreeningRejectCalls:
		*s = PhoneNumberDetailedInboundCallScreeningRejectCalls
		return nil
	case PhoneNumberDetailedInboundCallScreeningFlagCalls:
		*s = PhoneNumberDetailedInboundCallScreeningFlagCalls
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Deprecated field, the only value for this is 'disabled'. All routing for numbers should be
// configured via connection settings.
type PhoneNumberDetailedNumberLevelRouting string

const (
	PhoneNumberDetailedNumberLevelRoutingDisabled PhoneNumberDetailedNumberLevelRouting = "disabled"
)

// AllValues returns all PhoneNumberDetailedNumberLevelRouting values.
func (PhoneNumberDetailedNumberLevelRouting) AllValues() []PhoneNumberDetailedNumberLevelRouting {
	return []PhoneNumberDetailedNumberLevelRouting{
		PhoneNumberDetailedNumberLevelRoutingDisabled,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PhoneNumberDetailedNumberLevelRouting) MarshalText() ([]byte, error) {
	switch s {
	case PhoneNumberDetailedNumberLevelRoutingDisabled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PhoneNumberDetailedNumberLevelRouting) UnmarshalText(data []byte) error {
	switch PhoneNumberDetailedNumberLevelRouting(data) {
	case PhoneNumberDetailedNumberLevelRoutingDisabled:
		*s = PhoneNumberDetailedNumberLevelRoutingDisabled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The phone number's type.
// Note: For numbers purchased prior to July 2023 or when fetching a number's details immediately
// after a purchase completes, the legacy values `tollfree`, `shortcode` or `longcode` may be
// returned instead.
type PhoneNumberDetailedPhoneNumberType string

const (
	PhoneNumberDetailedPhoneNumberTypeLocal      PhoneNumberDetailedPhoneNumberType = "local"
	PhoneNumberDetailedPhoneNumberTypeTollFree   PhoneNumberDetailedPhoneNumberType = "toll_free"
	PhoneNumberDetailedPhoneNumberTypeMobile     PhoneNumberDetailedPhoneNumberType = "mobile"
	PhoneNumberDetailedPhoneNumberTypeNational   PhoneNumberDetailedPhoneNumberType = "national"
	PhoneNumberDetailedPhoneNumberTypeSharedCost PhoneNumberDetailedPhoneNumberType = "shared_cost"
	PhoneNumberDetailedPhoneNumberTypeLandline   PhoneNumberDetailedPhoneNumberType = "landline"
	PhoneNumberDetailedPhoneNumberTypeTollfree   PhoneNumberDetailedPhoneNumberType = "tollfree"
	PhoneNumberDetailedPhoneNumberTypeShortcode  PhoneNumberDetailedPhoneNumberType = "shortcode"
	PhoneNumberDetailedPhoneNumberTypeLongcode   PhoneNumberDetailedPhoneNumberType = "longcode"
)

// AllValues returns all PhoneNumberDetailedPhoneNumberType values.
func (PhoneNumberDetailedPhoneNumberType) AllValues() []PhoneNumberDetailedPhoneNumberType {
	return []PhoneNumberDetailedPhoneNumberType{
		PhoneNumberDetailedPhoneNumberTypeLocal,
		PhoneNumberDetailedPhoneNumberTypeTollFree,
		PhoneNumberDetailedPhoneNumberTypeMobile,
		PhoneNumberDetailedPhoneNumberTypeNational,
		PhoneNumberDetailedPhoneNumberTypeSharedCost,
		PhoneNumberDetailedPhoneNumberTypeLandline,
		PhoneNumberDetailedPhoneNumberTypeTollfree,
		PhoneNumberDetailedPhoneNumberTypeShortcode,
		PhoneNumberDetailedPhoneNumberTypeLongcode,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PhoneNumberDetailedPhoneNumberType) MarshalText() ([]byte, error) {
	switch s {
	case PhoneNumberDetailedPhoneNumberTypeLocal:
		return []byte(s), nil
	case PhoneNumberDetailedPhoneNumberTypeTollFree:
		return []byte(s), nil
	case PhoneNumberDetailedPhoneNumberTypeMobile:
		return []byte(s), nil
	case PhoneNumberDetailedPhoneNumberTypeNational:
		return []byte(s), nil
	case PhoneNumberDetailedPhoneNumberTypeSharedCost:
		return []byte(s), nil
	case PhoneNumberDetailedPhoneNumberTypeLandline:
		return []byte(s), nil
	case PhoneNumberDetailedPhoneNumberTypeTollfree:
		return []byte(s), nil
	case PhoneNumberDetailedPhoneNumberTypeShortcode:
		return []byte(s), nil
	case PhoneNumberDetailedPhoneNumberTypeLongcode:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PhoneNumberDetailedPhoneNumberType) UnmarshalText(data []byte) error {
	switch PhoneNumberDetailedPhoneNumberType(data) {
	case PhoneNumberDetailedPhoneNumberTypeLocal:
		*s = PhoneNumberDetailedPhoneNumberTypeLocal
		return nil
	case PhoneNumberDetailedPhoneNumberTypeTollFree:
		*s = PhoneNumberDetailedPhoneNumberTypeTollFree
		return nil
	case PhoneNumberDetailedPhoneNumberTypeMobile:
		*s = PhoneNumberDetailedPhoneNumberTypeMobile
		return nil
	case PhoneNumberDetailedPhoneNumberTypeNational:
		*s = PhoneNumberDetailedPhoneNumberTypeNational
		return nil
	case PhoneNumberDetailedPhoneNumberTypeSharedCost:
		*s = PhoneNumberDetailedPhoneNumberTypeSharedCost
		return nil
	case PhoneNumberDetailedPhoneNumberTypeLandline:
		*s = PhoneNumberDetailedPhoneNumberTypeLandline
		return nil
	case PhoneNumberDetailedPhoneNumberTypeTollfree:
		*s = PhoneNumberDetailedPhoneNumberTypeTollfree
		return nil
	case PhoneNumberDetailedPhoneNumberTypeShortcode:
		*s = PhoneNumberDetailedPhoneNumberTypeShortcode
		return nil
	case PhoneNumberDetailedPhoneNumberTypeLongcode:
		*s = PhoneNumberDetailedPhoneNumberTypeLongcode
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The phone number's current status.
type PhoneNumberDetailedStatus string

const (
	PhoneNumberDetailedStatusPurchasePending            PhoneNumberDetailedStatus = "purchase-pending"
	PhoneNumberDetailedStatusPurchaseFailed             PhoneNumberDetailedStatus = "purchase-failed"
	PhoneNumberDetailedStatusPortPending                PhoneNumberDetailedStatus = "port-pending"
	PhoneNumberDetailedStatusPortFailed                 PhoneNumberDetailedStatus = "port-failed"
	PhoneNumberDetailedStatusActive                     PhoneNumberDetailedStatus = "active"
	PhoneNumberDetailedStatusDeleted                    PhoneNumberDetailedStatus = "deleted"
	PhoneNumberDetailedStatusEmergencyOnly              PhoneNumberDetailedStatus = "emergency-only"
	PhoneNumberDetailedStatusPortedOut                  PhoneNumberDetailedStatus = "ported-out"
	PhoneNumberDetailedStatusPortOutPending             PhoneNumberDetailedStatus = "port-out-pending"
	PhoneNumberDetailedStatusRequirementInfoPending     PhoneNumberDetailedStatus = "requirement-info-pending"
	PhoneNumberDetailedStatusRequirementInfoUnderReview PhoneNumberDetailedStatus = "requirement-info-under-review"
	PhoneNumberDetailedStatusRequirementInfoException   PhoneNumberDetailedStatus = "requirement-info-exception"
	PhoneNumberDetailedStatusProvisionPending           PhoneNumberDetailedStatus = "provision-pending"
)

// AllValues returns all PhoneNumberDetailedStatus values.
func (PhoneNumberDetailedStatus) AllValues() []PhoneNumberDetailedStatus {
	return []PhoneNumberDetailedStatus{
		PhoneNumberDetailedStatusPurchasePending,
		PhoneNumberDetailedStatusPurchaseFailed,
		PhoneNumberDetailedStatusPortPending,
		PhoneNumberDetailedStatusPortFailed,
		PhoneNumberDetailedStatusActive,
		PhoneNumberDetailedStatusDeleted,
		PhoneNumberDetailedStatusEmergencyOnly,
		PhoneNumberDetailedStatusPortedOut,
		PhoneNumberDetailedStatusPortOutPending,
		PhoneNumberDetailedStatusRequirementInfoPending,
		PhoneNumberDetailedStatusRequirementInfoUnderReview,
		PhoneNumberDetailedStatusRequirementInfoException,
		PhoneNumberDetailedStatusProvisionPending,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PhoneNumberDetailedStatus) MarshalText() ([]byte, error) {
	switch s {
	case PhoneNumberDetailedStatusPurchasePending:
		return []byte(s), nil
	case PhoneNumberDetailedStatusPurchaseFailed:
		return []byte(s), nil
	case PhoneNumberDetailedStatusPortPending:
		return []byte(s), nil
	case PhoneNumberDetailedStatusPortFailed:
		return []byte(s), nil
	case PhoneNumberDetailedStatusActive:
		return []byte(s), nil
	case PhoneNumberDetailedStatusDeleted:
		return []byte(s), nil
	case PhoneNumberDetailedStatusEmergencyOnly:
		return []byte(s), nil
	case PhoneNumberDetailedStatusPortedOut:
		return []byte(s), nil
	case PhoneNumberDetailedStatusPortOutPending:
		return []byte(s), nil
	case PhoneNumberDetailedStatusRequirementInfoPending:
		return []byte(s), nil
	case PhoneNumberDetailedStatusRequirementInfoUnderReview:
		return []byte(s), nil
	case PhoneNumberDetailedStatusRequirementInfoException:
		return []byte(s), nil
	case PhoneNumberDetailedStatusProvisionPending:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PhoneNumberDetailedStatus) UnmarshalText(data []byte) error {
	switch PhoneNumberDetailedStatus(data) {
	case PhoneNumberDetailedStatusPurchasePending:
		*s = PhoneNumberDetailedStatusPurchasePending
		return nil
	case PhoneNumberDetailedStatusPurchaseFailed:
		*s = PhoneNumberDetailedStatusPurchaseFailed
		return nil
	case PhoneNumberDetailedStatusPortPending:
		*s = PhoneNumberDetailedStatusPortPending
		return nil
	case PhoneNumberDetailedStatusPortFailed:
		*s = PhoneNumberDetailedStatusPortFailed
		return nil
	case PhoneNumberDetailedStatusActive:
		*s = PhoneNumberDetailedStatusActive
		return nil
	case PhoneNumberDetailedStatusDeleted:
		*s = PhoneNumberDetailedStatusDeleted
		return nil
	case PhoneNumberDetailedStatusEmergencyOnly:
		*s = PhoneNumberDetailedStatusEmergencyOnly
		return nil
	case PhoneNumberDetailedStatusPortedOut:
		*s = PhoneNumberDetailedStatusPortedOut
		return nil
	case PhoneNumberDetailedStatusPortOutPending:
		*s = PhoneNumberDetailedStatusPortOutPending
		return nil
	case PhoneNumberDetailedStatusRequirementInfoPending:
		*s = PhoneNumberDetailedStatusRequirementInfoPending
		return nil
	case PhoneNumberDetailedStatusRequirementInfoUnderReview:
		*s = PhoneNumberDetailedStatusRequirementInfoUnderReview
		return nil
	case PhoneNumberDetailedStatusRequirementInfoException:
		*s = PhoneNumberDetailedStatusRequirementInfoException
		return nil
	case PhoneNumberDetailedStatusProvisionPending:
		*s = PhoneNumberDetailedStatusProvisionPending
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PhoneNumberEnableEmergencyRequest
type PhoneNumberEnableEmergencyRequest struct {
	// Indicates whether to enable emergency services on this number.
	EmergencyEnabled bool `json:"emergency_enabled"`
	// Identifies the address to be used with emergency services.
	EmergencyAddressID int64 `json:"emergency_address_id"`
}

// GetEmergencyEnabled returns the value of EmergencyEnabled.
func (s *PhoneNumberEnableEmergencyRequest) GetEmergencyEnabled() bool {
	return s.EmergencyEnabled
}

// GetEmergencyAddressID returns the value of EmergencyAddressID.
func (s *PhoneNumberEnableEmergencyRequest) GetEmergencyAddressID() int64 {
	return s.EmergencyAddressID
}

// SetEmergencyEnabled sets the value of EmergencyEnabled.
func (s *PhoneNumberEnableEmergencyRequest) SetEmergencyEnabled(val bool) {
	s.EmergencyEnabled = val
}

// SetEmergencyAddressID sets the value of EmergencyAddressID.
func (s *PhoneNumberEnableEmergencyRequest) SetEmergencyAddressID(val int64) {
	s.EmergencyAddressID = val
}

type PhoneNumberResponse struct {
	Data OptPhoneNumberDetailed `json:"data"`
}

// GetData returns the value of Data.
func (s *PhoneNumberResponse) GetData() OptPhoneNumberDetailed {
	return s.Data
}

// SetData sets the value of Data.
func (s *PhoneNumberResponse) SetData(val OptPhoneNumberDetailed) {
	s.Data = val
}

func (*PhoneNumberResponse) retrievePhoneNumberRes() {}
func (*PhoneNumberResponse) updatePhoneNumberRes()   {}

// Ref: #/components/schemas/PhoneNumberWithMessagingSettings
type PhoneNumberWithMessagingSettings struct {
	// Identifies the type of the resource.
	RecordType OptPhoneNumberWithMessagingSettingsRecordType `json:"record_type"`
	// Identifies the type of resource.
	ID OptString `json:"id"`
	// +E.164 formatted phone number.
	PhoneNumber OptString `json:"phone_number"`
	// Unique identifier for a messaging profile.
	MessagingProfileID OptNilString `json:"messaging_profile_id"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt OptDateTime `json:"created_at"`
	// ISO 8601 formatted date indicating when the resource was updated.
	UpdatedAt OptDateTime `json:"updated_at"`
	// ISO 3166-1 alpha-2 country code.
	CountryCode OptString `json:"country_code"`
	// The type of the phone number.
	Type   OptPhoneNumberWithMessagingSettingsType `json:"type"`
	Health OptNumberHealthMetrics                  `json:"health"`
	// The messaging products that this number can be registered to use.
	EligibleMessagingProducts []string `json:"eligible_messaging_products"`
	// The messaging traffic or use case for which the number is currently configured.
	TrafficType OptString `json:"traffic_type"`
	// The messaging product that the number is registered to use.
	MessagingProduct OptString                                   `json:"messaging_product"`
	Features         OptPhoneNumberWithMessagingSettingsFeatures `json:"features"`
}

// GetRecordType returns the value of RecordType.
func (s *PhoneNumberWithMessagingSettings) GetRecordType() OptPhoneNumberWithMessagingSettingsRecordType {
	return s.RecordType
}

// GetID returns the value of ID.
func (s *PhoneNumberWithMessagingSettings) GetID() OptString {
	return s.ID
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *PhoneNumberWithMessagingSettings) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetMessagingProfileID returns the value of MessagingProfileID.
func (s *PhoneNumberWithMessagingSettings) GetMessagingProfileID() OptNilString {
	return s.MessagingProfileID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PhoneNumberWithMessagingSettings) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PhoneNumberWithMessagingSettings) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetCountryCode returns the value of CountryCode.
func (s *PhoneNumberWithMessagingSettings) GetCountryCode() OptString {
	return s.CountryCode
}

// GetType returns the value of Type.
func (s *PhoneNumberWithMessagingSettings) GetType() OptPhoneNumberWithMessagingSettingsType {
	return s.Type
}

// GetHealth returns the value of Health.
func (s *PhoneNumberWithMessagingSettings) GetHealth() OptNumberHealthMetrics {
	return s.Health
}

// GetEligibleMessagingProducts returns the value of EligibleMessagingProducts.
func (s *PhoneNumberWithMessagingSettings) GetEligibleMessagingProducts() []string {
	return s.EligibleMessagingProducts
}

// GetTrafficType returns the value of TrafficType.
func (s *PhoneNumberWithMessagingSettings) GetTrafficType() OptString {
	return s.TrafficType
}

// GetMessagingProduct returns the value of MessagingProduct.
func (s *PhoneNumberWithMessagingSettings) GetMessagingProduct() OptString {
	return s.MessagingProduct
}

// GetFeatures returns the value of Features.
func (s *PhoneNumberWithMessagingSettings) GetFeatures() OptPhoneNumberWithMessagingSettingsFeatures {
	return s.Features
}

// SetRecordType sets the value of RecordType.
func (s *PhoneNumberWithMessagingSettings) SetRecordType(val OptPhoneNumberWithMessagingSettingsRecordType) {
	s.RecordType = val
}

// SetID sets the value of ID.
func (s *PhoneNumberWithMessagingSettings) SetID(val OptString) {
	s.ID = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *PhoneNumberWithMessagingSettings) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetMessagingProfileID sets the value of MessagingProfileID.
func (s *PhoneNumberWithMessagingSettings) SetMessagingProfileID(val OptNilString) {
	s.MessagingProfileID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PhoneNumberWithMessagingSettings) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PhoneNumberWithMessagingSettings) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetCountryCode sets the value of CountryCode.
func (s *PhoneNumberWithMessagingSettings) SetCountryCode(val OptString) {
	s.CountryCode = val
}

// SetType sets the value of Type.
func (s *PhoneNumberWithMessagingSettings) SetType(val OptPhoneNumberWithMessagingSettingsType) {
	s.Type = val
}

// SetHealth sets the value of Health.
func (s *PhoneNumberWithMessagingSettings) SetHealth(val OptNumberHealthMetrics) {
	s.Health = val
}

// SetEligibleMessagingProducts sets the value of EligibleMessagingProducts.
func (s *PhoneNumberWithMessagingSettings) SetEligibleMessagingProducts(val []string) {
	s.EligibleMessagingProducts = val
}

// SetTrafficType sets the value of TrafficType.
func (s *PhoneNumberWithMessagingSettings) SetTrafficType(val OptString) {
	s.TrafficType = val
}

// SetMessagingProduct sets the value of MessagingProduct.
func (s *PhoneNumberWithMessagingSettings) SetMessagingProduct(val OptString) {
	s.MessagingProduct = val
}

// SetFeatures sets the value of Features.
func (s *PhoneNumberWithMessagingSettings) SetFeatures(val OptPhoneNumberWithMessagingSettingsFeatures) {
	s.Features = val
}

type PhoneNumberWithMessagingSettingsFeatures struct {
	SMS OptNilMessagingFeatureSet `json:"sms"`
	Mms OptNilMessagingFeatureSet `json:"mms"`
}

// GetSMS returns the value of SMS.
func (s *PhoneNumberWithMessagingSettingsFeatures) GetSMS() OptNilMessagingFeatureSet {
	return s.SMS
}

// GetMms returns the value of Mms.
func (s *PhoneNumberWithMessagingSettingsFeatures) GetMms() OptNilMessagingFeatureSet {
	return s.Mms
}

// SetSMS sets the value of SMS.
func (s *PhoneNumberWithMessagingSettingsFeatures) SetSMS(val OptNilMessagingFeatureSet) {
	s.SMS = val
}

// SetMms sets the value of Mms.
func (s *PhoneNumberWithMessagingSettingsFeatures) SetMms(val OptNilMessagingFeatureSet) {
	s.Mms = val
}

// Identifies the type of the resource.
type PhoneNumberWithMessagingSettingsRecordType string

const (
	PhoneNumberWithMessagingSettingsRecordTypeMessagingPhoneNumber PhoneNumberWithMessagingSettingsRecordType = "messaging_phone_number"
	PhoneNumberWithMessagingSettingsRecordTypeMessagingSettings    PhoneNumberWithMessagingSettingsRecordType = "messaging_settings"
)

// AllValues returns all PhoneNumberWithMessagingSettingsRecordType values.
func (PhoneNumberWithMessagingSettingsRecordType) AllValues() []PhoneNumberWithMessagingSettingsRecordType {
	return []PhoneNumberWithMessagingSettingsRecordType{
		PhoneNumberWithMessagingSettingsRecordTypeMessagingPhoneNumber,
		PhoneNumberWithMessagingSettingsRecordTypeMessagingSettings,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PhoneNumberWithMessagingSettingsRecordType) MarshalText() ([]byte, error) {
	switch s {
	case PhoneNumberWithMessagingSettingsRecordTypeMessagingPhoneNumber:
		return []byte(s), nil
	case PhoneNumberWithMessagingSettingsRecordTypeMessagingSettings:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PhoneNumberWithMessagingSettingsRecordType) UnmarshalText(data []byte) error {
	switch PhoneNumberWithMessagingSettingsRecordType(data) {
	case PhoneNumberWithMessagingSettingsRecordTypeMessagingPhoneNumber:
		*s = PhoneNumberWithMessagingSettingsRecordTypeMessagingPhoneNumber
		return nil
	case PhoneNumberWithMessagingSettingsRecordTypeMessagingSettings:
		*s = PhoneNumberWithMessagingSettingsRecordTypeMessagingSettings
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PhoneNumberWithMessagingSettingsResponse struct {
	Data OptPhoneNumberWithMessagingSettings `json:"data"`
}

// GetData returns the value of Data.
func (s *PhoneNumberWithMessagingSettingsResponse) GetData() OptPhoneNumberWithMessagingSettings {
	return s.Data
}

// SetData sets the value of Data.
func (s *PhoneNumberWithMessagingSettingsResponse) SetData(val OptPhoneNumberWithMessagingSettings) {
	s.Data = val
}

func (*PhoneNumberWithMessagingSettingsResponse) getPhoneNumberMessagingSettingsRes()    {}
func (*PhoneNumberWithMessagingSettingsResponse) updatePhoneNumberMessagingSettingsRes() {}

// The type of the phone number.
type PhoneNumberWithMessagingSettingsType string

const (
	PhoneNumberWithMessagingSettingsTypeLongCode  PhoneNumberWithMessagingSettingsType = "long-code"
	PhoneNumberWithMessagingSettingsTypeTollFree  PhoneNumberWithMessagingSettingsType = "toll-free"
	PhoneNumberWithMessagingSettingsTypeShortCode PhoneNumberWithMessagingSettingsType = "short-code"
	PhoneNumberWithMessagingSettingsTypeLongcode  PhoneNumberWithMessagingSettingsType = "longcode"
	PhoneNumberWithMessagingSettingsTypeTollfree  PhoneNumberWithMessagingSettingsType = "tollfree"
	PhoneNumberWithMessagingSettingsTypeShortcode PhoneNumberWithMessagingSettingsType = "shortcode"
)

// AllValues returns all PhoneNumberWithMessagingSettingsType values.
func (PhoneNumberWithMessagingSettingsType) AllValues() []PhoneNumberWithMessagingSettingsType {
	return []PhoneNumberWithMessagingSettingsType{
		PhoneNumberWithMessagingSettingsTypeLongCode,
		PhoneNumberWithMessagingSettingsTypeTollFree,
		PhoneNumberWithMessagingSettingsTypeShortCode,
		PhoneNumberWithMessagingSettingsTypeLongcode,
		PhoneNumberWithMessagingSettingsTypeTollfree,
		PhoneNumberWithMessagingSettingsTypeShortcode,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PhoneNumberWithMessagingSettingsType) MarshalText() ([]byte, error) {
	switch s {
	case PhoneNumberWithMessagingSettingsTypeLongCode:
		return []byte(s), nil
	case PhoneNumberWithMessagingSettingsTypeTollFree:
		return []byte(s), nil
	case PhoneNumberWithMessagingSettingsTypeShortCode:
		return []byte(s), nil
	case PhoneNumberWithMessagingSettingsTypeLongcode:
		return []byte(s), nil
	case PhoneNumberWithMessagingSettingsTypeTollfree:
		return []byte(s), nil
	case PhoneNumberWithMessagingSettingsTypeShortcode:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PhoneNumberWithMessagingSettingsType) UnmarshalText(data []byte) error {
	switch PhoneNumberWithMessagingSettingsType(data) {
	case PhoneNumberWithMessagingSettingsTypeLongCode:
		*s = PhoneNumberWithMessagingSettingsTypeLongCode
		return nil
	case PhoneNumberWithMessagingSettingsTypeTollFree:
		*s = PhoneNumberWithMessagingSettingsTypeTollFree
		return nil
	case PhoneNumberWithMessagingSettingsTypeShortCode:
		*s = PhoneNumberWithMessagingSettingsTypeShortCode
		return nil
	case PhoneNumberWithMessagingSettingsTypeLongcode:
		*s = PhoneNumberWithMessagingSettingsTypeLongcode
		return nil
	case PhoneNumberWithMessagingSettingsTypeTollfree:
		*s = PhoneNumberWithMessagingSettingsTypeTollfree
		return nil
	case PhoneNumberWithMessagingSettingsTypeShortcode:
		*s = PhoneNumberWithMessagingSettingsTypeShortcode
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PhoneNumberWithVoiceSettings
type PhoneNumberWithVoiceSettings struct {
	// Identifies the type of resource.
	ID OptString `json:"id"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	// The phone number in +E164 format.
	PhoneNumber OptString `json:"phone_number"`
	// Identifies the connection associated with this phone number.
	ConnectionID OptString `json:"connection_id"`
	// A customer reference string for customer look ups.
	CustomerReference OptString `json:"customer_reference"`
	// Controls whether a tech prefix is enabled for this phone number.
	TechPrefixEnabled OptBool `json:"tech_prefix_enabled"`
	// This field allows you to rewrite the destination number of an inbound call before the call is
	// routed to you. The value of this field may be any alphanumeric value, and the value will replace
	// the number originally dialed.
	TranslatedNumber OptString            `json:"translated_number"`
	CallForwarding   OptCallForwarding    `json:"call_forwarding"`
	CnamListing      OptCnamListing       `json:"cnam_listing"`
	Emergency        OptEmergencySettings `json:"emergency"`
	// Controls whether a number is billed per minute or uses your concurrent channels.
	UsagePaymentMethod OptPhoneNumberWithVoiceSettingsUsagePaymentMethod `json:"usage_payment_method"`
	MediaFeatures      OptMediaFeatures                                  `json:"media_features"`
	CallRecording      OptCallRecording                                  `json:"call_recording"`
	// The inbound_call_screening setting is a phone number configuration option variable that allows
	// users to configure their settings to block or flag fraudulent calls. It can be set to disabled,
	// reject_calls, or flag_calls. This feature has an additional per-number monthly cost associated
	// with it.
	InboundCallScreening OptPhoneNumberWithVoiceSettingsInboundCallScreening `json:"inbound_call_screening"`
}

// GetID returns the value of ID.
func (s *PhoneNumberWithVoiceSettings) GetID() OptString {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *PhoneNumberWithVoiceSettings) GetRecordType() OptString {
	return s.RecordType
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *PhoneNumberWithVoiceSettings) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetConnectionID returns the value of ConnectionID.
func (s *PhoneNumberWithVoiceSettings) GetConnectionID() OptString {
	return s.ConnectionID
}

// GetCustomerReference returns the value of CustomerReference.
func (s *PhoneNumberWithVoiceSettings) GetCustomerReference() OptString {
	return s.CustomerReference
}

// GetTechPrefixEnabled returns the value of TechPrefixEnabled.
func (s *PhoneNumberWithVoiceSettings) GetTechPrefixEnabled() OptBool {
	return s.TechPrefixEnabled
}

// GetTranslatedNumber returns the value of TranslatedNumber.
func (s *PhoneNumberWithVoiceSettings) GetTranslatedNumber() OptString {
	return s.TranslatedNumber
}

// GetCallForwarding returns the value of CallForwarding.
func (s *PhoneNumberWithVoiceSettings) GetCallForwarding() OptCallForwarding {
	return s.CallForwarding
}

// GetCnamListing returns the value of CnamListing.
func (s *PhoneNumberWithVoiceSettings) GetCnamListing() OptCnamListing {
	return s.CnamListing
}

// GetEmergency returns the value of Emergency.
func (s *PhoneNumberWithVoiceSettings) GetEmergency() OptEmergencySettings {
	return s.Emergency
}

// GetUsagePaymentMethod returns the value of UsagePaymentMethod.
func (s *PhoneNumberWithVoiceSettings) GetUsagePaymentMethod() OptPhoneNumberWithVoiceSettingsUsagePaymentMethod {
	return s.UsagePaymentMethod
}

// GetMediaFeatures returns the value of MediaFeatures.
func (s *PhoneNumberWithVoiceSettings) GetMediaFeatures() OptMediaFeatures {
	return s.MediaFeatures
}

// GetCallRecording returns the value of CallRecording.
func (s *PhoneNumberWithVoiceSettings) GetCallRecording() OptCallRecording {
	return s.CallRecording
}

// GetInboundCallScreening returns the value of InboundCallScreening.
func (s *PhoneNumberWithVoiceSettings) GetInboundCallScreening() OptPhoneNumberWithVoiceSettingsInboundCallScreening {
	return s.InboundCallScreening
}

// SetID sets the value of ID.
func (s *PhoneNumberWithVoiceSettings) SetID(val OptString) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *PhoneNumberWithVoiceSettings) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *PhoneNumberWithVoiceSettings) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetConnectionID sets the value of ConnectionID.
func (s *PhoneNumberWithVoiceSettings) SetConnectionID(val OptString) {
	s.ConnectionID = val
}

// SetCustomerReference sets the value of CustomerReference.
func (s *PhoneNumberWithVoiceSettings) SetCustomerReference(val OptString) {
	s.CustomerReference = val
}

// SetTechPrefixEnabled sets the value of TechPrefixEnabled.
func (s *PhoneNumberWithVoiceSettings) SetTechPrefixEnabled(val OptBool) {
	s.TechPrefixEnabled = val
}

// SetTranslatedNumber sets the value of TranslatedNumber.
func (s *PhoneNumberWithVoiceSettings) SetTranslatedNumber(val OptString) {
	s.TranslatedNumber = val
}

// SetCallForwarding sets the value of CallForwarding.
func (s *PhoneNumberWithVoiceSettings) SetCallForwarding(val OptCallForwarding) {
	s.CallForwarding = val
}

// SetCnamListing sets the value of CnamListing.
func (s *PhoneNumberWithVoiceSettings) SetCnamListing(val OptCnamListing) {
	s.CnamListing = val
}

// SetEmergency sets the value of Emergency.
func (s *PhoneNumberWithVoiceSettings) SetEmergency(val OptEmergencySettings) {
	s.Emergency = val
}

// SetUsagePaymentMethod sets the value of UsagePaymentMethod.
func (s *PhoneNumberWithVoiceSettings) SetUsagePaymentMethod(val OptPhoneNumberWithVoiceSettingsUsagePaymentMethod) {
	s.UsagePaymentMethod = val
}

// SetMediaFeatures sets the value of MediaFeatures.
func (s *PhoneNumberWithVoiceSettings) SetMediaFeatures(val OptMediaFeatures) {
	s.MediaFeatures = val
}

// SetCallRecording sets the value of CallRecording.
func (s *PhoneNumberWithVoiceSettings) SetCallRecording(val OptCallRecording) {
	s.CallRecording = val
}

// SetInboundCallScreening sets the value of InboundCallScreening.
func (s *PhoneNumberWithVoiceSettings) SetInboundCallScreening(val OptPhoneNumberWithVoiceSettingsInboundCallScreening) {
	s.InboundCallScreening = val
}

// The inbound_call_screening setting is a phone number configuration option variable that allows
// users to configure their settings to block or flag fraudulent calls. It can be set to disabled,
// reject_calls, or flag_calls. This feature has an additional per-number monthly cost associated
// with it.
type PhoneNumberWithVoiceSettingsInboundCallScreening string

const (
	PhoneNumberWithVoiceSettingsInboundCallScreeningDisabled    PhoneNumberWithVoiceSettingsInboundCallScreening = "disabled"
	PhoneNumberWithVoiceSettingsInboundCallScreeningRejectCalls PhoneNumberWithVoiceSettingsInboundCallScreening = "reject_calls"
	PhoneNumberWithVoiceSettingsInboundCallScreeningFlagCalls   PhoneNumberWithVoiceSettingsInboundCallScreening = "flag_calls"
)

// AllValues returns all PhoneNumberWithVoiceSettingsInboundCallScreening values.
func (PhoneNumberWithVoiceSettingsInboundCallScreening) AllValues() []PhoneNumberWithVoiceSettingsInboundCallScreening {
	return []PhoneNumberWithVoiceSettingsInboundCallScreening{
		PhoneNumberWithVoiceSettingsInboundCallScreeningDisabled,
		PhoneNumberWithVoiceSettingsInboundCallScreeningRejectCalls,
		PhoneNumberWithVoiceSettingsInboundCallScreeningFlagCalls,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PhoneNumberWithVoiceSettingsInboundCallScreening) MarshalText() ([]byte, error) {
	switch s {
	case PhoneNumberWithVoiceSettingsInboundCallScreeningDisabled:
		return []byte(s), nil
	case PhoneNumberWithVoiceSettingsInboundCallScreeningRejectCalls:
		return []byte(s), nil
	case PhoneNumberWithVoiceSettingsInboundCallScreeningFlagCalls:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PhoneNumberWithVoiceSettingsInboundCallScreening) UnmarshalText(data []byte) error {
	switch PhoneNumberWithVoiceSettingsInboundCallScreening(data) {
	case PhoneNumberWithVoiceSettingsInboundCallScreeningDisabled:
		*s = PhoneNumberWithVoiceSettingsInboundCallScreeningDisabled
		return nil
	case PhoneNumberWithVoiceSettingsInboundCallScreeningRejectCalls:
		*s = PhoneNumberWithVoiceSettingsInboundCallScreeningRejectCalls
		return nil
	case PhoneNumberWithVoiceSettingsInboundCallScreeningFlagCalls:
		*s = PhoneNumberWithVoiceSettingsInboundCallScreeningFlagCalls
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PhoneNumberWithVoiceSettingsResponse struct {
	Data OptPhoneNumberWithVoiceSettings `json:"data"`
}

// GetData returns the value of Data.
func (s *PhoneNumberWithVoiceSettingsResponse) GetData() OptPhoneNumberWithVoiceSettings {
	return s.Data
}

// SetData sets the value of Data.
func (s *PhoneNumberWithVoiceSettingsResponse) SetData(val OptPhoneNumberWithVoiceSettings) {
	s.Data = val
}

func (*PhoneNumberWithVoiceSettingsResponse) getPhoneNumberVoiceSettingsRes()    {}
func (*PhoneNumberWithVoiceSettingsResponse) updatePhoneNumberVoiceSettingsRes() {}

// Controls whether a number is billed per minute or uses your concurrent channels.
type PhoneNumberWithVoiceSettingsUsagePaymentMethod string

const (
	PhoneNumberWithVoiceSettingsUsagePaymentMethodPayPerMinute PhoneNumberWithVoiceSettingsUsagePaymentMethod = "pay-per-minute"
	PhoneNumberWithVoiceSettingsUsagePaymentMethodChannel      PhoneNumberWithVoiceSettingsUsagePaymentMethod = "channel"
)

// AllValues returns all PhoneNumberWithVoiceSettingsUsagePaymentMethod values.
func (PhoneNumberWithVoiceSettingsUsagePaymentMethod) AllValues() []PhoneNumberWithVoiceSettingsUsagePaymentMethod {
	return []PhoneNumberWithVoiceSettingsUsagePaymentMethod{
		PhoneNumberWithVoiceSettingsUsagePaymentMethodPayPerMinute,
		PhoneNumberWithVoiceSettingsUsagePaymentMethodChannel,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PhoneNumberWithVoiceSettingsUsagePaymentMethod) MarshalText() ([]byte, error) {
	switch s {
	case PhoneNumberWithVoiceSettingsUsagePaymentMethodPayPerMinute:
		return []byte(s), nil
	case PhoneNumberWithVoiceSettingsUsagePaymentMethodChannel:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PhoneNumberWithVoiceSettingsUsagePaymentMethod) UnmarshalText(data []byte) error {
	switch PhoneNumberWithVoiceSettingsUsagePaymentMethod(data) {
	case PhoneNumberWithVoiceSettingsUsagePaymentMethodPayPerMinute:
		*s = PhoneNumberWithVoiceSettingsUsagePaymentMethodPayPerMinute
		return nil
	case PhoneNumberWithVoiceSettingsUsagePaymentMethodChannel:
		*s = PhoneNumberWithVoiceSettingsUsagePaymentMethodChannel
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PhoneNumbers []PhoneNumbersItem

// A Phone Number that can make phone calls displaying the configured brand information.
type PhoneNumbersItem struct {
	RecordType OptString `json:"record_type"`
	ID         OptUUID   `json:"id"`
	// The phone number in e164 format.
	PhoneNumber OptString `json:"phone_number"`
	// The approval status of this individual phone number in Google.
	GoogleVerificationStatus OptPhoneNumbersItemGoogleVerificationStatus `json:"google_verification_status"`
	// Additional information about the decision, if available.
	GoogleApprovalInfo OptString `json:"google_approval_info"`
	DisplayProfileID   OptUUID   `json:"display_profile_id"`
	// Marks the Phone Number to be removed from the Display Profile.
	Delete OptBool `json:"delete"`
}

// GetRecordType returns the value of RecordType.
func (s *PhoneNumbersItem) GetRecordType() OptString {
	return s.RecordType
}

// GetID returns the value of ID.
func (s *PhoneNumbersItem) GetID() OptUUID {
	return s.ID
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *PhoneNumbersItem) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetGoogleVerificationStatus returns the value of GoogleVerificationStatus.
func (s *PhoneNumbersItem) GetGoogleVerificationStatus() OptPhoneNumbersItemGoogleVerificationStatus {
	return s.GoogleVerificationStatus
}

// GetGoogleApprovalInfo returns the value of GoogleApprovalInfo.
func (s *PhoneNumbersItem) GetGoogleApprovalInfo() OptString {
	return s.GoogleApprovalInfo
}

// GetDisplayProfileID returns the value of DisplayProfileID.
func (s *PhoneNumbersItem) GetDisplayProfileID() OptUUID {
	return s.DisplayProfileID
}

// GetDelete returns the value of Delete.
func (s *PhoneNumbersItem) GetDelete() OptBool {
	return s.Delete
}

// SetRecordType sets the value of RecordType.
func (s *PhoneNumbersItem) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetID sets the value of ID.
func (s *PhoneNumbersItem) SetID(val OptUUID) {
	s.ID = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *PhoneNumbersItem) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetGoogleVerificationStatus sets the value of GoogleVerificationStatus.
func (s *PhoneNumbersItem) SetGoogleVerificationStatus(val OptPhoneNumbersItemGoogleVerificationStatus) {
	s.GoogleVerificationStatus = val
}

// SetGoogleApprovalInfo sets the value of GoogleApprovalInfo.
func (s *PhoneNumbersItem) SetGoogleApprovalInfo(val OptString) {
	s.GoogleApprovalInfo = val
}

// SetDisplayProfileID sets the value of DisplayProfileID.
func (s *PhoneNumbersItem) SetDisplayProfileID(val OptUUID) {
	s.DisplayProfileID = val
}

// SetDelete sets the value of Delete.
func (s *PhoneNumbersItem) SetDelete(val OptBool) {
	s.Delete = val
}

// The approval status of this individual phone number in Google.
type PhoneNumbersItemGoogleVerificationStatus string

const (
	PhoneNumbersItemGoogleVerificationStatusSTATEUNSPECIFIED PhoneNumbersItemGoogleVerificationStatus = "STATE_UNSPECIFIED"
	PhoneNumbersItemGoogleVerificationStatusPENDINGAPPROVAL  PhoneNumbersItemGoogleVerificationStatus = "PENDING_APPROVAL"
	PhoneNumbersItemGoogleVerificationStatusAPPROVED         PhoneNumbersItemGoogleVerificationStatus = "APPROVED"
	PhoneNumbersItemGoogleVerificationStatusDENIED           PhoneNumbersItemGoogleVerificationStatus = "DENIED"
	PhoneNumbersItemGoogleVerificationStatusPENDINGREMOVAL   PhoneNumbersItemGoogleVerificationStatus = "PENDING_REMOVAL"
)

// AllValues returns all PhoneNumbersItemGoogleVerificationStatus values.
func (PhoneNumbersItemGoogleVerificationStatus) AllValues() []PhoneNumbersItemGoogleVerificationStatus {
	return []PhoneNumbersItemGoogleVerificationStatus{
		PhoneNumbersItemGoogleVerificationStatusSTATEUNSPECIFIED,
		PhoneNumbersItemGoogleVerificationStatusPENDINGAPPROVAL,
		PhoneNumbersItemGoogleVerificationStatusAPPROVED,
		PhoneNumbersItemGoogleVerificationStatusDENIED,
		PhoneNumbersItemGoogleVerificationStatusPENDINGREMOVAL,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PhoneNumbersItemGoogleVerificationStatus) MarshalText() ([]byte, error) {
	switch s {
	case PhoneNumbersItemGoogleVerificationStatusSTATEUNSPECIFIED:
		return []byte(s), nil
	case PhoneNumbersItemGoogleVerificationStatusPENDINGAPPROVAL:
		return []byte(s), nil
	case PhoneNumbersItemGoogleVerificationStatusAPPROVED:
		return []byte(s), nil
	case PhoneNumbersItemGoogleVerificationStatusDENIED:
		return []byte(s), nil
	case PhoneNumbersItemGoogleVerificationStatusPENDINGREMOVAL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PhoneNumbersItemGoogleVerificationStatus) UnmarshalText(data []byte) error {
	switch PhoneNumbersItemGoogleVerificationStatus(data) {
	case PhoneNumbersItemGoogleVerificationStatusSTATEUNSPECIFIED:
		*s = PhoneNumbersItemGoogleVerificationStatusSTATEUNSPECIFIED
		return nil
	case PhoneNumbersItemGoogleVerificationStatusPENDINGAPPROVAL:
		*s = PhoneNumbersItemGoogleVerificationStatusPENDINGAPPROVAL
		return nil
	case PhoneNumbersItemGoogleVerificationStatusAPPROVED:
		*s = PhoneNumbersItemGoogleVerificationStatusAPPROVED
		return nil
	case PhoneNumbersItemGoogleVerificationStatusDENIED:
		*s = PhoneNumbersItemGoogleVerificationStatusDENIED
		return nil
	case PhoneNumbersItemGoogleVerificationStatusPENDINGREMOVAL:
		*s = PhoneNumbersItemGoogleVerificationStatusPENDINGREMOVAL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PhoneNumbersJob
type PhoneNumbersJob struct {
	// Identifies the resource.
	ID OptUUID `json:"id"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	// Indicates the completion status of the background update.
	Status OptPhoneNumbersJobStatus `json:"status"`
	// Identifies the type of the background job.
	Type OptPhoneNumbersJobType `json:"type"`
	// ISO 8601 formatted date indicating when the estimated time of completion of the background job.
	Etc OptDateTime `json:"etc"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt OptString `json:"created_at"`
	// ISO 8601 formatted date indicating when the resource was updated.
	UpdatedAt            OptString                            `json:"updated_at"`
	PhoneNumbers         []PhoneNumbersJobPhoneNumber         `json:"phone_numbers"`
	SuccessfulOperations []PhoneNumbersJobSuccessfulOperation `json:"successful_operations"`
	PendingOperations    []PhoneNumbersJobPendingOperation    `json:"pending_operations"`
	FailedOperations     []PhoneNumbersJobFailedOperation     `json:"failed_operations"`
}

// GetID returns the value of ID.
func (s *PhoneNumbersJob) GetID() OptUUID {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *PhoneNumbersJob) GetRecordType() OptString {
	return s.RecordType
}

// GetStatus returns the value of Status.
func (s *PhoneNumbersJob) GetStatus() OptPhoneNumbersJobStatus {
	return s.Status
}

// GetType returns the value of Type.
func (s *PhoneNumbersJob) GetType() OptPhoneNumbersJobType {
	return s.Type
}

// GetEtc returns the value of Etc.
func (s *PhoneNumbersJob) GetEtc() OptDateTime {
	return s.Etc
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PhoneNumbersJob) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PhoneNumbersJob) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetPhoneNumbers returns the value of PhoneNumbers.
func (s *PhoneNumbersJob) GetPhoneNumbers() []PhoneNumbersJobPhoneNumber {
	return s.PhoneNumbers
}

// GetSuccessfulOperations returns the value of SuccessfulOperations.
func (s *PhoneNumbersJob) GetSuccessfulOperations() []PhoneNumbersJobSuccessfulOperation {
	return s.SuccessfulOperations
}

// GetPendingOperations returns the value of PendingOperations.
func (s *PhoneNumbersJob) GetPendingOperations() []PhoneNumbersJobPendingOperation {
	return s.PendingOperations
}

// GetFailedOperations returns the value of FailedOperations.
func (s *PhoneNumbersJob) GetFailedOperations() []PhoneNumbersJobFailedOperation {
	return s.FailedOperations
}

// SetID sets the value of ID.
func (s *PhoneNumbersJob) SetID(val OptUUID) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *PhoneNumbersJob) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetStatus sets the value of Status.
func (s *PhoneNumbersJob) SetStatus(val OptPhoneNumbersJobStatus) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *PhoneNumbersJob) SetType(val OptPhoneNumbersJobType) {
	s.Type = val
}

// SetEtc sets the value of Etc.
func (s *PhoneNumbersJob) SetEtc(val OptDateTime) {
	s.Etc = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PhoneNumbersJob) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PhoneNumbersJob) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetPhoneNumbers sets the value of PhoneNumbers.
func (s *PhoneNumbersJob) SetPhoneNumbers(val []PhoneNumbersJobPhoneNumber) {
	s.PhoneNumbers = val
}

// SetSuccessfulOperations sets the value of SuccessfulOperations.
func (s *PhoneNumbersJob) SetSuccessfulOperations(val []PhoneNumbersJobSuccessfulOperation) {
	s.SuccessfulOperations = val
}

// SetPendingOperations sets the value of PendingOperations.
func (s *PhoneNumbersJob) SetPendingOperations(val []PhoneNumbersJobPendingOperation) {
	s.PendingOperations = val
}

// SetFailedOperations sets the value of FailedOperations.
func (s *PhoneNumbersJob) SetFailedOperations(val []PhoneNumbersJobFailedOperation) {
	s.FailedOperations = val
}

// Ref: #/components/schemas/PhoneNumbersJobDeletePhoneNumbersRequest
type PhoneNumbersJobDeletePhoneNumbersRequest struct {
	PhoneNumbers []string `json:"phone_numbers"`
}

// GetPhoneNumbers returns the value of PhoneNumbers.
func (s *PhoneNumbersJobDeletePhoneNumbersRequest) GetPhoneNumbers() []string {
	return s.PhoneNumbers
}

// SetPhoneNumbers sets the value of PhoneNumbers.
func (s *PhoneNumbersJobDeletePhoneNumbersRequest) SetPhoneNumbers(val []string) {
	s.PhoneNumbers = val
}

// Ref: #/components/schemas/PhoneNumbersJobFailedOperation
type PhoneNumbersJobFailedOperation struct {
	// The phone number in e164 format.
	PhoneNumber OptString `json:"phone_number"`
	// The phone number's ID.
	ID     OptStringInt64 `json:"id"`
	Errors []Error        `json:"errors"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *PhoneNumbersJobFailedOperation) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetID returns the value of ID.
func (s *PhoneNumbersJobFailedOperation) GetID() OptStringInt64 {
	return s.ID
}

// GetErrors returns the value of Errors.
func (s *PhoneNumbersJobFailedOperation) GetErrors() []Error {
	return s.Errors
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *PhoneNumbersJobFailedOperation) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetID sets the value of ID.
func (s *PhoneNumbersJobFailedOperation) SetID(val OptStringInt64) {
	s.ID = val
}

// SetErrors sets the value of Errors.
func (s *PhoneNumbersJobFailedOperation) SetErrors(val []Error) {
	s.Errors = val
}

// Ref: #/components/schemas/PhoneNumbersJobPendingOperation
type PhoneNumbersJobPendingOperation struct {
	// The phone number in e164 format.
	PhoneNumber OptString `json:"phone_number"`
	// The phone number's ID.
	ID OptStringInt64 `json:"id"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *PhoneNumbersJobPendingOperation) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetID returns the value of ID.
func (s *PhoneNumbersJobPendingOperation) GetID() OptStringInt64 {
	return s.ID
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *PhoneNumbersJobPendingOperation) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetID sets the value of ID.
func (s *PhoneNumbersJobPendingOperation) SetID(val OptStringInt64) {
	s.ID = val
}

// Ref: #/components/schemas/PhoneNumbersJobPhoneNumber
type PhoneNumbersJobPhoneNumber struct {
	// The phone number in e164 format.
	PhoneNumber OptString `json:"phone_number"`
	// The phone number's ID.
	ID OptStringInt64 `json:"id"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *PhoneNumbersJobPhoneNumber) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetID returns the value of ID.
func (s *PhoneNumbersJobPhoneNumber) GetID() OptStringInt64 {
	return s.ID
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *PhoneNumbersJobPhoneNumber) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetID sets the value of ID.
func (s *PhoneNumbersJobPhoneNumber) SetID(val OptStringInt64) {
	s.ID = val
}

// Indicates the completion status of the background update.
type PhoneNumbersJobStatus string

const (
	PhoneNumbersJobStatusPending    PhoneNumbersJobStatus = "pending"
	PhoneNumbersJobStatusInProgress PhoneNumbersJobStatus = "in_progress"
	PhoneNumbersJobStatusCompleted  PhoneNumbersJobStatus = "completed"
	PhoneNumbersJobStatusFailed     PhoneNumbersJobStatus = "failed"
	PhoneNumbersJobStatusExpired    PhoneNumbersJobStatus = "expired"
)

// AllValues returns all PhoneNumbersJobStatus values.
func (PhoneNumbersJobStatus) AllValues() []PhoneNumbersJobStatus {
	return []PhoneNumbersJobStatus{
		PhoneNumbersJobStatusPending,
		PhoneNumbersJobStatusInProgress,
		PhoneNumbersJobStatusCompleted,
		PhoneNumbersJobStatusFailed,
		PhoneNumbersJobStatusExpired,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PhoneNumbersJobStatus) MarshalText() ([]byte, error) {
	switch s {
	case PhoneNumbersJobStatusPending:
		return []byte(s), nil
	case PhoneNumbersJobStatusInProgress:
		return []byte(s), nil
	case PhoneNumbersJobStatusCompleted:
		return []byte(s), nil
	case PhoneNumbersJobStatusFailed:
		return []byte(s), nil
	case PhoneNumbersJobStatusExpired:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PhoneNumbersJobStatus) UnmarshalText(data []byte) error {
	switch PhoneNumbersJobStatus(data) {
	case PhoneNumbersJobStatusPending:
		*s = PhoneNumbersJobStatusPending
		return nil
	case PhoneNumbersJobStatusInProgress:
		*s = PhoneNumbersJobStatusInProgress
		return nil
	case PhoneNumbersJobStatusCompleted:
		*s = PhoneNumbersJobStatusCompleted
		return nil
	case PhoneNumbersJobStatusFailed:
		*s = PhoneNumbersJobStatusFailed
		return nil
	case PhoneNumbersJobStatusExpired:
		*s = PhoneNumbersJobStatusExpired
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PhoneNumbersJobSuccessfulOperation
type PhoneNumbersJobSuccessfulOperation struct {
	// The phone number in e164 format.
	PhoneNumber OptString `json:"phone_number"`
	// The phone number's ID.
	ID OptStringInt64 `json:"id"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *PhoneNumbersJobSuccessfulOperation) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetID returns the value of ID.
func (s *PhoneNumbersJobSuccessfulOperation) GetID() OptStringInt64 {
	return s.ID
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *PhoneNumbersJobSuccessfulOperation) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetID sets the value of ID.
func (s *PhoneNumbersJobSuccessfulOperation) SetID(val OptStringInt64) {
	s.ID = val
}

// Identifies the type of the background job.
type PhoneNumbersJobType string

const (
	PhoneNumbersJobTypeUpdateEmergencySettings PhoneNumbersJobType = "update_emergency_settings"
	PhoneNumbersJobTypeDeletePhoneNumbers      PhoneNumbersJobType = "delete_phone_numbers"
	PhoneNumbersJobTypeUpdatePhoneNumbers      PhoneNumbersJobType = "update_phone_numbers"
)

// AllValues returns all PhoneNumbersJobType values.
func (PhoneNumbersJobType) AllValues() []PhoneNumbersJobType {
	return []PhoneNumbersJobType{
		PhoneNumbersJobTypeUpdateEmergencySettings,
		PhoneNumbersJobTypeDeletePhoneNumbers,
		PhoneNumbersJobTypeUpdatePhoneNumbers,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PhoneNumbersJobType) MarshalText() ([]byte, error) {
	switch s {
	case PhoneNumbersJobTypeUpdateEmergencySettings:
		return []byte(s), nil
	case PhoneNumbersJobTypeDeletePhoneNumbers:
		return []byte(s), nil
	case PhoneNumbersJobTypeUpdatePhoneNumbers:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PhoneNumbersJobType) UnmarshalText(data []byte) error {
	switch PhoneNumbersJobType(data) {
	case PhoneNumbersJobTypeUpdateEmergencySettings:
		*s = PhoneNumbersJobTypeUpdateEmergencySettings
		return nil
	case PhoneNumbersJobTypeDeletePhoneNumbers:
		*s = PhoneNumbersJobTypeDeletePhoneNumbers
		return nil
	case PhoneNumbersJobTypeUpdatePhoneNumbers:
		*s = PhoneNumbersJobTypeUpdatePhoneNumbers
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PhoneNumbersJobUpdateEmergencySettingsRequest
type PhoneNumbersJobUpdateEmergencySettingsRequest struct {
	PhoneNumbers []string `json:"phone_numbers"`
	// Indicates whether to enable emergency services on this number.
	EmergencyEnabled bool `json:"emergency_enabled"`
	// Identifies the address to be used with emergency services.
	EmergencyAddressID int64 `json:"emergency_address_id"`
}

// GetPhoneNumbers returns the value of PhoneNumbers.
func (s *PhoneNumbersJobUpdateEmergencySettingsRequest) GetPhoneNumbers() []string {
	return s.PhoneNumbers
}

// GetEmergencyEnabled returns the value of EmergencyEnabled.
func (s *PhoneNumbersJobUpdateEmergencySettingsRequest) GetEmergencyEnabled() bool {
	return s.EmergencyEnabled
}

// GetEmergencyAddressID returns the value of EmergencyAddressID.
func (s *PhoneNumbersJobUpdateEmergencySettingsRequest) GetEmergencyAddressID() int64 {
	return s.EmergencyAddressID
}

// SetPhoneNumbers sets the value of PhoneNumbers.
func (s *PhoneNumbersJobUpdateEmergencySettingsRequest) SetPhoneNumbers(val []string) {
	s.PhoneNumbers = val
}

// SetEmergencyEnabled sets the value of EmergencyEnabled.
func (s *PhoneNumbersJobUpdateEmergencySettingsRequest) SetEmergencyEnabled(val bool) {
	s.EmergencyEnabled = val
}

// SetEmergencyAddressID sets the value of EmergencyAddressID.
func (s *PhoneNumbersJobUpdateEmergencySettingsRequest) SetEmergencyAddressID(val int64) {
	s.EmergencyAddressID = val
}

// Ref: #/components/schemas/PhoneNumbersJobUpdatePhoneNumbersRequest
type PhoneNumbersJobUpdatePhoneNumbersRequest struct {
	// Array of phone number ids and/or phone numbers in E164 format to update.
	PhoneNumbers []string `json:"phone_numbers"`
	// A list of user-assigned tags to help organize phone numbers.
	Tags []string `json:"tags"`
	// If someone attempts to port your phone number away from Telnyx and your phone number has an
	// external PIN set, we will attempt to verify that you provided the correct external PIN to the
	// winning carrier. Note that not all carriers cooperate with this security mechanism.
	ExternalPin OptString `json:"external_pin"`
	// A customer reference string for customer look ups.
	CustomerReference OptString `json:"customer_reference"`
	// Identifies the connection associated with the phone number.
	ConnectionID OptString `json:"connection_id"`
	// Identifies the billing group associated with the phone number.
	BillingGroupID OptString                                `json:"billing_group_id"`
	Voice          OptUpdatePhoneNumberVoiceSettingsRequest `json:"voice"`
}

// GetPhoneNumbers returns the value of PhoneNumbers.
func (s *PhoneNumbersJobUpdatePhoneNumbersRequest) GetPhoneNumbers() []string {
	return s.PhoneNumbers
}

// GetTags returns the value of Tags.
func (s *PhoneNumbersJobUpdatePhoneNumbersRequest) GetTags() []string {
	return s.Tags
}

// GetExternalPin returns the value of ExternalPin.
func (s *PhoneNumbersJobUpdatePhoneNumbersRequest) GetExternalPin() OptString {
	return s.ExternalPin
}

// GetCustomerReference returns the value of CustomerReference.
func (s *PhoneNumbersJobUpdatePhoneNumbersRequest) GetCustomerReference() OptString {
	return s.CustomerReference
}

// GetConnectionID returns the value of ConnectionID.
func (s *PhoneNumbersJobUpdatePhoneNumbersRequest) GetConnectionID() OptString {
	return s.ConnectionID
}

// GetBillingGroupID returns the value of BillingGroupID.
func (s *PhoneNumbersJobUpdatePhoneNumbersRequest) GetBillingGroupID() OptString {
	return s.BillingGroupID
}

// GetVoice returns the value of Voice.
func (s *PhoneNumbersJobUpdatePhoneNumbersRequest) GetVoice() OptUpdatePhoneNumberVoiceSettingsRequest {
	return s.Voice
}

// SetPhoneNumbers sets the value of PhoneNumbers.
func (s *PhoneNumbersJobUpdatePhoneNumbersRequest) SetPhoneNumbers(val []string) {
	s.PhoneNumbers = val
}

// SetTags sets the value of Tags.
func (s *PhoneNumbersJobUpdatePhoneNumbersRequest) SetTags(val []string) {
	s.Tags = val
}

// SetExternalPin sets the value of ExternalPin.
func (s *PhoneNumbersJobUpdatePhoneNumbersRequest) SetExternalPin(val OptString) {
	s.ExternalPin = val
}

// SetCustomerReference sets the value of CustomerReference.
func (s *PhoneNumbersJobUpdatePhoneNumbersRequest) SetCustomerReference(val OptString) {
	s.CustomerReference = val
}

// SetConnectionID sets the value of ConnectionID.
func (s *PhoneNumbersJobUpdatePhoneNumbersRequest) SetConnectionID(val OptString) {
	s.ConnectionID = val
}

// SetBillingGroupID sets the value of BillingGroupID.
func (s *PhoneNumbersJobUpdatePhoneNumbersRequest) SetBillingGroupID(val OptString) {
	s.BillingGroupID = val
}

// SetVoice sets the value of Voice.
func (s *PhoneNumbersJobUpdatePhoneNumbersRequest) SetVoice(val OptUpdatePhoneNumberVoiceSettingsRequest) {
	s.Voice = val
}

// Ref: #/components/schemas/PlayAudioUrlRequest
type PlayAudioUrlRequest struct {
	// The URL of a file to be played back on the call. The URL can point to either a WAV or MP3 file.
	// media_name and audio_url cannot be used together in one request.
	AudioURL OptString `json:"audio_url"`
	// The media_name of a file to be played back on the call. The media_name must point to a file
	// previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either
	// be a WAV or MP3 file.
	MediaName OptString `json:"media_name"`
	// The number of times the audio file should be played. If supplied, the value must be an integer
	// between 1 and 100, or the special string `infinity` for an endless loop.
	Loop OptLoopcount `json:"loop"`
	// When enabled, audio will be mixed on top of any other audio that is actively being played back.
	// Note that `overlay: true` will only work if there is another audio file already being played on
	// the call.
	Overlay OptBool `json:"overlay"`
	// When specified, it stops the current audio being played. Specify `current` to stop the current
	// audio being played, and to play the next file in the queue. Specify `all` to stop the current
	// audio file being played and to also clear all audio files from the queue.
	Stop OptString `json:"stop"`
	// Specifies the leg or legs on which audio will be played. If supplied, the value must be either
	// `self`, `opposite` or `both`.
	TargetLegs OptString `json:"target_legs"`
	// Caches the audio file. Useful when playing the same audio file multiple times during the call.
	CacheAudio OptBool `json:"cache_audio"`
	// Specifies the type of audio provided in `audio_url` or `playback_content`.
	AudioType OptPlayAudioUrlRequestAudioType `json:"audio_type"`
	// Allows a user to provide base64 encoded mp3 or wav. Note: when using this parameter, `media_url`
	// and `media_name` in the `playback_started` and `playback_ended` webhooks will be empty.
	PlaybackContent OptString `json:"playback_content"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetAudioURL returns the value of AudioURL.
func (s *PlayAudioUrlRequest) GetAudioURL() OptString {
	return s.AudioURL
}

// GetMediaName returns the value of MediaName.
func (s *PlayAudioUrlRequest) GetMediaName() OptString {
	return s.MediaName
}

// GetLoop returns the value of Loop.
func (s *PlayAudioUrlRequest) GetLoop() OptLoopcount {
	return s.Loop
}

// GetOverlay returns the value of Overlay.
func (s *PlayAudioUrlRequest) GetOverlay() OptBool {
	return s.Overlay
}

// GetStop returns the value of Stop.
func (s *PlayAudioUrlRequest) GetStop() OptString {
	return s.Stop
}

// GetTargetLegs returns the value of TargetLegs.
func (s *PlayAudioUrlRequest) GetTargetLegs() OptString {
	return s.TargetLegs
}

// GetCacheAudio returns the value of CacheAudio.
func (s *PlayAudioUrlRequest) GetCacheAudio() OptBool {
	return s.CacheAudio
}

// GetAudioType returns the value of AudioType.
func (s *PlayAudioUrlRequest) GetAudioType() OptPlayAudioUrlRequestAudioType {
	return s.AudioType
}

// GetPlaybackContent returns the value of PlaybackContent.
func (s *PlayAudioUrlRequest) GetPlaybackContent() OptString {
	return s.PlaybackContent
}

// GetClientState returns the value of ClientState.
func (s *PlayAudioUrlRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *PlayAudioUrlRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetAudioURL sets the value of AudioURL.
func (s *PlayAudioUrlRequest) SetAudioURL(val OptString) {
	s.AudioURL = val
}

// SetMediaName sets the value of MediaName.
func (s *PlayAudioUrlRequest) SetMediaName(val OptString) {
	s.MediaName = val
}

// SetLoop sets the value of Loop.
func (s *PlayAudioUrlRequest) SetLoop(val OptLoopcount) {
	s.Loop = val
}

// SetOverlay sets the value of Overlay.
func (s *PlayAudioUrlRequest) SetOverlay(val OptBool) {
	s.Overlay = val
}

// SetStop sets the value of Stop.
func (s *PlayAudioUrlRequest) SetStop(val OptString) {
	s.Stop = val
}

// SetTargetLegs sets the value of TargetLegs.
func (s *PlayAudioUrlRequest) SetTargetLegs(val OptString) {
	s.TargetLegs = val
}

// SetCacheAudio sets the value of CacheAudio.
func (s *PlayAudioUrlRequest) SetCacheAudio(val OptBool) {
	s.CacheAudio = val
}

// SetAudioType sets the value of AudioType.
func (s *PlayAudioUrlRequest) SetAudioType(val OptPlayAudioUrlRequestAudioType) {
	s.AudioType = val
}

// SetPlaybackContent sets the value of PlaybackContent.
func (s *PlayAudioUrlRequest) SetPlaybackContent(val OptString) {
	s.PlaybackContent = val
}

// SetClientState sets the value of ClientState.
func (s *PlayAudioUrlRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *PlayAudioUrlRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// Specifies the type of audio provided in `audio_url` or `playback_content`.
type PlayAudioUrlRequestAudioType string

const (
	PlayAudioUrlRequestAudioTypeMp3 PlayAudioUrlRequestAudioType = "mp3"
	PlayAudioUrlRequestAudioTypeWav PlayAudioUrlRequestAudioType = "wav"
)

// AllValues returns all PlayAudioUrlRequestAudioType values.
func (PlayAudioUrlRequestAudioType) AllValues() []PlayAudioUrlRequestAudioType {
	return []PlayAudioUrlRequestAudioType{
		PlayAudioUrlRequestAudioTypeMp3,
		PlayAudioUrlRequestAudioTypeWav,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlayAudioUrlRequestAudioType) MarshalText() ([]byte, error) {
	switch s {
	case PlayAudioUrlRequestAudioTypeMp3:
		return []byte(s), nil
	case PlayAudioUrlRequestAudioTypeWav:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlayAudioUrlRequestAudioType) UnmarshalText(data []byte) error {
	switch PlayAudioUrlRequestAudioType(data) {
	case PlayAudioUrlRequestAudioTypeMp3:
		*s = PlayAudioUrlRequestAudioTypeMp3
		return nil
	case PlayAudioUrlRequestAudioTypeWav:
		*s = PlayAudioUrlRequestAudioTypeWav
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PlayBeep bool

// Ref: #/components/schemas/PlaybackStopRequest
type PlaybackStopRequest struct {
	// When enabled, it stops the audio being played in the overlay queue.
	Overlay OptBool `json:"overlay"`
	// Use `current` to stop the current audio being played. Use `all` to stop the current audio file
	// being played and clear all audio files from the queue.
	Stop OptString `json:"stop"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetOverlay returns the value of Overlay.
func (s *PlaybackStopRequest) GetOverlay() OptBool {
	return s.Overlay
}

// GetStop returns the value of Stop.
func (s *PlaybackStopRequest) GetStop() OptString {
	return s.Stop
}

// GetClientState returns the value of ClientState.
func (s *PlaybackStopRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *PlaybackStopRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetOverlay sets the value of Overlay.
func (s *PlaybackStopRequest) SetOverlay(val OptBool) {
	s.Overlay = val
}

// SetStop sets the value of Stop.
func (s *PlaybackStopRequest) SetStop(val OptString) {
	s.Stop = val
}

// SetClientState sets the value of ClientState.
func (s *PlaybackStopRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *PlaybackStopRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

type PortOutListSupportingDocumentsResponse struct {
	Data []PortOutSupportingDocument `json:"data"`
}

// GetData returns the value of Data.
func (s *PortOutListSupportingDocumentsResponse) GetData() []PortOutSupportingDocument {
	return s.Data
}

// SetData sets the value of Data.
func (s *PortOutListSupportingDocumentsResponse) SetData(val []PortOutSupportingDocument) {
	s.Data = val
}

func (*PortOutListSupportingDocumentsResponse) getPortRequestSupportingDocumentsRes() {}

// Ref: #/components/schemas/PortOutSupportingDocument
type PortOutSupportingDocument struct {
	ID uuid.UUID `json:"id"`
	// Identifies the type of the resource.
	RecordType string `json:"record_type"`
	// Identifies the type of the document.
	Type PortOutSupportingDocumentType `json:"type"`
	// Identifies the associated port request.
	PortoutID uuid.UUID `json:"portout_id"`
	// Identifies the associated document.
	DocumentID uuid.UUID `json:"document_id"`
	// Supporting document creation timestamp in ISO 8601 format.
	CreatedAt string `json:"created_at"`
	// Supporting document last changed timestamp in ISO 8601 format.
	UpdatedAt string `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *PortOutSupportingDocument) GetID() uuid.UUID {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *PortOutSupportingDocument) GetRecordType() string {
	return s.RecordType
}

// GetType returns the value of Type.
func (s *PortOutSupportingDocument) GetType() PortOutSupportingDocumentType {
	return s.Type
}

// GetPortoutID returns the value of PortoutID.
func (s *PortOutSupportingDocument) GetPortoutID() uuid.UUID {
	return s.PortoutID
}

// GetDocumentID returns the value of DocumentID.
func (s *PortOutSupportingDocument) GetDocumentID() uuid.UUID {
	return s.DocumentID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PortOutSupportingDocument) GetCreatedAt() string {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PortOutSupportingDocument) GetUpdatedAt() string {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *PortOutSupportingDocument) SetID(val uuid.UUID) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *PortOutSupportingDocument) SetRecordType(val string) {
	s.RecordType = val
}

// SetType sets the value of Type.
func (s *PortOutSupportingDocument) SetType(val PortOutSupportingDocumentType) {
	s.Type = val
}

// SetPortoutID sets the value of PortoutID.
func (s *PortOutSupportingDocument) SetPortoutID(val uuid.UUID) {
	s.PortoutID = val
}

// SetDocumentID sets the value of DocumentID.
func (s *PortOutSupportingDocument) SetDocumentID(val uuid.UUID) {
	s.DocumentID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PortOutSupportingDocument) SetCreatedAt(val string) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PortOutSupportingDocument) SetUpdatedAt(val string) {
	s.UpdatedAt = val
}

// Identifies the type of the document.
type PortOutSupportingDocumentType string

const (
	PortOutSupportingDocumentTypeLoa     PortOutSupportingDocumentType = "loa"
	PortOutSupportingDocumentTypeInvoice PortOutSupportingDocumentType = "invoice"
)

// AllValues returns all PortOutSupportingDocumentType values.
func (PortOutSupportingDocumentType) AllValues() []PortOutSupportingDocumentType {
	return []PortOutSupportingDocumentType{
		PortOutSupportingDocumentTypeLoa,
		PortOutSupportingDocumentTypeInvoice,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PortOutSupportingDocumentType) MarshalText() ([]byte, error) {
	switch s {
	case PortOutSupportingDocumentTypeLoa:
		return []byte(s), nil
	case PortOutSupportingDocumentTypeInvoice:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PortOutSupportingDocumentType) UnmarshalText(data []byte) error {
	switch PortOutSupportingDocumentType(data) {
	case PortOutSupportingDocumentTypeLoa:
		*s = PortOutSupportingDocumentTypeLoa
		return nil
	case PortOutSupportingDocumentTypeInvoice:
		*s = PortOutSupportingDocumentTypeInvoice
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Portability
type Portability struct {
	// Local Routing Number, if assigned to the requested phone number.
	Lrn OptString `json:"lrn"`
	// Indicates whether or not the requested phone number has been ported.
	PortedStatus OptPortabilityPortedStatus `json:"ported_status"`
	// ISO-formatted date when the requested phone number has been ported.
	PortedDate OptString `json:"ported_date"`
	// Operating Company Name (OCN) as per the Local Exchange Routing Guide (LERG) database.
	Ocn OptString `json:"ocn"`
	// Type of number.
	LineType OptString `json:"line_type"`
	// SPID (Service Provider ID).
	Spid OptString `json:"spid"`
	// Service provider name.
	SpidCarrierName OptString `json:"spid_carrier_name"`
	// Service provider type.
	SpidCarrierType OptString `json:"spid_carrier_type"`
	// Alternative SPID (Service Provider ID). Often used when a carrier is using a number from another
	// carrier.
	Altspid OptString `json:"altspid"`
	// Alternative service provider name.
	AltspidCarrierName OptString `json:"altspid_carrier_name"`
	// Alternative service provider type.
	AltspidCarrierType OptString `json:"altspid_carrier_type"`
	// City name extracted from the locality in the Local Exchange Routing Guide (LERG) database.
	City  OptString `json:"city"`
	State OptString `json:"state"`
}

// GetLrn returns the value of Lrn.
func (s *Portability) GetLrn() OptString {
	return s.Lrn
}

// GetPortedStatus returns the value of PortedStatus.
func (s *Portability) GetPortedStatus() OptPortabilityPortedStatus {
	return s.PortedStatus
}

// GetPortedDate returns the value of PortedDate.
func (s *Portability) GetPortedDate() OptString {
	return s.PortedDate
}

// GetOcn returns the value of Ocn.
func (s *Portability) GetOcn() OptString {
	return s.Ocn
}

// GetLineType returns the value of LineType.
func (s *Portability) GetLineType() OptString {
	return s.LineType
}

// GetSpid returns the value of Spid.
func (s *Portability) GetSpid() OptString {
	return s.Spid
}

// GetSpidCarrierName returns the value of SpidCarrierName.
func (s *Portability) GetSpidCarrierName() OptString {
	return s.SpidCarrierName
}

// GetSpidCarrierType returns the value of SpidCarrierType.
func (s *Portability) GetSpidCarrierType() OptString {
	return s.SpidCarrierType
}

// GetAltspid returns the value of Altspid.
func (s *Portability) GetAltspid() OptString {
	return s.Altspid
}

// GetAltspidCarrierName returns the value of AltspidCarrierName.
func (s *Portability) GetAltspidCarrierName() OptString {
	return s.AltspidCarrierName
}

// GetAltspidCarrierType returns the value of AltspidCarrierType.
func (s *Portability) GetAltspidCarrierType() OptString {
	return s.AltspidCarrierType
}

// GetCity returns the value of City.
func (s *Portability) GetCity() OptString {
	return s.City
}

// GetState returns the value of State.
func (s *Portability) GetState() OptString {
	return s.State
}

// SetLrn sets the value of Lrn.
func (s *Portability) SetLrn(val OptString) {
	s.Lrn = val
}

// SetPortedStatus sets the value of PortedStatus.
func (s *Portability) SetPortedStatus(val OptPortabilityPortedStatus) {
	s.PortedStatus = val
}

// SetPortedDate sets the value of PortedDate.
func (s *Portability) SetPortedDate(val OptString) {
	s.PortedDate = val
}

// SetOcn sets the value of Ocn.
func (s *Portability) SetOcn(val OptString) {
	s.Ocn = val
}

// SetLineType sets the value of LineType.
func (s *Portability) SetLineType(val OptString) {
	s.LineType = val
}

// SetSpid sets the value of Spid.
func (s *Portability) SetSpid(val OptString) {
	s.Spid = val
}

// SetSpidCarrierName sets the value of SpidCarrierName.
func (s *Portability) SetSpidCarrierName(val OptString) {
	s.SpidCarrierName = val
}

// SetSpidCarrierType sets the value of SpidCarrierType.
func (s *Portability) SetSpidCarrierType(val OptString) {
	s.SpidCarrierType = val
}

// SetAltspid sets the value of Altspid.
func (s *Portability) SetAltspid(val OptString) {
	s.Altspid = val
}

// SetAltspidCarrierName sets the value of AltspidCarrierName.
func (s *Portability) SetAltspidCarrierName(val OptString) {
	s.AltspidCarrierName = val
}

// SetAltspidCarrierType sets the value of AltspidCarrierType.
func (s *Portability) SetAltspidCarrierType(val OptString) {
	s.AltspidCarrierType = val
}

// SetCity sets the value of City.
func (s *Portability) SetCity(val OptString) {
	s.City = val
}

// SetState sets the value of State.
func (s *Portability) SetState(val OptString) {
	s.State = val
}

// Ref: #/components/schemas/PortabilityCheckDetails
type PortabilityCheckDetails struct {
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	// Indicates whether this phone number is FastPort eligible.
	FastPortable OptBool `json:"fast_portable"`
	// If this phone number is not portable, explains why. Empty string if the number is portable.
	NotPortableReason OptString `json:"not_portable_reason"`
	// The +E.164 formatted phone number this result is about.
	PhoneNumber OptString `json:"phone_number"`
	// Indicates whether this phone number is portable.
	Portable OptBool `json:"portable"`
}

// GetRecordType returns the value of RecordType.
func (s *PortabilityCheckDetails) GetRecordType() OptString {
	return s.RecordType
}

// GetFastPortable returns the value of FastPortable.
func (s *PortabilityCheckDetails) GetFastPortable() OptBool {
	return s.FastPortable
}

// GetNotPortableReason returns the value of NotPortableReason.
func (s *PortabilityCheckDetails) GetNotPortableReason() OptString {
	return s.NotPortableReason
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *PortabilityCheckDetails) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetPortable returns the value of Portable.
func (s *PortabilityCheckDetails) GetPortable() OptBool {
	return s.Portable
}

// SetRecordType sets the value of RecordType.
func (s *PortabilityCheckDetails) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetFastPortable sets the value of FastPortable.
func (s *PortabilityCheckDetails) SetFastPortable(val OptBool) {
	s.FastPortable = val
}

// SetNotPortableReason sets the value of NotPortableReason.
func (s *PortabilityCheckDetails) SetNotPortableReason(val OptString) {
	s.NotPortableReason = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *PortabilityCheckDetails) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetPortable sets the value of Portable.
func (s *PortabilityCheckDetails) SetPortable(val OptBool) {
	s.Portable = val
}

type PortabilityCheckResponse struct {
	Data []PortabilityCheckDetails `json:"data"`
}

// GetData returns the value of Data.
func (s *PortabilityCheckResponse) GetData() []PortabilityCheckDetails {
	return s.Data
}

// SetData sets the value of Data.
func (s *PortabilityCheckResponse) SetData(val []PortabilityCheckDetails) {
	s.Data = val
}

func (*PortabilityCheckResponse) postPortabilityCheckRes() {}

// Indicates whether or not the requested phone number has been ported.
type PortabilityPortedStatus string

const (
	PortabilityPortedStatusY     PortabilityPortedStatus = "Y"
	PortabilityPortedStatusN     PortabilityPortedStatus = "N"
	PortabilityPortedStatusEmpty PortabilityPortedStatus = ""
)

// AllValues returns all PortabilityPortedStatus values.
func (PortabilityPortedStatus) AllValues() []PortabilityPortedStatus {
	return []PortabilityPortedStatus{
		PortabilityPortedStatusY,
		PortabilityPortedStatusN,
		PortabilityPortedStatusEmpty,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PortabilityPortedStatus) MarshalText() ([]byte, error) {
	switch s {
	case PortabilityPortedStatusY:
		return []byte(s), nil
	case PortabilityPortedStatusN:
		return []byte(s), nil
	case PortabilityPortedStatusEmpty:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PortabilityPortedStatus) UnmarshalText(data []byte) error {
	switch PortabilityPortedStatus(data) {
	case PortabilityPortedStatusY:
		*s = PortabilityPortedStatusY
		return nil
	case PortabilityPortedStatusN:
		*s = PortabilityPortedStatusN
		return nil
	case PortabilityPortedStatusEmpty:
		*s = PortabilityPortedStatusEmpty
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Specifies whether Telnyx is able to confirm portability this number in the United States & Canada.
// International phone numbers are provisional by default.
// Ref: #/components/schemas/PortabilityStatus
type PortabilityStatus string

const (
	PortabilityStatusPending     PortabilityStatus = "pending"
	PortabilityStatusConfirmed   PortabilityStatus = "confirmed"
	PortabilityStatusProvisional PortabilityStatus = "provisional"
)

// AllValues returns all PortabilityStatus values.
func (PortabilityStatus) AllValues() []PortabilityStatus {
	return []PortabilityStatus{
		PortabilityStatusPending,
		PortabilityStatusConfirmed,
		PortabilityStatusProvisional,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PortabilityStatus) MarshalText() ([]byte, error) {
	switch s {
	case PortabilityStatusPending:
		return []byte(s), nil
	case PortabilityStatusConfirmed:
		return []byte(s), nil
	case PortabilityStatusProvisional:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PortabilityStatus) UnmarshalText(data []byte) error {
	switch PortabilityStatus(data) {
	case PortabilityStatusPending:
		*s = PortabilityStatusPending
		return nil
	case PortabilityStatusConfirmed:
		*s = PortabilityStatusConfirmed
		return nil
	case PortabilityStatusProvisional:
		*s = PortabilityStatusProvisional
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PortingAdditionalDocument
type PortingAdditionalDocument struct {
	// Uniquely identifies this additional document.
	ID OptUUID `json:"id"`
	// Identifies the type of additional document.
	DocumentType OptPortingAdditionalDocumentDocumentType `json:"document_type"`
	// Identifies the associated document.
	DocumentID OptUUID `json:"document_id"`
	// The filename of the related document.
	Filename OptString `json:"filename"`
	// The content type of the related document.
	ContentType OptString `json:"content_type"`
	// Identifies the associated porting order.
	PortingOrderID OptUUID `json:"porting_order_id"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt OptDateTime `json:"created_at"`
	// ISO 8601 formatted date indicating when the resource was updated.
	UpdatedAt OptDateTime `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *PortingAdditionalDocument) GetID() OptUUID {
	return s.ID
}

// GetDocumentType returns the value of DocumentType.
func (s *PortingAdditionalDocument) GetDocumentType() OptPortingAdditionalDocumentDocumentType {
	return s.DocumentType
}

// GetDocumentID returns the value of DocumentID.
func (s *PortingAdditionalDocument) GetDocumentID() OptUUID {
	return s.DocumentID
}

// GetFilename returns the value of Filename.
func (s *PortingAdditionalDocument) GetFilename() OptString {
	return s.Filename
}

// GetContentType returns the value of ContentType.
func (s *PortingAdditionalDocument) GetContentType() OptString {
	return s.ContentType
}

// GetPortingOrderID returns the value of PortingOrderID.
func (s *PortingAdditionalDocument) GetPortingOrderID() OptUUID {
	return s.PortingOrderID
}

// GetRecordType returns the value of RecordType.
func (s *PortingAdditionalDocument) GetRecordType() OptString {
	return s.RecordType
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PortingAdditionalDocument) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PortingAdditionalDocument) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *PortingAdditionalDocument) SetID(val OptUUID) {
	s.ID = val
}

// SetDocumentType sets the value of DocumentType.
func (s *PortingAdditionalDocument) SetDocumentType(val OptPortingAdditionalDocumentDocumentType) {
	s.DocumentType = val
}

// SetDocumentID sets the value of DocumentID.
func (s *PortingAdditionalDocument) SetDocumentID(val OptUUID) {
	s.DocumentID = val
}

// SetFilename sets the value of Filename.
func (s *PortingAdditionalDocument) SetFilename(val OptString) {
	s.Filename = val
}

// SetContentType sets the value of ContentType.
func (s *PortingAdditionalDocument) SetContentType(val OptString) {
	s.ContentType = val
}

// SetPortingOrderID sets the value of PortingOrderID.
func (s *PortingAdditionalDocument) SetPortingOrderID(val OptUUID) {
	s.PortingOrderID = val
}

// SetRecordType sets the value of RecordType.
func (s *PortingAdditionalDocument) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PortingAdditionalDocument) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PortingAdditionalDocument) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Identifies the type of additional document.
type PortingAdditionalDocumentDocumentType string

const (
	PortingAdditionalDocumentDocumentTypeLoa     PortingAdditionalDocumentDocumentType = "loa"
	PortingAdditionalDocumentDocumentTypeInvoice PortingAdditionalDocumentDocumentType = "invoice"
	PortingAdditionalDocumentDocumentTypeCsr     PortingAdditionalDocumentDocumentType = "csr"
	PortingAdditionalDocumentDocumentTypeOther   PortingAdditionalDocumentDocumentType = "other"
)

// AllValues returns all PortingAdditionalDocumentDocumentType values.
func (PortingAdditionalDocumentDocumentType) AllValues() []PortingAdditionalDocumentDocumentType {
	return []PortingAdditionalDocumentDocumentType{
		PortingAdditionalDocumentDocumentTypeLoa,
		PortingAdditionalDocumentDocumentTypeInvoice,
		PortingAdditionalDocumentDocumentTypeCsr,
		PortingAdditionalDocumentDocumentTypeOther,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PortingAdditionalDocumentDocumentType) MarshalText() ([]byte, error) {
	switch s {
	case PortingAdditionalDocumentDocumentTypeLoa:
		return []byte(s), nil
	case PortingAdditionalDocumentDocumentTypeInvoice:
		return []byte(s), nil
	case PortingAdditionalDocumentDocumentTypeCsr:
		return []byte(s), nil
	case PortingAdditionalDocumentDocumentTypeOther:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PortingAdditionalDocumentDocumentType) UnmarshalText(data []byte) error {
	switch PortingAdditionalDocumentDocumentType(data) {
	case PortingAdditionalDocumentDocumentTypeLoa:
		*s = PortingAdditionalDocumentDocumentTypeLoa
		return nil
	case PortingAdditionalDocumentDocumentTypeInvoice:
		*s = PortingAdditionalDocumentDocumentTypeInvoice
		return nil
	case PortingAdditionalDocumentDocumentTypeCsr:
		*s = PortingAdditionalDocumentDocumentTypeCsr
		return nil
	case PortingAdditionalDocumentDocumentTypeOther:
		*s = PortingAdditionalDocumentDocumentTypeOther
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PortingLOAConfiguration
type PortingLOAConfiguration struct {
	// Uniquely identifies the LOA configuration.
	ID OptUUID `json:"id"`
	// The name of the company.
	CompanyName OptString `json:"company_name"`
	// The organization that owns the LOA configuration.
	OrganizationID OptString `json:"organization_id"`
	// The name of the LOA configuration.
	Name OptString `json:"name"`
	// The logo to be used in the LOA.
	Logo OptPortingLOAConfigurationLogo `json:"logo"`
	// The address of the company.
	Address OptPortingLOAConfigurationAddress `json:"address"`
	// The contact information of the company.
	Contact OptPortingLOAConfigurationContact `json:"contact"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt OptDateTime `json:"created_at"`
	// ISO 8601 formatted date indicating when the resource was updated.
	UpdatedAt OptDateTime `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *PortingLOAConfiguration) GetID() OptUUID {
	return s.ID
}

// GetCompanyName returns the value of CompanyName.
func (s *PortingLOAConfiguration) GetCompanyName() OptString {
	return s.CompanyName
}

// GetOrganizationID returns the value of OrganizationID.
func (s *PortingLOAConfiguration) GetOrganizationID() OptString {
	return s.OrganizationID
}

// GetName returns the value of Name.
func (s *PortingLOAConfiguration) GetName() OptString {
	return s.Name
}

// GetLogo returns the value of Logo.
func (s *PortingLOAConfiguration) GetLogo() OptPortingLOAConfigurationLogo {
	return s.Logo
}

// GetAddress returns the value of Address.
func (s *PortingLOAConfiguration) GetAddress() OptPortingLOAConfigurationAddress {
	return s.Address
}

// GetContact returns the value of Contact.
func (s *PortingLOAConfiguration) GetContact() OptPortingLOAConfigurationContact {
	return s.Contact
}

// GetRecordType returns the value of RecordType.
func (s *PortingLOAConfiguration) GetRecordType() OptString {
	return s.RecordType
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PortingLOAConfiguration) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PortingLOAConfiguration) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *PortingLOAConfiguration) SetID(val OptUUID) {
	s.ID = val
}

// SetCompanyName sets the value of CompanyName.
func (s *PortingLOAConfiguration) SetCompanyName(val OptString) {
	s.CompanyName = val
}

// SetOrganizationID sets the value of OrganizationID.
func (s *PortingLOAConfiguration) SetOrganizationID(val OptString) {
	s.OrganizationID = val
}

// SetName sets the value of Name.
func (s *PortingLOAConfiguration) SetName(val OptString) {
	s.Name = val
}

// SetLogo sets the value of Logo.
func (s *PortingLOAConfiguration) SetLogo(val OptPortingLOAConfigurationLogo) {
	s.Logo = val
}

// SetAddress sets the value of Address.
func (s *PortingLOAConfiguration) SetAddress(val OptPortingLOAConfigurationAddress) {
	s.Address = val
}

// SetContact sets the value of Contact.
func (s *PortingLOAConfiguration) SetContact(val OptPortingLOAConfigurationContact) {
	s.Contact = val
}

// SetRecordType sets the value of RecordType.
func (s *PortingLOAConfiguration) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PortingLOAConfiguration) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PortingLOAConfiguration) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// The address of the company.
type PortingLOAConfigurationAddress struct {
	// The street address of the company.
	StreetAddress OptString `json:"street_address"`
	// The extended address of the company.
	ExtendedAddress OptString `json:"extended_address"`
	// The locality of the company.
	City OptString `json:"city"`
	// The administrative area of the company.
	State OptString `json:"state"`
	// The postal code of the company.
	ZipCode OptString `json:"zip_code"`
	// The country code of the company.
	CountryCode OptString `json:"country_code"`
}

// GetStreetAddress returns the value of StreetAddress.
func (s *PortingLOAConfigurationAddress) GetStreetAddress() OptString {
	return s.StreetAddress
}

// GetExtendedAddress returns the value of ExtendedAddress.
func (s *PortingLOAConfigurationAddress) GetExtendedAddress() OptString {
	return s.ExtendedAddress
}

// GetCity returns the value of City.
func (s *PortingLOAConfigurationAddress) GetCity() OptString {
	return s.City
}

// GetState returns the value of State.
func (s *PortingLOAConfigurationAddress) GetState() OptString {
	return s.State
}

// GetZipCode returns the value of ZipCode.
func (s *PortingLOAConfigurationAddress) GetZipCode() OptString {
	return s.ZipCode
}

// GetCountryCode returns the value of CountryCode.
func (s *PortingLOAConfigurationAddress) GetCountryCode() OptString {
	return s.CountryCode
}

// SetStreetAddress sets the value of StreetAddress.
func (s *PortingLOAConfigurationAddress) SetStreetAddress(val OptString) {
	s.StreetAddress = val
}

// SetExtendedAddress sets the value of ExtendedAddress.
func (s *PortingLOAConfigurationAddress) SetExtendedAddress(val OptString) {
	s.ExtendedAddress = val
}

// SetCity sets the value of City.
func (s *PortingLOAConfigurationAddress) SetCity(val OptString) {
	s.City = val
}

// SetState sets the value of State.
func (s *PortingLOAConfigurationAddress) SetState(val OptString) {
	s.State = val
}

// SetZipCode sets the value of ZipCode.
func (s *PortingLOAConfigurationAddress) SetZipCode(val OptString) {
	s.ZipCode = val
}

// SetCountryCode sets the value of CountryCode.
func (s *PortingLOAConfigurationAddress) SetCountryCode(val OptString) {
	s.CountryCode = val
}

// The contact information of the company.
type PortingLOAConfigurationContact struct {
	// The email address of the contact.
	Email OptString `json:"email"`
	// The phone number of the contact.
	PhoneNumber OptString `json:"phone_number"`
}

// GetEmail returns the value of Email.
func (s *PortingLOAConfigurationContact) GetEmail() OptString {
	return s.Email
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *PortingLOAConfigurationContact) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// SetEmail sets the value of Email.
func (s *PortingLOAConfigurationContact) SetEmail(val OptString) {
	s.Email = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *PortingLOAConfigurationContact) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// The logo to be used in the LOA.
type PortingLOAConfigurationLogo struct {
	// Identifies the document that contains the logo.
	DocumentID OptUUID `json:"document_id"`
	// The content type of the logo.
	ContentType OptPortingLOAConfigurationLogoContentType `json:"content_type"`
}

// GetDocumentID returns the value of DocumentID.
func (s *PortingLOAConfigurationLogo) GetDocumentID() OptUUID {
	return s.DocumentID
}

// GetContentType returns the value of ContentType.
func (s *PortingLOAConfigurationLogo) GetContentType() OptPortingLOAConfigurationLogoContentType {
	return s.ContentType
}

// SetDocumentID sets the value of DocumentID.
func (s *PortingLOAConfigurationLogo) SetDocumentID(val OptUUID) {
	s.DocumentID = val
}

// SetContentType sets the value of ContentType.
func (s *PortingLOAConfigurationLogo) SetContentType(val OptPortingLOAConfigurationLogoContentType) {
	s.ContentType = val
}

// The content type of the logo.
type PortingLOAConfigurationLogoContentType string

const (
	PortingLOAConfigurationLogoContentTypeImagePNG PortingLOAConfigurationLogoContentType = "image/png"
)

// AllValues returns all PortingLOAConfigurationLogoContentType values.
func (PortingLOAConfigurationLogoContentType) AllValues() []PortingLOAConfigurationLogoContentType {
	return []PortingLOAConfigurationLogoContentType{
		PortingLOAConfigurationLogoContentTypeImagePNG,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PortingLOAConfigurationLogoContentType) MarshalText() ([]byte, error) {
	switch s {
	case PortingLOAConfigurationLogoContentTypeImagePNG:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PortingLOAConfigurationLogoContentType) UnmarshalText(data []byte) error {
	switch PortingLOAConfigurationLogoContentType(data) {
	case PortingLOAConfigurationLogoContentTypeImagePNG:
		*s = PortingLOAConfigurationLogoContentTypeImagePNG
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PortingOrder
type PortingOrder struct {
	// Uniquely identifies this porting order.
	ID OptUUID `json:"id"`
	// A customer-specified reference number for customer bookkeeping purposes.
	CustomerReference OptString `json:"customer_reference"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt OptDateTime `json:"created_at"`
	// ISO 8601 formatted date indicating when the resource was created.
	UpdatedAt OptDateTime           `json:"updated_at"`
	Status    OptPortingOrderStatus `json:"status"`
	// A key to reference this porting order when contacting Telnyx customer support. This information is
	// not available in draft porting orders.
	SupportKey OptString `json:"support_key"`
	// A key to reference for the porting order group when contacting Telnyx customer support. This
	// information is not available for porting orders in `draft` state.
	ParentSupportKey OptString `json:"parent_support_key"`
	// Count of phone numbers associated with this porting order.
	PortingPhoneNumbersCount OptInt `json:"porting_phone_numbers_count"`
	// Identifies the old service provider.
	OldServiceProviderOcn    OptString                               `json:"old_service_provider_ocn"`
	Documents                OptPortingOrderDocuments                `json:"documents"`
	Misc                     OptPortingOrderMisc                     `json:"misc"`
	EndUser                  OptPortingOrderEndUser                  `json:"end_user"`
	ActivationSettings       OptPortingOrderActivationSettings       `json:"activation_settings"`
	PhoneNumberConfiguration OptPortingOrderPhoneNumberConfiguration `json:"phone_number_configuration"`
	// The type of the phone number.
	PhoneNumberType OptPortingOrderPhoneNumberType `json:"phone_number_type"`
	// A description of the porting order.
	Description OptString `json:"description"`
	// List of documentation requirements for porting numbers.
	Requirements []PortingOrderRequirement `json:"requirements"`
	// Is true when the required documentation is met.
	RequirementsMet OptBool                     `json:"requirements_met"`
	UserFeedback    OptPortingOrderUserFeedback `json:"user_feedback"`
	// Identifies the user (or organization) who requested the porting order.
	UserID     OptUUID `json:"user_id"`
	WebhookURL OptURI  `json:"webhook_url"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
}

// GetID returns the value of ID.
func (s *PortingOrder) GetID() OptUUID {
	return s.ID
}

// GetCustomerReference returns the value of CustomerReference.
func (s *PortingOrder) GetCustomerReference() OptString {
	return s.CustomerReference
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PortingOrder) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PortingOrder) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetStatus returns the value of Status.
func (s *PortingOrder) GetStatus() OptPortingOrderStatus {
	return s.Status
}

// GetSupportKey returns the value of SupportKey.
func (s *PortingOrder) GetSupportKey() OptString {
	return s.SupportKey
}

// GetParentSupportKey returns the value of ParentSupportKey.
func (s *PortingOrder) GetParentSupportKey() OptString {
	return s.ParentSupportKey
}

// GetPortingPhoneNumbersCount returns the value of PortingPhoneNumbersCount.
func (s *PortingOrder) GetPortingPhoneNumbersCount() OptInt {
	return s.PortingPhoneNumbersCount
}

// GetOldServiceProviderOcn returns the value of OldServiceProviderOcn.
func (s *PortingOrder) GetOldServiceProviderOcn() OptString {
	return s.OldServiceProviderOcn
}

// GetDocuments returns the value of Documents.
func (s *PortingOrder) GetDocuments() OptPortingOrderDocuments {
	return s.Documents
}

// GetMisc returns the value of Misc.
func (s *PortingOrder) GetMisc() OptPortingOrderMisc {
	return s.Misc
}

// GetEndUser returns the value of EndUser.
func (s *PortingOrder) GetEndUser() OptPortingOrderEndUser {
	return s.EndUser
}

// GetActivationSettings returns the value of ActivationSettings.
func (s *PortingOrder) GetActivationSettings() OptPortingOrderActivationSettings {
	return s.ActivationSettings
}

// GetPhoneNumberConfiguration returns the value of PhoneNumberConfiguration.
func (s *PortingOrder) GetPhoneNumberConfiguration() OptPortingOrderPhoneNumberConfiguration {
	return s.PhoneNumberConfiguration
}

// GetPhoneNumberType returns the value of PhoneNumberType.
func (s *PortingOrder) GetPhoneNumberType() OptPortingOrderPhoneNumberType {
	return s.PhoneNumberType
}

// GetDescription returns the value of Description.
func (s *PortingOrder) GetDescription() OptString {
	return s.Description
}

// GetRequirements returns the value of Requirements.
func (s *PortingOrder) GetRequirements() []PortingOrderRequirement {
	return s.Requirements
}

// GetRequirementsMet returns the value of RequirementsMet.
func (s *PortingOrder) GetRequirementsMet() OptBool {
	return s.RequirementsMet
}

// GetUserFeedback returns the value of UserFeedback.
func (s *PortingOrder) GetUserFeedback() OptPortingOrderUserFeedback {
	return s.UserFeedback
}

// GetUserID returns the value of UserID.
func (s *PortingOrder) GetUserID() OptUUID {
	return s.UserID
}

// GetWebhookURL returns the value of WebhookURL.
func (s *PortingOrder) GetWebhookURL() OptURI {
	return s.WebhookURL
}

// GetRecordType returns the value of RecordType.
func (s *PortingOrder) GetRecordType() OptString {
	return s.RecordType
}

// SetID sets the value of ID.
func (s *PortingOrder) SetID(val OptUUID) {
	s.ID = val
}

// SetCustomerReference sets the value of CustomerReference.
func (s *PortingOrder) SetCustomerReference(val OptString) {
	s.CustomerReference = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PortingOrder) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PortingOrder) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetStatus sets the value of Status.
func (s *PortingOrder) SetStatus(val OptPortingOrderStatus) {
	s.Status = val
}

// SetSupportKey sets the value of SupportKey.
func (s *PortingOrder) SetSupportKey(val OptString) {
	s.SupportKey = val
}

// SetParentSupportKey sets the value of ParentSupportKey.
func (s *PortingOrder) SetParentSupportKey(val OptString) {
	s.ParentSupportKey = val
}

// SetPortingPhoneNumbersCount sets the value of PortingPhoneNumbersCount.
func (s *PortingOrder) SetPortingPhoneNumbersCount(val OptInt) {
	s.PortingPhoneNumbersCount = val
}

// SetOldServiceProviderOcn sets the value of OldServiceProviderOcn.
func (s *PortingOrder) SetOldServiceProviderOcn(val OptString) {
	s.OldServiceProviderOcn = val
}

// SetDocuments sets the value of Documents.
func (s *PortingOrder) SetDocuments(val OptPortingOrderDocuments) {
	s.Documents = val
}

// SetMisc sets the value of Misc.
func (s *PortingOrder) SetMisc(val OptPortingOrderMisc) {
	s.Misc = val
}

// SetEndUser sets the value of EndUser.
func (s *PortingOrder) SetEndUser(val OptPortingOrderEndUser) {
	s.EndUser = val
}

// SetActivationSettings sets the value of ActivationSettings.
func (s *PortingOrder) SetActivationSettings(val OptPortingOrderActivationSettings) {
	s.ActivationSettings = val
}

// SetPhoneNumberConfiguration sets the value of PhoneNumberConfiguration.
func (s *PortingOrder) SetPhoneNumberConfiguration(val OptPortingOrderPhoneNumberConfiguration) {
	s.PhoneNumberConfiguration = val
}

// SetPhoneNumberType sets the value of PhoneNumberType.
func (s *PortingOrder) SetPhoneNumberType(val OptPortingOrderPhoneNumberType) {
	s.PhoneNumberType = val
}

// SetDescription sets the value of Description.
func (s *PortingOrder) SetDescription(val OptString) {
	s.Description = val
}

// SetRequirements sets the value of Requirements.
func (s *PortingOrder) SetRequirements(val []PortingOrderRequirement) {
	s.Requirements = val
}

// SetRequirementsMet sets the value of RequirementsMet.
func (s *PortingOrder) SetRequirementsMet(val OptBool) {
	s.RequirementsMet = val
}

// SetUserFeedback sets the value of UserFeedback.
func (s *PortingOrder) SetUserFeedback(val OptPortingOrderUserFeedback) {
	s.UserFeedback = val
}

// SetUserID sets the value of UserID.
func (s *PortingOrder) SetUserID(val OptUUID) {
	s.UserID = val
}

// SetWebhookURL sets the value of WebhookURL.
func (s *PortingOrder) SetWebhookURL(val OptURI) {
	s.WebhookURL = val
}

// SetRecordType sets the value of RecordType.
func (s *PortingOrder) SetRecordType(val OptString) {
	s.RecordType = val
}

// Ref: #/components/schemas/PortingOrderActivationSettings
type PortingOrderActivationSettings struct {
	// ISO 8601 formatted Date/Time requested for the FOC date.
	FocDatetimeRequested OptDateTime `json:"foc_datetime_requested"`
	// ISO 8601 formatted Date/Time of the FOC date.
	FocDatetimeActual OptDateTime `json:"foc_datetime_actual"`
	// Indicates whether this porting order is eligible for FastPort.
	FastPortEligible OptBool                         `json:"fast_port_eligible"`
	ActivationStatus OptPortingOrderActivationStatus `json:"activation_status"`
}

// GetFocDatetimeRequested returns the value of FocDatetimeRequested.
func (s *PortingOrderActivationSettings) GetFocDatetimeRequested() OptDateTime {
	return s.FocDatetimeRequested
}

// GetFocDatetimeActual returns the value of FocDatetimeActual.
func (s *PortingOrderActivationSettings) GetFocDatetimeActual() OptDateTime {
	return s.FocDatetimeActual
}

// GetFastPortEligible returns the value of FastPortEligible.
func (s *PortingOrderActivationSettings) GetFastPortEligible() OptBool {
	return s.FastPortEligible
}

// GetActivationStatus returns the value of ActivationStatus.
func (s *PortingOrderActivationSettings) GetActivationStatus() OptPortingOrderActivationStatus {
	return s.ActivationStatus
}

// SetFocDatetimeRequested sets the value of FocDatetimeRequested.
func (s *PortingOrderActivationSettings) SetFocDatetimeRequested(val OptDateTime) {
	s.FocDatetimeRequested = val
}

// SetFocDatetimeActual sets the value of FocDatetimeActual.
func (s *PortingOrderActivationSettings) SetFocDatetimeActual(val OptDateTime) {
	s.FocDatetimeActual = val
}

// SetFastPortEligible sets the value of FastPortEligible.
func (s *PortingOrderActivationSettings) SetFastPortEligible(val OptBool) {
	s.FastPortEligible = val
}

// SetActivationStatus sets the value of ActivationStatus.
func (s *PortingOrderActivationSettings) SetActivationStatus(val OptPortingOrderActivationStatus) {
	s.ActivationStatus = val
}

// Activation status.
// Ref: #/components/schemas/PortingOrderActivationStatus
type PortingOrderActivationStatus string

const (
	PortingOrderActivationStatusNew               PortingOrderActivationStatus = "New"
	PortingOrderActivationStatusPending           PortingOrderActivationStatus = "Pending"
	PortingOrderActivationStatusConflict          PortingOrderActivationStatus = "Conflict"
	PortingOrderActivationStatusCancelPending     PortingOrderActivationStatus = "Cancel Pending"
	PortingOrderActivationStatusFailed            PortingOrderActivationStatus = "Failed"
	PortingOrderActivationStatusConcurred         PortingOrderActivationStatus = "Concurred"
	PortingOrderActivationStatusActivateRDY       PortingOrderActivationStatus = "Activate RDY"
	PortingOrderActivationStatusDisconnectPending PortingOrderActivationStatus = "Disconnect Pending"
	PortingOrderActivationStatusConcurrenceSent   PortingOrderActivationStatus = "Concurrence Sent"
	PortingOrderActivationStatusOld               PortingOrderActivationStatus = "Old"
	PortingOrderActivationStatusSending           PortingOrderActivationStatus = "Sending"
	PortingOrderActivationStatusActive            PortingOrderActivationStatus = "Active"
	PortingOrderActivationStatusCanceled          PortingOrderActivationStatus = "Canceled"
)

// AllValues returns all PortingOrderActivationStatus values.
func (PortingOrderActivationStatus) AllValues() []PortingOrderActivationStatus {
	return []PortingOrderActivationStatus{
		PortingOrderActivationStatusNew,
		PortingOrderActivationStatusPending,
		PortingOrderActivationStatusConflict,
		PortingOrderActivationStatusCancelPending,
		PortingOrderActivationStatusFailed,
		PortingOrderActivationStatusConcurred,
		PortingOrderActivationStatusActivateRDY,
		PortingOrderActivationStatusDisconnectPending,
		PortingOrderActivationStatusConcurrenceSent,
		PortingOrderActivationStatusOld,
		PortingOrderActivationStatusSending,
		PortingOrderActivationStatusActive,
		PortingOrderActivationStatusCanceled,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PortingOrderActivationStatus) MarshalText() ([]byte, error) {
	switch s {
	case PortingOrderActivationStatusNew:
		return []byte(s), nil
	case PortingOrderActivationStatusPending:
		return []byte(s), nil
	case PortingOrderActivationStatusConflict:
		return []byte(s), nil
	case PortingOrderActivationStatusCancelPending:
		return []byte(s), nil
	case PortingOrderActivationStatusFailed:
		return []byte(s), nil
	case PortingOrderActivationStatusConcurred:
		return []byte(s), nil
	case PortingOrderActivationStatusActivateRDY:
		return []byte(s), nil
	case PortingOrderActivationStatusDisconnectPending:
		return []byte(s), nil
	case PortingOrderActivationStatusConcurrenceSent:
		return []byte(s), nil
	case PortingOrderActivationStatusOld:
		return []byte(s), nil
	case PortingOrderActivationStatusSending:
		return []byte(s), nil
	case PortingOrderActivationStatusActive:
		return []byte(s), nil
	case PortingOrderActivationStatusCanceled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PortingOrderActivationStatus) UnmarshalText(data []byte) error {
	switch PortingOrderActivationStatus(data) {
	case PortingOrderActivationStatusNew:
		*s = PortingOrderActivationStatusNew
		return nil
	case PortingOrderActivationStatusPending:
		*s = PortingOrderActivationStatusPending
		return nil
	case PortingOrderActivationStatusConflict:
		*s = PortingOrderActivationStatusConflict
		return nil
	case PortingOrderActivationStatusCancelPending:
		*s = PortingOrderActivationStatusCancelPending
		return nil
	case PortingOrderActivationStatusFailed:
		*s = PortingOrderActivationStatusFailed
		return nil
	case PortingOrderActivationStatusConcurred:
		*s = PortingOrderActivationStatusConcurred
		return nil
	case PortingOrderActivationStatusActivateRDY:
		*s = PortingOrderActivationStatusActivateRDY
		return nil
	case PortingOrderActivationStatusDisconnectPending:
		*s = PortingOrderActivationStatusDisconnectPending
		return nil
	case PortingOrderActivationStatusConcurrenceSent:
		*s = PortingOrderActivationStatusConcurrenceSent
		return nil
	case PortingOrderActivationStatusOld:
		*s = PortingOrderActivationStatusOld
		return nil
	case PortingOrderActivationStatusSending:
		*s = PortingOrderActivationStatusSending
		return nil
	case PortingOrderActivationStatusActive:
		*s = PortingOrderActivationStatusActive
		return nil
	case PortingOrderActivationStatusCanceled:
		*s = PortingOrderActivationStatusCanceled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PortingOrderDocuments
type PortingOrderDocuments struct {
	// Returned ID of the submitted LOA via the Documents endpoint.
	Loa OptUUID `json:"loa"`
	// Returned ID of the submitted Invoice via the Documents endpoint.
	Invoice OptUUID `json:"invoice"`
}

// GetLoa returns the value of Loa.
func (s *PortingOrderDocuments) GetLoa() OptUUID {
	return s.Loa
}

// GetInvoice returns the value of Invoice.
func (s *PortingOrderDocuments) GetInvoice() OptUUID {
	return s.Invoice
}

// SetLoa sets the value of Loa.
func (s *PortingOrderDocuments) SetLoa(val OptUUID) {
	s.Loa = val
}

// SetInvoice sets the value of Invoice.
func (s *PortingOrderDocuments) SetInvoice(val OptUUID) {
	s.Invoice = val
}

// Ref: #/components/schemas/PortingOrderEndUser
type PortingOrderEndUser struct {
	Admin    OptPortingOrderEndUserAdmin    `json:"admin"`
	Location OptPortingOrderEndUserLocation `json:"location"`
}

// GetAdmin returns the value of Admin.
func (s *PortingOrderEndUser) GetAdmin() OptPortingOrderEndUserAdmin {
	return s.Admin
}

// GetLocation returns the value of Location.
func (s *PortingOrderEndUser) GetLocation() OptPortingOrderEndUserLocation {
	return s.Location
}

// SetAdmin sets the value of Admin.
func (s *PortingOrderEndUser) SetAdmin(val OptPortingOrderEndUserAdmin) {
	s.Admin = val
}

// SetLocation sets the value of Location.
func (s *PortingOrderEndUser) SetLocation(val OptPortingOrderEndUserLocation) {
	s.Location = val
}

// Ref: #/components/schemas/PortingOrderEndUserAdmin
type PortingOrderEndUserAdmin struct {
	// Person Name or Company name requesting the port.
	EntityName OptString `json:"entity_name"`
	// Name of person authorizing the porting order.
	AuthPersonName OptString `json:"auth_person_name"`
	// Billing phone number associated with these phone numbers.
	BillingPhoneNumber OptString `json:"billing_phone_number"`
	// The authorized person's account number with the current service provider.
	AccountNumber OptString `json:"account_number"`
	// European tax identification number. Applicable only in the European Union.
	TaxIdentifier OptString `json:"tax_identifier"`
	// PIN/passcode possibly required by the old service provider for extra verification.
	PinPasscode OptString `json:"pin_passcode"`
	// European business identification number. Applicable only in the European Union.
	BusinessIdentifier OptString `json:"business_identifier"`
}

// GetEntityName returns the value of EntityName.
func (s *PortingOrderEndUserAdmin) GetEntityName() OptString {
	return s.EntityName
}

// GetAuthPersonName returns the value of AuthPersonName.
func (s *PortingOrderEndUserAdmin) GetAuthPersonName() OptString {
	return s.AuthPersonName
}

// GetBillingPhoneNumber returns the value of BillingPhoneNumber.
func (s *PortingOrderEndUserAdmin) GetBillingPhoneNumber() OptString {
	return s.BillingPhoneNumber
}

// GetAccountNumber returns the value of AccountNumber.
func (s *PortingOrderEndUserAdmin) GetAccountNumber() OptString {
	return s.AccountNumber
}

// GetTaxIdentifier returns the value of TaxIdentifier.
func (s *PortingOrderEndUserAdmin) GetTaxIdentifier() OptString {
	return s.TaxIdentifier
}

// GetPinPasscode returns the value of PinPasscode.
func (s *PortingOrderEndUserAdmin) GetPinPasscode() OptString {
	return s.PinPasscode
}

// GetBusinessIdentifier returns the value of BusinessIdentifier.
func (s *PortingOrderEndUserAdmin) GetBusinessIdentifier() OptString {
	return s.BusinessIdentifier
}

// SetEntityName sets the value of EntityName.
func (s *PortingOrderEndUserAdmin) SetEntityName(val OptString) {
	s.EntityName = val
}

// SetAuthPersonName sets the value of AuthPersonName.
func (s *PortingOrderEndUserAdmin) SetAuthPersonName(val OptString) {
	s.AuthPersonName = val
}

// SetBillingPhoneNumber sets the value of BillingPhoneNumber.
func (s *PortingOrderEndUserAdmin) SetBillingPhoneNumber(val OptString) {
	s.BillingPhoneNumber = val
}

// SetAccountNumber sets the value of AccountNumber.
func (s *PortingOrderEndUserAdmin) SetAccountNumber(val OptString) {
	s.AccountNumber = val
}

// SetTaxIdentifier sets the value of TaxIdentifier.
func (s *PortingOrderEndUserAdmin) SetTaxIdentifier(val OptString) {
	s.TaxIdentifier = val
}

// SetPinPasscode sets the value of PinPasscode.
func (s *PortingOrderEndUserAdmin) SetPinPasscode(val OptString) {
	s.PinPasscode = val
}

// SetBusinessIdentifier sets the value of BusinessIdentifier.
func (s *PortingOrderEndUserAdmin) SetBusinessIdentifier(val OptString) {
	s.BusinessIdentifier = val
}

// Ref: #/components/schemas/PortingOrderEndUserLocation
type PortingOrderEndUserLocation struct {
	// First line of billing address.
	StreetAddress OptString `json:"street_address"`
	// Second line of billing address.
	ExtendedAddress OptString `json:"extended_address"`
	// City or municipality of billing address.
	Locality OptString `json:"locality"`
	// State, province, or similar of billing address.
	AdministrativeArea OptString `json:"administrative_area"`
	// Postal Code of billing address.
	PostalCode OptString `json:"postal_code"`
	// ISO3166-1 alpha-2 country code of billing address.
	CountryCode OptString `json:"country_code"`
}

// GetStreetAddress returns the value of StreetAddress.
func (s *PortingOrderEndUserLocation) GetStreetAddress() OptString {
	return s.StreetAddress
}

// GetExtendedAddress returns the value of ExtendedAddress.
func (s *PortingOrderEndUserLocation) GetExtendedAddress() OptString {
	return s.ExtendedAddress
}

// GetLocality returns the value of Locality.
func (s *PortingOrderEndUserLocation) GetLocality() OptString {
	return s.Locality
}

// GetAdministrativeArea returns the value of AdministrativeArea.
func (s *PortingOrderEndUserLocation) GetAdministrativeArea() OptString {
	return s.AdministrativeArea
}

// GetPostalCode returns the value of PostalCode.
func (s *PortingOrderEndUserLocation) GetPostalCode() OptString {
	return s.PostalCode
}

// GetCountryCode returns the value of CountryCode.
func (s *PortingOrderEndUserLocation) GetCountryCode() OptString {
	return s.CountryCode
}

// SetStreetAddress sets the value of StreetAddress.
func (s *PortingOrderEndUserLocation) SetStreetAddress(val OptString) {
	s.StreetAddress = val
}

// SetExtendedAddress sets the value of ExtendedAddress.
func (s *PortingOrderEndUserLocation) SetExtendedAddress(val OptString) {
	s.ExtendedAddress = val
}

// SetLocality sets the value of Locality.
func (s *PortingOrderEndUserLocation) SetLocality(val OptString) {
	s.Locality = val
}

// SetAdministrativeArea sets the value of AdministrativeArea.
func (s *PortingOrderEndUserLocation) SetAdministrativeArea(val OptString) {
	s.AdministrativeArea = val
}

// SetPostalCode sets the value of PostalCode.
func (s *PortingOrderEndUserLocation) SetPostalCode(val OptString) {
	s.PostalCode = val
}

// SetCountryCode sets the value of CountryCode.
func (s *PortingOrderEndUserLocation) SetCountryCode(val OptString) {
	s.CountryCode = val
}

// Ref: #/components/schemas/PortingOrderMisc
type PortingOrderMisc struct {
	Type OptPortingOrderType `json:"type"`
	// Remaining numbers can be either kept with their current service provider or disconnected.
	// 'new_billing_telephone_number' is required when 'remaining_numbers_action' is 'keep'.
	RemainingNumbersAction OptPortingOrderMiscRemainingNumbersAction `json:"remaining_numbers_action"`
	// New billing phone number for the remaining numbers. Used in case the current billing phone number
	// is being ported to Telnyx. This will be set on your account with your current service provider and
	// should be one of the numbers remaining on that account.
	NewBillingPhoneNumber OptString `json:"new_billing_phone_number"`
}

// GetType returns the value of Type.
func (s *PortingOrderMisc) GetType() OptPortingOrderType {
	return s.Type
}

// GetRemainingNumbersAction returns the value of RemainingNumbersAction.
func (s *PortingOrderMisc) GetRemainingNumbersAction() OptPortingOrderMiscRemainingNumbersAction {
	return s.RemainingNumbersAction
}

// GetNewBillingPhoneNumber returns the value of NewBillingPhoneNumber.
func (s *PortingOrderMisc) GetNewBillingPhoneNumber() OptString {
	return s.NewBillingPhoneNumber
}

// SetType sets the value of Type.
func (s *PortingOrderMisc) SetType(val OptPortingOrderType) {
	s.Type = val
}

// SetRemainingNumbersAction sets the value of RemainingNumbersAction.
func (s *PortingOrderMisc) SetRemainingNumbersAction(val OptPortingOrderMiscRemainingNumbersAction) {
	s.RemainingNumbersAction = val
}

// SetNewBillingPhoneNumber sets the value of NewBillingPhoneNumber.
func (s *PortingOrderMisc) SetNewBillingPhoneNumber(val OptString) {
	s.NewBillingPhoneNumber = val
}

// Remaining numbers can be either kept with their current service provider or disconnected.
// 'new_billing_telephone_number' is required when 'remaining_numbers_action' is 'keep'.
type PortingOrderMiscRemainingNumbersAction string

const (
	PortingOrderMiscRemainingNumbersActionKeep       PortingOrderMiscRemainingNumbersAction = "keep"
	PortingOrderMiscRemainingNumbersActionDisconnect PortingOrderMiscRemainingNumbersAction = "disconnect"
)

// AllValues returns all PortingOrderMiscRemainingNumbersAction values.
func (PortingOrderMiscRemainingNumbersAction) AllValues() []PortingOrderMiscRemainingNumbersAction {
	return []PortingOrderMiscRemainingNumbersAction{
		PortingOrderMiscRemainingNumbersActionKeep,
		PortingOrderMiscRemainingNumbersActionDisconnect,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PortingOrderMiscRemainingNumbersAction) MarshalText() ([]byte, error) {
	switch s {
	case PortingOrderMiscRemainingNumbersActionKeep:
		return []byte(s), nil
	case PortingOrderMiscRemainingNumbersActionDisconnect:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PortingOrderMiscRemainingNumbersAction) UnmarshalText(data []byte) error {
	switch PortingOrderMiscRemainingNumbersAction(data) {
	case PortingOrderMiscRemainingNumbersActionKeep:
		*s = PortingOrderMiscRemainingNumbersActionKeep
		return nil
	case PortingOrderMiscRemainingNumbersActionDisconnect:
		*s = PortingOrderMiscRemainingNumbersActionDisconnect
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PortingOrderPhoneNumberConfiguration
type PortingOrderPhoneNumberConfiguration struct {
	// Identifies the billing group to set on the numbers when ported.
	BillingGroupID OptString `json:"billing_group_id"`
	// Identifies the connection to set on the numbers when ported.
	ConnectionID OptString `json:"connection_id"`
	// Identifies the messaging profile to set on the numbers when ported.
	MessagingProfileID OptString `json:"messaging_profile_id"`
	// Identifies the emergency address to set on the numbers when ported.
	EmergencyAddressID OptString `json:"emergency_address_id"`
	Tags               []string  `json:"tags"`
}

// GetBillingGroupID returns the value of BillingGroupID.
func (s *PortingOrderPhoneNumberConfiguration) GetBillingGroupID() OptString {
	return s.BillingGroupID
}

// GetConnectionID returns the value of ConnectionID.
func (s *PortingOrderPhoneNumberConfiguration) GetConnectionID() OptString {
	return s.ConnectionID
}

// GetMessagingProfileID returns the value of MessagingProfileID.
func (s *PortingOrderPhoneNumberConfiguration) GetMessagingProfileID() OptString {
	return s.MessagingProfileID
}

// GetEmergencyAddressID returns the value of EmergencyAddressID.
func (s *PortingOrderPhoneNumberConfiguration) GetEmergencyAddressID() OptString {
	return s.EmergencyAddressID
}

// GetTags returns the value of Tags.
func (s *PortingOrderPhoneNumberConfiguration) GetTags() []string {
	return s.Tags
}

// SetBillingGroupID sets the value of BillingGroupID.
func (s *PortingOrderPhoneNumberConfiguration) SetBillingGroupID(val OptString) {
	s.BillingGroupID = val
}

// SetConnectionID sets the value of ConnectionID.
func (s *PortingOrderPhoneNumberConfiguration) SetConnectionID(val OptString) {
	s.ConnectionID = val
}

// SetMessagingProfileID sets the value of MessagingProfileID.
func (s *PortingOrderPhoneNumberConfiguration) SetMessagingProfileID(val OptString) {
	s.MessagingProfileID = val
}

// SetEmergencyAddressID sets the value of EmergencyAddressID.
func (s *PortingOrderPhoneNumberConfiguration) SetEmergencyAddressID(val OptString) {
	s.EmergencyAddressID = val
}

// SetTags sets the value of Tags.
func (s *PortingOrderPhoneNumberConfiguration) SetTags(val []string) {
	s.Tags = val
}

// The type of the phone number.
type PortingOrderPhoneNumberType string

const (
	PortingOrderPhoneNumberTypeLandline   PortingOrderPhoneNumberType = "landline"
	PortingOrderPhoneNumberTypeLocal      PortingOrderPhoneNumberType = "local"
	PortingOrderPhoneNumberTypeMobile     PortingOrderPhoneNumberType = "mobile"
	PortingOrderPhoneNumberTypeNational   PortingOrderPhoneNumberType = "national"
	PortingOrderPhoneNumberTypeSharedCost PortingOrderPhoneNumberType = "shared_cost"
	PortingOrderPhoneNumberTypeTollFree   PortingOrderPhoneNumberType = "toll_free"
)

// AllValues returns all PortingOrderPhoneNumberType values.
func (PortingOrderPhoneNumberType) AllValues() []PortingOrderPhoneNumberType {
	return []PortingOrderPhoneNumberType{
		PortingOrderPhoneNumberTypeLandline,
		PortingOrderPhoneNumberTypeLocal,
		PortingOrderPhoneNumberTypeMobile,
		PortingOrderPhoneNumberTypeNational,
		PortingOrderPhoneNumberTypeSharedCost,
		PortingOrderPhoneNumberTypeTollFree,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PortingOrderPhoneNumberType) MarshalText() ([]byte, error) {
	switch s {
	case PortingOrderPhoneNumberTypeLandline:
		return []byte(s), nil
	case PortingOrderPhoneNumberTypeLocal:
		return []byte(s), nil
	case PortingOrderPhoneNumberTypeMobile:
		return []byte(s), nil
	case PortingOrderPhoneNumberTypeNational:
		return []byte(s), nil
	case PortingOrderPhoneNumberTypeSharedCost:
		return []byte(s), nil
	case PortingOrderPhoneNumberTypeTollFree:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PortingOrderPhoneNumberType) UnmarshalText(data []byte) error {
	switch PortingOrderPhoneNumberType(data) {
	case PortingOrderPhoneNumberTypeLandline:
		*s = PortingOrderPhoneNumberTypeLandline
		return nil
	case PortingOrderPhoneNumberTypeLocal:
		*s = PortingOrderPhoneNumberTypeLocal
		return nil
	case PortingOrderPhoneNumberTypeMobile:
		*s = PortingOrderPhoneNumberTypeMobile
		return nil
	case PortingOrderPhoneNumberTypeNational:
		*s = PortingOrderPhoneNumberTypeNational
		return nil
	case PortingOrderPhoneNumberTypeSharedCost:
		*s = PortingOrderPhoneNumberTypeSharedCost
		return nil
	case PortingOrderPhoneNumberTypeTollFree:
		*s = PortingOrderPhoneNumberTypeTollFree
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PortingOrderRequirement
type PortingOrderRequirement struct {
	// Type of value expected on field_value field.
	FieldType OptPortingOrderRequirementFieldType `json:"field_type"`
	// Identifies the document that satisfies this requirement.
	FieldValue OptString `json:"field_value"`
	// Identifies the requirement type that meets this requirement.
	RequirementTypeID OptString `json:"requirement_type_id"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
}

// GetFieldType returns the value of FieldType.
func (s *PortingOrderRequirement) GetFieldType() OptPortingOrderRequirementFieldType {
	return s.FieldType
}

// GetFieldValue returns the value of FieldValue.
func (s *PortingOrderRequirement) GetFieldValue() OptString {
	return s.FieldValue
}

// GetRequirementTypeID returns the value of RequirementTypeID.
func (s *PortingOrderRequirement) GetRequirementTypeID() OptString {
	return s.RequirementTypeID
}

// GetRecordType returns the value of RecordType.
func (s *PortingOrderRequirement) GetRecordType() OptString {
	return s.RecordType
}

// SetFieldType sets the value of FieldType.
func (s *PortingOrderRequirement) SetFieldType(val OptPortingOrderRequirementFieldType) {
	s.FieldType = val
}

// SetFieldValue sets the value of FieldValue.
func (s *PortingOrderRequirement) SetFieldValue(val OptString) {
	s.FieldValue = val
}

// SetRequirementTypeID sets the value of RequirementTypeID.
func (s *PortingOrderRequirement) SetRequirementTypeID(val OptString) {
	s.RequirementTypeID = val
}

// SetRecordType sets the value of RecordType.
func (s *PortingOrderRequirement) SetRecordType(val OptString) {
	s.RecordType = val
}

// Ref: #/components/schemas/PortingOrderRequirementDetail
type PortingOrderRequirementDetail struct {
	// Type of value expected on field_value field.
	FieldType OptPortingOrderRequirementDetailFieldType `json:"field_type"`
	// Identifies the document that satisfies this requirement.
	FieldValue OptString `json:"field_value"`
	// Identifies the requirement type that meets this requirement.
	RequirementType OptPortingOrderRequirementDetailRequirementType `json:"requirement_type"`
	// Status of the requirement.
	RequirementStatus OptString `json:"requirement_status"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
}

// GetFieldType returns the value of FieldType.
func (s *PortingOrderRequirementDetail) GetFieldType() OptPortingOrderRequirementDetailFieldType {
	return s.FieldType
}

// GetFieldValue returns the value of FieldValue.
func (s *PortingOrderRequirementDetail) GetFieldValue() OptString {
	return s.FieldValue
}

// GetRequirementType returns the value of RequirementType.
func (s *PortingOrderRequirementDetail) GetRequirementType() OptPortingOrderRequirementDetailRequirementType {
	return s.RequirementType
}

// GetRequirementStatus returns the value of RequirementStatus.
func (s *PortingOrderRequirementDetail) GetRequirementStatus() OptString {
	return s.RequirementStatus
}

// GetRecordType returns the value of RecordType.
func (s *PortingOrderRequirementDetail) GetRecordType() OptString {
	return s.RecordType
}

// SetFieldType sets the value of FieldType.
func (s *PortingOrderRequirementDetail) SetFieldType(val OptPortingOrderRequirementDetailFieldType) {
	s.FieldType = val
}

// SetFieldValue sets the value of FieldValue.
func (s *PortingOrderRequirementDetail) SetFieldValue(val OptString) {
	s.FieldValue = val
}

// SetRequirementType sets the value of RequirementType.
func (s *PortingOrderRequirementDetail) SetRequirementType(val OptPortingOrderRequirementDetailRequirementType) {
	s.RequirementType = val
}

// SetRequirementStatus sets the value of RequirementStatus.
func (s *PortingOrderRequirementDetail) SetRequirementStatus(val OptString) {
	s.RequirementStatus = val
}

// SetRecordType sets the value of RecordType.
func (s *PortingOrderRequirementDetail) SetRecordType(val OptString) {
	s.RecordType = val
}

// Type of value expected on field_value field.
type PortingOrderRequirementDetailFieldType string

const (
	PortingOrderRequirementDetailFieldTypeDocument PortingOrderRequirementDetailFieldType = "document"
	PortingOrderRequirementDetailFieldTypeTextual  PortingOrderRequirementDetailFieldType = "textual"
)

// AllValues returns all PortingOrderRequirementDetailFieldType values.
func (PortingOrderRequirementDetailFieldType) AllValues() []PortingOrderRequirementDetailFieldType {
	return []PortingOrderRequirementDetailFieldType{
		PortingOrderRequirementDetailFieldTypeDocument,
		PortingOrderRequirementDetailFieldTypeTextual,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PortingOrderRequirementDetailFieldType) MarshalText() ([]byte, error) {
	switch s {
	case PortingOrderRequirementDetailFieldTypeDocument:
		return []byte(s), nil
	case PortingOrderRequirementDetailFieldTypeTextual:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PortingOrderRequirementDetailFieldType) UnmarshalText(data []byte) error {
	switch PortingOrderRequirementDetailFieldType(data) {
	case PortingOrderRequirementDetailFieldTypeDocument:
		*s = PortingOrderRequirementDetailFieldTypeDocument
		return nil
	case PortingOrderRequirementDetailFieldTypeTextual:
		*s = PortingOrderRequirementDetailFieldTypeTextual
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Identifies the requirement type that meets this requirement.
type PortingOrderRequirementDetailRequirementType struct {
	// The acceptance criteria for the requirement type.
	AcceptanceCriteria OptPortingOrderRequirementDetailRequirementTypeAcceptanceCriteria `json:"acceptance_criteria"`
	// A description of the requirement type.
	Description OptString `json:"description"`
	// An example of the requirement type.
	Example OptString `json:"example"`
	// Identifies the requirement type.
	ID OptString `json:"id"`
	// The name of the requirement type.
	Name OptString `json:"name"`
	// The type of the requirement type.
	Type OptString `json:"type"`
}

// GetAcceptanceCriteria returns the value of AcceptanceCriteria.
func (s *PortingOrderRequirementDetailRequirementType) GetAcceptanceCriteria() OptPortingOrderRequirementDetailRequirementTypeAcceptanceCriteria {
	return s.AcceptanceCriteria
}

// GetDescription returns the value of Description.
func (s *PortingOrderRequirementDetailRequirementType) GetDescription() OptString {
	return s.Description
}

// GetExample returns the value of Example.
func (s *PortingOrderRequirementDetailRequirementType) GetExample() OptString {
	return s.Example
}

// GetID returns the value of ID.
func (s *PortingOrderRequirementDetailRequirementType) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *PortingOrderRequirementDetailRequirementType) GetName() OptString {
	return s.Name
}

// GetType returns the value of Type.
func (s *PortingOrderRequirementDetailRequirementType) GetType() OptString {
	return s.Type
}

// SetAcceptanceCriteria sets the value of AcceptanceCriteria.
func (s *PortingOrderRequirementDetailRequirementType) SetAcceptanceCriteria(val OptPortingOrderRequirementDetailRequirementTypeAcceptanceCriteria) {
	s.AcceptanceCriteria = val
}

// SetDescription sets the value of Description.
func (s *PortingOrderRequirementDetailRequirementType) SetDescription(val OptString) {
	s.Description = val
}

// SetExample sets the value of Example.
func (s *PortingOrderRequirementDetailRequirementType) SetExample(val OptString) {
	s.Example = val
}

// SetID sets the value of ID.
func (s *PortingOrderRequirementDetailRequirementType) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *PortingOrderRequirementDetailRequirementType) SetName(val OptString) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *PortingOrderRequirementDetailRequirementType) SetType(val OptString) {
	s.Type = val
}

// The acceptance criteria for the requirement type.
type PortingOrderRequirementDetailRequirementTypeAcceptanceCriteria map[string]jx.Raw

func (s *PortingOrderRequirementDetailRequirementTypeAcceptanceCriteria) init() PortingOrderRequirementDetailRequirementTypeAcceptanceCriteria {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Type of value expected on field_value field.
type PortingOrderRequirementFieldType string

const (
	PortingOrderRequirementFieldTypeDocument PortingOrderRequirementFieldType = "document"
)

// AllValues returns all PortingOrderRequirementFieldType values.
func (PortingOrderRequirementFieldType) AllValues() []PortingOrderRequirementFieldType {
	return []PortingOrderRequirementFieldType{
		PortingOrderRequirementFieldTypeDocument,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PortingOrderRequirementFieldType) MarshalText() ([]byte, error) {
	switch s {
	case PortingOrderRequirementFieldTypeDocument:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PortingOrderRequirementFieldType) UnmarshalText(data []byte) error {
	switch PortingOrderRequirementFieldType(data) {
	case PortingOrderRequirementFieldTypeDocument:
		*s = PortingOrderRequirementFieldTypeDocument
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PortingOrderSharingToken
type PortingOrderSharingToken struct {
	// Uniquely identifies this sharing token.
	ID OptUUID `json:"id"`
	// Identifies the porting order resource being shared.
	PortingOrderID OptUUID `json:"porting_order_id"`
	// The number of seconds until the sharing token expires.
	ExpiresInSeconds OptInt `json:"expires_in_seconds"`
	// The permissions granted to the sharing token.
	Permissions []PortingOrderSharingTokenPermissionsItem `json:"permissions"`
	// A signed JWT token that can be used to access the shared resource.
	Token OptString `json:"token"`
	// ISO 8601 formatted date indicating when the sharing token expires.
	ExpiresAt OptDateTime `json:"expires_at"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt OptDateTime `json:"created_at"`
}

// GetID returns the value of ID.
func (s *PortingOrderSharingToken) GetID() OptUUID {
	return s.ID
}

// GetPortingOrderID returns the value of PortingOrderID.
func (s *PortingOrderSharingToken) GetPortingOrderID() OptUUID {
	return s.PortingOrderID
}

// GetExpiresInSeconds returns the value of ExpiresInSeconds.
func (s *PortingOrderSharingToken) GetExpiresInSeconds() OptInt {
	return s.ExpiresInSeconds
}

// GetPermissions returns the value of Permissions.
func (s *PortingOrderSharingToken) GetPermissions() []PortingOrderSharingTokenPermissionsItem {
	return s.Permissions
}

// GetToken returns the value of Token.
func (s *PortingOrderSharingToken) GetToken() OptString {
	return s.Token
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *PortingOrderSharingToken) GetExpiresAt() OptDateTime {
	return s.ExpiresAt
}

// GetRecordType returns the value of RecordType.
func (s *PortingOrderSharingToken) GetRecordType() OptString {
	return s.RecordType
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PortingOrderSharingToken) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *PortingOrderSharingToken) SetID(val OptUUID) {
	s.ID = val
}

// SetPortingOrderID sets the value of PortingOrderID.
func (s *PortingOrderSharingToken) SetPortingOrderID(val OptUUID) {
	s.PortingOrderID = val
}

// SetExpiresInSeconds sets the value of ExpiresInSeconds.
func (s *PortingOrderSharingToken) SetExpiresInSeconds(val OptInt) {
	s.ExpiresInSeconds = val
}

// SetPermissions sets the value of Permissions.
func (s *PortingOrderSharingToken) SetPermissions(val []PortingOrderSharingTokenPermissionsItem) {
	s.Permissions = val
}

// SetToken sets the value of Token.
func (s *PortingOrderSharingToken) SetToken(val OptString) {
	s.Token = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *PortingOrderSharingToken) SetExpiresAt(val OptDateTime) {
	s.ExpiresAt = val
}

// SetRecordType sets the value of RecordType.
func (s *PortingOrderSharingToken) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PortingOrderSharingToken) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

type PortingOrderSharingTokenPermissionsItem string

const (
	PortingOrderSharingTokenPermissionsItemPortingOrderDocumentRead   PortingOrderSharingTokenPermissionsItem = "porting_order.document.read"
	PortingOrderSharingTokenPermissionsItemPortingOrderDocumentUpdate PortingOrderSharingTokenPermissionsItem = "porting_order.document.update"
)

// AllValues returns all PortingOrderSharingTokenPermissionsItem values.
func (PortingOrderSharingTokenPermissionsItem) AllValues() []PortingOrderSharingTokenPermissionsItem {
	return []PortingOrderSharingTokenPermissionsItem{
		PortingOrderSharingTokenPermissionsItemPortingOrderDocumentRead,
		PortingOrderSharingTokenPermissionsItemPortingOrderDocumentUpdate,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PortingOrderSharingTokenPermissionsItem) MarshalText() ([]byte, error) {
	switch s {
	case PortingOrderSharingTokenPermissionsItemPortingOrderDocumentRead:
		return []byte(s), nil
	case PortingOrderSharingTokenPermissionsItemPortingOrderDocumentUpdate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PortingOrderSharingTokenPermissionsItem) UnmarshalText(data []byte) error {
	switch PortingOrderSharingTokenPermissionsItem(data) {
	case PortingOrderSharingTokenPermissionsItemPortingOrderDocumentRead:
		*s = PortingOrderSharingTokenPermissionsItemPortingOrderDocumentRead
		return nil
	case PortingOrderSharingTokenPermissionsItemPortingOrderDocumentUpdate:
		*s = PortingOrderSharingTokenPermissionsItemPortingOrderDocumentUpdate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Porting order status.
// Ref: #/components/schemas/PortingOrderStatus
type PortingOrderStatus struct {
	// A list of 0 or more details about this porting order's status.
	Details []PortingOrdersExceptionType `json:"details"`
	// The current status of the porting order.
	Value OptPortingOrderStatusValue `json:"value"`
}

// GetDetails returns the value of Details.
func (s *PortingOrderStatus) GetDetails() []PortingOrdersExceptionType {
	return s.Details
}

// GetValue returns the value of Value.
func (s *PortingOrderStatus) GetValue() OptPortingOrderStatusValue {
	return s.Value
}

// SetDetails sets the value of Details.
func (s *PortingOrderStatus) SetDetails(val []PortingOrdersExceptionType) {
	s.Details = val
}

// SetValue sets the value of Value.
func (s *PortingOrderStatus) SetValue(val OptPortingOrderStatusValue) {
	s.Value = val
}

// The current status of the porting order.
type PortingOrderStatusValue string

const (
	PortingOrderStatusValueDraft            PortingOrderStatusValue = "draft"
	PortingOrderStatusValueInProcess        PortingOrderStatusValue = "in-process"
	PortingOrderStatusValueSubmitted        PortingOrderStatusValue = "submitted"
	PortingOrderStatusValueException        PortingOrderStatusValue = "exception"
	PortingOrderStatusValueFocDateConfirmed PortingOrderStatusValue = "foc-date-confirmed"
	PortingOrderStatusValuePorted           PortingOrderStatusValue = "ported"
	PortingOrderStatusValueCanceled         PortingOrderStatusValue = "canceled"
	PortingOrderStatusValueCancelPending    PortingOrderStatusValue = "cancel-pending"
)

// AllValues returns all PortingOrderStatusValue values.
func (PortingOrderStatusValue) AllValues() []PortingOrderStatusValue {
	return []PortingOrderStatusValue{
		PortingOrderStatusValueDraft,
		PortingOrderStatusValueInProcess,
		PortingOrderStatusValueSubmitted,
		PortingOrderStatusValueException,
		PortingOrderStatusValueFocDateConfirmed,
		PortingOrderStatusValuePorted,
		PortingOrderStatusValueCanceled,
		PortingOrderStatusValueCancelPending,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PortingOrderStatusValue) MarshalText() ([]byte, error) {
	switch s {
	case PortingOrderStatusValueDraft:
		return []byte(s), nil
	case PortingOrderStatusValueInProcess:
		return []byte(s), nil
	case PortingOrderStatusValueSubmitted:
		return []byte(s), nil
	case PortingOrderStatusValueException:
		return []byte(s), nil
	case PortingOrderStatusValueFocDateConfirmed:
		return []byte(s), nil
	case PortingOrderStatusValuePorted:
		return []byte(s), nil
	case PortingOrderStatusValueCanceled:
		return []byte(s), nil
	case PortingOrderStatusValueCancelPending:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PortingOrderStatusValue) UnmarshalText(data []byte) error {
	switch PortingOrderStatusValue(data) {
	case PortingOrderStatusValueDraft:
		*s = PortingOrderStatusValueDraft
		return nil
	case PortingOrderStatusValueInProcess:
		*s = PortingOrderStatusValueInProcess
		return nil
	case PortingOrderStatusValueSubmitted:
		*s = PortingOrderStatusValueSubmitted
		return nil
	case PortingOrderStatusValueException:
		*s = PortingOrderStatusValueException
		return nil
	case PortingOrderStatusValueFocDateConfirmed:
		*s = PortingOrderStatusValueFocDateConfirmed
		return nil
	case PortingOrderStatusValuePorted:
		*s = PortingOrderStatusValuePorted
		return nil
	case PortingOrderStatusValueCanceled:
		*s = PortingOrderStatusValueCanceled
		return nil
	case PortingOrderStatusValueCancelPending:
		*s = PortingOrderStatusValueCancelPending
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A port can be either 'full' or 'partial'. When type is 'full' the other attributes should be
// omitted.
// Ref: #/components/schemas/PortingOrderType
type PortingOrderType string

const (
	PortingOrderTypeFull    PortingOrderType = "full"
	PortingOrderTypePartial PortingOrderType = "partial"
)

// AllValues returns all PortingOrderType values.
func (PortingOrderType) AllValues() []PortingOrderType {
	return []PortingOrderType{
		PortingOrderTypeFull,
		PortingOrderTypePartial,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PortingOrderType) MarshalText() ([]byte, error) {
	switch s {
	case PortingOrderTypeFull:
		return []byte(s), nil
	case PortingOrderTypePartial:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PortingOrderType) UnmarshalText(data []byte) error {
	switch PortingOrderType(data) {
	case PortingOrderTypeFull:
		*s = PortingOrderTypeFull
		return nil
	case PortingOrderTypePartial:
		*s = PortingOrderTypePartial
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PortingOrderUserFeedback
type PortingOrderUserFeedback struct {
	// Once an order is ported, cancellation is requested or the request is canceled, the user may rate
	// their experience.
	UserRating OptInt `json:"user_rating"`
	// A comment related to the customer rating.
	UserComment OptString `json:"user_comment"`
}

// GetUserRating returns the value of UserRating.
func (s *PortingOrderUserFeedback) GetUserRating() OptInt {
	return s.UserRating
}

// GetUserComment returns the value of UserComment.
func (s *PortingOrderUserFeedback) GetUserComment() OptString {
	return s.UserComment
}

// SetUserRating sets the value of UserRating.
func (s *PortingOrderUserFeedback) SetUserRating(val OptInt) {
	s.UserRating = val
}

// SetUserComment sets the value of UserComment.
func (s *PortingOrderUserFeedback) SetUserComment(val OptString) {
	s.UserComment = val
}

// Ref: #/components/schemas/PortingOrdersActivationJob
type PortingOrdersActivationJob struct {
	// Uniquely identifies this activation job.
	ID OptUUID `json:"id"`
	// Specifies the status of this activation job.
	Status OptPortingOrdersActivationJobStatus `json:"status"`
	// Specifies the type of this activation job.
	ActivationType OptPortingOrdersActivationJobActivationType `json:"activation_type"`
	// ISO 8601 formatted date indicating when the activation job should be executed. This time should be
	// between some activation window.
	ActivateAt OptDateTime `json:"activate_at"`
	// List of allowed activation windows for this activation job.
	ActivationWindows []PortingOrdersActivationJobActivationWindowsItem `json:"activation_windows"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt OptDateTime `json:"created_at"`
	// ISO 8601 formatted date indicating when the resource was created.
	UpdatedAt OptDateTime `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *PortingOrdersActivationJob) GetID() OptUUID {
	return s.ID
}

// GetStatus returns the value of Status.
func (s *PortingOrdersActivationJob) GetStatus() OptPortingOrdersActivationJobStatus {
	return s.Status
}

// GetActivationType returns the value of ActivationType.
func (s *PortingOrdersActivationJob) GetActivationType() OptPortingOrdersActivationJobActivationType {
	return s.ActivationType
}

// GetActivateAt returns the value of ActivateAt.
func (s *PortingOrdersActivationJob) GetActivateAt() OptDateTime {
	return s.ActivateAt
}

// GetActivationWindows returns the value of ActivationWindows.
func (s *PortingOrdersActivationJob) GetActivationWindows() []PortingOrdersActivationJobActivationWindowsItem {
	return s.ActivationWindows
}

// GetRecordType returns the value of RecordType.
func (s *PortingOrdersActivationJob) GetRecordType() OptString {
	return s.RecordType
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PortingOrdersActivationJob) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PortingOrdersActivationJob) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *PortingOrdersActivationJob) SetID(val OptUUID) {
	s.ID = val
}

// SetStatus sets the value of Status.
func (s *PortingOrdersActivationJob) SetStatus(val OptPortingOrdersActivationJobStatus) {
	s.Status = val
}

// SetActivationType sets the value of ActivationType.
func (s *PortingOrdersActivationJob) SetActivationType(val OptPortingOrdersActivationJobActivationType) {
	s.ActivationType = val
}

// SetActivateAt sets the value of ActivateAt.
func (s *PortingOrdersActivationJob) SetActivateAt(val OptDateTime) {
	s.ActivateAt = val
}

// SetActivationWindows sets the value of ActivationWindows.
func (s *PortingOrdersActivationJob) SetActivationWindows(val []PortingOrdersActivationJobActivationWindowsItem) {
	s.ActivationWindows = val
}

// SetRecordType sets the value of RecordType.
func (s *PortingOrdersActivationJob) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PortingOrdersActivationJob) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PortingOrdersActivationJob) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Specifies the type of this activation job.
type PortingOrdersActivationJobActivationType string

const (
	PortingOrdersActivationJobActivationTypeScheduled PortingOrdersActivationJobActivationType = "scheduled"
	PortingOrdersActivationJobActivationTypeOnDemand  PortingOrdersActivationJobActivationType = "on-demand"
)

// AllValues returns all PortingOrdersActivationJobActivationType values.
func (PortingOrdersActivationJobActivationType) AllValues() []PortingOrdersActivationJobActivationType {
	return []PortingOrdersActivationJobActivationType{
		PortingOrdersActivationJobActivationTypeScheduled,
		PortingOrdersActivationJobActivationTypeOnDemand,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PortingOrdersActivationJobActivationType) MarshalText() ([]byte, error) {
	switch s {
	case PortingOrdersActivationJobActivationTypeScheduled:
		return []byte(s), nil
	case PortingOrdersActivationJobActivationTypeOnDemand:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PortingOrdersActivationJobActivationType) UnmarshalText(data []byte) error {
	switch PortingOrdersActivationJobActivationType(data) {
	case PortingOrdersActivationJobActivationTypeScheduled:
		*s = PortingOrdersActivationJobActivationTypeScheduled
		return nil
	case PortingOrdersActivationJobActivationTypeOnDemand:
		*s = PortingOrdersActivationJobActivationTypeOnDemand
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PortingOrdersActivationJobActivationWindowsItem struct {
	// ISO 8601 formatted date indicating when the activation window starts.
	StartAt OptDateTime `json:"start_at"`
	// ISO 8601 formatted date indicating when the activation window ends.
	EndAt OptDateTime `json:"end_at"`
}

// GetStartAt returns the value of StartAt.
func (s *PortingOrdersActivationJobActivationWindowsItem) GetStartAt() OptDateTime {
	return s.StartAt
}

// GetEndAt returns the value of EndAt.
func (s *PortingOrdersActivationJobActivationWindowsItem) GetEndAt() OptDateTime {
	return s.EndAt
}

// SetStartAt sets the value of StartAt.
func (s *PortingOrdersActivationJobActivationWindowsItem) SetStartAt(val OptDateTime) {
	s.StartAt = val
}

// SetEndAt sets the value of EndAt.
func (s *PortingOrdersActivationJobActivationWindowsItem) SetEndAt(val OptDateTime) {
	s.EndAt = val
}

// Specifies the status of this activation job.
type PortingOrdersActivationJobStatus string

const (
	PortingOrdersActivationJobStatusCreated   PortingOrdersActivationJobStatus = "created"
	PortingOrdersActivationJobStatusInProcess PortingOrdersActivationJobStatus = "in-process"
	PortingOrdersActivationJobStatusCompleted PortingOrdersActivationJobStatus = "completed"
	PortingOrdersActivationJobStatusFailed    PortingOrdersActivationJobStatus = "failed"
)

// AllValues returns all PortingOrdersActivationJobStatus values.
func (PortingOrdersActivationJobStatus) AllValues() []PortingOrdersActivationJobStatus {
	return []PortingOrdersActivationJobStatus{
		PortingOrdersActivationJobStatusCreated,
		PortingOrdersActivationJobStatusInProcess,
		PortingOrdersActivationJobStatusCompleted,
		PortingOrdersActivationJobStatusFailed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PortingOrdersActivationJobStatus) MarshalText() ([]byte, error) {
	switch s {
	case PortingOrdersActivationJobStatusCreated:
		return []byte(s), nil
	case PortingOrdersActivationJobStatusInProcess:
		return []byte(s), nil
	case PortingOrdersActivationJobStatusCompleted:
		return []byte(s), nil
	case PortingOrdersActivationJobStatusFailed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PortingOrdersActivationJobStatus) UnmarshalText(data []byte) error {
	switch PortingOrdersActivationJobStatus(data) {
	case PortingOrdersActivationJobStatusCreated:
		*s = PortingOrdersActivationJobStatusCreated
		return nil
	case PortingOrdersActivationJobStatusInProcess:
		*s = PortingOrdersActivationJobStatusInProcess
		return nil
	case PortingOrdersActivationJobStatusCompleted:
		*s = PortingOrdersActivationJobStatusCompleted
		return nil
	case PortingOrdersActivationJobStatusFailed:
		*s = PortingOrdersActivationJobStatusFailed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PortingOrdersAllowedFocWindow
type PortingOrdersAllowedFocWindow struct {
	// ISO 8601 formatted date indicating the start of the range of foc window.
	StartedAt OptDateTime `json:"started_at"`
	// ISO 8601 formatted date indicating the end of the range of foc window.
	EndedAt OptDateTime `json:"ended_at"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
}

// GetStartedAt returns the value of StartedAt.
func (s *PortingOrdersAllowedFocWindow) GetStartedAt() OptDateTime {
	return s.StartedAt
}

// GetEndedAt returns the value of EndedAt.
func (s *PortingOrdersAllowedFocWindow) GetEndedAt() OptDateTime {
	return s.EndedAt
}

// GetRecordType returns the value of RecordType.
func (s *PortingOrdersAllowedFocWindow) GetRecordType() OptString {
	return s.RecordType
}

// SetStartedAt sets the value of StartedAt.
func (s *PortingOrdersAllowedFocWindow) SetStartedAt(val OptDateTime) {
	s.StartedAt = val
}

// SetEndedAt sets the value of EndedAt.
func (s *PortingOrdersAllowedFocWindow) SetEndedAt(val OptDateTime) {
	s.EndedAt = val
}

// SetRecordType sets the value of RecordType.
func (s *PortingOrdersAllowedFocWindow) SetRecordType(val OptString) {
	s.RecordType = val
}

// Ref: #/components/schemas/PortingOrdersComment
type PortingOrdersComment struct {
	ID OptUUID `json:"id"`
	// Body of comment.
	Body           OptString `json:"body"`
	PortingOrderID OptUUID   `json:"porting_order_id"`
	// Indicates whether this comment was created by a Telnyx Admin, user, or system.
	UserType OptPortingOrdersCommentUserType `json:"user_type"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt OptDateTime `json:"created_at"`
}

// GetID returns the value of ID.
func (s *PortingOrdersComment) GetID() OptUUID {
	return s.ID
}

// GetBody returns the value of Body.
func (s *PortingOrdersComment) GetBody() OptString {
	return s.Body
}

// GetPortingOrderID returns the value of PortingOrderID.
func (s *PortingOrdersComment) GetPortingOrderID() OptUUID {
	return s.PortingOrderID
}

// GetUserType returns the value of UserType.
func (s *PortingOrdersComment) GetUserType() OptPortingOrdersCommentUserType {
	return s.UserType
}

// GetRecordType returns the value of RecordType.
func (s *PortingOrdersComment) GetRecordType() OptString {
	return s.RecordType
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PortingOrdersComment) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *PortingOrdersComment) SetID(val OptUUID) {
	s.ID = val
}

// SetBody sets the value of Body.
func (s *PortingOrdersComment) SetBody(val OptString) {
	s.Body = val
}

// SetPortingOrderID sets the value of PortingOrderID.
func (s *PortingOrdersComment) SetPortingOrderID(val OptUUID) {
	s.PortingOrderID = val
}

// SetUserType sets the value of UserType.
func (s *PortingOrdersComment) SetUserType(val OptPortingOrdersCommentUserType) {
	s.UserType = val
}

// SetRecordType sets the value of RecordType.
func (s *PortingOrdersComment) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PortingOrdersComment) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// Indicates whether this comment was created by a Telnyx Admin, user, or system.
type PortingOrdersCommentUserType string

const (
	PortingOrdersCommentUserTypeAdmin  PortingOrdersCommentUserType = "admin"
	PortingOrdersCommentUserTypeUser   PortingOrdersCommentUserType = "user"
	PortingOrdersCommentUserTypeSystem PortingOrdersCommentUserType = "system"
)

// AllValues returns all PortingOrdersCommentUserType values.
func (PortingOrdersCommentUserType) AllValues() []PortingOrdersCommentUserType {
	return []PortingOrdersCommentUserType{
		PortingOrdersCommentUserTypeAdmin,
		PortingOrdersCommentUserTypeUser,
		PortingOrdersCommentUserTypeSystem,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PortingOrdersCommentUserType) MarshalText() ([]byte, error) {
	switch s {
	case PortingOrdersCommentUserTypeAdmin:
		return []byte(s), nil
	case PortingOrdersCommentUserTypeUser:
		return []byte(s), nil
	case PortingOrdersCommentUserTypeSystem:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PortingOrdersCommentUserType) UnmarshalText(data []byte) error {
	switch PortingOrdersCommentUserType(data) {
	case PortingOrdersCommentUserTypeAdmin:
		*s = PortingOrdersCommentUserTypeAdmin
		return nil
	case PortingOrdersCommentUserTypeUser:
		*s = PortingOrdersCommentUserTypeUser
		return nil
	case PortingOrdersCommentUserTypeSystem:
		*s = PortingOrdersCommentUserTypeSystem
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PortingOrdersExceptionType
type PortingOrdersExceptionType struct {
	// Identifier of an exception type.
	Code OptPortingOrdersExceptionTypeCode `json:"code"`
	// Description of an exception type.
	Description OptString `json:"description"`
}

// GetCode returns the value of Code.
func (s *PortingOrdersExceptionType) GetCode() OptPortingOrdersExceptionTypeCode {
	return s.Code
}

// GetDescription returns the value of Description.
func (s *PortingOrdersExceptionType) GetDescription() OptString {
	return s.Description
}

// SetCode sets the value of Code.
func (s *PortingOrdersExceptionType) SetCode(val OptPortingOrdersExceptionTypeCode) {
	s.Code = val
}

// SetDescription sets the value of Description.
func (s *PortingOrdersExceptionType) SetDescription(val OptString) {
	s.Description = val
}

// Identifier of an exception type.
type PortingOrdersExceptionTypeCode string

const (
	PortingOrdersExceptionTypeCodeACCOUNTNUMBERMISMATCH        PortingOrdersExceptionTypeCode = "ACCOUNT_NUMBER_MISMATCH"
	PortingOrdersExceptionTypeCodeAUTHPERSONMISMATCH           PortingOrdersExceptionTypeCode = "AUTH_PERSON_MISMATCH"
	PortingOrdersExceptionTypeCodeBTNATNMISMATCH               PortingOrdersExceptionTypeCode = "BTN_ATN_MISMATCH"
	PortingOrdersExceptionTypeCodeENTITYNAMEMISMATCH           PortingOrdersExceptionTypeCode = "ENTITY_NAME_MISMATCH"
	PortingOrdersExceptionTypeCodeFOCEXPIRED                   PortingOrdersExceptionTypeCode = "FOC_EXPIRED"
	PortingOrdersExceptionTypeCodeFOCREJECTED                  PortingOrdersExceptionTypeCode = "FOC_REJECTED"
	PortingOrdersExceptionTypeCodeLOCATIONMISMATCH             PortingOrdersExceptionTypeCode = "LOCATION_MISMATCH"
	PortingOrdersExceptionTypeCodeLSRPENDING                   PortingOrdersExceptionTypeCode = "LSR_PENDING"
	PortingOrdersExceptionTypeCodeMAINBTNPORTING               PortingOrdersExceptionTypeCode = "MAIN_BTN_PORTING"
	PortingOrdersExceptionTypeCodeOSPIRRESPONSIVE              PortingOrdersExceptionTypeCode = "OSP_IRRESPONSIVE"
	PortingOrdersExceptionTypeCodeOTHER                        PortingOrdersExceptionTypeCode = "OTHER"
	PortingOrdersExceptionTypeCodePASSCODEPININVALID           PortingOrdersExceptionTypeCode = "PASSCODE_PIN_INVALID"
	PortingOrdersExceptionTypeCodePHONENUMBERHASSPECIALFEATURE PortingOrdersExceptionTypeCode = "PHONE_NUMBER_HAS_SPECIAL_FEATURE"
	PortingOrdersExceptionTypeCodePHONENUMBERMISMATCH          PortingOrdersExceptionTypeCode = "PHONE_NUMBER_MISMATCH"
	PortingOrdersExceptionTypeCodePHONENUMBERNOTPORTABLE       PortingOrdersExceptionTypeCode = "PHONE_NUMBER_NOT_PORTABLE"
	PortingOrdersExceptionTypeCodePORTTYPEINCORRECT            PortingOrdersExceptionTypeCode = "PORT_TYPE_INCORRECT"
	PortingOrdersExceptionTypeCodePORTINGORDERSPLITREQUIRED    PortingOrdersExceptionTypeCode = "PORTING_ORDER_SPLIT_REQUIRED"
	PortingOrdersExceptionTypeCodePOSTALCODEMISMATCH           PortingOrdersExceptionTypeCode = "POSTAL_CODE_MISMATCH"
	PortingOrdersExceptionTypeCodeRATECENTERNOTPORTABLE        PortingOrdersExceptionTypeCode = "RATE_CENTER_NOT_PORTABLE"
	PortingOrdersExceptionTypeCodeSVCONFLICT                   PortingOrdersExceptionTypeCode = "SV_CONFLICT"
	PortingOrdersExceptionTypeCodeSVUNKNOWNFAILURE             PortingOrdersExceptionTypeCode = "SV_UNKNOWN_FAILURE"
)

// AllValues returns all PortingOrdersExceptionTypeCode values.
func (PortingOrdersExceptionTypeCode) AllValues() []PortingOrdersExceptionTypeCode {
	return []PortingOrdersExceptionTypeCode{
		PortingOrdersExceptionTypeCodeACCOUNTNUMBERMISMATCH,
		PortingOrdersExceptionTypeCodeAUTHPERSONMISMATCH,
		PortingOrdersExceptionTypeCodeBTNATNMISMATCH,
		PortingOrdersExceptionTypeCodeENTITYNAMEMISMATCH,
		PortingOrdersExceptionTypeCodeFOCEXPIRED,
		PortingOrdersExceptionTypeCodeFOCREJECTED,
		PortingOrdersExceptionTypeCodeLOCATIONMISMATCH,
		PortingOrdersExceptionTypeCodeLSRPENDING,
		PortingOrdersExceptionTypeCodeMAINBTNPORTING,
		PortingOrdersExceptionTypeCodeOSPIRRESPONSIVE,
		PortingOrdersExceptionTypeCodeOTHER,
		PortingOrdersExceptionTypeCodePASSCODEPININVALID,
		PortingOrdersExceptionTypeCodePHONENUMBERHASSPECIALFEATURE,
		PortingOrdersExceptionTypeCodePHONENUMBERMISMATCH,
		PortingOrdersExceptionTypeCodePHONENUMBERNOTPORTABLE,
		PortingOrdersExceptionTypeCodePORTTYPEINCORRECT,
		PortingOrdersExceptionTypeCodePORTINGORDERSPLITREQUIRED,
		PortingOrdersExceptionTypeCodePOSTALCODEMISMATCH,
		PortingOrdersExceptionTypeCodeRATECENTERNOTPORTABLE,
		PortingOrdersExceptionTypeCodeSVCONFLICT,
		PortingOrdersExceptionTypeCodeSVUNKNOWNFAILURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PortingOrdersExceptionTypeCode) MarshalText() ([]byte, error) {
	switch s {
	case PortingOrdersExceptionTypeCodeACCOUNTNUMBERMISMATCH:
		return []byte(s), nil
	case PortingOrdersExceptionTypeCodeAUTHPERSONMISMATCH:
		return []byte(s), nil
	case PortingOrdersExceptionTypeCodeBTNATNMISMATCH:
		return []byte(s), nil
	case PortingOrdersExceptionTypeCodeENTITYNAMEMISMATCH:
		return []byte(s), nil
	case PortingOrdersExceptionTypeCodeFOCEXPIRED:
		return []byte(s), nil
	case PortingOrdersExceptionTypeCodeFOCREJECTED:
		return []byte(s), nil
	case PortingOrdersExceptionTypeCodeLOCATIONMISMATCH:
		return []byte(s), nil
	case PortingOrdersExceptionTypeCodeLSRPENDING:
		return []byte(s), nil
	case PortingOrdersExceptionTypeCodeMAINBTNPORTING:
		return []byte(s), nil
	case PortingOrdersExceptionTypeCodeOSPIRRESPONSIVE:
		return []byte(s), nil
	case PortingOrdersExceptionTypeCodeOTHER:
		return []byte(s), nil
	case PortingOrdersExceptionTypeCodePASSCODEPININVALID:
		return []byte(s), nil
	case PortingOrdersExceptionTypeCodePHONENUMBERHASSPECIALFEATURE:
		return []byte(s), nil
	case PortingOrdersExceptionTypeCodePHONENUMBERMISMATCH:
		return []byte(s), nil
	case PortingOrdersExceptionTypeCodePHONENUMBERNOTPORTABLE:
		return []byte(s), nil
	case PortingOrdersExceptionTypeCodePORTTYPEINCORRECT:
		return []byte(s), nil
	case PortingOrdersExceptionTypeCodePORTINGORDERSPLITREQUIRED:
		return []byte(s), nil
	case PortingOrdersExceptionTypeCodePOSTALCODEMISMATCH:
		return []byte(s), nil
	case PortingOrdersExceptionTypeCodeRATECENTERNOTPORTABLE:
		return []byte(s), nil
	case PortingOrdersExceptionTypeCodeSVCONFLICT:
		return []byte(s), nil
	case PortingOrdersExceptionTypeCodeSVUNKNOWNFAILURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PortingOrdersExceptionTypeCode) UnmarshalText(data []byte) error {
	switch PortingOrdersExceptionTypeCode(data) {
	case PortingOrdersExceptionTypeCodeACCOUNTNUMBERMISMATCH:
		*s = PortingOrdersExceptionTypeCodeACCOUNTNUMBERMISMATCH
		return nil
	case PortingOrdersExceptionTypeCodeAUTHPERSONMISMATCH:
		*s = PortingOrdersExceptionTypeCodeAUTHPERSONMISMATCH
		return nil
	case PortingOrdersExceptionTypeCodeBTNATNMISMATCH:
		*s = PortingOrdersExceptionTypeCodeBTNATNMISMATCH
		return nil
	case PortingOrdersExceptionTypeCodeENTITYNAMEMISMATCH:
		*s = PortingOrdersExceptionTypeCodeENTITYNAMEMISMATCH
		return nil
	case PortingOrdersExceptionTypeCodeFOCEXPIRED:
		*s = PortingOrdersExceptionTypeCodeFOCEXPIRED
		return nil
	case PortingOrdersExceptionTypeCodeFOCREJECTED:
		*s = PortingOrdersExceptionTypeCodeFOCREJECTED
		return nil
	case PortingOrdersExceptionTypeCodeLOCATIONMISMATCH:
		*s = PortingOrdersExceptionTypeCodeLOCATIONMISMATCH
		return nil
	case PortingOrdersExceptionTypeCodeLSRPENDING:
		*s = PortingOrdersExceptionTypeCodeLSRPENDING
		return nil
	case PortingOrdersExceptionTypeCodeMAINBTNPORTING:
		*s = PortingOrdersExceptionTypeCodeMAINBTNPORTING
		return nil
	case PortingOrdersExceptionTypeCodeOSPIRRESPONSIVE:
		*s = PortingOrdersExceptionTypeCodeOSPIRRESPONSIVE
		return nil
	case PortingOrdersExceptionTypeCodeOTHER:
		*s = PortingOrdersExceptionTypeCodeOTHER
		return nil
	case PortingOrdersExceptionTypeCodePASSCODEPININVALID:
		*s = PortingOrdersExceptionTypeCodePASSCODEPININVALID
		return nil
	case PortingOrdersExceptionTypeCodePHONENUMBERHASSPECIALFEATURE:
		*s = PortingOrdersExceptionTypeCodePHONENUMBERHASSPECIALFEATURE
		return nil
	case PortingOrdersExceptionTypeCodePHONENUMBERMISMATCH:
		*s = PortingOrdersExceptionTypeCodePHONENUMBERMISMATCH
		return nil
	case PortingOrdersExceptionTypeCodePHONENUMBERNOTPORTABLE:
		*s = PortingOrdersExceptionTypeCodePHONENUMBERNOTPORTABLE
		return nil
	case PortingOrdersExceptionTypeCodePORTTYPEINCORRECT:
		*s = PortingOrdersExceptionTypeCodePORTTYPEINCORRECT
		return nil
	case PortingOrdersExceptionTypeCodePORTINGORDERSPLITREQUIRED:
		*s = PortingOrdersExceptionTypeCodePORTINGORDERSPLITREQUIRED
		return nil
	case PortingOrdersExceptionTypeCodePOSTALCODEMISMATCH:
		*s = PortingOrdersExceptionTypeCodePOSTALCODEMISMATCH
		return nil
	case PortingOrdersExceptionTypeCodeRATECENTERNOTPORTABLE:
		*s = PortingOrdersExceptionTypeCodeRATECENTERNOTPORTABLE
		return nil
	case PortingOrdersExceptionTypeCodeSVCONFLICT:
		*s = PortingOrdersExceptionTypeCodeSVCONFLICT
		return nil
	case PortingOrdersExceptionTypeCodeSVUNKNOWNFAILURE:
		*s = PortingOrdersExceptionTypeCodeSVUNKNOWNFAILURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// PortingOrdersIDCommentsPostUnauthorized is response for PortingOrdersIDCommentsPost operation.
type PortingOrdersIDCommentsPostUnauthorized struct{}

func (*PortingOrdersIDCommentsPostUnauthorized) portingOrdersIDCommentsPostRes() {}

// PortingOrdersIDCommentsPostUnprocessableEntity is response for PortingOrdersIDCommentsPost operation.
type PortingOrdersIDCommentsPostUnprocessableEntity struct{}

func (*PortingOrdersIDCommentsPostUnprocessableEntity) portingOrdersIDCommentsPostRes() {}

// Ref: #/components/schemas/PortingPhoneNumber
type PortingPhoneNumber struct {
	// The current status of the porting order.
	PortingOrderStatus OptPortingPhoneNumberPortingOrderStatus `json:"porting_order_status"`
	// The type of the phone number.
	PhoneNumberType OptPortingPhoneNumberPhoneNumberType `json:"phone_number_type"`
	// E164 formatted phone number.
	PhoneNumber OptString `json:"phone_number"`
	// Identifies the associated port request.
	PortingOrderID OptUUID `json:"porting_order_id"`
	// A key to reference this porting order when contacting Telnyx customer support.
	SupportKey        OptString                       `json:"support_key"`
	ActivationStatus  OptPortingOrderActivationStatus `json:"activation_status"`
	PortabilityStatus OptPortabilityStatus            `json:"portability_status"`
	// The current status of the requirements in a INTL porting order.
	RequirementsStatus OptPortingPhoneNumberRequirementsStatus `json:"requirements_status"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
}

// GetPortingOrderStatus returns the value of PortingOrderStatus.
func (s *PortingPhoneNumber) GetPortingOrderStatus() OptPortingPhoneNumberPortingOrderStatus {
	return s.PortingOrderStatus
}

// GetPhoneNumberType returns the value of PhoneNumberType.
func (s *PortingPhoneNumber) GetPhoneNumberType() OptPortingPhoneNumberPhoneNumberType {
	return s.PhoneNumberType
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *PortingPhoneNumber) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetPortingOrderID returns the value of PortingOrderID.
func (s *PortingPhoneNumber) GetPortingOrderID() OptUUID {
	return s.PortingOrderID
}

// GetSupportKey returns the value of SupportKey.
func (s *PortingPhoneNumber) GetSupportKey() OptString {
	return s.SupportKey
}

// GetActivationStatus returns the value of ActivationStatus.
func (s *PortingPhoneNumber) GetActivationStatus() OptPortingOrderActivationStatus {
	return s.ActivationStatus
}

// GetPortabilityStatus returns the value of PortabilityStatus.
func (s *PortingPhoneNumber) GetPortabilityStatus() OptPortabilityStatus {
	return s.PortabilityStatus
}

// GetRequirementsStatus returns the value of RequirementsStatus.
func (s *PortingPhoneNumber) GetRequirementsStatus() OptPortingPhoneNumberRequirementsStatus {
	return s.RequirementsStatus
}

// GetRecordType returns the value of RecordType.
func (s *PortingPhoneNumber) GetRecordType() OptString {
	return s.RecordType
}

// SetPortingOrderStatus sets the value of PortingOrderStatus.
func (s *PortingPhoneNumber) SetPortingOrderStatus(val OptPortingPhoneNumberPortingOrderStatus) {
	s.PortingOrderStatus = val
}

// SetPhoneNumberType sets the value of PhoneNumberType.
func (s *PortingPhoneNumber) SetPhoneNumberType(val OptPortingPhoneNumberPhoneNumberType) {
	s.PhoneNumberType = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *PortingPhoneNumber) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetPortingOrderID sets the value of PortingOrderID.
func (s *PortingPhoneNumber) SetPortingOrderID(val OptUUID) {
	s.PortingOrderID = val
}

// SetSupportKey sets the value of SupportKey.
func (s *PortingPhoneNumber) SetSupportKey(val OptString) {
	s.SupportKey = val
}

// SetActivationStatus sets the value of ActivationStatus.
func (s *PortingPhoneNumber) SetActivationStatus(val OptPortingOrderActivationStatus) {
	s.ActivationStatus = val
}

// SetPortabilityStatus sets the value of PortabilityStatus.
func (s *PortingPhoneNumber) SetPortabilityStatus(val OptPortabilityStatus) {
	s.PortabilityStatus = val
}

// SetRequirementsStatus sets the value of RequirementsStatus.
func (s *PortingPhoneNumber) SetRequirementsStatus(val OptPortingPhoneNumberRequirementsStatus) {
	s.RequirementsStatus = val
}

// SetRecordType sets the value of RecordType.
func (s *PortingPhoneNumber) SetRecordType(val OptString) {
	s.RecordType = val
}

// Ref: #/components/schemas/PortingPhoneNumberConfiguration
type PortingPhoneNumberConfiguration struct {
	// Uniquely identifies this phone number configuration.
	ID OptUUID `json:"id"`
	// Identifies the associated user bundle.
	UserBundleID OptUUID `json:"user_bundle_id"`
	// Identifies the associated porting phone number.
	PortingPhoneNumberID OptUUID `json:"porting_phone_number_id"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt OptDateTime `json:"created_at"`
	// ISO 8601 formatted date indicating when the resource was updated.
	UpdatedAt OptDateTime `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *PortingPhoneNumberConfiguration) GetID() OptUUID {
	return s.ID
}

// GetUserBundleID returns the value of UserBundleID.
func (s *PortingPhoneNumberConfiguration) GetUserBundleID() OptUUID {
	return s.UserBundleID
}

// GetPortingPhoneNumberID returns the value of PortingPhoneNumberID.
func (s *PortingPhoneNumberConfiguration) GetPortingPhoneNumberID() OptUUID {
	return s.PortingPhoneNumberID
}

// GetRecordType returns the value of RecordType.
func (s *PortingPhoneNumberConfiguration) GetRecordType() OptString {
	return s.RecordType
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PortingPhoneNumberConfiguration) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PortingPhoneNumberConfiguration) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *PortingPhoneNumberConfiguration) SetID(val OptUUID) {
	s.ID = val
}

// SetUserBundleID sets the value of UserBundleID.
func (s *PortingPhoneNumberConfiguration) SetUserBundleID(val OptUUID) {
	s.UserBundleID = val
}

// SetPortingPhoneNumberID sets the value of PortingPhoneNumberID.
func (s *PortingPhoneNumberConfiguration) SetPortingPhoneNumberID(val OptUUID) {
	s.PortingPhoneNumberID = val
}

// SetRecordType sets the value of RecordType.
func (s *PortingPhoneNumberConfiguration) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PortingPhoneNumberConfiguration) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PortingPhoneNumberConfiguration) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// The type of the phone number.
type PortingPhoneNumberPhoneNumberType string

const (
	PortingPhoneNumberPhoneNumberTypeLandline   PortingPhoneNumberPhoneNumberType = "landline"
	PortingPhoneNumberPhoneNumberTypeLocal      PortingPhoneNumberPhoneNumberType = "local"
	PortingPhoneNumberPhoneNumberTypeMobile     PortingPhoneNumberPhoneNumberType = "mobile"
	PortingPhoneNumberPhoneNumberTypeNational   PortingPhoneNumberPhoneNumberType = "national"
	PortingPhoneNumberPhoneNumberTypeSharedCost PortingPhoneNumberPhoneNumberType = "shared_cost"
	PortingPhoneNumberPhoneNumberTypeTollFree   PortingPhoneNumberPhoneNumberType = "toll_free"
)

// AllValues returns all PortingPhoneNumberPhoneNumberType values.
func (PortingPhoneNumberPhoneNumberType) AllValues() []PortingPhoneNumberPhoneNumberType {
	return []PortingPhoneNumberPhoneNumberType{
		PortingPhoneNumberPhoneNumberTypeLandline,
		PortingPhoneNumberPhoneNumberTypeLocal,
		PortingPhoneNumberPhoneNumberTypeMobile,
		PortingPhoneNumberPhoneNumberTypeNational,
		PortingPhoneNumberPhoneNumberTypeSharedCost,
		PortingPhoneNumberPhoneNumberTypeTollFree,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PortingPhoneNumberPhoneNumberType) MarshalText() ([]byte, error) {
	switch s {
	case PortingPhoneNumberPhoneNumberTypeLandline:
		return []byte(s), nil
	case PortingPhoneNumberPhoneNumberTypeLocal:
		return []byte(s), nil
	case PortingPhoneNumberPhoneNumberTypeMobile:
		return []byte(s), nil
	case PortingPhoneNumberPhoneNumberTypeNational:
		return []byte(s), nil
	case PortingPhoneNumberPhoneNumberTypeSharedCost:
		return []byte(s), nil
	case PortingPhoneNumberPhoneNumberTypeTollFree:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PortingPhoneNumberPhoneNumberType) UnmarshalText(data []byte) error {
	switch PortingPhoneNumberPhoneNumberType(data) {
	case PortingPhoneNumberPhoneNumberTypeLandline:
		*s = PortingPhoneNumberPhoneNumberTypeLandline
		return nil
	case PortingPhoneNumberPhoneNumberTypeLocal:
		*s = PortingPhoneNumberPhoneNumberTypeLocal
		return nil
	case PortingPhoneNumberPhoneNumberTypeMobile:
		*s = PortingPhoneNumberPhoneNumberTypeMobile
		return nil
	case PortingPhoneNumberPhoneNumberTypeNational:
		*s = PortingPhoneNumberPhoneNumberTypeNational
		return nil
	case PortingPhoneNumberPhoneNumberTypeSharedCost:
		*s = PortingPhoneNumberPhoneNumberTypeSharedCost
		return nil
	case PortingPhoneNumberPhoneNumberTypeTollFree:
		*s = PortingPhoneNumberPhoneNumberTypeTollFree
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The current status of the porting order.
type PortingPhoneNumberPortingOrderStatus string

const (
	PortingPhoneNumberPortingOrderStatusDraft            PortingPhoneNumberPortingOrderStatus = "draft"
	PortingPhoneNumberPortingOrderStatusInProcess        PortingPhoneNumberPortingOrderStatus = "in-process"
	PortingPhoneNumberPortingOrderStatusSubmitted        PortingPhoneNumberPortingOrderStatus = "submitted"
	PortingPhoneNumberPortingOrderStatusException        PortingPhoneNumberPortingOrderStatus = "exception"
	PortingPhoneNumberPortingOrderStatusFocDateConfirmed PortingPhoneNumberPortingOrderStatus = "foc-date-confirmed"
	PortingPhoneNumberPortingOrderStatusCancelPending    PortingPhoneNumberPortingOrderStatus = "cancel-pending"
	PortingPhoneNumberPortingOrderStatusPorted           PortingPhoneNumberPortingOrderStatus = "ported"
	PortingPhoneNumberPortingOrderStatusCancelled        PortingPhoneNumberPortingOrderStatus = "cancelled"
)

// AllValues returns all PortingPhoneNumberPortingOrderStatus values.
func (PortingPhoneNumberPortingOrderStatus) AllValues() []PortingPhoneNumberPortingOrderStatus {
	return []PortingPhoneNumberPortingOrderStatus{
		PortingPhoneNumberPortingOrderStatusDraft,
		PortingPhoneNumberPortingOrderStatusInProcess,
		PortingPhoneNumberPortingOrderStatusSubmitted,
		PortingPhoneNumberPortingOrderStatusException,
		PortingPhoneNumberPortingOrderStatusFocDateConfirmed,
		PortingPhoneNumberPortingOrderStatusCancelPending,
		PortingPhoneNumberPortingOrderStatusPorted,
		PortingPhoneNumberPortingOrderStatusCancelled,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PortingPhoneNumberPortingOrderStatus) MarshalText() ([]byte, error) {
	switch s {
	case PortingPhoneNumberPortingOrderStatusDraft:
		return []byte(s), nil
	case PortingPhoneNumberPortingOrderStatusInProcess:
		return []byte(s), nil
	case PortingPhoneNumberPortingOrderStatusSubmitted:
		return []byte(s), nil
	case PortingPhoneNumberPortingOrderStatusException:
		return []byte(s), nil
	case PortingPhoneNumberPortingOrderStatusFocDateConfirmed:
		return []byte(s), nil
	case PortingPhoneNumberPortingOrderStatusCancelPending:
		return []byte(s), nil
	case PortingPhoneNumberPortingOrderStatusPorted:
		return []byte(s), nil
	case PortingPhoneNumberPortingOrderStatusCancelled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PortingPhoneNumberPortingOrderStatus) UnmarshalText(data []byte) error {
	switch PortingPhoneNumberPortingOrderStatus(data) {
	case PortingPhoneNumberPortingOrderStatusDraft:
		*s = PortingPhoneNumberPortingOrderStatusDraft
		return nil
	case PortingPhoneNumberPortingOrderStatusInProcess:
		*s = PortingPhoneNumberPortingOrderStatusInProcess
		return nil
	case PortingPhoneNumberPortingOrderStatusSubmitted:
		*s = PortingPhoneNumberPortingOrderStatusSubmitted
		return nil
	case PortingPhoneNumberPortingOrderStatusException:
		*s = PortingPhoneNumberPortingOrderStatusException
		return nil
	case PortingPhoneNumberPortingOrderStatusFocDateConfirmed:
		*s = PortingPhoneNumberPortingOrderStatusFocDateConfirmed
		return nil
	case PortingPhoneNumberPortingOrderStatusCancelPending:
		*s = PortingPhoneNumberPortingOrderStatusCancelPending
		return nil
	case PortingPhoneNumberPortingOrderStatusPorted:
		*s = PortingPhoneNumberPortingOrderStatusPorted
		return nil
	case PortingPhoneNumberPortingOrderStatusCancelled:
		*s = PortingPhoneNumberPortingOrderStatusCancelled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The current status of the requirements in a INTL porting order.
type PortingPhoneNumberRequirementsStatus string

const (
	PortingPhoneNumberRequirementsStatusRequirementInfoPending     PortingPhoneNumberRequirementsStatus = "requirement-info-pending"
	PortingPhoneNumberRequirementsStatusRequirementInfoUnderReview PortingPhoneNumberRequirementsStatus = "requirement-info-under-review"
	PortingPhoneNumberRequirementsStatusRequirementInfoException   PortingPhoneNumberRequirementsStatus = "requirement-info-exception"
	PortingPhoneNumberRequirementsStatusApproved                   PortingPhoneNumberRequirementsStatus = "approved"
)

// AllValues returns all PortingPhoneNumberRequirementsStatus values.
func (PortingPhoneNumberRequirementsStatus) AllValues() []PortingPhoneNumberRequirementsStatus {
	return []PortingPhoneNumberRequirementsStatus{
		PortingPhoneNumberRequirementsStatusRequirementInfoPending,
		PortingPhoneNumberRequirementsStatusRequirementInfoUnderReview,
		PortingPhoneNumberRequirementsStatusRequirementInfoException,
		PortingPhoneNumberRequirementsStatusApproved,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PortingPhoneNumberRequirementsStatus) MarshalText() ([]byte, error) {
	switch s {
	case PortingPhoneNumberRequirementsStatusRequirementInfoPending:
		return []byte(s), nil
	case PortingPhoneNumberRequirementsStatusRequirementInfoUnderReview:
		return []byte(s), nil
	case PortingPhoneNumberRequirementsStatusRequirementInfoException:
		return []byte(s), nil
	case PortingPhoneNumberRequirementsStatusApproved:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PortingPhoneNumberRequirementsStatus) UnmarshalText(data []byte) error {
	switch PortingPhoneNumberRequirementsStatus(data) {
	case PortingPhoneNumberRequirementsStatusRequirementInfoPending:
		*s = PortingPhoneNumberRequirementsStatusRequirementInfoPending
		return nil
	case PortingPhoneNumberRequirementsStatusRequirementInfoUnderReview:
		*s = PortingPhoneNumberRequirementsStatusRequirementInfoUnderReview
		return nil
	case PortingPhoneNumberRequirementsStatusRequirementInfoException:
		*s = PortingPhoneNumberRequirementsStatusRequirementInfoException
		return nil
	case PortingPhoneNumberRequirementsStatusApproved:
		*s = PortingPhoneNumberRequirementsStatusApproved
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PortingReport
type PortingReport struct {
	// Uniquely identifies the report.
	ID OptUUID `json:"id"`
	// Identifies the type of report.
	ReportType OptPortingReportReportType `json:"report_type"`
	// The current status of the report generation.
	Status OptPortingReportStatus `json:"status"`
	Params OptPortingReportParams `json:"params"`
	// Identifies the document that was uploaded when report was generated. This field is only populated
	// when the report is under completed status.
	DocumentID OptUUID `json:"document_id"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt OptDateTime `json:"created_at"`
	// ISO 8601 formatted date indicating when the resource was updated.
	UpdatedAt OptDateTime `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *PortingReport) GetID() OptUUID {
	return s.ID
}

// GetReportType returns the value of ReportType.
func (s *PortingReport) GetReportType() OptPortingReportReportType {
	return s.ReportType
}

// GetStatus returns the value of Status.
func (s *PortingReport) GetStatus() OptPortingReportStatus {
	return s.Status
}

// GetParams returns the value of Params.
func (s *PortingReport) GetParams() OptPortingReportParams {
	return s.Params
}

// GetDocumentID returns the value of DocumentID.
func (s *PortingReport) GetDocumentID() OptUUID {
	return s.DocumentID
}

// GetRecordType returns the value of RecordType.
func (s *PortingReport) GetRecordType() OptString {
	return s.RecordType
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PortingReport) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PortingReport) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *PortingReport) SetID(val OptUUID) {
	s.ID = val
}

// SetReportType sets the value of ReportType.
func (s *PortingReport) SetReportType(val OptPortingReportReportType) {
	s.ReportType = val
}

// SetStatus sets the value of Status.
func (s *PortingReport) SetStatus(val OptPortingReportStatus) {
	s.Status = val
}

// SetParams sets the value of Params.
func (s *PortingReport) SetParams(val OptPortingReportParams) {
	s.Params = val
}

// SetDocumentID sets the value of DocumentID.
func (s *PortingReport) SetDocumentID(val OptUUID) {
	s.DocumentID = val
}

// SetRecordType sets the value of RecordType.
func (s *PortingReport) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PortingReport) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PortingReport) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// PortingReportParams represents sum type.
type PortingReportParams struct {
	Type                         PortingReportParamsType // switch on this field
	ExportPortingOrdersCSVReport ExportPortingOrdersCSVReport
}

// PortingReportParamsType is oneOf type of PortingReportParams.
type PortingReportParamsType string

// Possible values for PortingReportParamsType.
const (
	ExportPortingOrdersCSVReportPortingReportParams PortingReportParamsType = "ExportPortingOrdersCSVReport"
)

// IsExportPortingOrdersCSVReport reports whether PortingReportParams is ExportPortingOrdersCSVReport.
func (s PortingReportParams) IsExportPortingOrdersCSVReport() bool {
	return s.Type == ExportPortingOrdersCSVReportPortingReportParams
}

// SetExportPortingOrdersCSVReport sets PortingReportParams to ExportPortingOrdersCSVReport.
func (s *PortingReportParams) SetExportPortingOrdersCSVReport(v ExportPortingOrdersCSVReport) {
	s.Type = ExportPortingOrdersCSVReportPortingReportParams
	s.ExportPortingOrdersCSVReport = v
}

// GetExportPortingOrdersCSVReport returns ExportPortingOrdersCSVReport and true boolean if PortingReportParams is ExportPortingOrdersCSVReport.
func (s PortingReportParams) GetExportPortingOrdersCSVReport() (v ExportPortingOrdersCSVReport, ok bool) {
	if !s.IsExportPortingOrdersCSVReport() {
		return v, false
	}
	return s.ExportPortingOrdersCSVReport, true
}

// NewExportPortingOrdersCSVReportPortingReportParams returns new PortingReportParams from ExportPortingOrdersCSVReport.
func NewExportPortingOrdersCSVReportPortingReportParams(v ExportPortingOrdersCSVReport) PortingReportParams {
	var s PortingReportParams
	s.SetExportPortingOrdersCSVReport(v)
	return s
}

// Identifies the type of report.
type PortingReportReportType string

const (
	PortingReportReportTypeExportPortingOrdersCsv PortingReportReportType = "export_porting_orders_csv"
)

// AllValues returns all PortingReportReportType values.
func (PortingReportReportType) AllValues() []PortingReportReportType {
	return []PortingReportReportType{
		PortingReportReportTypeExportPortingOrdersCsv,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PortingReportReportType) MarshalText() ([]byte, error) {
	switch s {
	case PortingReportReportTypeExportPortingOrdersCsv:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PortingReportReportType) UnmarshalText(data []byte) error {
	switch PortingReportReportType(data) {
	case PortingReportReportTypeExportPortingOrdersCsv:
		*s = PortingReportReportTypeExportPortingOrdersCsv
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The current status of the report generation.
type PortingReportStatus string

const (
	PortingReportStatusPending   PortingReportStatus = "pending"
	PortingReportStatusCompleted PortingReportStatus = "completed"
)

// AllValues returns all PortingReportStatus values.
func (PortingReportStatus) AllValues() []PortingReportStatus {
	return []PortingReportStatus{
		PortingReportStatusPending,
		PortingReportStatusCompleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PortingReportStatus) MarshalText() ([]byte, error) {
	switch s {
	case PortingReportStatusPending:
		return []byte(s), nil
	case PortingReportStatusCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PortingReportStatus) UnmarshalText(data []byte) error {
	switch PortingReportStatus(data) {
	case PortingReportStatusPending:
		*s = PortingReportStatusPending
		return nil
	case PortingReportStatusCompleted:
		*s = PortingReportStatusCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PortingVerificationCode
type PortingVerificationCode struct {
	// Uniquely identifies this porting verification code.
	ID OptUUID `json:"id"`
	// E164 formatted phone number.
	PhoneNumber OptString `json:"phone_number"`
	// Indicates whether the verification code has been verified.
	Verified OptBool `json:"verified"`
	// Identifies the associated porting order.
	PortingOrderID OptUUID `json:"porting_order_id"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt OptDateTime `json:"created_at"`
	// ISO 8601 formatted date indicating when the resource was updated.
	UpdatedAt OptDateTime `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *PortingVerificationCode) GetID() OptUUID {
	return s.ID
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *PortingVerificationCode) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetVerified returns the value of Verified.
func (s *PortingVerificationCode) GetVerified() OptBool {
	return s.Verified
}

// GetPortingOrderID returns the value of PortingOrderID.
func (s *PortingVerificationCode) GetPortingOrderID() OptUUID {
	return s.PortingOrderID
}

// GetRecordType returns the value of RecordType.
func (s *PortingVerificationCode) GetRecordType() OptString {
	return s.RecordType
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PortingVerificationCode) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PortingVerificationCode) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *PortingVerificationCode) SetID(val OptUUID) {
	s.ID = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *PortingVerificationCode) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetVerified sets the value of Verified.
func (s *PortingVerificationCode) SetVerified(val OptBool) {
	s.Verified = val
}

// SetPortingOrderID sets the value of PortingOrderID.
func (s *PortingVerificationCode) SetPortingOrderID(val OptUUID) {
	s.PortingOrderID = val
}

// SetRecordType sets the value of RecordType.
func (s *PortingVerificationCode) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PortingVerificationCode) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PortingVerificationCode) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Ref: #/components/schemas/PortoutComment
type PortoutComment struct {
	ID string `json:"id"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	// Comment body.
	Body string `json:"body"`
	// Identifies the associated port request.
	PortoutID OptNilString `json:"portout_id"`
	// Identifies the user who created the comment. Will be null if created by Telnyx Admin.
	UserID string `json:"user_id"`
	// Comment creation timestamp in ISO 8601 format.
	CreatedAt string `json:"created_at"`
}

// GetID returns the value of ID.
func (s *PortoutComment) GetID() string {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *PortoutComment) GetRecordType() OptString {
	return s.RecordType
}

// GetBody returns the value of Body.
func (s *PortoutComment) GetBody() string {
	return s.Body
}

// GetPortoutID returns the value of PortoutID.
func (s *PortoutComment) GetPortoutID() OptNilString {
	return s.PortoutID
}

// GetUserID returns the value of UserID.
func (s *PortoutComment) GetUserID() string {
	return s.UserID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PortoutComment) GetCreatedAt() string {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *PortoutComment) SetID(val string) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *PortoutComment) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetBody sets the value of Body.
func (s *PortoutComment) SetBody(val string) {
	s.Body = val
}

// SetPortoutID sets the value of PortoutID.
func (s *PortoutComment) SetPortoutID(val OptNilString) {
	s.PortoutID = val
}

// SetUserID sets the value of UserID.
func (s *PortoutComment) SetUserID(val string) {
	s.UserID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PortoutComment) SetCreatedAt(val string) {
	s.CreatedAt = val
}

type PortoutCommentResponse struct {
	Data OptPortoutComment `json:"data"`
}

// GetData returns the value of Data.
func (s *PortoutCommentResponse) GetData() OptPortoutComment {
	return s.Data
}

// SetData sets the value of Data.
func (s *PortoutCommentResponse) SetData(val OptPortoutComment) {
	s.Data = val
}

func (*PortoutCommentResponse) postPortRequestCommentRes() {}

// Ref: #/components/schemas/PortoutDetails
type PortoutDetails struct {
	ID OptString `json:"id"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	// Phone numbers associated with this portout.
	PhoneNumbers []string `json:"phone_numbers"`
	// Name of person authorizing the porting order.
	AuthorizedName OptString `json:"authorized_name"`
	// Carrier the number will be ported out to.
	CarrierName OptString `json:"carrier_name"`
	// The current carrier.
	CurrentCarrier OptString `json:"current_carrier"`
	// Person name or company name requesting the port.
	EndUserName OptString `json:"end_user_name"`
	// City or municipality of billing address.
	City OptString `json:"city"`
	// State, province, or similar of billing address.
	State OptString `json:"state"`
	// Postal Code of billing address.
	Zip OptString `json:"zip"`
	// The Local Service Request.
	Lsr []url.URL `json:"lsr"`
	// Port order number assigned by the carrier the number will be ported out to.
	Pon OptString `json:"pon"`
	// The reason why the order is being rejected by the user. If the order is authorized, this field can
	// be left null.
	Reason OptString `json:"reason"`
	// First line of billing address (street address).
	ServiceAddress OptString `json:"service_address"`
	// ISO 8601 formatted Date/Time of the FOC date.
	FocDate OptString `json:"foc_date"`
	// ISO 8601 formatted Date/Time of the user requested FOC date.
	RequestedFocDate OptString `json:"requested_foc_date"`
	// New service provider spid.
	Spid OptString `json:"spid"`
	// A key to reference this port out request when contacting Telnyx customer support.
	SupportKey OptString `json:"support_key"`
	// Status of portout request.
	Status OptPortoutDetailsStatus `json:"status"`
	// Is true when the number is already ported.
	AlreadyPorted OptBool `json:"already_ported"`
	// Identifies the user (or organization) who requested the port out.
	UserID OptUUID `json:"user_id"`
	// Telnyx partner providing network coverage.
	Vendor OptUUID `json:"vendor"`
	// ISO 8601 formatted date of when the portout was created.
	CreatedAt OptString `json:"created_at"`
	// ISO 8601 formatted date of when the portout was created.
	InsertedAt OptString `json:"inserted_at"`
	// ISO 8601 formatted date of when the portout was last updated.
	UpdatedAt OptString `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *PortoutDetails) GetID() OptString {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *PortoutDetails) GetRecordType() OptString {
	return s.RecordType
}

// GetPhoneNumbers returns the value of PhoneNumbers.
func (s *PortoutDetails) GetPhoneNumbers() []string {
	return s.PhoneNumbers
}

// GetAuthorizedName returns the value of AuthorizedName.
func (s *PortoutDetails) GetAuthorizedName() OptString {
	return s.AuthorizedName
}

// GetCarrierName returns the value of CarrierName.
func (s *PortoutDetails) GetCarrierName() OptString {
	return s.CarrierName
}

// GetCurrentCarrier returns the value of CurrentCarrier.
func (s *PortoutDetails) GetCurrentCarrier() OptString {
	return s.CurrentCarrier
}

// GetEndUserName returns the value of EndUserName.
func (s *PortoutDetails) GetEndUserName() OptString {
	return s.EndUserName
}

// GetCity returns the value of City.
func (s *PortoutDetails) GetCity() OptString {
	return s.City
}

// GetState returns the value of State.
func (s *PortoutDetails) GetState() OptString {
	return s.State
}

// GetZip returns the value of Zip.
func (s *PortoutDetails) GetZip() OptString {
	return s.Zip
}

// GetLsr returns the value of Lsr.
func (s *PortoutDetails) GetLsr() []url.URL {
	return s.Lsr
}

// GetPon returns the value of Pon.
func (s *PortoutDetails) GetPon() OptString {
	return s.Pon
}

// GetReason returns the value of Reason.
func (s *PortoutDetails) GetReason() OptString {
	return s.Reason
}

// GetServiceAddress returns the value of ServiceAddress.
func (s *PortoutDetails) GetServiceAddress() OptString {
	return s.ServiceAddress
}

// GetFocDate returns the value of FocDate.
func (s *PortoutDetails) GetFocDate() OptString {
	return s.FocDate
}

// GetRequestedFocDate returns the value of RequestedFocDate.
func (s *PortoutDetails) GetRequestedFocDate() OptString {
	return s.RequestedFocDate
}

// GetSpid returns the value of Spid.
func (s *PortoutDetails) GetSpid() OptString {
	return s.Spid
}

// GetSupportKey returns the value of SupportKey.
func (s *PortoutDetails) GetSupportKey() OptString {
	return s.SupportKey
}

// GetStatus returns the value of Status.
func (s *PortoutDetails) GetStatus() OptPortoutDetailsStatus {
	return s.Status
}

// GetAlreadyPorted returns the value of AlreadyPorted.
func (s *PortoutDetails) GetAlreadyPorted() OptBool {
	return s.AlreadyPorted
}

// GetUserID returns the value of UserID.
func (s *PortoutDetails) GetUserID() OptUUID {
	return s.UserID
}

// GetVendor returns the value of Vendor.
func (s *PortoutDetails) GetVendor() OptUUID {
	return s.Vendor
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PortoutDetails) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetInsertedAt returns the value of InsertedAt.
func (s *PortoutDetails) GetInsertedAt() OptString {
	return s.InsertedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PortoutDetails) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *PortoutDetails) SetID(val OptString) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *PortoutDetails) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetPhoneNumbers sets the value of PhoneNumbers.
func (s *PortoutDetails) SetPhoneNumbers(val []string) {
	s.PhoneNumbers = val
}

// SetAuthorizedName sets the value of AuthorizedName.
func (s *PortoutDetails) SetAuthorizedName(val OptString) {
	s.AuthorizedName = val
}

// SetCarrierName sets the value of CarrierName.
func (s *PortoutDetails) SetCarrierName(val OptString) {
	s.CarrierName = val
}

// SetCurrentCarrier sets the value of CurrentCarrier.
func (s *PortoutDetails) SetCurrentCarrier(val OptString) {
	s.CurrentCarrier = val
}

// SetEndUserName sets the value of EndUserName.
func (s *PortoutDetails) SetEndUserName(val OptString) {
	s.EndUserName = val
}

// SetCity sets the value of City.
func (s *PortoutDetails) SetCity(val OptString) {
	s.City = val
}

// SetState sets the value of State.
func (s *PortoutDetails) SetState(val OptString) {
	s.State = val
}

// SetZip sets the value of Zip.
func (s *PortoutDetails) SetZip(val OptString) {
	s.Zip = val
}

// SetLsr sets the value of Lsr.
func (s *PortoutDetails) SetLsr(val []url.URL) {
	s.Lsr = val
}

// SetPon sets the value of Pon.
func (s *PortoutDetails) SetPon(val OptString) {
	s.Pon = val
}

// SetReason sets the value of Reason.
func (s *PortoutDetails) SetReason(val OptString) {
	s.Reason = val
}

// SetServiceAddress sets the value of ServiceAddress.
func (s *PortoutDetails) SetServiceAddress(val OptString) {
	s.ServiceAddress = val
}

// SetFocDate sets the value of FocDate.
func (s *PortoutDetails) SetFocDate(val OptString) {
	s.FocDate = val
}

// SetRequestedFocDate sets the value of RequestedFocDate.
func (s *PortoutDetails) SetRequestedFocDate(val OptString) {
	s.RequestedFocDate = val
}

// SetSpid sets the value of Spid.
func (s *PortoutDetails) SetSpid(val OptString) {
	s.Spid = val
}

// SetSupportKey sets the value of SupportKey.
func (s *PortoutDetails) SetSupportKey(val OptString) {
	s.SupportKey = val
}

// SetStatus sets the value of Status.
func (s *PortoutDetails) SetStatus(val OptPortoutDetailsStatus) {
	s.Status = val
}

// SetAlreadyPorted sets the value of AlreadyPorted.
func (s *PortoutDetails) SetAlreadyPorted(val OptBool) {
	s.AlreadyPorted = val
}

// SetUserID sets the value of UserID.
func (s *PortoutDetails) SetUserID(val OptUUID) {
	s.UserID = val
}

// SetVendor sets the value of Vendor.
func (s *PortoutDetails) SetVendor(val OptUUID) {
	s.Vendor = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PortoutDetails) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetInsertedAt sets the value of InsertedAt.
func (s *PortoutDetails) SetInsertedAt(val OptString) {
	s.InsertedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PortoutDetails) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// Status of portout request.
type PortoutDetailsStatus string

const (
	PortoutDetailsStatusPending         PortoutDetailsStatus = "pending"
	PortoutDetailsStatusAuthorized      PortoutDetailsStatus = "authorized"
	PortoutDetailsStatusPorted          PortoutDetailsStatus = "ported"
	PortoutDetailsStatusRejected        PortoutDetailsStatus = "rejected"
	PortoutDetailsStatusRejectedPending PortoutDetailsStatus = "rejected-pending"
	PortoutDetailsStatusCanceled        PortoutDetailsStatus = "canceled"
)

// AllValues returns all PortoutDetailsStatus values.
func (PortoutDetailsStatus) AllValues() []PortoutDetailsStatus {
	return []PortoutDetailsStatus{
		PortoutDetailsStatusPending,
		PortoutDetailsStatusAuthorized,
		PortoutDetailsStatusPorted,
		PortoutDetailsStatusRejected,
		PortoutDetailsStatusRejectedPending,
		PortoutDetailsStatusCanceled,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PortoutDetailsStatus) MarshalText() ([]byte, error) {
	switch s {
	case PortoutDetailsStatusPending:
		return []byte(s), nil
	case PortoutDetailsStatusAuthorized:
		return []byte(s), nil
	case PortoutDetailsStatusPorted:
		return []byte(s), nil
	case PortoutDetailsStatusRejected:
		return []byte(s), nil
	case PortoutDetailsStatusRejectedPending:
		return []byte(s), nil
	case PortoutDetailsStatusCanceled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PortoutDetailsStatus) UnmarshalText(data []byte) error {
	switch PortoutDetailsStatus(data) {
	case PortoutDetailsStatusPending:
		*s = PortoutDetailsStatusPending
		return nil
	case PortoutDetailsStatusAuthorized:
		*s = PortoutDetailsStatusAuthorized
		return nil
	case PortoutDetailsStatusPorted:
		*s = PortoutDetailsStatusPorted
		return nil
	case PortoutDetailsStatusRejected:
		*s = PortoutDetailsStatusRejected
		return nil
	case PortoutDetailsStatusRejectedPending:
		*s = PortoutDetailsStatusRejectedPending
		return nil
	case PortoutDetailsStatusCanceled:
		*s = PortoutDetailsStatusCanceled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PortoutResponse struct {
	Data OptPortoutDetails `json:"data"`
}

// GetData returns the value of Data.
func (s *PortoutResponse) GetData() OptPortoutDetails {
	return s.Data
}

// SetData sets the value of Data.
func (s *PortoutResponse) SetData(val OptPortoutDetails) {
	s.Data = val
}

func (*PortoutResponse) findPortoutRequestRes()  {}
func (*PortoutResponse) updatePortoutStatusRes() {}

// PostPortRequestCommentNotFound is response for PostPortRequestComment operation.
type PostPortRequestCommentNotFound struct{}

func (*PostPortRequestCommentNotFound) postPortRequestCommentRes() {}

type PostPortRequestCommentReq struct {
	// Comment to post on this portout request.
	Body OptString `json:"body"`
}

// GetBody returns the value of Body.
func (s *PostPortRequestCommentReq) GetBody() OptString {
	return s.Body
}

// SetBody sets the value of Body.
func (s *PostPortRequestCommentReq) SetBody(val OptString) {
	s.Body = val
}

// PostPortRequestCommentUnauthorized is response for PostPortRequestComment operation.
type PostPortRequestCommentUnauthorized struct{}

func (*PostPortRequestCommentUnauthorized) postPortRequestCommentRes() {}

// PostPortRequestCommentUnprocessableEntity is response for PostPortRequestComment operation.
type PostPortRequestCommentUnprocessableEntity struct{}

func (*PostPortRequestCommentUnprocessableEntity) postPortRequestCommentRes() {}

// PostPortRequestSupportingDocumentsNotFound is response for PostPortRequestSupportingDocuments operation.
type PostPortRequestSupportingDocumentsNotFound struct{}

func (*PostPortRequestSupportingDocumentsNotFound) postPortRequestSupportingDocumentsRes() {}

type PostPortRequestSupportingDocumentsReq struct {
	// List of supporting documents parameters.
	Documents []PostPortRequestSupportingDocumentsReqDocumentsItem `json:"documents"`
}

// GetDocuments returns the value of Documents.
func (s *PostPortRequestSupportingDocumentsReq) GetDocuments() []PostPortRequestSupportingDocumentsReqDocumentsItem {
	return s.Documents
}

// SetDocuments sets the value of Documents.
func (s *PostPortRequestSupportingDocumentsReq) SetDocuments(val []PostPortRequestSupportingDocumentsReqDocumentsItem) {
	s.Documents = val
}

type PostPortRequestSupportingDocumentsReqDocumentsItem struct {
	// Identifies the type of the document.
	Type PostPortRequestSupportingDocumentsReqDocumentsItemType `json:"type"`
	// Identifies the associated document.
	DocumentID uuid.UUID `json:"document_id"`
}

// GetType returns the value of Type.
func (s *PostPortRequestSupportingDocumentsReqDocumentsItem) GetType() PostPortRequestSupportingDocumentsReqDocumentsItemType {
	return s.Type
}

// GetDocumentID returns the value of DocumentID.
func (s *PostPortRequestSupportingDocumentsReqDocumentsItem) GetDocumentID() uuid.UUID {
	return s.DocumentID
}

// SetType sets the value of Type.
func (s *PostPortRequestSupportingDocumentsReqDocumentsItem) SetType(val PostPortRequestSupportingDocumentsReqDocumentsItemType) {
	s.Type = val
}

// SetDocumentID sets the value of DocumentID.
func (s *PostPortRequestSupportingDocumentsReqDocumentsItem) SetDocumentID(val uuid.UUID) {
	s.DocumentID = val
}

// Identifies the type of the document.
type PostPortRequestSupportingDocumentsReqDocumentsItemType string

const (
	PostPortRequestSupportingDocumentsReqDocumentsItemTypeLoa     PostPortRequestSupportingDocumentsReqDocumentsItemType = "loa"
	PostPortRequestSupportingDocumentsReqDocumentsItemTypeInvoice PostPortRequestSupportingDocumentsReqDocumentsItemType = "invoice"
)

// AllValues returns all PostPortRequestSupportingDocumentsReqDocumentsItemType values.
func (PostPortRequestSupportingDocumentsReqDocumentsItemType) AllValues() []PostPortRequestSupportingDocumentsReqDocumentsItemType {
	return []PostPortRequestSupportingDocumentsReqDocumentsItemType{
		PostPortRequestSupportingDocumentsReqDocumentsItemTypeLoa,
		PostPortRequestSupportingDocumentsReqDocumentsItemTypeInvoice,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PostPortRequestSupportingDocumentsReqDocumentsItemType) MarshalText() ([]byte, error) {
	switch s {
	case PostPortRequestSupportingDocumentsReqDocumentsItemTypeLoa:
		return []byte(s), nil
	case PostPortRequestSupportingDocumentsReqDocumentsItemTypeInvoice:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PostPortRequestSupportingDocumentsReqDocumentsItemType) UnmarshalText(data []byte) error {
	switch PostPortRequestSupportingDocumentsReqDocumentsItemType(data) {
	case PostPortRequestSupportingDocumentsReqDocumentsItemTypeLoa:
		*s = PostPortRequestSupportingDocumentsReqDocumentsItemTypeLoa
		return nil
	case PostPortRequestSupportingDocumentsReqDocumentsItemTypeInvoice:
		*s = PostPortRequestSupportingDocumentsReqDocumentsItemTypeInvoice
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// PostPortRequestSupportingDocumentsUnauthorized is response for PostPortRequestSupportingDocuments operation.
type PostPortRequestSupportingDocumentsUnauthorized struct{}

func (*PostPortRequestSupportingDocumentsUnauthorized) postPortRequestSupportingDocumentsRes() {}

// PostPortRequestSupportingDocumentsUnprocessableEntity is response for PostPortRequestSupportingDocuments operation.
type PostPortRequestSupportingDocumentsUnprocessableEntity struct{}

func (*PostPortRequestSupportingDocumentsUnprocessableEntity) postPortRequestSupportingDocumentsRes() {
}

type PostPortabilityCheckReq struct {
	// The list of +E.164 formatted phone numbers to check for portability.
	PhoneNumbers []string `json:"phone_numbers"`
}

// GetPhoneNumbers returns the value of PhoneNumbers.
func (s *PostPortabilityCheckReq) GetPhoneNumbers() []string {
	return s.PhoneNumbers
}

// SetPhoneNumbers sets the value of PhoneNumbers.
func (s *PostPortabilityCheckReq) SetPhoneNumbers(val []string) {
	s.PhoneNumbers = val
}

// PostPortabilityCheckUnauthorized is response for PostPortabilityCheck operation.
type PostPortabilityCheckUnauthorized struct{}

func (*PostPortabilityCheckUnauthorized) postPortabilityCheckRes() {}

// PostPortabilityCheckUnprocessableEntity is response for PostPortabilityCheck operation.
type PostPortabilityCheckUnprocessableEntity struct{}

func (*PostPortabilityCheckUnprocessableEntity) postPortabilityCheckRes() {}

// PreviewLoaConfigurationInternalServerError is response for PreviewLoaConfiguration operation.
type PreviewLoaConfigurationInternalServerError struct{}

func (*PreviewLoaConfigurationInternalServerError) previewLoaConfigurationRes() {}

// PreviewLoaConfigurationNotFound is response for PreviewLoaConfiguration operation.
type PreviewLoaConfigurationNotFound struct{}

func (*PreviewLoaConfigurationNotFound) previewLoaConfigurationRes() {}

// PreviewLoaConfigurationParamsInternalServerError is response for PreviewLoaConfigurationParams operation.
type PreviewLoaConfigurationParamsInternalServerError struct{}

func (*PreviewLoaConfigurationParamsInternalServerError) previewLoaConfigurationParamsRes() {}

// The parameters for creating a new LOA configuration.
type PreviewLoaConfigurationParamsReq struct {
	// The name of the LOA configuration.
	Name string `json:"name"`
	// The logo of the LOA configuration.
	Logo PreviewLoaConfigurationParamsReqLogo `json:"logo"`
	// The name of the company.
	CompanyName string `json:"company_name"`
	// The address of the company.
	Address PreviewLoaConfigurationParamsReqAddress `json:"address"`
	// The contact information of the company.
	Contact PreviewLoaConfigurationParamsReqContact `json:"contact"`
}

// GetName returns the value of Name.
func (s *PreviewLoaConfigurationParamsReq) GetName() string {
	return s.Name
}

// GetLogo returns the value of Logo.
func (s *PreviewLoaConfigurationParamsReq) GetLogo() PreviewLoaConfigurationParamsReqLogo {
	return s.Logo
}

// GetCompanyName returns the value of CompanyName.
func (s *PreviewLoaConfigurationParamsReq) GetCompanyName() string {
	return s.CompanyName
}

// GetAddress returns the value of Address.
func (s *PreviewLoaConfigurationParamsReq) GetAddress() PreviewLoaConfigurationParamsReqAddress {
	return s.Address
}

// GetContact returns the value of Contact.
func (s *PreviewLoaConfigurationParamsReq) GetContact() PreviewLoaConfigurationParamsReqContact {
	return s.Contact
}

// SetName sets the value of Name.
func (s *PreviewLoaConfigurationParamsReq) SetName(val string) {
	s.Name = val
}

// SetLogo sets the value of Logo.
func (s *PreviewLoaConfigurationParamsReq) SetLogo(val PreviewLoaConfigurationParamsReqLogo) {
	s.Logo = val
}

// SetCompanyName sets the value of CompanyName.
func (s *PreviewLoaConfigurationParamsReq) SetCompanyName(val string) {
	s.CompanyName = val
}

// SetAddress sets the value of Address.
func (s *PreviewLoaConfigurationParamsReq) SetAddress(val PreviewLoaConfigurationParamsReqAddress) {
	s.Address = val
}

// SetContact sets the value of Contact.
func (s *PreviewLoaConfigurationParamsReq) SetContact(val PreviewLoaConfigurationParamsReqContact) {
	s.Contact = val
}

// The address of the company.
type PreviewLoaConfigurationParamsReqAddress struct {
	// The street address of the company.
	StreetAddress string `json:"street_address"`
	// The extended address of the company.
	ExtendedAddress OptString `json:"extended_address"`
	// The locality of the company.
	City OptString `json:"city"`
	// The administrative area of the company.
	State OptString `json:"state"`
	// The postal code of the company.
	ZipCode OptString `json:"zip_code"`
	// The country code of the company.
	CountryCode string `json:"country_code"`
}

// GetStreetAddress returns the value of StreetAddress.
func (s *PreviewLoaConfigurationParamsReqAddress) GetStreetAddress() string {
	return s.StreetAddress
}

// GetExtendedAddress returns the value of ExtendedAddress.
func (s *PreviewLoaConfigurationParamsReqAddress) GetExtendedAddress() OptString {
	return s.ExtendedAddress
}

// GetCity returns the value of City.
func (s *PreviewLoaConfigurationParamsReqAddress) GetCity() OptString {
	return s.City
}

// GetState returns the value of State.
func (s *PreviewLoaConfigurationParamsReqAddress) GetState() OptString {
	return s.State
}

// GetZipCode returns the value of ZipCode.
func (s *PreviewLoaConfigurationParamsReqAddress) GetZipCode() OptString {
	return s.ZipCode
}

// GetCountryCode returns the value of CountryCode.
func (s *PreviewLoaConfigurationParamsReqAddress) GetCountryCode() string {
	return s.CountryCode
}

// SetStreetAddress sets the value of StreetAddress.
func (s *PreviewLoaConfigurationParamsReqAddress) SetStreetAddress(val string) {
	s.StreetAddress = val
}

// SetExtendedAddress sets the value of ExtendedAddress.
func (s *PreviewLoaConfigurationParamsReqAddress) SetExtendedAddress(val OptString) {
	s.ExtendedAddress = val
}

// SetCity sets the value of City.
func (s *PreviewLoaConfigurationParamsReqAddress) SetCity(val OptString) {
	s.City = val
}

// SetState sets the value of State.
func (s *PreviewLoaConfigurationParamsReqAddress) SetState(val OptString) {
	s.State = val
}

// SetZipCode sets the value of ZipCode.
func (s *PreviewLoaConfigurationParamsReqAddress) SetZipCode(val OptString) {
	s.ZipCode = val
}

// SetCountryCode sets the value of CountryCode.
func (s *PreviewLoaConfigurationParamsReqAddress) SetCountryCode(val string) {
	s.CountryCode = val
}

// The contact information of the company.
type PreviewLoaConfigurationParamsReqContact struct {
	// The email address of the contact.
	Email string `json:"email"`
	// The phone number of the contact.
	PhoneNumber string `json:"phone_number"`
}

// GetEmail returns the value of Email.
func (s *PreviewLoaConfigurationParamsReqContact) GetEmail() string {
	return s.Email
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *PreviewLoaConfigurationParamsReqContact) GetPhoneNumber() string {
	return s.PhoneNumber
}

// SetEmail sets the value of Email.
func (s *PreviewLoaConfigurationParamsReqContact) SetEmail(val string) {
	s.Email = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *PreviewLoaConfigurationParamsReqContact) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// The logo of the LOA configuration.
type PreviewLoaConfigurationParamsReqLogo struct {
	// The document identification.
	DocumentID uuid.UUID `json:"document_id"`
}

// GetDocumentID returns the value of DocumentID.
func (s *PreviewLoaConfigurationParamsReqLogo) GetDocumentID() uuid.UUID {
	return s.DocumentID
}

// SetDocumentID sets the value of DocumentID.
func (s *PreviewLoaConfigurationParamsReqLogo) SetDocumentID(val uuid.UUID) {
	s.DocumentID = val
}

// PreviewLoaConfigurationParamsUnprocessableEntity is response for PreviewLoaConfigurationParams operation.
type PreviewLoaConfigurationParamsUnprocessableEntity struct{}

func (*PreviewLoaConfigurationParamsUnprocessableEntity) previewLoaConfigurationParamsRes() {}

// Ref: #/components/schemas/PrivateWirelessGateway
type PrivateWirelessGateway struct {
	// Identifies the resource.
	ID OptUUID `json:"id"`
	// The identification of the related network resource.
	NetworkID  OptUUID   `json:"network_id"`
	RecordType OptString `json:"record_type"`
	// ISO 8601 formatted date-time indicating when the resource was created.
	CreatedAt OptString `json:"created_at"`
	// ISO 8601 formatted date-time indicating when the resource was updated.
	UpdatedAt OptString `json:"updated_at"`
	// The private wireless gateway name.
	Name OptString `json:"name"`
	// The geographical region where the Private Wireless Gateway is deployed to.
	RegionCode OptString                       `json:"region_code"`
	Status     OptPrivateWirelessGatewayStatus `json:"status"`
	// IP block used to assign IPs to the SIM cards in the Private Wireless Gateway.
	IPRange OptNilString `json:"ip_range"`
	// A list of the resources that have been assigned to the Private Wireless Gateway.
	AssignedResources []PWGAssignedResourcesSummary `json:"assigned_resources"`
}

// GetID returns the value of ID.
func (s *PrivateWirelessGateway) GetID() OptUUID {
	return s.ID
}

// GetNetworkID returns the value of NetworkID.
func (s *PrivateWirelessGateway) GetNetworkID() OptUUID {
	return s.NetworkID
}

// GetRecordType returns the value of RecordType.
func (s *PrivateWirelessGateway) GetRecordType() OptString {
	return s.RecordType
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PrivateWirelessGateway) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PrivateWirelessGateway) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *PrivateWirelessGateway) GetName() OptString {
	return s.Name
}

// GetRegionCode returns the value of RegionCode.
func (s *PrivateWirelessGateway) GetRegionCode() OptString {
	return s.RegionCode
}

// GetStatus returns the value of Status.
func (s *PrivateWirelessGateway) GetStatus() OptPrivateWirelessGatewayStatus {
	return s.Status
}

// GetIPRange returns the value of IPRange.
func (s *PrivateWirelessGateway) GetIPRange() OptNilString {
	return s.IPRange
}

// GetAssignedResources returns the value of AssignedResources.
func (s *PrivateWirelessGateway) GetAssignedResources() []PWGAssignedResourcesSummary {
	return s.AssignedResources
}

// SetID sets the value of ID.
func (s *PrivateWirelessGateway) SetID(val OptUUID) {
	s.ID = val
}

// SetNetworkID sets the value of NetworkID.
func (s *PrivateWirelessGateway) SetNetworkID(val OptUUID) {
	s.NetworkID = val
}

// SetRecordType sets the value of RecordType.
func (s *PrivateWirelessGateway) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PrivateWirelessGateway) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PrivateWirelessGateway) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *PrivateWirelessGateway) SetName(val OptString) {
	s.Name = val
}

// SetRegionCode sets the value of RegionCode.
func (s *PrivateWirelessGateway) SetRegionCode(val OptString) {
	s.RegionCode = val
}

// SetStatus sets the value of Status.
func (s *PrivateWirelessGateway) SetStatus(val OptPrivateWirelessGatewayStatus) {
	s.Status = val
}

// SetIPRange sets the value of IPRange.
func (s *PrivateWirelessGateway) SetIPRange(val OptNilString) {
	s.IPRange = val
}

// SetAssignedResources sets the value of AssignedResources.
func (s *PrivateWirelessGateway) SetAssignedResources(val []PWGAssignedResourcesSummary) {
	s.AssignedResources = val
}

// The current status or failure details of the Private Wireless Gateway.
// Ref: #/components/schemas/PrivateWirelessGatewayStatus
type PrivateWirelessGatewayStatus struct {
	// The current status or failure details of the Private Wireless Gateway. <ul>
	// <li><code>provisioning</code> - the Private Wireless Gateway is being provisioned.</li>
	// <li><code>provisioned</code> - the Private Wireless Gateway was provisioned and able to receive
	// connections.</li>
	// <li><code>failed</code> - the provisioning had failed for a reason and it requires an intervention.
	// </li>
	// <li><code>decommissioning</code> - the Private Wireless Gateway is being removed from the network.
	// </li>
	// </ul>
	// Transitioning between the provisioning and provisioned states may take some time.
	Value OptPrivateWirelessGatewayStatusValue `json:"value"`
	// This attribute provides a human-readable explanation of why a failure happened.
	ErrorDescription OptNilString `json:"error_description"`
	// This attribute is an <a href="https://developers.telnyx.com/docs/api/v2/overview#errors">error
	// code</a> related to the failure reason.
	ErrorCode OptNilString `json:"error_code"`
}

// GetValue returns the value of Value.
func (s *PrivateWirelessGatewayStatus) GetValue() OptPrivateWirelessGatewayStatusValue {
	return s.Value
}

// GetErrorDescription returns the value of ErrorDescription.
func (s *PrivateWirelessGatewayStatus) GetErrorDescription() OptNilString {
	return s.ErrorDescription
}

// GetErrorCode returns the value of ErrorCode.
func (s *PrivateWirelessGatewayStatus) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// SetValue sets the value of Value.
func (s *PrivateWirelessGatewayStatus) SetValue(val OptPrivateWirelessGatewayStatusValue) {
	s.Value = val
}

// SetErrorDescription sets the value of ErrorDescription.
func (s *PrivateWirelessGatewayStatus) SetErrorDescription(val OptNilString) {
	s.ErrorDescription = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *PrivateWirelessGatewayStatus) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// The current status or failure details of the Private Wireless Gateway. <ul>
// <li><code>provisioning</code> - the Private Wireless Gateway is being provisioned.</li>
// <li><code>provisioned</code> - the Private Wireless Gateway was provisioned and able to receive
// connections.</li>
// <li><code>failed</code> - the provisioning had failed for a reason and it requires an intervention.
// </li>
// <li><code>decommissioning</code> - the Private Wireless Gateway is being removed from the network.
// </li>
// </ul>
// Transitioning between the provisioning and provisioned states may take some time.
type PrivateWirelessGatewayStatusValue string

const (
	PrivateWirelessGatewayStatusValueProvisioning    PrivateWirelessGatewayStatusValue = "provisioning"
	PrivateWirelessGatewayStatusValueProvisioned     PrivateWirelessGatewayStatusValue = "provisioned"
	PrivateWirelessGatewayStatusValueFailed          PrivateWirelessGatewayStatusValue = "failed"
	PrivateWirelessGatewayStatusValueDecommissioning PrivateWirelessGatewayStatusValue = "decommissioning"
)

// AllValues returns all PrivateWirelessGatewayStatusValue values.
func (PrivateWirelessGatewayStatusValue) AllValues() []PrivateWirelessGatewayStatusValue {
	return []PrivateWirelessGatewayStatusValue{
		PrivateWirelessGatewayStatusValueProvisioning,
		PrivateWirelessGatewayStatusValueProvisioned,
		PrivateWirelessGatewayStatusValueFailed,
		PrivateWirelessGatewayStatusValueDecommissioning,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PrivateWirelessGatewayStatusValue) MarshalText() ([]byte, error) {
	switch s {
	case PrivateWirelessGatewayStatusValueProvisioning:
		return []byte(s), nil
	case PrivateWirelessGatewayStatusValueProvisioned:
		return []byte(s), nil
	case PrivateWirelessGatewayStatusValueFailed:
		return []byte(s), nil
	case PrivateWirelessGatewayStatusValueDecommissioning:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PrivateWirelessGatewayStatusValue) UnmarshalText(data []byte) error {
	switch PrivateWirelessGatewayStatusValue(data) {
	case PrivateWirelessGatewayStatusValueProvisioning:
		*s = PrivateWirelessGatewayStatusValueProvisioning
		return nil
	case PrivateWirelessGatewayStatusValueProvisioned:
		*s = PrivateWirelessGatewayStatusValueProvisioned
		return nil
	case PrivateWirelessGatewayStatusValueFailed:
		*s = PrivateWirelessGatewayStatusValueFailed
		return nil
	case PrivateWirelessGatewayStatusValueDecommissioning:
		*s = PrivateWirelessGatewayStatusValueDecommissioning
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/QueueCall
type QueueCall struct {
	RecordType QueueCallRecordType `json:"record_type"`
	// ID that is unique to the call session and can be used to correlate webhook events. Call session is
	// a group of related call legs that logically belong to the same phone call, e.g. an inbound and
	// outbound leg of a transferred call.
	CallSessionID string `json:"call_session_id"`
	// ID that is unique to the call and can be used to correlate webhook events.
	CallLegID string `json:"call_leg_id"`
	// Unique identifier and token for controlling the call.
	CallControlID string `json:"call_control_id"`
	// Call Control App ID (formerly Telnyx connection ID) used in the call.
	ConnectionID string `json:"connection_id"`
	// Number or SIP URI placing the call.
	From string `json:"from"`
	// Destination number or SIP URI of the call.
	To string `json:"to"`
	// ISO 8601 formatted date of when the call was put in the queue.
	EnqueuedAt string `json:"enqueued_at"`
	// The time the call has been waiting in the queue, given in seconds.
	WaitTimeSecs int `json:"wait_time_secs"`
	// Current position of the call in the queue.
	QueuePosition int `json:"queue_position"`
	// Unique identifier of the queue the call is in.
	QueueID string `json:"queue_id"`
}

// GetRecordType returns the value of RecordType.
func (s *QueueCall) GetRecordType() QueueCallRecordType {
	return s.RecordType
}

// GetCallSessionID returns the value of CallSessionID.
func (s *QueueCall) GetCallSessionID() string {
	return s.CallSessionID
}

// GetCallLegID returns the value of CallLegID.
func (s *QueueCall) GetCallLegID() string {
	return s.CallLegID
}

// GetCallControlID returns the value of CallControlID.
func (s *QueueCall) GetCallControlID() string {
	return s.CallControlID
}

// GetConnectionID returns the value of ConnectionID.
func (s *QueueCall) GetConnectionID() string {
	return s.ConnectionID
}

// GetFrom returns the value of From.
func (s *QueueCall) GetFrom() string {
	return s.From
}

// GetTo returns the value of To.
func (s *QueueCall) GetTo() string {
	return s.To
}

// GetEnqueuedAt returns the value of EnqueuedAt.
func (s *QueueCall) GetEnqueuedAt() string {
	return s.EnqueuedAt
}

// GetWaitTimeSecs returns the value of WaitTimeSecs.
func (s *QueueCall) GetWaitTimeSecs() int {
	return s.WaitTimeSecs
}

// GetQueuePosition returns the value of QueuePosition.
func (s *QueueCall) GetQueuePosition() int {
	return s.QueuePosition
}

// GetQueueID returns the value of QueueID.
func (s *QueueCall) GetQueueID() string {
	return s.QueueID
}

// SetRecordType sets the value of RecordType.
func (s *QueueCall) SetRecordType(val QueueCallRecordType) {
	s.RecordType = val
}

// SetCallSessionID sets the value of CallSessionID.
func (s *QueueCall) SetCallSessionID(val string) {
	s.CallSessionID = val
}

// SetCallLegID sets the value of CallLegID.
func (s *QueueCall) SetCallLegID(val string) {
	s.CallLegID = val
}

// SetCallControlID sets the value of CallControlID.
func (s *QueueCall) SetCallControlID(val string) {
	s.CallControlID = val
}

// SetConnectionID sets the value of ConnectionID.
func (s *QueueCall) SetConnectionID(val string) {
	s.ConnectionID = val
}

// SetFrom sets the value of From.
func (s *QueueCall) SetFrom(val string) {
	s.From = val
}

// SetTo sets the value of To.
func (s *QueueCall) SetTo(val string) {
	s.To = val
}

// SetEnqueuedAt sets the value of EnqueuedAt.
func (s *QueueCall) SetEnqueuedAt(val string) {
	s.EnqueuedAt = val
}

// SetWaitTimeSecs sets the value of WaitTimeSecs.
func (s *QueueCall) SetWaitTimeSecs(val int) {
	s.WaitTimeSecs = val
}

// SetQueuePosition sets the value of QueuePosition.
func (s *QueueCall) SetQueuePosition(val int) {
	s.QueuePosition = val
}

// SetQueueID sets the value of QueueID.
func (s *QueueCall) SetQueueID(val string) {
	s.QueueID = val
}

type QueueCallRecordType string

const (
	QueueCallRecordTypeQueueCall QueueCallRecordType = "queue_call"
)

// AllValues returns all QueueCallRecordType values.
func (QueueCallRecordType) AllValues() []QueueCallRecordType {
	return []QueueCallRecordType{
		QueueCallRecordTypeQueueCall,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s QueueCallRecordType) MarshalText() ([]byte, error) {
	switch s {
	case QueueCallRecordTypeQueueCall:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *QueueCallRecordType) UnmarshalText(data []byte) error {
	switch QueueCallRecordType(data) {
	case QueueCallRecordTypeQueueCall:
		*s = QueueCallRecordTypeQueueCall
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type QueueCallResponse struct {
	Data OptQueueCall `json:"data"`
}

// GetData returns the value of Data.
func (s *QueueCallResponse) GetData() OptQueueCall {
	return s.Data
}

// SetData sets the value of Data.
func (s *QueueCallResponse) SetData(val OptQueueCall) {
	s.Data = val
}

func (*QueueCallResponse) retrieveCallFromQueueRes() {}

type ReadCommentResponse struct {
	Data OptReadCommentResponseData `json:"data"`
}

// GetData returns the value of Data.
func (s *ReadCommentResponse) GetData() OptReadCommentResponseData {
	return s.Data
}

// SetData sets the value of Data.
func (s *ReadCommentResponse) SetData(val OptReadCommentResponseData) {
	s.Data = val
}

func (*ReadCommentResponse) markCommentReadRes() {}

// Merged schema.
type ReadCommentResponseData struct {
	ID                OptUUID                                     `json:"id"`
	Body              OptString                                   `json:"body"`
	Commenter         OptString                                   `json:"commenter"`
	CommenterType     OptReadCommentResponseDataCommenterType     `json:"commenter_type"`
	CommentRecordType OptReadCommentResponseDataCommentRecordType `json:"comment_record_type"`
	CommentRecordID   OptUUID                                     `json:"comment_record_id"`
	// Merged property.
	ReadAt OptString `json:"read_at"`
	// An ISO 8901 datetime string denoting when the comment was created.
	CreatedAt OptString `json:"created_at"`
	// An ISO 8901 datetime string for when the comment was updated.
	UpdatedAt OptString `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *ReadCommentResponseData) GetID() OptUUID {
	return s.ID
}

// GetBody returns the value of Body.
func (s *ReadCommentResponseData) GetBody() OptString {
	return s.Body
}

// GetCommenter returns the value of Commenter.
func (s *ReadCommentResponseData) GetCommenter() OptString {
	return s.Commenter
}

// GetCommenterType returns the value of CommenterType.
func (s *ReadCommentResponseData) GetCommenterType() OptReadCommentResponseDataCommenterType {
	return s.CommenterType
}

// GetCommentRecordType returns the value of CommentRecordType.
func (s *ReadCommentResponseData) GetCommentRecordType() OptReadCommentResponseDataCommentRecordType {
	return s.CommentRecordType
}

// GetCommentRecordID returns the value of CommentRecordID.
func (s *ReadCommentResponseData) GetCommentRecordID() OptUUID {
	return s.CommentRecordID
}

// GetReadAt returns the value of ReadAt.
func (s *ReadCommentResponseData) GetReadAt() OptString {
	return s.ReadAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ReadCommentResponseData) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ReadCommentResponseData) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *ReadCommentResponseData) SetID(val OptUUID) {
	s.ID = val
}

// SetBody sets the value of Body.
func (s *ReadCommentResponseData) SetBody(val OptString) {
	s.Body = val
}

// SetCommenter sets the value of Commenter.
func (s *ReadCommentResponseData) SetCommenter(val OptString) {
	s.Commenter = val
}

// SetCommenterType sets the value of CommenterType.
func (s *ReadCommentResponseData) SetCommenterType(val OptReadCommentResponseDataCommenterType) {
	s.CommenterType = val
}

// SetCommentRecordType sets the value of CommentRecordType.
func (s *ReadCommentResponseData) SetCommentRecordType(val OptReadCommentResponseDataCommentRecordType) {
	s.CommentRecordType = val
}

// SetCommentRecordID sets the value of CommentRecordID.
func (s *ReadCommentResponseData) SetCommentRecordID(val OptUUID) {
	s.CommentRecordID = val
}

// SetReadAt sets the value of ReadAt.
func (s *ReadCommentResponseData) SetReadAt(val OptString) {
	s.ReadAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ReadCommentResponseData) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ReadCommentResponseData) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

type ReadCommentResponseDataCommentRecordType string

const (
	ReadCommentResponseDataCommentRecordTypeNumberOrder            ReadCommentResponseDataCommentRecordType = "number_order"
	ReadCommentResponseDataCommentRecordTypeSubNumberOrder         ReadCommentResponseDataCommentRecordType = "sub_number_order"
	ReadCommentResponseDataCommentRecordTypeNumberOrderPhoneNumber ReadCommentResponseDataCommentRecordType = "number_order_phone_number"
)

// AllValues returns all ReadCommentResponseDataCommentRecordType values.
func (ReadCommentResponseDataCommentRecordType) AllValues() []ReadCommentResponseDataCommentRecordType {
	return []ReadCommentResponseDataCommentRecordType{
		ReadCommentResponseDataCommentRecordTypeNumberOrder,
		ReadCommentResponseDataCommentRecordTypeSubNumberOrder,
		ReadCommentResponseDataCommentRecordTypeNumberOrderPhoneNumber,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ReadCommentResponseDataCommentRecordType) MarshalText() ([]byte, error) {
	switch s {
	case ReadCommentResponseDataCommentRecordTypeNumberOrder:
		return []byte(s), nil
	case ReadCommentResponseDataCommentRecordTypeSubNumberOrder:
		return []byte(s), nil
	case ReadCommentResponseDataCommentRecordTypeNumberOrderPhoneNumber:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReadCommentResponseDataCommentRecordType) UnmarshalText(data []byte) error {
	switch ReadCommentResponseDataCommentRecordType(data) {
	case ReadCommentResponseDataCommentRecordTypeNumberOrder:
		*s = ReadCommentResponseDataCommentRecordTypeNumberOrder
		return nil
	case ReadCommentResponseDataCommentRecordTypeSubNumberOrder:
		*s = ReadCommentResponseDataCommentRecordTypeSubNumberOrder
		return nil
	case ReadCommentResponseDataCommentRecordTypeNumberOrderPhoneNumber:
		*s = ReadCommentResponseDataCommentRecordTypeNumberOrderPhoneNumber
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReadCommentResponseDataCommenterType string

const (
	ReadCommentResponseDataCommenterTypeAdmin ReadCommentResponseDataCommenterType = "admin"
	ReadCommentResponseDataCommenterTypeUser  ReadCommentResponseDataCommenterType = "user"
)

// AllValues returns all ReadCommentResponseDataCommenterType values.
func (ReadCommentResponseDataCommenterType) AllValues() []ReadCommentResponseDataCommenterType {
	return []ReadCommentResponseDataCommenterType{
		ReadCommentResponseDataCommenterTypeAdmin,
		ReadCommentResponseDataCommenterTypeUser,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ReadCommentResponseDataCommenterType) MarshalText() ([]byte, error) {
	switch s {
	case ReadCommentResponseDataCommenterTypeAdmin:
		return []byte(s), nil
	case ReadCommentResponseDataCommenterTypeUser:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReadCommentResponseDataCommenterType) UnmarshalText(data []byte) error {
	switch ReadCommentResponseDataCommenterType(data) {
	case ReadCommentResponseDataCommenterTypeAdmin:
		*s = ReadCommentResponseDataCommenterTypeAdmin
		return nil
	case ReadCommentResponseDataCommenterTypeUser:
		*s = ReadCommentResponseDataCommenterTypeUser
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An object following one of the schemas published in https://developers.telnyx.
// com/docs/api/v2/detail-records.
// Ref: #/components/schemas/RecordType
type RecordType struct {
	// Telnyx Product type.
	RecordType OptString `json:"record_type"`
	// Telnyx Product Dimensions.
	ProductDimensions []string `json:"product_dimensions"`
	// Telnyx Product Metrics.
	ProductMetrics []string `json:"product_metrics"`
}

// GetRecordType returns the value of RecordType.
func (s *RecordType) GetRecordType() OptString {
	return s.RecordType
}

// GetProductDimensions returns the value of ProductDimensions.
func (s *RecordType) GetProductDimensions() []string {
	return s.ProductDimensions
}

// GetProductMetrics returns the value of ProductMetrics.
func (s *RecordType) GetProductMetrics() []string {
	return s.ProductMetrics
}

// SetRecordType sets the value of RecordType.
func (s *RecordType) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetProductDimensions sets the value of ProductDimensions.
func (s *RecordType) SetProductDimensions(val []string) {
	s.ProductDimensions = val
}

// SetProductMetrics sets the value of ProductMetrics.
func (s *RecordType) SetProductMetrics(val []string) {
	s.ProductMetrics = val
}

// Ref: #/components/schemas/RecordingResponse
type RecordingResponse struct {
	Data OptRecordingResponseData `json:"data"`
}

// GetData returns the value of Data.
func (s *RecordingResponse) GetData() OptRecordingResponseData {
	return s.Data
}

// SetData sets the value of Data.
func (s *RecordingResponse) SetData(val OptRecordingResponseData) {
	s.Data = val
}

func (*RecordingResponse) deleteRecordingRes() {}
func (*RecordingResponse) getRecordingRes()    {}

// Ref: #/components/schemas/RecordingResponseData
type RecordingResponseData struct {
	// Unique identifier and token for controlling the call.
	CallControlID OptString `json:"call_control_id"`
	// ID that is unique to the call and can be used to correlate webhook events.
	CallLegID OptString `json:"call_leg_id"`
	// ID that is unique to the call session and can be used to correlate webhook events. Call session is
	// a group of related call legs that logically belong to the same phone call, e.g. an inbound and
	// outbound leg of a transferred call.
	CallSessionID OptString `json:"call_session_id"`
	// When `dual`, final audio file has the first leg on channel A, and the rest on channel B.
	Channels OptRecordingResponseDataChannels `json:"channels"`
	// Uniquely identifies the conference.
	ConferenceID OptString `json:"conference_id"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt OptString `json:"created_at"`
	// The links to download the recording files.
	DownloadUrls OptRecordingResponseDataDownloadUrls `json:"download_urls"`
	// The duration of the recording in milliseconds.
	DurationMillis OptInt32 `json:"duration_millis"`
	// Uniquely identifies the recording.
	ID         OptString                          `json:"id"`
	RecordType OptRecordingResponseDataRecordType `json:"record_type"`
	// ISO 8601 formatted date of when the recording started.
	RecordingStartedAt OptString `json:"recording_started_at"`
	// ISO 8601 formatted date of when the recording ended.
	RecordingEndedAt OptString `json:"recording_ended_at"`
	// The kind of event that led to this recording being created.
	Source OptRecordingResponseDataSource `json:"source"`
	// The status of the recording. Only resources for `completed` recordings are currently supported.
	Status OptRecordingResponseDataStatus `json:"status"`
	// ISO 8601 formatted date indicating when the resource was updated.
	UpdatedAt OptString `json:"updated_at"`
}

// GetCallControlID returns the value of CallControlID.
func (s *RecordingResponseData) GetCallControlID() OptString {
	return s.CallControlID
}

// GetCallLegID returns the value of CallLegID.
func (s *RecordingResponseData) GetCallLegID() OptString {
	return s.CallLegID
}

// GetCallSessionID returns the value of CallSessionID.
func (s *RecordingResponseData) GetCallSessionID() OptString {
	return s.CallSessionID
}

// GetChannels returns the value of Channels.
func (s *RecordingResponseData) GetChannels() OptRecordingResponseDataChannels {
	return s.Channels
}

// GetConferenceID returns the value of ConferenceID.
func (s *RecordingResponseData) GetConferenceID() OptString {
	return s.ConferenceID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *RecordingResponseData) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetDownloadUrls returns the value of DownloadUrls.
func (s *RecordingResponseData) GetDownloadUrls() OptRecordingResponseDataDownloadUrls {
	return s.DownloadUrls
}

// GetDurationMillis returns the value of DurationMillis.
func (s *RecordingResponseData) GetDurationMillis() OptInt32 {
	return s.DurationMillis
}

// GetID returns the value of ID.
func (s *RecordingResponseData) GetID() OptString {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *RecordingResponseData) GetRecordType() OptRecordingResponseDataRecordType {
	return s.RecordType
}

// GetRecordingStartedAt returns the value of RecordingStartedAt.
func (s *RecordingResponseData) GetRecordingStartedAt() OptString {
	return s.RecordingStartedAt
}

// GetRecordingEndedAt returns the value of RecordingEndedAt.
func (s *RecordingResponseData) GetRecordingEndedAt() OptString {
	return s.RecordingEndedAt
}

// GetSource returns the value of Source.
func (s *RecordingResponseData) GetSource() OptRecordingResponseDataSource {
	return s.Source
}

// GetStatus returns the value of Status.
func (s *RecordingResponseData) GetStatus() OptRecordingResponseDataStatus {
	return s.Status
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *RecordingResponseData) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// SetCallControlID sets the value of CallControlID.
func (s *RecordingResponseData) SetCallControlID(val OptString) {
	s.CallControlID = val
}

// SetCallLegID sets the value of CallLegID.
func (s *RecordingResponseData) SetCallLegID(val OptString) {
	s.CallLegID = val
}

// SetCallSessionID sets the value of CallSessionID.
func (s *RecordingResponseData) SetCallSessionID(val OptString) {
	s.CallSessionID = val
}

// SetChannels sets the value of Channels.
func (s *RecordingResponseData) SetChannels(val OptRecordingResponseDataChannels) {
	s.Channels = val
}

// SetConferenceID sets the value of ConferenceID.
func (s *RecordingResponseData) SetConferenceID(val OptString) {
	s.ConferenceID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *RecordingResponseData) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetDownloadUrls sets the value of DownloadUrls.
func (s *RecordingResponseData) SetDownloadUrls(val OptRecordingResponseDataDownloadUrls) {
	s.DownloadUrls = val
}

// SetDurationMillis sets the value of DurationMillis.
func (s *RecordingResponseData) SetDurationMillis(val OptInt32) {
	s.DurationMillis = val
}

// SetID sets the value of ID.
func (s *RecordingResponseData) SetID(val OptString) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *RecordingResponseData) SetRecordType(val OptRecordingResponseDataRecordType) {
	s.RecordType = val
}

// SetRecordingStartedAt sets the value of RecordingStartedAt.
func (s *RecordingResponseData) SetRecordingStartedAt(val OptString) {
	s.RecordingStartedAt = val
}

// SetRecordingEndedAt sets the value of RecordingEndedAt.
func (s *RecordingResponseData) SetRecordingEndedAt(val OptString) {
	s.RecordingEndedAt = val
}

// SetSource sets the value of Source.
func (s *RecordingResponseData) SetSource(val OptRecordingResponseDataSource) {
	s.Source = val
}

// SetStatus sets the value of Status.
func (s *RecordingResponseData) SetStatus(val OptRecordingResponseDataStatus) {
	s.Status = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *RecordingResponseData) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// When `dual`, final audio file has the first leg on channel A, and the rest on channel B.
type RecordingResponseDataChannels string

const (
	RecordingResponseDataChannelsSingle RecordingResponseDataChannels = "single"
	RecordingResponseDataChannelsDual   RecordingResponseDataChannels = "dual"
)

// AllValues returns all RecordingResponseDataChannels values.
func (RecordingResponseDataChannels) AllValues() []RecordingResponseDataChannels {
	return []RecordingResponseDataChannels{
		RecordingResponseDataChannelsSingle,
		RecordingResponseDataChannelsDual,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RecordingResponseDataChannels) MarshalText() ([]byte, error) {
	switch s {
	case RecordingResponseDataChannelsSingle:
		return []byte(s), nil
	case RecordingResponseDataChannelsDual:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecordingResponseDataChannels) UnmarshalText(data []byte) error {
	switch RecordingResponseDataChannels(data) {
	case RecordingResponseDataChannelsSingle:
		*s = RecordingResponseDataChannelsSingle
		return nil
	case RecordingResponseDataChannelsDual:
		*s = RecordingResponseDataChannelsDual
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The links to download the recording files.
type RecordingResponseDataDownloadUrls struct {
	// Link to download the recording in mp3 format.
	Mp3 OptString `json:"mp3"`
	// Link to download the recording in wav format.
	Wav OptString `json:"wav"`
}

// GetMp3 returns the value of Mp3.
func (s *RecordingResponseDataDownloadUrls) GetMp3() OptString {
	return s.Mp3
}

// GetWav returns the value of Wav.
func (s *RecordingResponseDataDownloadUrls) GetWav() OptString {
	return s.Wav
}

// SetMp3 sets the value of Mp3.
func (s *RecordingResponseDataDownloadUrls) SetMp3(val OptString) {
	s.Mp3 = val
}

// SetWav sets the value of Wav.
func (s *RecordingResponseDataDownloadUrls) SetWav(val OptString) {
	s.Wav = val
}

type RecordingResponseDataRecordType string

const (
	RecordingResponseDataRecordTypeRecording RecordingResponseDataRecordType = "recording"
)

// AllValues returns all RecordingResponseDataRecordType values.
func (RecordingResponseDataRecordType) AllValues() []RecordingResponseDataRecordType {
	return []RecordingResponseDataRecordType{
		RecordingResponseDataRecordTypeRecording,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RecordingResponseDataRecordType) MarshalText() ([]byte, error) {
	switch s {
	case RecordingResponseDataRecordTypeRecording:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecordingResponseDataRecordType) UnmarshalText(data []byte) error {
	switch RecordingResponseDataRecordType(data) {
	case RecordingResponseDataRecordTypeRecording:
		*s = RecordingResponseDataRecordTypeRecording
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The kind of event that led to this recording being created.
type RecordingResponseDataSource string

const (
	RecordingResponseDataSourceConference RecordingResponseDataSource = "conference"
	RecordingResponseDataSourceCall       RecordingResponseDataSource = "call"
)

// AllValues returns all RecordingResponseDataSource values.
func (RecordingResponseDataSource) AllValues() []RecordingResponseDataSource {
	return []RecordingResponseDataSource{
		RecordingResponseDataSourceConference,
		RecordingResponseDataSourceCall,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RecordingResponseDataSource) MarshalText() ([]byte, error) {
	switch s {
	case RecordingResponseDataSourceConference:
		return []byte(s), nil
	case RecordingResponseDataSourceCall:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecordingResponseDataSource) UnmarshalText(data []byte) error {
	switch RecordingResponseDataSource(data) {
	case RecordingResponseDataSourceConference:
		*s = RecordingResponseDataSourceConference
		return nil
	case RecordingResponseDataSourceCall:
		*s = RecordingResponseDataSourceCall
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The status of the recording. Only resources for `completed` recordings are currently supported.
type RecordingResponseDataStatus string

const (
	RecordingResponseDataStatusCompleted RecordingResponseDataStatus = "completed"
)

// AllValues returns all RecordingResponseDataStatus values.
func (RecordingResponseDataStatus) AllValues() []RecordingResponseDataStatus {
	return []RecordingResponseDataStatus{
		RecordingResponseDataStatusCompleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RecordingResponseDataStatus) MarshalText() ([]byte, error) {
	switch s {
	case RecordingResponseDataStatusCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecordingResponseDataStatus) UnmarshalText(data []byte) error {
	switch RecordingResponseDataStatus(data) {
	case RecordingResponseDataStatusCompleted:
		*s = RecordingResponseDataStatusCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Defines how the recording was created.
// Ref: #/components/schemas/RecordingSource
type RecordingSource string

const (
	RecordingSourceStartCallRecordingAPI       RecordingSource = "StartCallRecordingAPI"
	RecordingSourceStartConferenceRecordingAPI RecordingSource = "StartConferenceRecordingAPI"
	RecordingSourceOutboundAPI                 RecordingSource = "OutboundAPI"
	RecordingSourceDialVerb                    RecordingSource = "DialVerb"
	RecordingSourceConference                  RecordingSource = "Conference"
	RecordingSourceRecordVerb                  RecordingSource = "RecordVerb"
	RecordingSourceTrunking                    RecordingSource = "Trunking"
)

// AllValues returns all RecordingSource values.
func (RecordingSource) AllValues() []RecordingSource {
	return []RecordingSource{
		RecordingSourceStartCallRecordingAPI,
		RecordingSourceStartConferenceRecordingAPI,
		RecordingSourceOutboundAPI,
		RecordingSourceDialVerb,
		RecordingSourceConference,
		RecordingSourceRecordVerb,
		RecordingSourceTrunking,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RecordingSource) MarshalText() ([]byte, error) {
	switch s {
	case RecordingSourceStartCallRecordingAPI:
		return []byte(s), nil
	case RecordingSourceStartConferenceRecordingAPI:
		return []byte(s), nil
	case RecordingSourceOutboundAPI:
		return []byte(s), nil
	case RecordingSourceDialVerb:
		return []byte(s), nil
	case RecordingSourceConference:
		return []byte(s), nil
	case RecordingSourceRecordVerb:
		return []byte(s), nil
	case RecordingSourceTrunking:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecordingSource) UnmarshalText(data []byte) error {
	switch RecordingSource(data) {
	case RecordingSourceStartCallRecordingAPI:
		*s = RecordingSourceStartCallRecordingAPI
		return nil
	case RecordingSourceStartConferenceRecordingAPI:
		*s = RecordingSourceStartConferenceRecordingAPI
		return nil
	case RecordingSourceOutboundAPI:
		*s = RecordingSourceOutboundAPI
		return nil
	case RecordingSourceDialVerb:
		*s = RecordingSourceDialVerb
		return nil
	case RecordingSourceConference:
		*s = RecordingSourceConference
		return nil
	case RecordingSourceRecordVerb:
		*s = RecordingSourceRecordVerb
		return nil
	case RecordingSourceTrunking:
		*s = RecordingSourceTrunking
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type RecordingStatusCallbackEvent string

// The audio track to record for the call. The default is `both`.
// Ref: #/components/schemas/RecordingTrack
type RecordingTrack string

const (
	RecordingTrackInbound  RecordingTrack = "inbound"
	RecordingTrackOutbound RecordingTrack = "outbound"
	RecordingTrackBoth     RecordingTrack = "both"
)

// AllValues returns all RecordingTrack values.
func (RecordingTrack) AllValues() []RecordingTrack {
	return []RecordingTrack{
		RecordingTrackInbound,
		RecordingTrackOutbound,
		RecordingTrackBoth,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RecordingTrack) MarshalText() ([]byte, error) {
	switch s {
	case RecordingTrackInbound:
		return []byte(s), nil
	case RecordingTrackOutbound:
		return []byte(s), nil
	case RecordingTrackBoth:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecordingTrack) UnmarshalText(data []byte) error {
	switch RecordingTrack(data) {
	case RecordingTrackInbound:
		*s = RecordingTrackInbound
		return nil
	case RecordingTrackOutbound:
		*s = RecordingTrackOutbound
		return nil
	case RecordingTrackBoth:
		*s = RecordingTrackBoth
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/RecordingTranscription
type RecordingTranscription struct {
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt OptString `json:"created_at"`
	// The duration of the recording transcription in milliseconds.
	DurationMillis OptInt32 `json:"duration_millis"`
	// Uniquely identifies the recording transcription.
	ID OptString `json:"id"`
	// Uniquely identifies the recording associated with this transcription.
	RecordingID OptString                           `json:"recording_id"`
	RecordType  OptRecordingTranscriptionRecordType `json:"record_type"`
	// The status of the recording transcriptions. The transcription text will be available only when the
	// status is completed.
	Status OptRecordingTranscriptionStatus `json:"status"`
	// The recording's transcribed text.
	TranscriptionText OptString `json:"transcription_text"`
	// ISO 8601 formatted date indicating when the resource was updated.
	UpdatedAt OptString `json:"updated_at"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *RecordingTranscription) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetDurationMillis returns the value of DurationMillis.
func (s *RecordingTranscription) GetDurationMillis() OptInt32 {
	return s.DurationMillis
}

// GetID returns the value of ID.
func (s *RecordingTranscription) GetID() OptString {
	return s.ID
}

// GetRecordingID returns the value of RecordingID.
func (s *RecordingTranscription) GetRecordingID() OptString {
	return s.RecordingID
}

// GetRecordType returns the value of RecordType.
func (s *RecordingTranscription) GetRecordType() OptRecordingTranscriptionRecordType {
	return s.RecordType
}

// GetStatus returns the value of Status.
func (s *RecordingTranscription) GetStatus() OptRecordingTranscriptionStatus {
	return s.Status
}

// GetTranscriptionText returns the value of TranscriptionText.
func (s *RecordingTranscription) GetTranscriptionText() OptString {
	return s.TranscriptionText
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *RecordingTranscription) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// SetCreatedAt sets the value of CreatedAt.
func (s *RecordingTranscription) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetDurationMillis sets the value of DurationMillis.
func (s *RecordingTranscription) SetDurationMillis(val OptInt32) {
	s.DurationMillis = val
}

// SetID sets the value of ID.
func (s *RecordingTranscription) SetID(val OptString) {
	s.ID = val
}

// SetRecordingID sets the value of RecordingID.
func (s *RecordingTranscription) SetRecordingID(val OptString) {
	s.RecordingID = val
}

// SetRecordType sets the value of RecordType.
func (s *RecordingTranscription) SetRecordType(val OptRecordingTranscriptionRecordType) {
	s.RecordType = val
}

// SetStatus sets the value of Status.
func (s *RecordingTranscription) SetStatus(val OptRecordingTranscriptionStatus) {
	s.Status = val
}

// SetTranscriptionText sets the value of TranscriptionText.
func (s *RecordingTranscription) SetTranscriptionText(val OptString) {
	s.TranscriptionText = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *RecordingTranscription) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

type RecordingTranscriptionRecordType string

const (
	RecordingTranscriptionRecordTypeRecordingTranscription RecordingTranscriptionRecordType = "recording_transcription"
)

// AllValues returns all RecordingTranscriptionRecordType values.
func (RecordingTranscriptionRecordType) AllValues() []RecordingTranscriptionRecordType {
	return []RecordingTranscriptionRecordType{
		RecordingTranscriptionRecordTypeRecordingTranscription,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RecordingTranscriptionRecordType) MarshalText() ([]byte, error) {
	switch s {
	case RecordingTranscriptionRecordTypeRecordingTranscription:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecordingTranscriptionRecordType) UnmarshalText(data []byte) error {
	switch RecordingTranscriptionRecordType(data) {
	case RecordingTranscriptionRecordTypeRecordingTranscription:
		*s = RecordingTranscriptionRecordTypeRecordingTranscription
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type RecordingTranscriptionResponse struct {
	Data OptRecordingTranscription `json:"data"`
}

// GetData returns the value of Data.
func (s *RecordingTranscriptionResponse) GetData() OptRecordingTranscription {
	return s.Data
}

// SetData sets the value of Data.
func (s *RecordingTranscriptionResponse) SetData(val OptRecordingTranscription) {
	s.Data = val
}

func (*RecordingTranscriptionResponse) deleteRecordingTranscriptionRes() {}
func (*RecordingTranscriptionResponse) getRecordingTranscriptionRes()    {}

// The status of the recording transcriptions. The transcription text will be available only when the
// status is completed.
type RecordingTranscriptionStatus string

const (
	RecordingTranscriptionStatusInProgress RecordingTranscriptionStatus = "in-progress"
	RecordingTranscriptionStatusCompleted  RecordingTranscriptionStatus = "completed"
)

// AllValues returns all RecordingTranscriptionStatus values.
func (RecordingTranscriptionStatus) AllValues() []RecordingTranscriptionStatus {
	return []RecordingTranscriptionStatus{
		RecordingTranscriptionStatusInProgress,
		RecordingTranscriptionStatusCompleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RecordingTranscriptionStatus) MarshalText() ([]byte, error) {
	switch s {
	case RecordingTranscriptionStatusInProgress:
		return []byte(s), nil
	case RecordingTranscriptionStatusCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecordingTranscriptionStatus) UnmarshalText(data []byte) error {
	switch RecordingTranscriptionStatus(data) {
	case RecordingTranscriptionStatusInProgress:
		*s = RecordingTranscriptionStatusInProgress
		return nil
	case RecordingTranscriptionStatusCompleted:
		*s = RecordingTranscriptionStatusCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type RecordingsResponseBody struct {
	Data []RecordingResponse `json:"data"`
	Meta OptPaginationMeta   `json:"meta"`
}

// GetData returns the value of Data.
func (s *RecordingsResponseBody) GetData() []RecordingResponse {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *RecordingsResponseBody) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *RecordingsResponseBody) SetData(val []RecordingResponse) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *RecordingsResponseBody) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*RecordingsResponseBody) getRecordingsRes() {}

// Ref: #/components/schemas/ReferRequest
type ReferRequest struct {
	// The SIP URI to which the call will be referred to.
	SipAddress string `json:"sip_address"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands
	// with the same `command_id` as one that has already been executed.
	CommandID OptString `json:"command_id"`
	// Custom headers to be added to the SIP INVITE.
	CustomHeaders []CustomSipHeader `json:"custom_headers"`
	// SIP Authentication username used for SIP challenges.
	SipAuthUsername OptString `json:"sip_auth_username"`
	// SIP Authentication password used for SIP challenges.
	SipAuthPassword OptString `json:"sip_auth_password"`
	// SIP headers to be added to the request. Currently only User-to-User header is supported.
	SipHeaders []SipHeader `json:"sip_headers"`
}

// GetSipAddress returns the value of SipAddress.
func (s *ReferRequest) GetSipAddress() string {
	return s.SipAddress
}

// GetClientState returns the value of ClientState.
func (s *ReferRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *ReferRequest) GetCommandID() OptString {
	return s.CommandID
}

// GetCustomHeaders returns the value of CustomHeaders.
func (s *ReferRequest) GetCustomHeaders() []CustomSipHeader {
	return s.CustomHeaders
}

// GetSipAuthUsername returns the value of SipAuthUsername.
func (s *ReferRequest) GetSipAuthUsername() OptString {
	return s.SipAuthUsername
}

// GetSipAuthPassword returns the value of SipAuthPassword.
func (s *ReferRequest) GetSipAuthPassword() OptString {
	return s.SipAuthPassword
}

// GetSipHeaders returns the value of SipHeaders.
func (s *ReferRequest) GetSipHeaders() []SipHeader {
	return s.SipHeaders
}

// SetSipAddress sets the value of SipAddress.
func (s *ReferRequest) SetSipAddress(val string) {
	s.SipAddress = val
}

// SetClientState sets the value of ClientState.
func (s *ReferRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *ReferRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// SetCustomHeaders sets the value of CustomHeaders.
func (s *ReferRequest) SetCustomHeaders(val []CustomSipHeader) {
	s.CustomHeaders = val
}

// SetSipAuthUsername sets the value of SipAuthUsername.
func (s *ReferRequest) SetSipAuthUsername(val OptString) {
	s.SipAuthUsername = val
}

// SetSipAuthPassword sets the value of SipAuthPassword.
func (s *ReferRequest) SetSipAuthPassword(val OptString) {
	s.SipAuthPassword = val
}

// SetSipHeaders sets the value of SipHeaders.
func (s *ReferRequest) SetSipHeaders(val []SipHeader) {
	s.SipHeaders = val
}

type Region string

// Ref: #/components/schemas/RegionInformation
type RegionInformation struct {
	RegionType OptRegionInformationRegionType `json:"region_type"`
	RegionName OptString                      `json:"region_name"`
}

// GetRegionType returns the value of RegionType.
func (s *RegionInformation) GetRegionType() OptRegionInformationRegionType {
	return s.RegionType
}

// GetRegionName returns the value of RegionName.
func (s *RegionInformation) GetRegionName() OptString {
	return s.RegionName
}

// SetRegionType sets the value of RegionType.
func (s *RegionInformation) SetRegionType(val OptRegionInformationRegionType) {
	s.RegionType = val
}

// SetRegionName sets the value of RegionName.
func (s *RegionInformation) SetRegionName(val OptString) {
	s.RegionName = val
}

type RegionInformationRegionType string

const (
	RegionInformationRegionTypeCountryCode RegionInformationRegionType = "country_code"
	RegionInformationRegionTypeRateCenter  RegionInformationRegionType = "rate_center"
	RegionInformationRegionTypeState       RegionInformationRegionType = "state"
	RegionInformationRegionTypeLocation    RegionInformationRegionType = "location"
)

// AllValues returns all RegionInformationRegionType values.
func (RegionInformationRegionType) AllValues() []RegionInformationRegionType {
	return []RegionInformationRegionType{
		RegionInformationRegionTypeCountryCode,
		RegionInformationRegionTypeRateCenter,
		RegionInformationRegionTypeState,
		RegionInformationRegionTypeLocation,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RegionInformationRegionType) MarshalText() ([]byte, error) {
	switch s {
	case RegionInformationRegionTypeCountryCode:
		return []byte(s), nil
	case RegionInformationRegionTypeRateCenter:
		return []byte(s), nil
	case RegionInformationRegionTypeState:
		return []byte(s), nil
	case RegionInformationRegionTypeLocation:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RegionInformationRegionType) UnmarshalText(data []byte) error {
	switch RegionInformationRegionType(data) {
	case RegionInformationRegionTypeCountryCode:
		*s = RegionInformationRegionTypeCountryCode
		return nil
	case RegionInformationRegionTypeRateCenter:
		*s = RegionInformationRegionTypeRateCenter
		return nil
	case RegionInformationRegionTypeState:
		*s = RegionInformationRegionTypeState
		return nil
	case RegionInformationRegionTypeLocation:
		*s = RegionInformationRegionTypeLocation
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/RegisterCallRequest
type RegisterCallRequest struct {
	// The DID that you will dial out from.
	From string `json:"from"`
	// The DID that you will dial out to.
	To string `json:"to"`
	// The reason for call (this will be displayed on call recipient's device).
	Reason string `json:"reason"`
}

// GetFrom returns the value of From.
func (s *RegisterCallRequest) GetFrom() string {
	return s.From
}

// GetTo returns the value of To.
func (s *RegisterCallRequest) GetTo() string {
	return s.To
}

// GetReason returns the value of Reason.
func (s *RegisterCallRequest) GetReason() string {
	return s.Reason
}

// SetFrom sets the value of From.
func (s *RegisterCallRequest) SetFrom(val string) {
	s.From = val
}

// SetTo sets the value of To.
func (s *RegisterCallRequest) SetTo(val string) {
	s.To = val
}

// SetReason sets the value of Reason.
func (s *RegisterCallRequest) SetReason(val string) {
	s.Reason = val
}

type RegisterCallResponse struct {
	Data OptRegisterCallResponseData `json:"data"`
}

// GetData returns the value of Data.
func (s *RegisterCallResponse) GetData() OptRegisterCallResponseData {
	return s.Data
}

// SetData sets the value of Data.
func (s *RegisterCallResponse) SetData(val OptRegisterCallResponseData) {
	s.Data = val
}

func (*RegisterCallResponse) registerCallRes() {}

type RegisterCallResponseData struct {
	Result OptString `json:"result"`
}

// GetResult returns the value of Result.
func (s *RegisterCallResponseData) GetResult() OptString {
	return s.Result
}

// SetResult sets the value of Result.
func (s *RegisterCallResponseData) SetResult(val OptString) {
	s.Result = val
}

// Ref: #/components/schemas/RegulatoryRequirements
type RegulatoryRequirements struct {
	PhoneNumber            OptString                                          `json:"phone_number"`
	PhoneNumberType        OptString                                          `json:"phone_number_type"`
	RegionInformation      []RegulatoryRequirementsRegionInformationItem      `json:"region_information"`
	RecordType             OptString                                          `json:"record_type"`
	RegulatoryRequirements []RegulatoryRequirementsRegulatoryRequirementsItem `json:"regulatory_requirements"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *RegulatoryRequirements) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetPhoneNumberType returns the value of PhoneNumberType.
func (s *RegulatoryRequirements) GetPhoneNumberType() OptString {
	return s.PhoneNumberType
}

// GetRegionInformation returns the value of RegionInformation.
func (s *RegulatoryRequirements) GetRegionInformation() []RegulatoryRequirementsRegionInformationItem {
	return s.RegionInformation
}

// GetRecordType returns the value of RecordType.
func (s *RegulatoryRequirements) GetRecordType() OptString {
	return s.RecordType
}

// GetRegulatoryRequirements returns the value of RegulatoryRequirements.
func (s *RegulatoryRequirements) GetRegulatoryRequirements() []RegulatoryRequirementsRegulatoryRequirementsItem {
	return s.RegulatoryRequirements
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *RegulatoryRequirements) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetPhoneNumberType sets the value of PhoneNumberType.
func (s *RegulatoryRequirements) SetPhoneNumberType(val OptString) {
	s.PhoneNumberType = val
}

// SetRegionInformation sets the value of RegionInformation.
func (s *RegulatoryRequirements) SetRegionInformation(val []RegulatoryRequirementsRegionInformationItem) {
	s.RegionInformation = val
}

// SetRecordType sets the value of RecordType.
func (s *RegulatoryRequirements) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetRegulatoryRequirements sets the value of RegulatoryRequirements.
func (s *RegulatoryRequirements) SetRegulatoryRequirements(val []RegulatoryRequirementsRegulatoryRequirementsItem) {
	s.RegulatoryRequirements = val
}

type RegulatoryRequirementsRegionInformationItem struct {
	RegionName OptString `json:"region_name"`
	RegionType OptString `json:"region_type"`
}

// GetRegionName returns the value of RegionName.
func (s *RegulatoryRequirementsRegionInformationItem) GetRegionName() OptString {
	return s.RegionName
}

// GetRegionType returns the value of RegionType.
func (s *RegulatoryRequirementsRegionInformationItem) GetRegionType() OptString {
	return s.RegionType
}

// SetRegionName sets the value of RegionName.
func (s *RegulatoryRequirementsRegionInformationItem) SetRegionName(val OptString) {
	s.RegionName = val
}

// SetRegionType sets the value of RegionType.
func (s *RegulatoryRequirementsRegionInformationItem) SetRegionType(val OptString) {
	s.RegionType = val
}

type RegulatoryRequirementsRegulatoryRequirementsItem struct {
	Description        OptString                                                             `json:"description"`
	ID                 OptUUID                                                               `json:"id"`
	Example            OptString                                                             `json:"example"`
	Label              OptString                                                             `json:"label"`
	FieldType          OptString                                                             `json:"field_type"`
	AcceptanceCriteria OptRegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria `json:"acceptance_criteria"`
	RecordType         OptString                                                             `json:"record_type"`
}

// GetDescription returns the value of Description.
func (s *RegulatoryRequirementsRegulatoryRequirementsItem) GetDescription() OptString {
	return s.Description
}

// GetID returns the value of ID.
func (s *RegulatoryRequirementsRegulatoryRequirementsItem) GetID() OptUUID {
	return s.ID
}

// GetExample returns the value of Example.
func (s *RegulatoryRequirementsRegulatoryRequirementsItem) GetExample() OptString {
	return s.Example
}

// GetLabel returns the value of Label.
func (s *RegulatoryRequirementsRegulatoryRequirementsItem) GetLabel() OptString {
	return s.Label
}

// GetFieldType returns the value of FieldType.
func (s *RegulatoryRequirementsRegulatoryRequirementsItem) GetFieldType() OptString {
	return s.FieldType
}

// GetAcceptanceCriteria returns the value of AcceptanceCriteria.
func (s *RegulatoryRequirementsRegulatoryRequirementsItem) GetAcceptanceCriteria() OptRegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria {
	return s.AcceptanceCriteria
}

// GetRecordType returns the value of RecordType.
func (s *RegulatoryRequirementsRegulatoryRequirementsItem) GetRecordType() OptString {
	return s.RecordType
}

// SetDescription sets the value of Description.
func (s *RegulatoryRequirementsRegulatoryRequirementsItem) SetDescription(val OptString) {
	s.Description = val
}

// SetID sets the value of ID.
func (s *RegulatoryRequirementsRegulatoryRequirementsItem) SetID(val OptUUID) {
	s.ID = val
}

// SetExample sets the value of Example.
func (s *RegulatoryRequirementsRegulatoryRequirementsItem) SetExample(val OptString) {
	s.Example = val
}

// SetLabel sets the value of Label.
func (s *RegulatoryRequirementsRegulatoryRequirementsItem) SetLabel(val OptString) {
	s.Label = val
}

// SetFieldType sets the value of FieldType.
func (s *RegulatoryRequirementsRegulatoryRequirementsItem) SetFieldType(val OptString) {
	s.FieldType = val
}

// SetAcceptanceCriteria sets the value of AcceptanceCriteria.
func (s *RegulatoryRequirementsRegulatoryRequirementsItem) SetAcceptanceCriteria(val OptRegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria) {
	s.AcceptanceCriteria = val
}

// SetRecordType sets the value of RecordType.
func (s *RegulatoryRequirementsRegulatoryRequirementsItem) SetRecordType(val OptString) {
	s.RecordType = val
}

type RegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria struct {
	LocalityLimit OptString `json:"locality_limit"`
	FieldValue    OptString `json:"field_value"`
	FieldType     OptString `json:"field_type"`
}

// GetLocalityLimit returns the value of LocalityLimit.
func (s *RegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria) GetLocalityLimit() OptString {
	return s.LocalityLimit
}

// GetFieldValue returns the value of FieldValue.
func (s *RegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria) GetFieldValue() OptString {
	return s.FieldValue
}

// GetFieldType returns the value of FieldType.
func (s *RegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria) GetFieldType() OptString {
	return s.FieldType
}

// SetLocalityLimit sets the value of LocalityLimit.
func (s *RegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria) SetLocalityLimit(val OptString) {
	s.LocalityLimit = val
}

// SetFieldValue sets the value of FieldValue.
func (s *RegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria) SetFieldValue(val OptString) {
	s.FieldValue = val
}

// SetFieldType sets the value of FieldType.
func (s *RegulatoryRequirementsRegulatoryRequirementsItemAcceptanceCriteria) SetFieldType(val OptString) {
	s.FieldType = val
}

// Ref: #/components/schemas/RejectRequest
type RejectRequest struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
	// Cause for call rejection.
	Cause RejectRequestCause `json:"cause"`
}

// GetClientState returns the value of ClientState.
func (s *RejectRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *RejectRequest) GetCommandID() OptString {
	return s.CommandID
}

// GetCause returns the value of Cause.
func (s *RejectRequest) GetCause() RejectRequestCause {
	return s.Cause
}

// SetClientState sets the value of ClientState.
func (s *RejectRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *RejectRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// SetCause sets the value of Cause.
func (s *RejectRequest) SetCause(val RejectRequestCause) {
	s.Cause = val
}

// Cause for call rejection.
type RejectRequestCause string

const (
	RejectRequestCauseCALLREJECTED RejectRequestCause = "CALL_REJECTED"
	RejectRequestCauseUSERBUSY     RejectRequestCause = "USER_BUSY"
)

// AllValues returns all RejectRequestCause values.
func (RejectRequestCause) AllValues() []RejectRequestCause {
	return []RejectRequestCause{
		RejectRequestCauseCALLREJECTED,
		RejectRequestCauseUSERBUSY,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RejectRequestCause) MarshalText() ([]byte, error) {
	switch s {
	case RejectRequestCauseCALLREJECTED:
		return []byte(s), nil
	case RejectRequestCauseUSERBUSY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RejectRequestCause) UnmarshalText(data []byte) error {
	switch RejectRequestCause(data) {
	case RejectRequestCauseCALLREJECTED:
		*s = RejectRequestCauseCALLREJECTED
		return nil
	case RejectRequestCauseUSERBUSY:
		*s = RejectRequestCauseUSERBUSY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ReservedPhoneNumber
type ReservedPhoneNumber struct {
	ID          OptUUID   `json:"id"`
	RecordType  OptString `json:"record_type"`
	PhoneNumber OptString `json:"phone_number"`
	// The status of the phone number's reservation.
	Status OptReservedPhoneNumberStatus `json:"status"`
	// An ISO 8901 datetime string denoting when the individual number reservation was created.
	CreatedAt OptString `json:"created_at"`
	// An ISO 8901 datetime string for when the the individual number reservation was updated.
	UpdatedAt OptString `json:"updated_at"`
	// An ISO 8901 datetime string for when the individual number reservation is going to expire.
	ExpiredAt OptString `json:"expired_at"`
}

// GetID returns the value of ID.
func (s *ReservedPhoneNumber) GetID() OptUUID {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *ReservedPhoneNumber) GetRecordType() OptString {
	return s.RecordType
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *ReservedPhoneNumber) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetStatus returns the value of Status.
func (s *ReservedPhoneNumber) GetStatus() OptReservedPhoneNumberStatus {
	return s.Status
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ReservedPhoneNumber) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ReservedPhoneNumber) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetExpiredAt returns the value of ExpiredAt.
func (s *ReservedPhoneNumber) GetExpiredAt() OptString {
	return s.ExpiredAt
}

// SetID sets the value of ID.
func (s *ReservedPhoneNumber) SetID(val OptUUID) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *ReservedPhoneNumber) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *ReservedPhoneNumber) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetStatus sets the value of Status.
func (s *ReservedPhoneNumber) SetStatus(val OptReservedPhoneNumberStatus) {
	s.Status = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ReservedPhoneNumber) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ReservedPhoneNumber) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetExpiredAt sets the value of ExpiredAt.
func (s *ReservedPhoneNumber) SetExpiredAt(val OptString) {
	s.ExpiredAt = val
}

// The status of the phone number's reservation.
type ReservedPhoneNumberStatus string

const (
	ReservedPhoneNumberStatusPending ReservedPhoneNumberStatus = "pending"
	ReservedPhoneNumberStatusSuccess ReservedPhoneNumberStatus = "success"
	ReservedPhoneNumberStatusFailure ReservedPhoneNumberStatus = "failure"
)

// AllValues returns all ReservedPhoneNumberStatus values.
func (ReservedPhoneNumberStatus) AllValues() []ReservedPhoneNumberStatus {
	return []ReservedPhoneNumberStatus{
		ReservedPhoneNumberStatusPending,
		ReservedPhoneNumberStatusSuccess,
		ReservedPhoneNumberStatusFailure,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ReservedPhoneNumberStatus) MarshalText() ([]byte, error) {
	switch s {
	case ReservedPhoneNumberStatusPending:
		return []byte(s), nil
	case ReservedPhoneNumberStatusSuccess:
		return []byte(s), nil
	case ReservedPhoneNumberStatusFailure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReservedPhoneNumberStatus) UnmarshalText(data []byte) error {
	switch ReservedPhoneNumberStatus(data) {
	case ReservedPhoneNumberStatusPending:
		*s = ReservedPhoneNumberStatusPending
		return nil
	case ReservedPhoneNumberStatusSuccess:
		*s = ReservedPhoneNumberStatusSuccess
		return nil
	case ReservedPhoneNumberStatusFailure:
		*s = ReservedPhoneNumberStatusFailure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ResumeRecordingRequest
type ResumeRecordingRequest struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetClientState returns the value of ClientState.
func (s *ResumeRecordingRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *ResumeRecordingRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetClientState sets the value of ClientState.
func (s *ResumeRecordingRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *ResumeRecordingRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// RetrieveCallControlApplicationNotFound is response for RetrieveCallControlApplication operation.
type RetrieveCallControlApplicationNotFound struct{}

func (*RetrieveCallControlApplicationNotFound) retrieveCallControlApplicationRes() {}

// RetrieveCallControlApplicationUnprocessableEntity is response for RetrieveCallControlApplication operation.
type RetrieveCallControlApplicationUnprocessableEntity struct{}

func (*RetrieveCallControlApplicationUnprocessableEntity) retrieveCallControlApplicationRes() {}

type RetrieveCallStatusResponse struct {
	Data OptCall `json:"data"`
}

// GetData returns the value of Data.
func (s *RetrieveCallStatusResponse) GetData() OptCall {
	return s.Data
}

// SetData sets the value of Data.
func (s *RetrieveCallStatusResponse) SetData(val OptCall) {
	s.Data = val
}

func (*RetrieveCallStatusResponse) dialCallRes()           {}
func (*RetrieveCallStatusResponse) retrieveCallStatusRes() {}

type RetrievePhoneNumbersJobOK struct {
	Data OptPhoneNumbersJob `json:"data"`
}

// GetData returns the value of Data.
func (s *RetrievePhoneNumbersJobOK) GetData() OptPhoneNumbersJob {
	return s.Data
}

// SetData sets the value of Data.
func (s *RetrievePhoneNumbersJobOK) SetData(val OptPhoneNumbersJob) {
	s.Data = val
}

func (*RetrievePhoneNumbersJobOK) retrievePhoneNumbersJobRes() {}

// Ref: #/components/schemas/RetrieveVerificationResponse
type RetrieveVerificationResponse struct {
	Data Verification `json:"data"`
}

// GetData returns the value of Data.
func (s *RetrieveVerificationResponse) GetData() Verification {
	return s.Data
}

// SetData sets the value of Data.
func (s *RetrieveVerificationResponse) SetData(val Verification) {
	s.Data = val
}

func (*RetrieveVerificationResponse) retrieveVerificationRes() {}

// Ref: #/components/schemas/RoomRecording
type RoomRecording struct {
	// A unique identifier for the room recording.
	ID OptUUID `json:"id"`
	// Identify the room associated with the room recording.
	RoomID OptUUID `json:"room_id"`
	// Identify the room session associated with the room recording.
	SessionID OptUUID `json:"session_id"`
	// Identify the room participant associated with the room recording.
	ParticipantID OptUUID `json:"participant_id"`
	// Shows the room recording status.
	Status OptRoomRecordingStatus `json:"status"`
	// Shows the room recording type.
	Type OptRoomRecordingType `json:"type"`
	// Shows the room recording size in MB.
	SizeMB OptFloat32 `json:"size_mb"`
	// Url to download the recording.
	DownloadURL OptString `json:"download_url"`
	// Shows the codec used for the room recording.
	Codec OptString `json:"codec"`
	// Shows the room recording duration in seconds.
	DurationSecs OptInt `json:"duration_secs"`
	// ISO 8601 timestamp when the room recording was created.
	CreatedAt OptString `json:"created_at"`
	// ISO 8601 timestamp when the room recording was updated.
	UpdatedAt OptString `json:"updated_at"`
	// ISO 8601 timestamp when the room recording has ended.
	EndedAt OptString `json:"ended_at"`
	// ISO 8601 timestamp when the room recording has stated.
	StartedAt OptString `json:"started_at"`
	// ISO 8601 timestamp when the room recording has completed.
	CompletedAt OptString `json:"completed_at"`
	RecordType  OptString `json:"record_type"`
}

// GetID returns the value of ID.
func (s *RoomRecording) GetID() OptUUID {
	return s.ID
}

// GetRoomID returns the value of RoomID.
func (s *RoomRecording) GetRoomID() OptUUID {
	return s.RoomID
}

// GetSessionID returns the value of SessionID.
func (s *RoomRecording) GetSessionID() OptUUID {
	return s.SessionID
}

// GetParticipantID returns the value of ParticipantID.
func (s *RoomRecording) GetParticipantID() OptUUID {
	return s.ParticipantID
}

// GetStatus returns the value of Status.
func (s *RoomRecording) GetStatus() OptRoomRecordingStatus {
	return s.Status
}

// GetType returns the value of Type.
func (s *RoomRecording) GetType() OptRoomRecordingType {
	return s.Type
}

// GetSizeMB returns the value of SizeMB.
func (s *RoomRecording) GetSizeMB() OptFloat32 {
	return s.SizeMB
}

// GetDownloadURL returns the value of DownloadURL.
func (s *RoomRecording) GetDownloadURL() OptString {
	return s.DownloadURL
}

// GetCodec returns the value of Codec.
func (s *RoomRecording) GetCodec() OptString {
	return s.Codec
}

// GetDurationSecs returns the value of DurationSecs.
func (s *RoomRecording) GetDurationSecs() OptInt {
	return s.DurationSecs
}

// GetCreatedAt returns the value of CreatedAt.
func (s *RoomRecording) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *RoomRecording) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetEndedAt returns the value of EndedAt.
func (s *RoomRecording) GetEndedAt() OptString {
	return s.EndedAt
}

// GetStartedAt returns the value of StartedAt.
func (s *RoomRecording) GetStartedAt() OptString {
	return s.StartedAt
}

// GetCompletedAt returns the value of CompletedAt.
func (s *RoomRecording) GetCompletedAt() OptString {
	return s.CompletedAt
}

// GetRecordType returns the value of RecordType.
func (s *RoomRecording) GetRecordType() OptString {
	return s.RecordType
}

// SetID sets the value of ID.
func (s *RoomRecording) SetID(val OptUUID) {
	s.ID = val
}

// SetRoomID sets the value of RoomID.
func (s *RoomRecording) SetRoomID(val OptUUID) {
	s.RoomID = val
}

// SetSessionID sets the value of SessionID.
func (s *RoomRecording) SetSessionID(val OptUUID) {
	s.SessionID = val
}

// SetParticipantID sets the value of ParticipantID.
func (s *RoomRecording) SetParticipantID(val OptUUID) {
	s.ParticipantID = val
}

// SetStatus sets the value of Status.
func (s *RoomRecording) SetStatus(val OptRoomRecordingStatus) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *RoomRecording) SetType(val OptRoomRecordingType) {
	s.Type = val
}

// SetSizeMB sets the value of SizeMB.
func (s *RoomRecording) SetSizeMB(val OptFloat32) {
	s.SizeMB = val
}

// SetDownloadURL sets the value of DownloadURL.
func (s *RoomRecording) SetDownloadURL(val OptString) {
	s.DownloadURL = val
}

// SetCodec sets the value of Codec.
func (s *RoomRecording) SetCodec(val OptString) {
	s.Codec = val
}

// SetDurationSecs sets the value of DurationSecs.
func (s *RoomRecording) SetDurationSecs(val OptInt) {
	s.DurationSecs = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *RoomRecording) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *RoomRecording) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetEndedAt sets the value of EndedAt.
func (s *RoomRecording) SetEndedAt(val OptString) {
	s.EndedAt = val
}

// SetStartedAt sets the value of StartedAt.
func (s *RoomRecording) SetStartedAt(val OptString) {
	s.StartedAt = val
}

// SetCompletedAt sets the value of CompletedAt.
func (s *RoomRecording) SetCompletedAt(val OptString) {
	s.CompletedAt = val
}

// SetRecordType sets the value of RecordType.
func (s *RoomRecording) SetRecordType(val OptString) {
	s.RecordType = val
}

// Shows the room recording status.
type RoomRecordingStatus string

const (
	RoomRecordingStatusCompleted  RoomRecordingStatus = "completed"
	RoomRecordingStatusProcessing RoomRecordingStatus = "processing"
)

// AllValues returns all RoomRecordingStatus values.
func (RoomRecordingStatus) AllValues() []RoomRecordingStatus {
	return []RoomRecordingStatus{
		RoomRecordingStatusCompleted,
		RoomRecordingStatusProcessing,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RoomRecordingStatus) MarshalText() ([]byte, error) {
	switch s {
	case RoomRecordingStatusCompleted:
		return []byte(s), nil
	case RoomRecordingStatusProcessing:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RoomRecordingStatus) UnmarshalText(data []byte) error {
	switch RoomRecordingStatus(data) {
	case RoomRecordingStatusCompleted:
		*s = RoomRecordingStatusCompleted
		return nil
	case RoomRecordingStatusProcessing:
		*s = RoomRecordingStatusProcessing
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Shows the room recording type.
type RoomRecordingType string

const (
	RoomRecordingTypeAudio RoomRecordingType = "audio"
	RoomRecordingTypeVideo RoomRecordingType = "video"
)

// AllValues returns all RoomRecordingType values.
func (RoomRecordingType) AllValues() []RoomRecordingType {
	return []RoomRecordingType{
		RoomRecordingTypeAudio,
		RoomRecordingTypeVideo,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RoomRecordingType) MarshalText() ([]byte, error) {
	switch s {
	case RoomRecordingTypeAudio:
		return []byte(s), nil
	case RoomRecordingTypeVideo:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RoomRecordingType) UnmarshalText(data []byte) error {
	switch RoomRecordingType(data) {
	case RoomRecordingTypeAudio:
		*s = RoomRecordingTypeAudio
		return nil
	case RoomRecordingTypeVideo:
		*s = RoomRecordingTypeVideo
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/S3ConfigurationData
type S3ConfigurationData struct {
	Bucket             OptBucket             `json:"bucket"`
	Region             OptRegion             `json:"region"`
	AWSAccessKeyID     OptAwsAccessKeyId     `json:"aws_access_key_id"`
	AWSSecretAccessKey OptAwsSecretAccessKey `json:"aws_secret_access_key"`
}

// GetBucket returns the value of Bucket.
func (s *S3ConfigurationData) GetBucket() OptBucket {
	return s.Bucket
}

// GetRegion returns the value of Region.
func (s *S3ConfigurationData) GetRegion() OptRegion {
	return s.Region
}

// GetAWSAccessKeyID returns the value of AWSAccessKeyID.
func (s *S3ConfigurationData) GetAWSAccessKeyID() OptAwsAccessKeyId {
	return s.AWSAccessKeyID
}

// GetAWSSecretAccessKey returns the value of AWSSecretAccessKey.
func (s *S3ConfigurationData) GetAWSSecretAccessKey() OptAwsSecretAccessKey {
	return s.AWSSecretAccessKey
}

// SetBucket sets the value of Bucket.
func (s *S3ConfigurationData) SetBucket(val OptBucket) {
	s.Bucket = val
}

// SetRegion sets the value of Region.
func (s *S3ConfigurationData) SetRegion(val OptRegion) {
	s.Region = val
}

// SetAWSAccessKeyID sets the value of AWSAccessKeyID.
func (s *S3ConfigurationData) SetAWSAccessKeyID(val OptAwsAccessKeyId) {
	s.AWSAccessKeyID = val
}

// SetAWSSecretAccessKey sets the value of AWSSecretAccessKey.
func (s *S3ConfigurationData) SetAWSSecretAccessKey(val OptAwsSecretAccessKey) {
	s.AWSSecretAccessKey = val
}

type SearchMobileNetworkOperatorsResponse struct {
	Data []MobileNetworkOperator `json:"data"`
	Meta OptPaginationMeta       `json:"meta"`
}

// GetData returns the value of Data.
func (s *SearchMobileNetworkOperatorsResponse) GetData() []MobileNetworkOperator {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *SearchMobileNetworkOperatorsResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *SearchMobileNetworkOperatorsResponse) SetData(val []MobileNetworkOperator) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *SearchMobileNetworkOperatorsResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*SearchMobileNetworkOperatorsResponse) getMobileNetworkOperatorsRes() {}

type SearchOTAUpdateResponse struct {
	Data []SimplifiedOTAUpdate `json:"data"`
	Meta OptPaginationMeta     `json:"meta"`
}

// GetData returns the value of Data.
func (s *SearchOTAUpdateResponse) GetData() []SimplifiedOTAUpdate {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *SearchOTAUpdateResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *SearchOTAUpdateResponse) SetData(val []SimplifiedOTAUpdate) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *SearchOTAUpdateResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*SearchOTAUpdateResponse) listOtaUpdatesRes() {}

// Ref: #/components/schemas/SendDTMFRequest
type SendDTMFRequest struct {
	// DTMF digits to send. Valid digits are 0-9, A-D, *, and #. Pauses can be added using w (0.5s) and W
	// (1s).
	Digits string `json:"digits"`
	// Specifies for how many milliseconds each digit will be played in the audio stream. Ranges from 100
	// to 500ms.
	DurationMillis OptInt32 `json:"duration_millis"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetDigits returns the value of Digits.
func (s *SendDTMFRequest) GetDigits() string {
	return s.Digits
}

// GetDurationMillis returns the value of DurationMillis.
func (s *SendDTMFRequest) GetDurationMillis() OptInt32 {
	return s.DurationMillis
}

// GetClientState returns the value of ClientState.
func (s *SendDTMFRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *SendDTMFRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetDigits sets the value of Digits.
func (s *SendDTMFRequest) SetDigits(val string) {
	s.Digits = val
}

// SetDurationMillis sets the value of DurationMillis.
func (s *SendDTMFRequest) SetDurationMillis(val OptInt32) {
	s.DurationMillis = val
}

// SetClientState sets the value of ClientState.
func (s *SendDTMFRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *SendDTMFRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// SendPortingVerificationCodesNoContent is response for SendPortingVerificationCodes operation.
type SendPortingVerificationCodesNoContent struct{}

func (*SendPortingVerificationCodesNoContent) sendPortingVerificationCodesRes() {}

// SendPortingVerificationCodesNotFound is response for SendPortingVerificationCodes operation.
type SendPortingVerificationCodesNotFound struct{}

func (*SendPortingVerificationCodesNotFound) sendPortingVerificationCodesRes() {}

type SendPortingVerificationCodesReq struct {
	PhoneNumbers       []string                                             `json:"phone_numbers"`
	VerificationMethod OptSendPortingVerificationCodesReqVerificationMethod `json:"verification_method"`
}

// GetPhoneNumbers returns the value of PhoneNumbers.
func (s *SendPortingVerificationCodesReq) GetPhoneNumbers() []string {
	return s.PhoneNumbers
}

// GetVerificationMethod returns the value of VerificationMethod.
func (s *SendPortingVerificationCodesReq) GetVerificationMethod() OptSendPortingVerificationCodesReqVerificationMethod {
	return s.VerificationMethod
}

// SetPhoneNumbers sets the value of PhoneNumbers.
func (s *SendPortingVerificationCodesReq) SetPhoneNumbers(val []string) {
	s.PhoneNumbers = val
}

// SetVerificationMethod sets the value of VerificationMethod.
func (s *SendPortingVerificationCodesReq) SetVerificationMethod(val OptSendPortingVerificationCodesReqVerificationMethod) {
	s.VerificationMethod = val
}

type SendPortingVerificationCodesReqVerificationMethod string

const (
	SendPortingVerificationCodesReqVerificationMethodSMS  SendPortingVerificationCodesReqVerificationMethod = "sms"
	SendPortingVerificationCodesReqVerificationMethodCall SendPortingVerificationCodesReqVerificationMethod = "call"
)

// AllValues returns all SendPortingVerificationCodesReqVerificationMethod values.
func (SendPortingVerificationCodesReqVerificationMethod) AllValues() []SendPortingVerificationCodesReqVerificationMethod {
	return []SendPortingVerificationCodesReqVerificationMethod{
		SendPortingVerificationCodesReqVerificationMethodSMS,
		SendPortingVerificationCodesReqVerificationMethodCall,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SendPortingVerificationCodesReqVerificationMethod) MarshalText() ([]byte, error) {
	switch s {
	case SendPortingVerificationCodesReqVerificationMethodSMS:
		return []byte(s), nil
	case SendPortingVerificationCodesReqVerificationMethodCall:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SendPortingVerificationCodesReqVerificationMethod) UnmarshalText(data []byte) error {
	switch SendPortingVerificationCodesReqVerificationMethod(data) {
	case SendPortingVerificationCodesReqVerificationMethodSMS:
		*s = SendPortingVerificationCodesReqVerificationMethodSMS
		return nil
	case SendPortingVerificationCodesReqVerificationMethodCall:
		*s = SendPortingVerificationCodesReqVerificationMethodCall
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// SendPortingVerificationCodesUnauthorized is response for SendPortingVerificationCodes operation.
type SendPortingVerificationCodesUnauthorized struct{}

func (*SendPortingVerificationCodesUnauthorized) sendPortingVerificationCodesRes() {}

// SendPortingVerificationCodesUnprocessableEntity is response for SendPortingVerificationCodes operation.
type SendPortingVerificationCodesUnprocessableEntity struct{}

func (*SendPortingVerificationCodesUnprocessableEntity) sendPortingVerificationCodesRes() {}

// Indicates the coverage of the termination regions.
// Ref: #/components/schemas/ServicePlan
type ServicePlan string

const (
	ServicePlanGlobal ServicePlan = "global"
)

// AllValues returns all ServicePlan values.
func (ServicePlan) AllValues() []ServicePlan {
	return []ServicePlan{
		ServicePlanGlobal,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ServicePlan) MarshalText() ([]byte, error) {
	switch s {
	case ServicePlanGlobal:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ServicePlan) UnmarshalText(data []byte) error {
	switch ServicePlan(data) {
	case ServicePlanGlobal:
		*s = ServicePlanGlobal
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SharePortingOrder struct {
	Data OptPortingOrderSharingToken `json:"data"`
}

// GetData returns the value of Data.
func (s *SharePortingOrder) GetData() OptPortingOrderSharingToken {
	return s.Data
}

// SetData sets the value of Data.
func (s *SharePortingOrder) SetData(val OptPortingOrderSharingToken) {
	s.Data = val
}

func (*SharePortingOrder) sharePortingOrderRes() {}

// SharePortingOrderNotFound is response for SharePortingOrder operation.
type SharePortingOrderNotFound struct{}

func (*SharePortingOrderNotFound) sharePortingOrderRes() {}

type SharePortingOrderReq struct {
	// The number of seconds the token will be valid for.
	ExpiresInSeconds OptInt `json:"expires_in_seconds"`
	// The permissions the token will have.
	Permissions OptSharePortingOrderReqPermissions `json:"permissions"`
}

// GetExpiresInSeconds returns the value of ExpiresInSeconds.
func (s *SharePortingOrderReq) GetExpiresInSeconds() OptInt {
	return s.ExpiresInSeconds
}

// GetPermissions returns the value of Permissions.
func (s *SharePortingOrderReq) GetPermissions() OptSharePortingOrderReqPermissions {
	return s.Permissions
}

// SetExpiresInSeconds sets the value of ExpiresInSeconds.
func (s *SharePortingOrderReq) SetExpiresInSeconds(val OptInt) {
	s.ExpiresInSeconds = val
}

// SetPermissions sets the value of Permissions.
func (s *SharePortingOrderReq) SetPermissions(val OptSharePortingOrderReqPermissions) {
	s.Permissions = val
}

// The permissions the token will have.
type SharePortingOrderReqPermissions string

const (
	SharePortingOrderReqPermissionsPortingOrderDocumentRead   SharePortingOrderReqPermissions = "porting_order.document.read"
	SharePortingOrderReqPermissionsPortingOrderDocumentUpdate SharePortingOrderReqPermissions = "porting_order.document.update"
)

// AllValues returns all SharePortingOrderReqPermissions values.
func (SharePortingOrderReqPermissions) AllValues() []SharePortingOrderReqPermissions {
	return []SharePortingOrderReqPermissions{
		SharePortingOrderReqPermissionsPortingOrderDocumentRead,
		SharePortingOrderReqPermissionsPortingOrderDocumentUpdate,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SharePortingOrderReqPermissions) MarshalText() ([]byte, error) {
	switch s {
	case SharePortingOrderReqPermissionsPortingOrderDocumentRead:
		return []byte(s), nil
	case SharePortingOrderReqPermissionsPortingOrderDocumentUpdate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SharePortingOrderReqPermissions) UnmarshalText(data []byte) error {
	switch SharePortingOrderReqPermissions(data) {
	case SharePortingOrderReqPermissionsPortingOrderDocumentRead:
		*s = SharePortingOrderReqPermissionsPortingOrderDocumentRead
		return nil
	case SharePortingOrderReqPermissionsPortingOrderDocumentUpdate:
		*s = SharePortingOrderReqPermissionsPortingOrderDocumentUpdate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// SharePortingOrderUnauthorized is response for SharePortingOrder operation.
type SharePortingOrderUnauthorized struct{}

func (*SharePortingOrderUnauthorized) sharePortingOrderRes() {}

type ShowPortingLOAConfiguration struct {
	Data OptPortingLOAConfiguration `json:"data"`
}

// GetData returns the value of Data.
func (s *ShowPortingLOAConfiguration) GetData() OptPortingLOAConfiguration {
	return s.Data
}

// SetData sets the value of Data.
func (s *ShowPortingLOAConfiguration) SetData(val OptPortingLOAConfiguration) {
	s.Data = val
}

func (*ShowPortingLOAConfiguration) getLoaConfigurationRes() {}

type ShowPortingOrder struct {
	Data OptPortingOrder         `json:"data"`
	Meta OptShowPortingOrderMeta `json:"meta"`
}

// GetData returns the value of Data.
func (s *ShowPortingOrder) GetData() OptPortingOrder {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *ShowPortingOrder) GetMeta() OptShowPortingOrderMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *ShowPortingOrder) SetData(val OptPortingOrder) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *ShowPortingOrder) SetMeta(val OptShowPortingOrderMeta) {
	s.Meta = val
}

func (*ShowPortingOrder) getPortingOrderRes() {}

type ShowPortingOrderMeta struct {
	// Link to list all phone numbers.
	PhoneNumbersURL OptString `json:"phone_numbers_url"`
}

// GetPhoneNumbersURL returns the value of PhoneNumbersURL.
func (s *ShowPortingOrderMeta) GetPhoneNumbersURL() OptString {
	return s.PhoneNumbersURL
}

// SetPhoneNumbersURL sets the value of PhoneNumbersURL.
func (s *ShowPortingOrderMeta) SetPhoneNumbersURL(val OptString) {
	s.PhoneNumbersURL = val
}

type ShowPortingOrdersActivationJob struct {
	Data OptPortingOrdersActivationJob `json:"data"`
}

// GetData returns the value of Data.
func (s *ShowPortingOrdersActivationJob) GetData() OptPortingOrdersActivationJob {
	return s.Data
}

// SetData sets the value of Data.
func (s *ShowPortingOrdersActivationJob) SetData(val OptPortingOrdersActivationJob) {
	s.Data = val
}

func (*ShowPortingOrdersActivationJob) activatePortingOrderRes()             {}
func (*ShowPortingOrdersActivationJob) getPortingOrdersActivationJobRes()    {}
func (*ShowPortingOrdersActivationJob) updatePortingOrdersActivationJobRes() {}

type ShowPortingOrdersComment struct {
	Data OptPortingOrdersComment `json:"data"`
}

// GetData returns the value of Data.
func (s *ShowPortingOrdersComment) GetData() OptPortingOrdersComment {
	return s.Data
}

// SetData sets the value of Data.
func (s *ShowPortingOrdersComment) SetData(val OptPortingOrdersComment) {
	s.Data = val
}

func (*ShowPortingOrdersComment) portingOrdersIDCommentsPostRes() {}

type ShowPortingReport struct {
	Data OptPortingReport `json:"data"`
}

// GetData returns the value of Data.
func (s *ShowPortingReport) GetData() OptPortingReport {
	return s.Data
}

// SetData sets the value of Data.
func (s *ShowPortingReport) SetData(val OptPortingReport) {
	s.Data = val
}

func (*ShowPortingReport) getPortingReportRes() {}

// This object represents an Over the Air (OTA) update request. It allows tracking the current status
// of a operation that apply settings in a particular SIM card. <br/><br/>.
// Ref: #/components/schemas/SimplifiedOTAUpdate
type SimplifiedOTAUpdate struct {
	// Identifies the resource.
	ID         OptUUID   `json:"id"`
	RecordType OptString `json:"record_type"`
	// The identification UUID of the related SIM card resource.
	SimCardID OptUUID `json:"sim_card_id"`
	// Represents the type of the operation requested. This will relate directly to the source of the
	// request.
	Type   OptSimplifiedOTAUpdateType   `json:"type"`
	Status OptSimplifiedOTAUpdateStatus `json:"status"`
	// ISO 8601 formatted date-time indicating when the resource was created.
	CreatedAt OptString `json:"created_at"`
	// ISO 8601 formatted date-time indicating when the resource was updated.
	UpdatedAt OptString `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *SimplifiedOTAUpdate) GetID() OptUUID {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *SimplifiedOTAUpdate) GetRecordType() OptString {
	return s.RecordType
}

// GetSimCardID returns the value of SimCardID.
func (s *SimplifiedOTAUpdate) GetSimCardID() OptUUID {
	return s.SimCardID
}

// GetType returns the value of Type.
func (s *SimplifiedOTAUpdate) GetType() OptSimplifiedOTAUpdateType {
	return s.Type
}

// GetStatus returns the value of Status.
func (s *SimplifiedOTAUpdate) GetStatus() OptSimplifiedOTAUpdateStatus {
	return s.Status
}

// GetCreatedAt returns the value of CreatedAt.
func (s *SimplifiedOTAUpdate) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *SimplifiedOTAUpdate) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *SimplifiedOTAUpdate) SetID(val OptUUID) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *SimplifiedOTAUpdate) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetSimCardID sets the value of SimCardID.
func (s *SimplifiedOTAUpdate) SetSimCardID(val OptUUID) {
	s.SimCardID = val
}

// SetType sets the value of Type.
func (s *SimplifiedOTAUpdate) SetType(val OptSimplifiedOTAUpdateType) {
	s.Type = val
}

// SetStatus sets the value of Status.
func (s *SimplifiedOTAUpdate) SetStatus(val OptSimplifiedOTAUpdateStatus) {
	s.Status = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *SimplifiedOTAUpdate) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *SimplifiedOTAUpdate) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

type SimplifiedOTAUpdateStatus string

const (
	SimplifiedOTAUpdateStatusInProgress SimplifiedOTAUpdateStatus = "in-progress"
	SimplifiedOTAUpdateStatusCompleted  SimplifiedOTAUpdateStatus = "completed"
	SimplifiedOTAUpdateStatusFailed     SimplifiedOTAUpdateStatus = "failed"
)

// AllValues returns all SimplifiedOTAUpdateStatus values.
func (SimplifiedOTAUpdateStatus) AllValues() []SimplifiedOTAUpdateStatus {
	return []SimplifiedOTAUpdateStatus{
		SimplifiedOTAUpdateStatusInProgress,
		SimplifiedOTAUpdateStatusCompleted,
		SimplifiedOTAUpdateStatusFailed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SimplifiedOTAUpdateStatus) MarshalText() ([]byte, error) {
	switch s {
	case SimplifiedOTAUpdateStatusInProgress:
		return []byte(s), nil
	case SimplifiedOTAUpdateStatusCompleted:
		return []byte(s), nil
	case SimplifiedOTAUpdateStatusFailed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SimplifiedOTAUpdateStatus) UnmarshalText(data []byte) error {
	switch SimplifiedOTAUpdateStatus(data) {
	case SimplifiedOTAUpdateStatusInProgress:
		*s = SimplifiedOTAUpdateStatusInProgress
		return nil
	case SimplifiedOTAUpdateStatusCompleted:
		*s = SimplifiedOTAUpdateStatusCompleted
		return nil
	case SimplifiedOTAUpdateStatusFailed:
		*s = SimplifiedOTAUpdateStatusFailed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Represents the type of the operation requested. This will relate directly to the source of the
// request.
type SimplifiedOTAUpdateType string

const (
	SimplifiedOTAUpdateTypeSimCardNetworkPreferences SimplifiedOTAUpdateType = "sim_card_network_preferences"
)

// AllValues returns all SimplifiedOTAUpdateType values.
func (SimplifiedOTAUpdateType) AllValues() []SimplifiedOTAUpdateType {
	return []SimplifiedOTAUpdateType{
		SimplifiedOTAUpdateTypeSimCardNetworkPreferences,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SimplifiedOTAUpdateType) MarshalText() ([]byte, error) {
	switch s {
	case SimplifiedOTAUpdateTypeSimCardNetworkPreferences:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SimplifiedOTAUpdateType) UnmarshalText(data []byte) error {
	switch SimplifiedOTAUpdateType(data) {
	case SimplifiedOTAUpdateTypeSimCardNetworkPreferences:
		*s = SimplifiedOTAUpdateTypeSimCardNetworkPreferences
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/SipHeader
type SipHeader struct {
	// The name of the header to add.
	Name SipHeaderName `json:"name"`
	// The value of the header.
	Value string `json:"value"`
}

// GetName returns the value of Name.
func (s *SipHeader) GetName() SipHeaderName {
	return s.Name
}

// GetValue returns the value of Value.
func (s *SipHeader) GetValue() string {
	return s.Value
}

// SetName sets the value of Name.
func (s *SipHeader) SetName(val SipHeaderName) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *SipHeader) SetValue(val string) {
	s.Value = val
}

// The name of the header to add.
type SipHeaderName string

const (
	SipHeaderNameUserToUser SipHeaderName = "User-to-User"
)

// AllValues returns all SipHeaderName values.
func (SipHeaderName) AllValues() []SipHeaderName {
	return []SipHeaderName{
		SipHeaderNameUserToUser,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SipHeaderName) MarshalText() ([]byte, error) {
	switch s {
	case SipHeaderNameUserToUser:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SipHeaderName) UnmarshalText(data []byte) error {
	switch SipHeaderName(data) {
	case SipHeaderNameUserToUser:
		*s = SipHeaderNameUserToUser
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SlimListPhoneNumbersFilterStatus string

const (
	SlimListPhoneNumbersFilterStatusPurchasePending SlimListPhoneNumbersFilterStatus = "purchase_pending"
	SlimListPhoneNumbersFilterStatusPurchaseFailed  SlimListPhoneNumbersFilterStatus = "purchase_failed"
	SlimListPhoneNumbersFilterStatusPortPending     SlimListPhoneNumbersFilterStatus = "port_pending"
	SlimListPhoneNumbersFilterStatusActive          SlimListPhoneNumbersFilterStatus = "active"
	SlimListPhoneNumbersFilterStatusDeleted         SlimListPhoneNumbersFilterStatus = "deleted"
	SlimListPhoneNumbersFilterStatusPortFailed      SlimListPhoneNumbersFilterStatus = "port_failed"
	SlimListPhoneNumbersFilterStatusEmergencyOnly   SlimListPhoneNumbersFilterStatus = "emergency_only"
	SlimListPhoneNumbersFilterStatusPortedOut       SlimListPhoneNumbersFilterStatus = "ported_out"
	SlimListPhoneNumbersFilterStatusPortOutPending  SlimListPhoneNumbersFilterStatus = "port_out_pending"
)

// AllValues returns all SlimListPhoneNumbersFilterStatus values.
func (SlimListPhoneNumbersFilterStatus) AllValues() []SlimListPhoneNumbersFilterStatus {
	return []SlimListPhoneNumbersFilterStatus{
		SlimListPhoneNumbersFilterStatusPurchasePending,
		SlimListPhoneNumbersFilterStatusPurchaseFailed,
		SlimListPhoneNumbersFilterStatusPortPending,
		SlimListPhoneNumbersFilterStatusActive,
		SlimListPhoneNumbersFilterStatusDeleted,
		SlimListPhoneNumbersFilterStatusPortFailed,
		SlimListPhoneNumbersFilterStatusEmergencyOnly,
		SlimListPhoneNumbersFilterStatusPortedOut,
		SlimListPhoneNumbersFilterStatusPortOutPending,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SlimListPhoneNumbersFilterStatus) MarshalText() ([]byte, error) {
	switch s {
	case SlimListPhoneNumbersFilterStatusPurchasePending:
		return []byte(s), nil
	case SlimListPhoneNumbersFilterStatusPurchaseFailed:
		return []byte(s), nil
	case SlimListPhoneNumbersFilterStatusPortPending:
		return []byte(s), nil
	case SlimListPhoneNumbersFilterStatusActive:
		return []byte(s), nil
	case SlimListPhoneNumbersFilterStatusDeleted:
		return []byte(s), nil
	case SlimListPhoneNumbersFilterStatusPortFailed:
		return []byte(s), nil
	case SlimListPhoneNumbersFilterStatusEmergencyOnly:
		return []byte(s), nil
	case SlimListPhoneNumbersFilterStatusPortedOut:
		return []byte(s), nil
	case SlimListPhoneNumbersFilterStatusPortOutPending:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SlimListPhoneNumbersFilterStatus) UnmarshalText(data []byte) error {
	switch SlimListPhoneNumbersFilterStatus(data) {
	case SlimListPhoneNumbersFilterStatusPurchasePending:
		*s = SlimListPhoneNumbersFilterStatusPurchasePending
		return nil
	case SlimListPhoneNumbersFilterStatusPurchaseFailed:
		*s = SlimListPhoneNumbersFilterStatusPurchaseFailed
		return nil
	case SlimListPhoneNumbersFilterStatusPortPending:
		*s = SlimListPhoneNumbersFilterStatusPortPending
		return nil
	case SlimListPhoneNumbersFilterStatusActive:
		*s = SlimListPhoneNumbersFilterStatusActive
		return nil
	case SlimListPhoneNumbersFilterStatusDeleted:
		*s = SlimListPhoneNumbersFilterStatusDeleted
		return nil
	case SlimListPhoneNumbersFilterStatusPortFailed:
		*s = SlimListPhoneNumbersFilterStatusPortFailed
		return nil
	case SlimListPhoneNumbersFilterStatusEmergencyOnly:
		*s = SlimListPhoneNumbersFilterStatusEmergencyOnly
		return nil
	case SlimListPhoneNumbersFilterStatusPortedOut:
		*s = SlimListPhoneNumbersFilterStatusPortedOut
		return nil
	case SlimListPhoneNumbersFilterStatusPortOutPending:
		*s = SlimListPhoneNumbersFilterStatusPortOutPending
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SlimListPhoneNumbersFilterVoiceUsagePaymentMethod string

const (
	SlimListPhoneNumbersFilterVoiceUsagePaymentMethodPayPerMinute SlimListPhoneNumbersFilterVoiceUsagePaymentMethod = "pay-per-minute"
	SlimListPhoneNumbersFilterVoiceUsagePaymentMethodChannel      SlimListPhoneNumbersFilterVoiceUsagePaymentMethod = "channel"
)

// AllValues returns all SlimListPhoneNumbersFilterVoiceUsagePaymentMethod values.
func (SlimListPhoneNumbersFilterVoiceUsagePaymentMethod) AllValues() []SlimListPhoneNumbersFilterVoiceUsagePaymentMethod {
	return []SlimListPhoneNumbersFilterVoiceUsagePaymentMethod{
		SlimListPhoneNumbersFilterVoiceUsagePaymentMethodPayPerMinute,
		SlimListPhoneNumbersFilterVoiceUsagePaymentMethodChannel,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SlimListPhoneNumbersFilterVoiceUsagePaymentMethod) MarshalText() ([]byte, error) {
	switch s {
	case SlimListPhoneNumbersFilterVoiceUsagePaymentMethodPayPerMinute:
		return []byte(s), nil
	case SlimListPhoneNumbersFilterVoiceUsagePaymentMethodChannel:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SlimListPhoneNumbersFilterVoiceUsagePaymentMethod) UnmarshalText(data []byte) error {
	switch SlimListPhoneNumbersFilterVoiceUsagePaymentMethod(data) {
	case SlimListPhoneNumbersFilterVoiceUsagePaymentMethodPayPerMinute:
		*s = SlimListPhoneNumbersFilterVoiceUsagePaymentMethodPayPerMinute
		return nil
	case SlimListPhoneNumbersFilterVoiceUsagePaymentMethodChannel:
		*s = SlimListPhoneNumbersFilterVoiceUsagePaymentMethodChannel
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SlimListPhoneNumbersResponse struct {
	Data []SlimPhoneNumberDetailed `json:"data"`
	Meta OptPaginationMeta         `json:"meta"`
}

// GetData returns the value of Data.
func (s *SlimListPhoneNumbersResponse) GetData() []SlimPhoneNumberDetailed {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *SlimListPhoneNumbersResponse) GetMeta() OptPaginationMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *SlimListPhoneNumbersResponse) SetData(val []SlimPhoneNumberDetailed) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *SlimListPhoneNumbersResponse) SetMeta(val OptPaginationMeta) {
	s.Meta = val
}

func (*SlimListPhoneNumbersResponse) slimListPhoneNumbersRes() {}

type SlimListPhoneNumbersSort string

const (
	SlimListPhoneNumbersSortPurchasedAt        SlimListPhoneNumbersSort = "purchased_at"
	SlimListPhoneNumbersSortPhoneNumber        SlimListPhoneNumbersSort = "phone_number"
	SlimListPhoneNumbersSortConnectionName     SlimListPhoneNumbersSort = "connection_name"
	SlimListPhoneNumbersSortUsagePaymentMethod SlimListPhoneNumbersSort = "usage_payment_method"
)

// AllValues returns all SlimListPhoneNumbersSort values.
func (SlimListPhoneNumbersSort) AllValues() []SlimListPhoneNumbersSort {
	return []SlimListPhoneNumbersSort{
		SlimListPhoneNumbersSortPurchasedAt,
		SlimListPhoneNumbersSortPhoneNumber,
		SlimListPhoneNumbersSortConnectionName,
		SlimListPhoneNumbersSortUsagePaymentMethod,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SlimListPhoneNumbersSort) MarshalText() ([]byte, error) {
	switch s {
	case SlimListPhoneNumbersSortPurchasedAt:
		return []byte(s), nil
	case SlimListPhoneNumbersSortPhoneNumber:
		return []byte(s), nil
	case SlimListPhoneNumbersSortConnectionName:
		return []byte(s), nil
	case SlimListPhoneNumbersSortUsagePaymentMethod:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SlimListPhoneNumbersSort) UnmarshalText(data []byte) error {
	switch SlimListPhoneNumbersSort(data) {
	case SlimListPhoneNumbersSortPurchasedAt:
		*s = SlimListPhoneNumbersSortPurchasedAt
		return nil
	case SlimListPhoneNumbersSortPhoneNumber:
		*s = SlimListPhoneNumbersSortPhoneNumber
		return nil
	case SlimListPhoneNumbersSortConnectionName:
		*s = SlimListPhoneNumbersSortConnectionName
		return nil
	case SlimListPhoneNumbersSortUsagePaymentMethod:
		*s = SlimListPhoneNumbersSortUsagePaymentMethod
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/SlimPhoneNumberDetailed
type SlimPhoneNumberDetailed struct {
	ID OptIntId `json:"id"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	// The +E.164-formatted phone number associated with this record.
	PhoneNumber OptString `json:"phone_number"`
	// The phone number's current status.
	Status OptSlimPhoneNumberDetailedStatus `json:"status"`
	// If someone attempts to port your phone number away from Telnyx and your phone number has an
	// external PIN set, Telnyx will attempt to verify that you provided the correct external PIN to the
	// winning carrier. Note that not all carriers cooperate with this security mechanism.
	ExternalPin OptString `json:"external_pin"`
	// Identifies the connection associated with the phone number.
	ConnectionID OptString `json:"connection_id"`
	// A customer reference string for customer look ups.
	CustomerReference OptString `json:"customer_reference"`
	// Identifies the billing group associated with the phone number.
	BillingGroupID OptString `json:"billing_group_id"`
	// Indicates whether emergency services are enabled for this number.
	EmergencyEnabled OptBool `json:"emergency_enabled"`
	// Identifies the emergency address associated with the phone number.
	EmergencyAddressID OptStringInt64 `json:"emergency_address_id"`
	// Indicates if call forwarding will be enabled for this number if forwards_to and forwarding_type
	// are filled in. Defaults to true for backwards compatibility with APIV1 use of numbers endpoints.
	CallForwardingEnabled OptBool `json:"call_forwarding_enabled"`
	// Indicates whether a CNAM listing is enabled for this number.
	CnamListingEnabled OptBool `json:"cnam_listing_enabled"`
	// Indicates whether caller ID is enabled for this number.
	CallerIDNameEnabled OptBool `json:"caller_id_name_enabled"`
	// Indicates whether call recording is enabled for this number.
	CallRecordingEnabled OptBool `json:"call_recording_enabled"`
	// Indicates whether T38 Fax Gateway for inbound calls to this number.
	T38FaxGatewayEnabled OptBool `json:"t38_fax_gateway_enabled"`
	// ISO 8601 formatted date indicating when the resource was purchased.
	PurchasedAt OptString `json:"purchased_at"`
	// ISO 8601 formatted date indicating when the resource was created.
	CreatedAt OptString `json:"created_at"`
	// Deprecated field, the only value for this is 'disabled'. All routing for numbers should be
	// configured via connection settings.
	NumberLevelRouting OptSlimPhoneNumberDetailedNumberLevelRouting `json:"number_level_routing"`
	// The phone number's type.
	// Note: For numbers purchased prior to July 2023 or when fetching a number's details immediately
	// after a purchase completes, the legacy values `tollfree`, `shortcode` or `longcode` may be
	// returned instead.
	PhoneNumberType OptSlimPhoneNumberDetailedPhoneNumberType `json:"phone_number_type"`
	// The inbound_call_screening setting is a phone number configuration option variable that allows
	// users to configure their settings to block or flag fraudulent calls. It can be set to disabled,
	// reject_calls, or flag_calls. This feature has an additional per-number monthly cost associated
	// with it.
	InboundCallScreening OptSlimPhoneNumberDetailedInboundCallScreening `json:"inbound_call_screening"`
}

// GetID returns the value of ID.
func (s *SlimPhoneNumberDetailed) GetID() OptIntId {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *SlimPhoneNumberDetailed) GetRecordType() OptString {
	return s.RecordType
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *SlimPhoneNumberDetailed) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetStatus returns the value of Status.
func (s *SlimPhoneNumberDetailed) GetStatus() OptSlimPhoneNumberDetailedStatus {
	return s.Status
}

// GetExternalPin returns the value of ExternalPin.
func (s *SlimPhoneNumberDetailed) GetExternalPin() OptString {
	return s.ExternalPin
}

// GetConnectionID returns the value of ConnectionID.
func (s *SlimPhoneNumberDetailed) GetConnectionID() OptString {
	return s.ConnectionID
}

// GetCustomerReference returns the value of CustomerReference.
func (s *SlimPhoneNumberDetailed) GetCustomerReference() OptString {
	return s.CustomerReference
}

// GetBillingGroupID returns the value of BillingGroupID.
func (s *SlimPhoneNumberDetailed) GetBillingGroupID() OptString {
	return s.BillingGroupID
}

// GetEmergencyEnabled returns the value of EmergencyEnabled.
func (s *SlimPhoneNumberDetailed) GetEmergencyEnabled() OptBool {
	return s.EmergencyEnabled
}

// GetEmergencyAddressID returns the value of EmergencyAddressID.
func (s *SlimPhoneNumberDetailed) GetEmergencyAddressID() OptStringInt64 {
	return s.EmergencyAddressID
}

// GetCallForwardingEnabled returns the value of CallForwardingEnabled.
func (s *SlimPhoneNumberDetailed) GetCallForwardingEnabled() OptBool {
	return s.CallForwardingEnabled
}

// GetCnamListingEnabled returns the value of CnamListingEnabled.
func (s *SlimPhoneNumberDetailed) GetCnamListingEnabled() OptBool {
	return s.CnamListingEnabled
}

// GetCallerIDNameEnabled returns the value of CallerIDNameEnabled.
func (s *SlimPhoneNumberDetailed) GetCallerIDNameEnabled() OptBool {
	return s.CallerIDNameEnabled
}

// GetCallRecordingEnabled returns the value of CallRecordingEnabled.
func (s *SlimPhoneNumberDetailed) GetCallRecordingEnabled() OptBool {
	return s.CallRecordingEnabled
}

// GetT38FaxGatewayEnabled returns the value of T38FaxGatewayEnabled.
func (s *SlimPhoneNumberDetailed) GetT38FaxGatewayEnabled() OptBool {
	return s.T38FaxGatewayEnabled
}

// GetPurchasedAt returns the value of PurchasedAt.
func (s *SlimPhoneNumberDetailed) GetPurchasedAt() OptString {
	return s.PurchasedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *SlimPhoneNumberDetailed) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetNumberLevelRouting returns the value of NumberLevelRouting.
func (s *SlimPhoneNumberDetailed) GetNumberLevelRouting() OptSlimPhoneNumberDetailedNumberLevelRouting {
	return s.NumberLevelRouting
}

// GetPhoneNumberType returns the value of PhoneNumberType.
func (s *SlimPhoneNumberDetailed) GetPhoneNumberType() OptSlimPhoneNumberDetailedPhoneNumberType {
	return s.PhoneNumberType
}

// GetInboundCallScreening returns the value of InboundCallScreening.
func (s *SlimPhoneNumberDetailed) GetInboundCallScreening() OptSlimPhoneNumberDetailedInboundCallScreening {
	return s.InboundCallScreening
}

// SetID sets the value of ID.
func (s *SlimPhoneNumberDetailed) SetID(val OptIntId) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *SlimPhoneNumberDetailed) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *SlimPhoneNumberDetailed) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetStatus sets the value of Status.
func (s *SlimPhoneNumberDetailed) SetStatus(val OptSlimPhoneNumberDetailedStatus) {
	s.Status = val
}

// SetExternalPin sets the value of ExternalPin.
func (s *SlimPhoneNumberDetailed) SetExternalPin(val OptString) {
	s.ExternalPin = val
}

// SetConnectionID sets the value of ConnectionID.
func (s *SlimPhoneNumberDetailed) SetConnectionID(val OptString) {
	s.ConnectionID = val
}

// SetCustomerReference sets the value of CustomerReference.
func (s *SlimPhoneNumberDetailed) SetCustomerReference(val OptString) {
	s.CustomerReference = val
}

// SetBillingGroupID sets the value of BillingGroupID.
func (s *SlimPhoneNumberDetailed) SetBillingGroupID(val OptString) {
	s.BillingGroupID = val
}

// SetEmergencyEnabled sets the value of EmergencyEnabled.
func (s *SlimPhoneNumberDetailed) SetEmergencyEnabled(val OptBool) {
	s.EmergencyEnabled = val
}

// SetEmergencyAddressID sets the value of EmergencyAddressID.
func (s *SlimPhoneNumberDetailed) SetEmergencyAddressID(val OptStringInt64) {
	s.EmergencyAddressID = val
}

// SetCallForwardingEnabled sets the value of CallForwardingEnabled.
func (s *SlimPhoneNumberDetailed) SetCallForwardingEnabled(val OptBool) {
	s.CallForwardingEnabled = val
}

// SetCnamListingEnabled sets the value of CnamListingEnabled.
func (s *SlimPhoneNumberDetailed) SetCnamListingEnabled(val OptBool) {
	s.CnamListingEnabled = val
}

// SetCallerIDNameEnabled sets the value of CallerIDNameEnabled.
func (s *SlimPhoneNumberDetailed) SetCallerIDNameEnabled(val OptBool) {
	s.CallerIDNameEnabled = val
}

// SetCallRecordingEnabled sets the value of CallRecordingEnabled.
func (s *SlimPhoneNumberDetailed) SetCallRecordingEnabled(val OptBool) {
	s.CallRecordingEnabled = val
}

// SetT38FaxGatewayEnabled sets the value of T38FaxGatewayEnabled.
func (s *SlimPhoneNumberDetailed) SetT38FaxGatewayEnabled(val OptBool) {
	s.T38FaxGatewayEnabled = val
}

// SetPurchasedAt sets the value of PurchasedAt.
func (s *SlimPhoneNumberDetailed) SetPurchasedAt(val OptString) {
	s.PurchasedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *SlimPhoneNumberDetailed) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetNumberLevelRouting sets the value of NumberLevelRouting.
func (s *SlimPhoneNumberDetailed) SetNumberLevelRouting(val OptSlimPhoneNumberDetailedNumberLevelRouting) {
	s.NumberLevelRouting = val
}

// SetPhoneNumberType sets the value of PhoneNumberType.
func (s *SlimPhoneNumberDetailed) SetPhoneNumberType(val OptSlimPhoneNumberDetailedPhoneNumberType) {
	s.PhoneNumberType = val
}

// SetInboundCallScreening sets the value of InboundCallScreening.
func (s *SlimPhoneNumberDetailed) SetInboundCallScreening(val OptSlimPhoneNumberDetailedInboundCallScreening) {
	s.InboundCallScreening = val
}

// The inbound_call_screening setting is a phone number configuration option variable that allows
// users to configure their settings to block or flag fraudulent calls. It can be set to disabled,
// reject_calls, or flag_calls. This feature has an additional per-number monthly cost associated
// with it.
type SlimPhoneNumberDetailedInboundCallScreening string

const (
	SlimPhoneNumberDetailedInboundCallScreeningDisabled    SlimPhoneNumberDetailedInboundCallScreening = "disabled"
	SlimPhoneNumberDetailedInboundCallScreeningRejectCalls SlimPhoneNumberDetailedInboundCallScreening = "reject_calls"
	SlimPhoneNumberDetailedInboundCallScreeningFlagCalls   SlimPhoneNumberDetailedInboundCallScreening = "flag_calls"
)

// AllValues returns all SlimPhoneNumberDetailedInboundCallScreening values.
func (SlimPhoneNumberDetailedInboundCallScreening) AllValues() []SlimPhoneNumberDetailedInboundCallScreening {
	return []SlimPhoneNumberDetailedInboundCallScreening{
		SlimPhoneNumberDetailedInboundCallScreeningDisabled,
		SlimPhoneNumberDetailedInboundCallScreeningRejectCalls,
		SlimPhoneNumberDetailedInboundCallScreeningFlagCalls,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SlimPhoneNumberDetailedInboundCallScreening) MarshalText() ([]byte, error) {
	switch s {
	case SlimPhoneNumberDetailedInboundCallScreeningDisabled:
		return []byte(s), nil
	case SlimPhoneNumberDetailedInboundCallScreeningRejectCalls:
		return []byte(s), nil
	case SlimPhoneNumberDetailedInboundCallScreeningFlagCalls:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SlimPhoneNumberDetailedInboundCallScreening) UnmarshalText(data []byte) error {
	switch SlimPhoneNumberDetailedInboundCallScreening(data) {
	case SlimPhoneNumberDetailedInboundCallScreeningDisabled:
		*s = SlimPhoneNumberDetailedInboundCallScreeningDisabled
		return nil
	case SlimPhoneNumberDetailedInboundCallScreeningRejectCalls:
		*s = SlimPhoneNumberDetailedInboundCallScreeningRejectCalls
		return nil
	case SlimPhoneNumberDetailedInboundCallScreeningFlagCalls:
		*s = SlimPhoneNumberDetailedInboundCallScreeningFlagCalls
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Deprecated field, the only value for this is 'disabled'. All routing for numbers should be
// configured via connection settings.
type SlimPhoneNumberDetailedNumberLevelRouting string

const (
	SlimPhoneNumberDetailedNumberLevelRoutingDisabled SlimPhoneNumberDetailedNumberLevelRouting = "disabled"
)

// AllValues returns all SlimPhoneNumberDetailedNumberLevelRouting values.
func (SlimPhoneNumberDetailedNumberLevelRouting) AllValues() []SlimPhoneNumberDetailedNumberLevelRouting {
	return []SlimPhoneNumberDetailedNumberLevelRouting{
		SlimPhoneNumberDetailedNumberLevelRoutingDisabled,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SlimPhoneNumberDetailedNumberLevelRouting) MarshalText() ([]byte, error) {
	switch s {
	case SlimPhoneNumberDetailedNumberLevelRoutingDisabled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SlimPhoneNumberDetailedNumberLevelRouting) UnmarshalText(data []byte) error {
	switch SlimPhoneNumberDetailedNumberLevelRouting(data) {
	case SlimPhoneNumberDetailedNumberLevelRoutingDisabled:
		*s = SlimPhoneNumberDetailedNumberLevelRoutingDisabled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The phone number's type.
// Note: For numbers purchased prior to July 2023 or when fetching a number's details immediately
// after a purchase completes, the legacy values `tollfree`, `shortcode` or `longcode` may be
// returned instead.
type SlimPhoneNumberDetailedPhoneNumberType string

const (
	SlimPhoneNumberDetailedPhoneNumberTypeLocal      SlimPhoneNumberDetailedPhoneNumberType = "local"
	SlimPhoneNumberDetailedPhoneNumberTypeTollFree   SlimPhoneNumberDetailedPhoneNumberType = "toll_free"
	SlimPhoneNumberDetailedPhoneNumberTypeMobile     SlimPhoneNumberDetailedPhoneNumberType = "mobile"
	SlimPhoneNumberDetailedPhoneNumberTypeNational   SlimPhoneNumberDetailedPhoneNumberType = "national"
	SlimPhoneNumberDetailedPhoneNumberTypeSharedCost SlimPhoneNumberDetailedPhoneNumberType = "shared_cost"
	SlimPhoneNumberDetailedPhoneNumberTypeLandline   SlimPhoneNumberDetailedPhoneNumberType = "landline"
	SlimPhoneNumberDetailedPhoneNumberTypeTollfree   SlimPhoneNumberDetailedPhoneNumberType = "tollfree"
	SlimPhoneNumberDetailedPhoneNumberTypeShortcode  SlimPhoneNumberDetailedPhoneNumberType = "shortcode"
	SlimPhoneNumberDetailedPhoneNumberTypeLongcode   SlimPhoneNumberDetailedPhoneNumberType = "longcode"
)

// AllValues returns all SlimPhoneNumberDetailedPhoneNumberType values.
func (SlimPhoneNumberDetailedPhoneNumberType) AllValues() []SlimPhoneNumberDetailedPhoneNumberType {
	return []SlimPhoneNumberDetailedPhoneNumberType{
		SlimPhoneNumberDetailedPhoneNumberTypeLocal,
		SlimPhoneNumberDetailedPhoneNumberTypeTollFree,
		SlimPhoneNumberDetailedPhoneNumberTypeMobile,
		SlimPhoneNumberDetailedPhoneNumberTypeNational,
		SlimPhoneNumberDetailedPhoneNumberTypeSharedCost,
		SlimPhoneNumberDetailedPhoneNumberTypeLandline,
		SlimPhoneNumberDetailedPhoneNumberTypeTollfree,
		SlimPhoneNumberDetailedPhoneNumberTypeShortcode,
		SlimPhoneNumberDetailedPhoneNumberTypeLongcode,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SlimPhoneNumberDetailedPhoneNumberType) MarshalText() ([]byte, error) {
	switch s {
	case SlimPhoneNumberDetailedPhoneNumberTypeLocal:
		return []byte(s), nil
	case SlimPhoneNumberDetailedPhoneNumberTypeTollFree:
		return []byte(s), nil
	case SlimPhoneNumberDetailedPhoneNumberTypeMobile:
		return []byte(s), nil
	case SlimPhoneNumberDetailedPhoneNumberTypeNational:
		return []byte(s), nil
	case SlimPhoneNumberDetailedPhoneNumberTypeSharedCost:
		return []byte(s), nil
	case SlimPhoneNumberDetailedPhoneNumberTypeLandline:
		return []byte(s), nil
	case SlimPhoneNumberDetailedPhoneNumberTypeTollfree:
		return []byte(s), nil
	case SlimPhoneNumberDetailedPhoneNumberTypeShortcode:
		return []byte(s), nil
	case SlimPhoneNumberDetailedPhoneNumberTypeLongcode:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SlimPhoneNumberDetailedPhoneNumberType) UnmarshalText(data []byte) error {
	switch SlimPhoneNumberDetailedPhoneNumberType(data) {
	case SlimPhoneNumberDetailedPhoneNumberTypeLocal:
		*s = SlimPhoneNumberDetailedPhoneNumberTypeLocal
		return nil
	case SlimPhoneNumberDetailedPhoneNumberTypeTollFree:
		*s = SlimPhoneNumberDetailedPhoneNumberTypeTollFree
		return nil
	case SlimPhoneNumberDetailedPhoneNumberTypeMobile:
		*s = SlimPhoneNumberDetailedPhoneNumberTypeMobile
		return nil
	case SlimPhoneNumberDetailedPhoneNumberTypeNational:
		*s = SlimPhoneNumberDetailedPhoneNumberTypeNational
		return nil
	case SlimPhoneNumberDetailedPhoneNumberTypeSharedCost:
		*s = SlimPhoneNumberDetailedPhoneNumberTypeSharedCost
		return nil
	case SlimPhoneNumberDetailedPhoneNumberTypeLandline:
		*s = SlimPhoneNumberDetailedPhoneNumberTypeLandline
		return nil
	case SlimPhoneNumberDetailedPhoneNumberTypeTollfree:
		*s = SlimPhoneNumberDetailedPhoneNumberTypeTollfree
		return nil
	case SlimPhoneNumberDetailedPhoneNumberTypeShortcode:
		*s = SlimPhoneNumberDetailedPhoneNumberTypeShortcode
		return nil
	case SlimPhoneNumberDetailedPhoneNumberTypeLongcode:
		*s = SlimPhoneNumberDetailedPhoneNumberTypeLongcode
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The phone number's current status.
type SlimPhoneNumberDetailedStatus string

const (
	SlimPhoneNumberDetailedStatusPurchasePending            SlimPhoneNumberDetailedStatus = "purchase-pending"
	SlimPhoneNumberDetailedStatusPurchaseFailed             SlimPhoneNumberDetailedStatus = "purchase-failed"
	SlimPhoneNumberDetailedStatusPortPending                SlimPhoneNumberDetailedStatus = "port-pending"
	SlimPhoneNumberDetailedStatusPortFailed                 SlimPhoneNumberDetailedStatus = "port-failed"
	SlimPhoneNumberDetailedStatusActive                     SlimPhoneNumberDetailedStatus = "active"
	SlimPhoneNumberDetailedStatusDeleted                    SlimPhoneNumberDetailedStatus = "deleted"
	SlimPhoneNumberDetailedStatusEmergencyOnly              SlimPhoneNumberDetailedStatus = "emergency-only"
	SlimPhoneNumberDetailedStatusPortedOut                  SlimPhoneNumberDetailedStatus = "ported-out"
	SlimPhoneNumberDetailedStatusPortOutPending             SlimPhoneNumberDetailedStatus = "port-out-pending"
	SlimPhoneNumberDetailedStatusRequirementInfoPending     SlimPhoneNumberDetailedStatus = "requirement-info-pending"
	SlimPhoneNumberDetailedStatusRequirementInfoUnderReview SlimPhoneNumberDetailedStatus = "requirement-info-under-review"
	SlimPhoneNumberDetailedStatusRequirementInfoException   SlimPhoneNumberDetailedStatus = "requirement-info-exception"
	SlimPhoneNumberDetailedStatusProvisionPending           SlimPhoneNumberDetailedStatus = "provision-pending"
)

// AllValues returns all SlimPhoneNumberDetailedStatus values.
func (SlimPhoneNumberDetailedStatus) AllValues() []SlimPhoneNumberDetailedStatus {
	return []SlimPhoneNumberDetailedStatus{
		SlimPhoneNumberDetailedStatusPurchasePending,
		SlimPhoneNumberDetailedStatusPurchaseFailed,
		SlimPhoneNumberDetailedStatusPortPending,
		SlimPhoneNumberDetailedStatusPortFailed,
		SlimPhoneNumberDetailedStatusActive,
		SlimPhoneNumberDetailedStatusDeleted,
		SlimPhoneNumberDetailedStatusEmergencyOnly,
		SlimPhoneNumberDetailedStatusPortedOut,
		SlimPhoneNumberDetailedStatusPortOutPending,
		SlimPhoneNumberDetailedStatusRequirementInfoPending,
		SlimPhoneNumberDetailedStatusRequirementInfoUnderReview,
		SlimPhoneNumberDetailedStatusRequirementInfoException,
		SlimPhoneNumberDetailedStatusProvisionPending,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SlimPhoneNumberDetailedStatus) MarshalText() ([]byte, error) {
	switch s {
	case SlimPhoneNumberDetailedStatusPurchasePending:
		return []byte(s), nil
	case SlimPhoneNumberDetailedStatusPurchaseFailed:
		return []byte(s), nil
	case SlimPhoneNumberDetailedStatusPortPending:
		return []byte(s), nil
	case SlimPhoneNumberDetailedStatusPortFailed:
		return []byte(s), nil
	case SlimPhoneNumberDetailedStatusActive:
		return []byte(s), nil
	case SlimPhoneNumberDetailedStatusDeleted:
		return []byte(s), nil
	case SlimPhoneNumberDetailedStatusEmergencyOnly:
		return []byte(s), nil
	case SlimPhoneNumberDetailedStatusPortedOut:
		return []byte(s), nil
	case SlimPhoneNumberDetailedStatusPortOutPending:
		return []byte(s), nil
	case SlimPhoneNumberDetailedStatusRequirementInfoPending:
		return []byte(s), nil
	case SlimPhoneNumberDetailedStatusRequirementInfoUnderReview:
		return []byte(s), nil
	case SlimPhoneNumberDetailedStatusRequirementInfoException:
		return []byte(s), nil
	case SlimPhoneNumberDetailedStatusProvisionPending:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SlimPhoneNumberDetailedStatus) UnmarshalText(data []byte) error {
	switch SlimPhoneNumberDetailedStatus(data) {
	case SlimPhoneNumberDetailedStatusPurchasePending:
		*s = SlimPhoneNumberDetailedStatusPurchasePending
		return nil
	case SlimPhoneNumberDetailedStatusPurchaseFailed:
		*s = SlimPhoneNumberDetailedStatusPurchaseFailed
		return nil
	case SlimPhoneNumberDetailedStatusPortPending:
		*s = SlimPhoneNumberDetailedStatusPortPending
		return nil
	case SlimPhoneNumberDetailedStatusPortFailed:
		*s = SlimPhoneNumberDetailedStatusPortFailed
		return nil
	case SlimPhoneNumberDetailedStatusActive:
		*s = SlimPhoneNumberDetailedStatusActive
		return nil
	case SlimPhoneNumberDetailedStatusDeleted:
		*s = SlimPhoneNumberDetailedStatusDeleted
		return nil
	case SlimPhoneNumberDetailedStatusEmergencyOnly:
		*s = SlimPhoneNumberDetailedStatusEmergencyOnly
		return nil
	case SlimPhoneNumberDetailedStatusPortedOut:
		*s = SlimPhoneNumberDetailedStatusPortedOut
		return nil
	case SlimPhoneNumberDetailedStatusPortOutPending:
		*s = SlimPhoneNumberDetailedStatusPortOutPending
		return nil
	case SlimPhoneNumberDetailedStatusRequirementInfoPending:
		*s = SlimPhoneNumberDetailedStatusRequirementInfoPending
		return nil
	case SlimPhoneNumberDetailedStatusRequirementInfoUnderReview:
		*s = SlimPhoneNumberDetailedStatusRequirementInfoUnderReview
		return nil
	case SlimPhoneNumberDetailedStatusRequirementInfoException:
		*s = SlimPhoneNumberDetailedStatusRequirementInfoException
		return nil
	case SlimPhoneNumberDetailedStatusProvisionPending:
		*s = SlimPhoneNumberDetailedStatusProvisionPending
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SortApplication string

const (
	SortApplicationCreatedAt    SortApplication = "created_at"
	SortApplicationFriendlyName SortApplication = "friendly_name"
	SortApplicationActive       SortApplication = "active"
)

// AllValues returns all SortApplication values.
func (SortApplication) AllValues() []SortApplication {
	return []SortApplication{
		SortApplicationCreatedAt,
		SortApplicationFriendlyName,
		SortApplicationActive,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SortApplication) MarshalText() ([]byte, error) {
	switch s {
	case SortApplicationCreatedAt:
		return []byte(s), nil
	case SortApplicationFriendlyName:
		return []byte(s), nil
	case SortApplicationActive:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SortApplication) UnmarshalText(data []byte) error {
	switch SortApplication(data) {
	case SortApplicationCreatedAt:
		*s = SortApplicationCreatedAt
		return nil
	case SortApplicationFriendlyName:
		*s = SortApplicationFriendlyName
		return nil
	case SortApplicationActive:
		*s = SortApplicationActive
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SortConnection string

const (
	SortConnectionCreatedAt      SortConnection = "created_at"
	SortConnectionConnectionName SortConnection = "connection_name"
	SortConnectionActive         SortConnection = "active"
)

// AllValues returns all SortConnection values.
func (SortConnection) AllValues() []SortConnection {
	return []SortConnection{
		SortConnectionCreatedAt,
		SortConnectionConnectionName,
		SortConnectionActive,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SortConnection) MarshalText() ([]byte, error) {
	switch s {
	case SortConnectionCreatedAt:
		return []byte(s), nil
	case SortConnectionConnectionName:
		return []byte(s), nil
	case SortConnectionActive:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SortConnection) UnmarshalText(data []byte) error {
	switch SortConnection(data) {
	case SortConnectionCreatedAt:
		*s = SortConnectionCreatedAt
		return nil
	case SortConnectionConnectionName:
		*s = SortConnectionConnectionName
		return nil
	case SortConnectionActive:
		*s = SortConnectionActive
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SortOutboundVoiceProfile string

const (
	SortOutboundVoiceProfileEnabled                 SortOutboundVoiceProfile = "enabled"
	SortOutboundVoiceProfileMinusEnabled            SortOutboundVoiceProfile = "-enabled"
	SortOutboundVoiceProfileCreatedAt               SortOutboundVoiceProfile = "created_at"
	SortOutboundVoiceProfileMinusCreatedAt          SortOutboundVoiceProfile = "-created_at"
	SortOutboundVoiceProfileName                    SortOutboundVoiceProfile = "name"
	SortOutboundVoiceProfileMinusName               SortOutboundVoiceProfile = "-name"
	SortOutboundVoiceProfileServicePlan             SortOutboundVoiceProfile = "service_plan"
	SortOutboundVoiceProfileMinusServicePlan        SortOutboundVoiceProfile = "-service_plan"
	SortOutboundVoiceProfileTrafficType             SortOutboundVoiceProfile = "traffic_type"
	SortOutboundVoiceProfileMinusTrafficType        SortOutboundVoiceProfile = "-traffic_type"
	SortOutboundVoiceProfileUsagePaymentMethod      SortOutboundVoiceProfile = "usage_payment_method"
	SortOutboundVoiceProfileMinusUsagePaymentMethod SortOutboundVoiceProfile = "-usage_payment_method"
)

// AllValues returns all SortOutboundVoiceProfile values.
func (SortOutboundVoiceProfile) AllValues() []SortOutboundVoiceProfile {
	return []SortOutboundVoiceProfile{
		SortOutboundVoiceProfileEnabled,
		SortOutboundVoiceProfileMinusEnabled,
		SortOutboundVoiceProfileCreatedAt,
		SortOutboundVoiceProfileMinusCreatedAt,
		SortOutboundVoiceProfileName,
		SortOutboundVoiceProfileMinusName,
		SortOutboundVoiceProfileServicePlan,
		SortOutboundVoiceProfileMinusServicePlan,
		SortOutboundVoiceProfileTrafficType,
		SortOutboundVoiceProfileMinusTrafficType,
		SortOutboundVoiceProfileUsagePaymentMethod,
		SortOutboundVoiceProfileMinusUsagePaymentMethod,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SortOutboundVoiceProfile) MarshalText() ([]byte, error) {
	switch s {
	case SortOutboundVoiceProfileEnabled:
		return []byte(s), nil
	case SortOutboundVoiceProfileMinusEnabled:
		return []byte(s), nil
	case SortOutboundVoiceProfileCreatedAt:
		return []byte(s), nil
	case SortOutboundVoiceProfileMinusCreatedAt:
		return []byte(s), nil
	case SortOutboundVoiceProfileName:
		return []byte(s), nil
	case SortOutboundVoiceProfileMinusName:
		return []byte(s), nil
	case SortOutboundVoiceProfileServicePlan:
		return []byte(s), nil
	case SortOutboundVoiceProfileMinusServicePlan:
		return []byte(s), nil
	case SortOutboundVoiceProfileTrafficType:
		return []byte(s), nil
	case SortOutboundVoiceProfileMinusTrafficType:
		return []byte(s), nil
	case SortOutboundVoiceProfileUsagePaymentMethod:
		return []byte(s), nil
	case SortOutboundVoiceProfileMinusUsagePaymentMethod:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SortOutboundVoiceProfile) UnmarshalText(data []byte) error {
	switch SortOutboundVoiceProfile(data) {
	case SortOutboundVoiceProfileEnabled:
		*s = SortOutboundVoiceProfileEnabled
		return nil
	case SortOutboundVoiceProfileMinusEnabled:
		*s = SortOutboundVoiceProfileMinusEnabled
		return nil
	case SortOutboundVoiceProfileCreatedAt:
		*s = SortOutboundVoiceProfileCreatedAt
		return nil
	case SortOutboundVoiceProfileMinusCreatedAt:
		*s = SortOutboundVoiceProfileMinusCreatedAt
		return nil
	case SortOutboundVoiceProfileName:
		*s = SortOutboundVoiceProfileName
		return nil
	case SortOutboundVoiceProfileMinusName:
		*s = SortOutboundVoiceProfileMinusName
		return nil
	case SortOutboundVoiceProfileServicePlan:
		*s = SortOutboundVoiceProfileServicePlan
		return nil
	case SortOutboundVoiceProfileMinusServicePlan:
		*s = SortOutboundVoiceProfileMinusServicePlan
		return nil
	case SortOutboundVoiceProfileTrafficType:
		*s = SortOutboundVoiceProfileTrafficType
		return nil
	case SortOutboundVoiceProfileMinusTrafficType:
		*s = SortOutboundVoiceProfileMinusTrafficType
		return nil
	case SortOutboundVoiceProfileUsagePaymentMethod:
		*s = SortOutboundVoiceProfileUsagePaymentMethod
		return nil
	case SortOutboundVoiceProfileMinusUsagePaymentMethod:
		*s = SortOutboundVoiceProfileMinusUsagePaymentMethod
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Use this field to modify sound effects, for example adjust the pitch.
// Ref: #/components/schemas/SoundModifications
type SoundModifications struct {
	// Set the pitch directly, value should be > 0, default 1 (lower = lower tone).
	Pitch OptFloat64 `json:"pitch"`
	// Adjust the pitch in semitones, values should be between -14 and 14, default 0.
	Semitone OptFloat64 `json:"semitone"`
	// Adjust the pitch in octaves, values should be between -1 and 1, default 0.
	Octaves OptFloat64 `json:"octaves"`
	// The track to which the sound modifications will be applied. Accepted values are `inbound` or
	// `outbound`.
	Track OptString `json:"track"`
}

// GetPitch returns the value of Pitch.
func (s *SoundModifications) GetPitch() OptFloat64 {
	return s.Pitch
}

// GetSemitone returns the value of Semitone.
func (s *SoundModifications) GetSemitone() OptFloat64 {
	return s.Semitone
}

// GetOctaves returns the value of Octaves.
func (s *SoundModifications) GetOctaves() OptFloat64 {
	return s.Octaves
}

// GetTrack returns the value of Track.
func (s *SoundModifications) GetTrack() OptString {
	return s.Track
}

// SetPitch sets the value of Pitch.
func (s *SoundModifications) SetPitch(val OptFloat64) {
	s.Pitch = val
}

// SetSemitone sets the value of Semitone.
func (s *SoundModifications) SetSemitone(val OptFloat64) {
	s.Semitone = val
}

// SetOctaves sets the value of Octaves.
func (s *SoundModifications) SetOctaves(val OptFloat64) {
	s.Octaves = val
}

// SetTrack sets the value of Track.
func (s *SoundModifications) SetTrack(val OptString) {
	s.Track = val
}

// Ref: #/components/schemas/SourceResponse
type SourceResponse struct {
	// A JSON Pointer [RFC6901] to the associated entity in the request document.
	Pointer OptString `json:"pointer"`
	// A string indicating which URI query parameter caused the error.
	Parameter OptString `json:"parameter"`
}

// GetPointer returns the value of Pointer.
func (s *SourceResponse) GetPointer() OptString {
	return s.Pointer
}

// GetParameter returns the value of Parameter.
func (s *SourceResponse) GetParameter() OptString {
	return s.Parameter
}

// SetPointer sets the value of Pointer.
func (s *SourceResponse) SetPointer(val OptString) {
	s.Pointer = val
}

// SetParameter sets the value of Parameter.
func (s *SourceResponse) SetParameter(val OptString) {
	s.Parameter = val
}

// Ref: #/components/schemas/SpeakRequest
type SpeakRequest struct {
	// The text or SSML to be converted into speech. There is a 3,000 character limit.
	Payload string `json:"payload"`
	// The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup
	// Language (SSML).
	PayloadType OptSpeakRequestPayloadType `json:"payload_type"`
	// This parameter impacts speech quality, language options and payload types. When using `basic`,
	// only the `en-US` language and payload type `text` are allowed.
	ServiceLevel OptSpeakRequestServiceLevel `json:"service_level"`
	// When specified, it stops the current audio being played. Specify `current` to stop the current
	// audio being played, and to play the next file in the queue. Specify `all` to stop the current
	// audio file being played and to also clear all audio files from the queue.
	Stop OptString `json:"stop"`
	// The gender of the voice used to speak back the text or the specific Amazon Polly voice to be used
	// in the form of `Polly.<voice>`, e.g. `Polly.Brian`. All standard Amazon Polly voices are supported.
	Voice SpeakRequestVoice `json:"voice"`
	// The language you want spoken. This parameter is ignored when a `Polly.*` voice is specified.
	Language OptSpeakRequestLanguage `json:"language"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetPayload returns the value of Payload.
func (s *SpeakRequest) GetPayload() string {
	return s.Payload
}

// GetPayloadType returns the value of PayloadType.
func (s *SpeakRequest) GetPayloadType() OptSpeakRequestPayloadType {
	return s.PayloadType
}

// GetServiceLevel returns the value of ServiceLevel.
func (s *SpeakRequest) GetServiceLevel() OptSpeakRequestServiceLevel {
	return s.ServiceLevel
}

// GetStop returns the value of Stop.
func (s *SpeakRequest) GetStop() OptString {
	return s.Stop
}

// GetVoice returns the value of Voice.
func (s *SpeakRequest) GetVoice() SpeakRequestVoice {
	return s.Voice
}

// GetLanguage returns the value of Language.
func (s *SpeakRequest) GetLanguage() OptSpeakRequestLanguage {
	return s.Language
}

// GetClientState returns the value of ClientState.
func (s *SpeakRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *SpeakRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetPayload sets the value of Payload.
func (s *SpeakRequest) SetPayload(val string) {
	s.Payload = val
}

// SetPayloadType sets the value of PayloadType.
func (s *SpeakRequest) SetPayloadType(val OptSpeakRequestPayloadType) {
	s.PayloadType = val
}

// SetServiceLevel sets the value of ServiceLevel.
func (s *SpeakRequest) SetServiceLevel(val OptSpeakRequestServiceLevel) {
	s.ServiceLevel = val
}

// SetStop sets the value of Stop.
func (s *SpeakRequest) SetStop(val OptString) {
	s.Stop = val
}

// SetVoice sets the value of Voice.
func (s *SpeakRequest) SetVoice(val SpeakRequestVoice) {
	s.Voice = val
}

// SetLanguage sets the value of Language.
func (s *SpeakRequest) SetLanguage(val OptSpeakRequestLanguage) {
	s.Language = val
}

// SetClientState sets the value of ClientState.
func (s *SpeakRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *SpeakRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// The language you want spoken. This parameter is ignored when a `Polly.*` voice is specified.
type SpeakRequestLanguage string

const (
	SpeakRequestLanguageArb     SpeakRequestLanguage = "arb"
	SpeakRequestLanguageCmnCN   SpeakRequestLanguage = "cmn-CN"
	SpeakRequestLanguageCyGB    SpeakRequestLanguage = "cy-GB"
	SpeakRequestLanguageDaDK    SpeakRequestLanguage = "da-DK"
	SpeakRequestLanguageDeDE    SpeakRequestLanguage = "de-DE"
	SpeakRequestLanguageEnAU    SpeakRequestLanguage = "en-AU"
	SpeakRequestLanguageEnGB    SpeakRequestLanguage = "en-GB"
	SpeakRequestLanguageEnGBWLS SpeakRequestLanguage = "en-GB-WLS"
	SpeakRequestLanguageEnIN    SpeakRequestLanguage = "en-IN"
	SpeakRequestLanguageEnUS    SpeakRequestLanguage = "en-US"
	SpeakRequestLanguageEsES    SpeakRequestLanguage = "es-ES"
	SpeakRequestLanguageEsMX    SpeakRequestLanguage = "es-MX"
	SpeakRequestLanguageEsUS    SpeakRequestLanguage = "es-US"
	SpeakRequestLanguageFrCA    SpeakRequestLanguage = "fr-CA"
	SpeakRequestLanguageFrFR    SpeakRequestLanguage = "fr-FR"
	SpeakRequestLanguageHiIN    SpeakRequestLanguage = "hi-IN"
	SpeakRequestLanguageIsIS    SpeakRequestLanguage = "is-IS"
	SpeakRequestLanguageItIT    SpeakRequestLanguage = "it-IT"
	SpeakRequestLanguageJaJP    SpeakRequestLanguage = "ja-JP"
	SpeakRequestLanguageKoKR    SpeakRequestLanguage = "ko-KR"
	SpeakRequestLanguageNbNO    SpeakRequestLanguage = "nb-NO"
	SpeakRequestLanguageNlNL    SpeakRequestLanguage = "nl-NL"
	SpeakRequestLanguagePlPL    SpeakRequestLanguage = "pl-PL"
	SpeakRequestLanguagePtBR    SpeakRequestLanguage = "pt-BR"
	SpeakRequestLanguagePtPT    SpeakRequestLanguage = "pt-PT"
	SpeakRequestLanguageRoRO    SpeakRequestLanguage = "ro-RO"
	SpeakRequestLanguageRuRU    SpeakRequestLanguage = "ru-RU"
	SpeakRequestLanguageSvSE    SpeakRequestLanguage = "sv-SE"
	SpeakRequestLanguageTrTR    SpeakRequestLanguage = "tr-TR"
)

// AllValues returns all SpeakRequestLanguage values.
func (SpeakRequestLanguage) AllValues() []SpeakRequestLanguage {
	return []SpeakRequestLanguage{
		SpeakRequestLanguageArb,
		SpeakRequestLanguageCmnCN,
		SpeakRequestLanguageCyGB,
		SpeakRequestLanguageDaDK,
		SpeakRequestLanguageDeDE,
		SpeakRequestLanguageEnAU,
		SpeakRequestLanguageEnGB,
		SpeakRequestLanguageEnGBWLS,
		SpeakRequestLanguageEnIN,
		SpeakRequestLanguageEnUS,
		SpeakRequestLanguageEsES,
		SpeakRequestLanguageEsMX,
		SpeakRequestLanguageEsUS,
		SpeakRequestLanguageFrCA,
		SpeakRequestLanguageFrFR,
		SpeakRequestLanguageHiIN,
		SpeakRequestLanguageIsIS,
		SpeakRequestLanguageItIT,
		SpeakRequestLanguageJaJP,
		SpeakRequestLanguageKoKR,
		SpeakRequestLanguageNbNO,
		SpeakRequestLanguageNlNL,
		SpeakRequestLanguagePlPL,
		SpeakRequestLanguagePtBR,
		SpeakRequestLanguagePtPT,
		SpeakRequestLanguageRoRO,
		SpeakRequestLanguageRuRU,
		SpeakRequestLanguageSvSE,
		SpeakRequestLanguageTrTR,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SpeakRequestLanguage) MarshalText() ([]byte, error) {
	switch s {
	case SpeakRequestLanguageArb:
		return []byte(s), nil
	case SpeakRequestLanguageCmnCN:
		return []byte(s), nil
	case SpeakRequestLanguageCyGB:
		return []byte(s), nil
	case SpeakRequestLanguageDaDK:
		return []byte(s), nil
	case SpeakRequestLanguageDeDE:
		return []byte(s), nil
	case SpeakRequestLanguageEnAU:
		return []byte(s), nil
	case SpeakRequestLanguageEnGB:
		return []byte(s), nil
	case SpeakRequestLanguageEnGBWLS:
		return []byte(s), nil
	case SpeakRequestLanguageEnIN:
		return []byte(s), nil
	case SpeakRequestLanguageEnUS:
		return []byte(s), nil
	case SpeakRequestLanguageEsES:
		return []byte(s), nil
	case SpeakRequestLanguageEsMX:
		return []byte(s), nil
	case SpeakRequestLanguageEsUS:
		return []byte(s), nil
	case SpeakRequestLanguageFrCA:
		return []byte(s), nil
	case SpeakRequestLanguageFrFR:
		return []byte(s), nil
	case SpeakRequestLanguageHiIN:
		return []byte(s), nil
	case SpeakRequestLanguageIsIS:
		return []byte(s), nil
	case SpeakRequestLanguageItIT:
		return []byte(s), nil
	case SpeakRequestLanguageJaJP:
		return []byte(s), nil
	case SpeakRequestLanguageKoKR:
		return []byte(s), nil
	case SpeakRequestLanguageNbNO:
		return []byte(s), nil
	case SpeakRequestLanguageNlNL:
		return []byte(s), nil
	case SpeakRequestLanguagePlPL:
		return []byte(s), nil
	case SpeakRequestLanguagePtBR:
		return []byte(s), nil
	case SpeakRequestLanguagePtPT:
		return []byte(s), nil
	case SpeakRequestLanguageRoRO:
		return []byte(s), nil
	case SpeakRequestLanguageRuRU:
		return []byte(s), nil
	case SpeakRequestLanguageSvSE:
		return []byte(s), nil
	case SpeakRequestLanguageTrTR:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SpeakRequestLanguage) UnmarshalText(data []byte) error {
	switch SpeakRequestLanguage(data) {
	case SpeakRequestLanguageArb:
		*s = SpeakRequestLanguageArb
		return nil
	case SpeakRequestLanguageCmnCN:
		*s = SpeakRequestLanguageCmnCN
		return nil
	case SpeakRequestLanguageCyGB:
		*s = SpeakRequestLanguageCyGB
		return nil
	case SpeakRequestLanguageDaDK:
		*s = SpeakRequestLanguageDaDK
		return nil
	case SpeakRequestLanguageDeDE:
		*s = SpeakRequestLanguageDeDE
		return nil
	case SpeakRequestLanguageEnAU:
		*s = SpeakRequestLanguageEnAU
		return nil
	case SpeakRequestLanguageEnGB:
		*s = SpeakRequestLanguageEnGB
		return nil
	case SpeakRequestLanguageEnGBWLS:
		*s = SpeakRequestLanguageEnGBWLS
		return nil
	case SpeakRequestLanguageEnIN:
		*s = SpeakRequestLanguageEnIN
		return nil
	case SpeakRequestLanguageEnUS:
		*s = SpeakRequestLanguageEnUS
		return nil
	case SpeakRequestLanguageEsES:
		*s = SpeakRequestLanguageEsES
		return nil
	case SpeakRequestLanguageEsMX:
		*s = SpeakRequestLanguageEsMX
		return nil
	case SpeakRequestLanguageEsUS:
		*s = SpeakRequestLanguageEsUS
		return nil
	case SpeakRequestLanguageFrCA:
		*s = SpeakRequestLanguageFrCA
		return nil
	case SpeakRequestLanguageFrFR:
		*s = SpeakRequestLanguageFrFR
		return nil
	case SpeakRequestLanguageHiIN:
		*s = SpeakRequestLanguageHiIN
		return nil
	case SpeakRequestLanguageIsIS:
		*s = SpeakRequestLanguageIsIS
		return nil
	case SpeakRequestLanguageItIT:
		*s = SpeakRequestLanguageItIT
		return nil
	case SpeakRequestLanguageJaJP:
		*s = SpeakRequestLanguageJaJP
		return nil
	case SpeakRequestLanguageKoKR:
		*s = SpeakRequestLanguageKoKR
		return nil
	case SpeakRequestLanguageNbNO:
		*s = SpeakRequestLanguageNbNO
		return nil
	case SpeakRequestLanguageNlNL:
		*s = SpeakRequestLanguageNlNL
		return nil
	case SpeakRequestLanguagePlPL:
		*s = SpeakRequestLanguagePlPL
		return nil
	case SpeakRequestLanguagePtBR:
		*s = SpeakRequestLanguagePtBR
		return nil
	case SpeakRequestLanguagePtPT:
		*s = SpeakRequestLanguagePtPT
		return nil
	case SpeakRequestLanguageRoRO:
		*s = SpeakRequestLanguageRoRO
		return nil
	case SpeakRequestLanguageRuRU:
		*s = SpeakRequestLanguageRuRU
		return nil
	case SpeakRequestLanguageSvSE:
		*s = SpeakRequestLanguageSvSE
		return nil
	case SpeakRequestLanguageTrTR:
		*s = SpeakRequestLanguageTrTR
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup
// Language (SSML).
type SpeakRequestPayloadType string

const (
	SpeakRequestPayloadTypeText SpeakRequestPayloadType = "text"
	SpeakRequestPayloadTypeSsml SpeakRequestPayloadType = "ssml"
)

// AllValues returns all SpeakRequestPayloadType values.
func (SpeakRequestPayloadType) AllValues() []SpeakRequestPayloadType {
	return []SpeakRequestPayloadType{
		SpeakRequestPayloadTypeText,
		SpeakRequestPayloadTypeSsml,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SpeakRequestPayloadType) MarshalText() ([]byte, error) {
	switch s {
	case SpeakRequestPayloadTypeText:
		return []byte(s), nil
	case SpeakRequestPayloadTypeSsml:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SpeakRequestPayloadType) UnmarshalText(data []byte) error {
	switch SpeakRequestPayloadType(data) {
	case SpeakRequestPayloadTypeText:
		*s = SpeakRequestPayloadTypeText
		return nil
	case SpeakRequestPayloadTypeSsml:
		*s = SpeakRequestPayloadTypeSsml
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// This parameter impacts speech quality, language options and payload types. When using `basic`,
// only the `en-US` language and payload type `text` are allowed.
type SpeakRequestServiceLevel string

const (
	SpeakRequestServiceLevelBasic   SpeakRequestServiceLevel = "basic"
	SpeakRequestServiceLevelPremium SpeakRequestServiceLevel = "premium"
)

// AllValues returns all SpeakRequestServiceLevel values.
func (SpeakRequestServiceLevel) AllValues() []SpeakRequestServiceLevel {
	return []SpeakRequestServiceLevel{
		SpeakRequestServiceLevelBasic,
		SpeakRequestServiceLevelPremium,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SpeakRequestServiceLevel) MarshalText() ([]byte, error) {
	switch s {
	case SpeakRequestServiceLevelBasic:
		return []byte(s), nil
	case SpeakRequestServiceLevelPremium:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SpeakRequestServiceLevel) UnmarshalText(data []byte) error {
	switch SpeakRequestServiceLevel(data) {
	case SpeakRequestServiceLevelBasic:
		*s = SpeakRequestServiceLevelBasic
		return nil
	case SpeakRequestServiceLevelPremium:
		*s = SpeakRequestServiceLevelPremium
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The gender of the voice used to speak back the text or the specific Amazon Polly voice to be used
// in the form of `Polly.<voice>`, e.g. `Polly.Brian`. All standard Amazon Polly voices are supported.
type SpeakRequestVoice string

const (
	SpeakRequestVoiceMale   SpeakRequestVoice = "male"
	SpeakRequestVoiceFemale SpeakRequestVoice = "female"
)

// AllValues returns all SpeakRequestVoice values.
func (SpeakRequestVoice) AllValues() []SpeakRequestVoice {
	return []SpeakRequestVoice{
		SpeakRequestVoiceMale,
		SpeakRequestVoiceFemale,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SpeakRequestVoice) MarshalText() ([]byte, error) {
	switch s {
	case SpeakRequestVoiceMale:
		return []byte(s), nil
	case SpeakRequestVoiceFemale:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SpeakRequestVoice) UnmarshalText(data []byte) error {
	switch SpeakRequestVoice(data) {
	case SpeakRequestVoiceMale:
		*s = SpeakRequestVoiceMale
		return nil
	case SpeakRequestVoiceFemale:
		*s = SpeakRequestVoiceFemale
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/StartForkingRequest
type StartForkingRequest struct {
	// The network target, <udp:ip_address:port>, where the call's RTP media packets should be forwarded.
	// Both incoming and outgoing media packets will be delivered to the specified target, and
	// information about the stream will be included in the encapsulation protocol header, including the
	// direction (0 = inbound; 1 = outbound), leg (0 = A-leg; 1 = B-leg), and call_leg_id.
	Target OptString `json:"target"`
	// The network target, <udp:ip_address:port>, where the call's incoming RTP media packets should be
	// forwarded.
	Rx OptString `json:"rx"`
	// Optionally specify a media type to stream. If `decrypted` selected, Telnyx will decrypt incoming
	// SIP media before forking to the target. `rx` and `tx` are required fields if `decrypted` selected.
	StreamType OptStartForkingRequestStreamType `json:"stream_type"`
	// The network target, <udp:ip_address:port>, where the call's outgoing RTP media packets should be
	// forwarded.
	Tx OptString `json:"tx"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetTarget returns the value of Target.
func (s *StartForkingRequest) GetTarget() OptString {
	return s.Target
}

// GetRx returns the value of Rx.
func (s *StartForkingRequest) GetRx() OptString {
	return s.Rx
}

// GetStreamType returns the value of StreamType.
func (s *StartForkingRequest) GetStreamType() OptStartForkingRequestStreamType {
	return s.StreamType
}

// GetTx returns the value of Tx.
func (s *StartForkingRequest) GetTx() OptString {
	return s.Tx
}

// GetClientState returns the value of ClientState.
func (s *StartForkingRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *StartForkingRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetTarget sets the value of Target.
func (s *StartForkingRequest) SetTarget(val OptString) {
	s.Target = val
}

// SetRx sets the value of Rx.
func (s *StartForkingRequest) SetRx(val OptString) {
	s.Rx = val
}

// SetStreamType sets the value of StreamType.
func (s *StartForkingRequest) SetStreamType(val OptStartForkingRequestStreamType) {
	s.StreamType = val
}

// SetTx sets the value of Tx.
func (s *StartForkingRequest) SetTx(val OptString) {
	s.Tx = val
}

// SetClientState sets the value of ClientState.
func (s *StartForkingRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *StartForkingRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// Optionally specify a media type to stream. If `decrypted` selected, Telnyx will decrypt incoming
// SIP media before forking to the target. `rx` and `tx` are required fields if `decrypted` selected.
type StartForkingRequestStreamType string

const (
	StartForkingRequestStreamTypeRaw       StartForkingRequestStreamType = "raw"
	StartForkingRequestStreamTypeDecrypted StartForkingRequestStreamType = "decrypted"
)

// AllValues returns all StartForkingRequestStreamType values.
func (StartForkingRequestStreamType) AllValues() []StartForkingRequestStreamType {
	return []StartForkingRequestStreamType{
		StartForkingRequestStreamTypeRaw,
		StartForkingRequestStreamTypeDecrypted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StartForkingRequestStreamType) MarshalText() ([]byte, error) {
	switch s {
	case StartForkingRequestStreamTypeRaw:
		return []byte(s), nil
	case StartForkingRequestStreamTypeDecrypted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StartForkingRequestStreamType) UnmarshalText(data []byte) error {
	switch StartForkingRequestStreamType(data) {
	case StartForkingRequestStreamTypeRaw:
		*s = StartForkingRequestStreamTypeRaw
		return nil
	case StartForkingRequestStreamTypeDecrypted:
		*s = StartForkingRequestStreamTypeDecrypted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/StartRecordingRequest
type StartRecordingRequest struct {
	// The audio file format used when storing the call recording. Can be either `mp3` or `wav`.
	Format StartRecordingRequestFormat `json:"format"`
	// When `dual`, final audio file will be stereo recorded with the first leg on channel A, and the
	// rest on channel B.
	Channels StartRecordingRequestChannels `json:"channels"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
	// If enabled, a beep sound will be played at the start of a recording.
	PlayBeep OptBool `json:"play_beep"`
	// Defines the maximum length for the recording in seconds. The minimum value is 0. The maximum value
	// is 14400. The default value is 0 (infinite).
	MaxLength OptInt32 `json:"max_length"`
	// The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected.
	//  The timer only starts when the speech is detected. Please note that call transcription is used to
	// detect silence and the related charge will be applied. The minimum value is 0. The default value
	// is 0 (infinite).
	TimeoutSecs OptInt32 `json:"timeout_secs"`
	// The audio track to be recorded. Can be either `both`, `inbound` or `outbound`. If only single
	// track is specified (`inbound`, `outbound`), `channels` configuration is ignored and it will be
	// recorded as mono (single channel).
	RecordingTrack OptStartRecordingRequestRecordingTrack `json:"recording_track"`
	// When set to `trim-silence`, silence will be removed from the beginning and end of the recording.
	Trim OptStartRecordingRequestTrim `json:"trim"`
	// The custom recording file name to be used instead of the default `call_leg_id`. Telnyx will still
	// add a Unix timestamp suffix.
	CustomFileName OptString `json:"custom_file_name"`
}

// GetFormat returns the value of Format.
func (s *StartRecordingRequest) GetFormat() StartRecordingRequestFormat {
	return s.Format
}

// GetChannels returns the value of Channels.
func (s *StartRecordingRequest) GetChannels() StartRecordingRequestChannels {
	return s.Channels
}

// GetClientState returns the value of ClientState.
func (s *StartRecordingRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *StartRecordingRequest) GetCommandID() OptString {
	return s.CommandID
}

// GetPlayBeep returns the value of PlayBeep.
func (s *StartRecordingRequest) GetPlayBeep() OptBool {
	return s.PlayBeep
}

// GetMaxLength returns the value of MaxLength.
func (s *StartRecordingRequest) GetMaxLength() OptInt32 {
	return s.MaxLength
}

// GetTimeoutSecs returns the value of TimeoutSecs.
func (s *StartRecordingRequest) GetTimeoutSecs() OptInt32 {
	return s.TimeoutSecs
}

// GetRecordingTrack returns the value of RecordingTrack.
func (s *StartRecordingRequest) GetRecordingTrack() OptStartRecordingRequestRecordingTrack {
	return s.RecordingTrack
}

// GetTrim returns the value of Trim.
func (s *StartRecordingRequest) GetTrim() OptStartRecordingRequestTrim {
	return s.Trim
}

// GetCustomFileName returns the value of CustomFileName.
func (s *StartRecordingRequest) GetCustomFileName() OptString {
	return s.CustomFileName
}

// SetFormat sets the value of Format.
func (s *StartRecordingRequest) SetFormat(val StartRecordingRequestFormat) {
	s.Format = val
}

// SetChannels sets the value of Channels.
func (s *StartRecordingRequest) SetChannels(val StartRecordingRequestChannels) {
	s.Channels = val
}

// SetClientState sets the value of ClientState.
func (s *StartRecordingRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *StartRecordingRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// SetPlayBeep sets the value of PlayBeep.
func (s *StartRecordingRequest) SetPlayBeep(val OptBool) {
	s.PlayBeep = val
}

// SetMaxLength sets the value of MaxLength.
func (s *StartRecordingRequest) SetMaxLength(val OptInt32) {
	s.MaxLength = val
}

// SetTimeoutSecs sets the value of TimeoutSecs.
func (s *StartRecordingRequest) SetTimeoutSecs(val OptInt32) {
	s.TimeoutSecs = val
}

// SetRecordingTrack sets the value of RecordingTrack.
func (s *StartRecordingRequest) SetRecordingTrack(val OptStartRecordingRequestRecordingTrack) {
	s.RecordingTrack = val
}

// SetTrim sets the value of Trim.
func (s *StartRecordingRequest) SetTrim(val OptStartRecordingRequestTrim) {
	s.Trim = val
}

// SetCustomFileName sets the value of CustomFileName.
func (s *StartRecordingRequest) SetCustomFileName(val OptString) {
	s.CustomFileName = val
}

// When `dual`, final audio file will be stereo recorded with the first leg on channel A, and the
// rest on channel B.
type StartRecordingRequestChannels string

const (
	StartRecordingRequestChannelsSingle StartRecordingRequestChannels = "single"
	StartRecordingRequestChannelsDual   StartRecordingRequestChannels = "dual"
)

// AllValues returns all StartRecordingRequestChannels values.
func (StartRecordingRequestChannels) AllValues() []StartRecordingRequestChannels {
	return []StartRecordingRequestChannels{
		StartRecordingRequestChannelsSingle,
		StartRecordingRequestChannelsDual,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StartRecordingRequestChannels) MarshalText() ([]byte, error) {
	switch s {
	case StartRecordingRequestChannelsSingle:
		return []byte(s), nil
	case StartRecordingRequestChannelsDual:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StartRecordingRequestChannels) UnmarshalText(data []byte) error {
	switch StartRecordingRequestChannels(data) {
	case StartRecordingRequestChannelsSingle:
		*s = StartRecordingRequestChannelsSingle
		return nil
	case StartRecordingRequestChannelsDual:
		*s = StartRecordingRequestChannelsDual
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The audio file format used when storing the call recording. Can be either `mp3` or `wav`.
type StartRecordingRequestFormat string

const (
	StartRecordingRequestFormatWav StartRecordingRequestFormat = "wav"
	StartRecordingRequestFormatMp3 StartRecordingRequestFormat = "mp3"
)

// AllValues returns all StartRecordingRequestFormat values.
func (StartRecordingRequestFormat) AllValues() []StartRecordingRequestFormat {
	return []StartRecordingRequestFormat{
		StartRecordingRequestFormatWav,
		StartRecordingRequestFormatMp3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StartRecordingRequestFormat) MarshalText() ([]byte, error) {
	switch s {
	case StartRecordingRequestFormatWav:
		return []byte(s), nil
	case StartRecordingRequestFormatMp3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StartRecordingRequestFormat) UnmarshalText(data []byte) error {
	switch StartRecordingRequestFormat(data) {
	case StartRecordingRequestFormatWav:
		*s = StartRecordingRequestFormatWav
		return nil
	case StartRecordingRequestFormatMp3:
		*s = StartRecordingRequestFormatMp3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The audio track to be recorded. Can be either `both`, `inbound` or `outbound`. If only single
// track is specified (`inbound`, `outbound`), `channels` configuration is ignored and it will be
// recorded as mono (single channel).
type StartRecordingRequestRecordingTrack string

const (
	StartRecordingRequestRecordingTrackBoth     StartRecordingRequestRecordingTrack = "both"
	StartRecordingRequestRecordingTrackInbound  StartRecordingRequestRecordingTrack = "inbound"
	StartRecordingRequestRecordingTrackOutbound StartRecordingRequestRecordingTrack = "outbound"
)

// AllValues returns all StartRecordingRequestRecordingTrack values.
func (StartRecordingRequestRecordingTrack) AllValues() []StartRecordingRequestRecordingTrack {
	return []StartRecordingRequestRecordingTrack{
		StartRecordingRequestRecordingTrackBoth,
		StartRecordingRequestRecordingTrackInbound,
		StartRecordingRequestRecordingTrackOutbound,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StartRecordingRequestRecordingTrack) MarshalText() ([]byte, error) {
	switch s {
	case StartRecordingRequestRecordingTrackBoth:
		return []byte(s), nil
	case StartRecordingRequestRecordingTrackInbound:
		return []byte(s), nil
	case StartRecordingRequestRecordingTrackOutbound:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StartRecordingRequestRecordingTrack) UnmarshalText(data []byte) error {
	switch StartRecordingRequestRecordingTrack(data) {
	case StartRecordingRequestRecordingTrackBoth:
		*s = StartRecordingRequestRecordingTrackBoth
		return nil
	case StartRecordingRequestRecordingTrackInbound:
		*s = StartRecordingRequestRecordingTrackInbound
		return nil
	case StartRecordingRequestRecordingTrackOutbound:
		*s = StartRecordingRequestRecordingTrackOutbound
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// When set to `trim-silence`, silence will be removed from the beginning and end of the recording.
type StartRecordingRequestTrim string

const (
	StartRecordingRequestTrimTrimSilence StartRecordingRequestTrim = "trim-silence"
)

// AllValues returns all StartRecordingRequestTrim values.
func (StartRecordingRequestTrim) AllValues() []StartRecordingRequestTrim {
	return []StartRecordingRequestTrim{
		StartRecordingRequestTrimTrimSilence,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StartRecordingRequestTrim) MarshalText() ([]byte, error) {
	switch s {
	case StartRecordingRequestTrimTrimSilence:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StartRecordingRequestTrim) UnmarshalText(data []byte) error {
	switch StartRecordingRequestTrim(data) {
	case StartRecordingRequestTrimTrimSilence:
		*s = StartRecordingRequestTrimTrimSilence
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/StartStreamingRequest
type StartStreamingRequest struct {
	// The destination WebSocket address where the stream is going to be delivered.
	StreamURL OptString `json:"stream_url"`
	// Specifies which track should be streamed.
	StreamTrack OptStartStreamingRequestStreamTrack `json:"stream_track"`
	// Enables Dialogflow for the current call. The default value is false.
	EnableDialogflow OptBool             `json:"enable_dialogflow"`
	DialogflowConfig OptDialogflowConfig `json:"dialogflow_config"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetStreamURL returns the value of StreamURL.
func (s *StartStreamingRequest) GetStreamURL() OptString {
	return s.StreamURL
}

// GetStreamTrack returns the value of StreamTrack.
func (s *StartStreamingRequest) GetStreamTrack() OptStartStreamingRequestStreamTrack {
	return s.StreamTrack
}

// GetEnableDialogflow returns the value of EnableDialogflow.
func (s *StartStreamingRequest) GetEnableDialogflow() OptBool {
	return s.EnableDialogflow
}

// GetDialogflowConfig returns the value of DialogflowConfig.
func (s *StartStreamingRequest) GetDialogflowConfig() OptDialogflowConfig {
	return s.DialogflowConfig
}

// GetClientState returns the value of ClientState.
func (s *StartStreamingRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *StartStreamingRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetStreamURL sets the value of StreamURL.
func (s *StartStreamingRequest) SetStreamURL(val OptString) {
	s.StreamURL = val
}

// SetStreamTrack sets the value of StreamTrack.
func (s *StartStreamingRequest) SetStreamTrack(val OptStartStreamingRequestStreamTrack) {
	s.StreamTrack = val
}

// SetEnableDialogflow sets the value of EnableDialogflow.
func (s *StartStreamingRequest) SetEnableDialogflow(val OptBool) {
	s.EnableDialogflow = val
}

// SetDialogflowConfig sets the value of DialogflowConfig.
func (s *StartStreamingRequest) SetDialogflowConfig(val OptDialogflowConfig) {
	s.DialogflowConfig = val
}

// SetClientState sets the value of ClientState.
func (s *StartStreamingRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *StartStreamingRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// Specifies which track should be streamed.
type StartStreamingRequestStreamTrack string

const (
	StartStreamingRequestStreamTrackInboundTrack  StartStreamingRequestStreamTrack = "inbound_track"
	StartStreamingRequestStreamTrackOutboundTrack StartStreamingRequestStreamTrack = "outbound_track"
	StartStreamingRequestStreamTrackBothTracks    StartStreamingRequestStreamTrack = "both_tracks"
)

// AllValues returns all StartStreamingRequestStreamTrack values.
func (StartStreamingRequestStreamTrack) AllValues() []StartStreamingRequestStreamTrack {
	return []StartStreamingRequestStreamTrack{
		StartStreamingRequestStreamTrackInboundTrack,
		StartStreamingRequestStreamTrackOutboundTrack,
		StartStreamingRequestStreamTrackBothTracks,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StartStreamingRequestStreamTrack) MarshalText() ([]byte, error) {
	switch s {
	case StartStreamingRequestStreamTrackInboundTrack:
		return []byte(s), nil
	case StartStreamingRequestStreamTrackOutboundTrack:
		return []byte(s), nil
	case StartStreamingRequestStreamTrackBothTracks:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StartStreamingRequestStreamTrack) UnmarshalText(data []byte) error {
	switch StartStreamingRequestStreamTrack(data) {
	case StartStreamingRequestStreamTrackInboundTrack:
		*s = StartStreamingRequestStreamTrackInboundTrack
		return nil
	case StartStreamingRequestStreamTrackOutboundTrack:
		*s = StartStreamingRequestStreamTrackOutboundTrack
		return nil
	case StartStreamingRequestStreamTrackBothTracks:
		*s = StartStreamingRequestStreamTrackBothTracks
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Status string

const (
	StatusCanceled  Status = "canceled"
	StatusCompleted Status = "completed"
	StatusFailed    Status = "failed"
	StatusBusy      Status = "busy"
	StatusNoAnswer  Status = "no-answer"
)

// AllValues returns all Status values.
func (Status) AllValues() []Status {
	return []Status{
		StatusCanceled,
		StatusCompleted,
		StatusFailed,
		StatusBusy,
		StatusNoAnswer,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Status) MarshalText() ([]byte, error) {
	switch s {
	case StatusCanceled:
		return []byte(s), nil
	case StatusCompleted:
		return []byte(s), nil
	case StatusFailed:
		return []byte(s), nil
	case StatusBusy:
		return []byte(s), nil
	case StatusNoAnswer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Status) UnmarshalText(data []byte) error {
	switch Status(data) {
	case StatusCanceled:
		*s = StatusCanceled
		return nil
	case StatusCompleted:
		*s = StatusCompleted
		return nil
	case StatusFailed:
		*s = StatusFailed
		return nil
	case StatusBusy:
		*s = StatusBusy
		return nil
	case StatusNoAnswer:
		*s = StatusNoAnswer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/StopForkingRequest
type StopForkingRequest struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
	// Optionally specify a `stream_type`. This should match the `stream_type` that was used in
	// `fork_start` command to properly stop the fork.
	StreamType OptStopForkingRequestStreamType `json:"stream_type"`
}

// GetClientState returns the value of ClientState.
func (s *StopForkingRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *StopForkingRequest) GetCommandID() OptString {
	return s.CommandID
}

// GetStreamType returns the value of StreamType.
func (s *StopForkingRequest) GetStreamType() OptStopForkingRequestStreamType {
	return s.StreamType
}

// SetClientState sets the value of ClientState.
func (s *StopForkingRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *StopForkingRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// SetStreamType sets the value of StreamType.
func (s *StopForkingRequest) SetStreamType(val OptStopForkingRequestStreamType) {
	s.StreamType = val
}

// Optionally specify a `stream_type`. This should match the `stream_type` that was used in
// `fork_start` command to properly stop the fork.
type StopForkingRequestStreamType string

const (
	StopForkingRequestStreamTypeRaw       StopForkingRequestStreamType = "raw"
	StopForkingRequestStreamTypeDecrypted StopForkingRequestStreamType = "decrypted"
)

// AllValues returns all StopForkingRequestStreamType values.
func (StopForkingRequestStreamType) AllValues() []StopForkingRequestStreamType {
	return []StopForkingRequestStreamType{
		StopForkingRequestStreamTypeRaw,
		StopForkingRequestStreamTypeDecrypted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StopForkingRequestStreamType) MarshalText() ([]byte, error) {
	switch s {
	case StopForkingRequestStreamTypeRaw:
		return []byte(s), nil
	case StopForkingRequestStreamTypeDecrypted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StopForkingRequestStreamType) UnmarshalText(data []byte) error {
	switch StopForkingRequestStreamType(data) {
	case StopForkingRequestStreamTypeRaw:
		*s = StopForkingRequestStreamTypeRaw
		return nil
	case StopForkingRequestStreamTypeDecrypted:
		*s = StopForkingRequestStreamTypeDecrypted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/StopGatherRequest
type StopGatherRequest struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetClientState returns the value of ClientState.
func (s *StopGatherRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *StopGatherRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetClientState sets the value of ClientState.
func (s *StopGatherRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *StopGatherRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// Ref: #/components/schemas/StopRecordingRequest
type StopRecordingRequest struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetClientState returns the value of ClientState.
func (s *StopRecordingRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *StopRecordingRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetClientState sets the value of ClientState.
func (s *StopRecordingRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *StopRecordingRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// Ref: #/components/schemas/StopStreamingRequest
type StopStreamingRequest struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetClientState returns the value of ClientState.
func (s *StopStreamingRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *StopStreamingRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetClientState sets the value of ClientState.
func (s *StopStreamingRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *StopStreamingRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// Ref: #/components/schemas/SubNumberOrderRegulatoryRequirementWithValue
type SubNumberOrderRegulatoryRequirementWithValue struct {
	RecordType OptString `json:"record_type"`
	// Unique id for a requirement.
	RequirementID OptUUID                                                  `json:"requirement_id"`
	FieldType     OptSubNumberOrderRegulatoryRequirementWithValueFieldType `json:"field_type"`
	// The value of the requirement, this could be an id to a resource or a string value.
	FieldValue OptString `json:"field_value"`
}

// GetRecordType returns the value of RecordType.
func (s *SubNumberOrderRegulatoryRequirementWithValue) GetRecordType() OptString {
	return s.RecordType
}

// GetRequirementID returns the value of RequirementID.
func (s *SubNumberOrderRegulatoryRequirementWithValue) GetRequirementID() OptUUID {
	return s.RequirementID
}

// GetFieldType returns the value of FieldType.
func (s *SubNumberOrderRegulatoryRequirementWithValue) GetFieldType() OptSubNumberOrderRegulatoryRequirementWithValueFieldType {
	return s.FieldType
}

// GetFieldValue returns the value of FieldValue.
func (s *SubNumberOrderRegulatoryRequirementWithValue) GetFieldValue() OptString {
	return s.FieldValue
}

// SetRecordType sets the value of RecordType.
func (s *SubNumberOrderRegulatoryRequirementWithValue) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetRequirementID sets the value of RequirementID.
func (s *SubNumberOrderRegulatoryRequirementWithValue) SetRequirementID(val OptUUID) {
	s.RequirementID = val
}

// SetFieldType sets the value of FieldType.
func (s *SubNumberOrderRegulatoryRequirementWithValue) SetFieldType(val OptSubNumberOrderRegulatoryRequirementWithValueFieldType) {
	s.FieldType = val
}

// SetFieldValue sets the value of FieldValue.
func (s *SubNumberOrderRegulatoryRequirementWithValue) SetFieldValue(val OptString) {
	s.FieldValue = val
}

type SubNumberOrderRegulatoryRequirementWithValueFieldType string

const (
	SubNumberOrderRegulatoryRequirementWithValueFieldTypeTextual  SubNumberOrderRegulatoryRequirementWithValueFieldType = "textual"
	SubNumberOrderRegulatoryRequirementWithValueFieldTypeDatetime SubNumberOrderRegulatoryRequirementWithValueFieldType = "datetime"
	SubNumberOrderRegulatoryRequirementWithValueFieldTypeAddress  SubNumberOrderRegulatoryRequirementWithValueFieldType = "address"
	SubNumberOrderRegulatoryRequirementWithValueFieldTypeDocument SubNumberOrderRegulatoryRequirementWithValueFieldType = "document"
)

// AllValues returns all SubNumberOrderRegulatoryRequirementWithValueFieldType values.
func (SubNumberOrderRegulatoryRequirementWithValueFieldType) AllValues() []SubNumberOrderRegulatoryRequirementWithValueFieldType {
	return []SubNumberOrderRegulatoryRequirementWithValueFieldType{
		SubNumberOrderRegulatoryRequirementWithValueFieldTypeTextual,
		SubNumberOrderRegulatoryRequirementWithValueFieldTypeDatetime,
		SubNumberOrderRegulatoryRequirementWithValueFieldTypeAddress,
		SubNumberOrderRegulatoryRequirementWithValueFieldTypeDocument,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubNumberOrderRegulatoryRequirementWithValueFieldType) MarshalText() ([]byte, error) {
	switch s {
	case SubNumberOrderRegulatoryRequirementWithValueFieldTypeTextual:
		return []byte(s), nil
	case SubNumberOrderRegulatoryRequirementWithValueFieldTypeDatetime:
		return []byte(s), nil
	case SubNumberOrderRegulatoryRequirementWithValueFieldTypeAddress:
		return []byte(s), nil
	case SubNumberOrderRegulatoryRequirementWithValueFieldTypeDocument:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubNumberOrderRegulatoryRequirementWithValueFieldType) UnmarshalText(data []byte) error {
	switch SubNumberOrderRegulatoryRequirementWithValueFieldType(data) {
	case SubNumberOrderRegulatoryRequirementWithValueFieldTypeTextual:
		*s = SubNumberOrderRegulatoryRequirementWithValueFieldTypeTextual
		return nil
	case SubNumberOrderRegulatoryRequirementWithValueFieldTypeDatetime:
		*s = SubNumberOrderRegulatoryRequirementWithValueFieldTypeDatetime
		return nil
	case SubNumberOrderRegulatoryRequirementWithValueFieldTypeAddress:
		*s = SubNumberOrderRegulatoryRequirementWithValueFieldTypeAddress
		return nil
	case SubNumberOrderRegulatoryRequirementWithValueFieldTypeDocument:
		*s = SubNumberOrderRegulatoryRequirementWithValueFieldTypeDocument
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SubRequestByPortingOrder struct {
	Data OptGetSubRequestByPortingOrder `json:"data"`
}

// GetData returns the value of Data.
func (s *SubRequestByPortingOrder) GetData() OptGetSubRequestByPortingOrder {
	return s.Data
}

// SetData sets the value of Data.
func (s *SubRequestByPortingOrder) SetData(val OptGetSubRequestByPortingOrder) {
	s.Data = val
}

func (*SubRequestByPortingOrder) getPortingOrderSubRequestRes() {}

// Ref: #/components/schemas/TelephonyCredential
type TelephonyCredential struct {
	// Identifies the resource.
	ID OptString `json:"id"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	Name       OptString `json:"name"`
	// Identifies the resource this credential is associated with.
	ResourceID OptString `json:"resource_id"`
	// Defaults to false.
	Expired OptBool `json:"expired"`
	// The randomly generated SIP username for the credential.
	SipUsername OptString `json:"sip_username"`
	// The randomly generated SIP password for the credential.
	SipPassword OptString `json:"sip_password"`
	// ISO-8601 formatted date indicating when the resource was created.
	CreatedAt OptString `json:"created_at"`
	// ISO-8601 formatted date indicating when the resource was updated.
	UpdatedAt OptString `json:"updated_at"`
	// ISO-8601 formatted date indicating when the resource will expire.
	ExpiresAt OptString `json:"expires_at"`
}

// GetID returns the value of ID.
func (s *TelephonyCredential) GetID() OptString {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *TelephonyCredential) GetRecordType() OptString {
	return s.RecordType
}

// GetName returns the value of Name.
func (s *TelephonyCredential) GetName() OptString {
	return s.Name
}

// GetResourceID returns the value of ResourceID.
func (s *TelephonyCredential) GetResourceID() OptString {
	return s.ResourceID
}

// GetExpired returns the value of Expired.
func (s *TelephonyCredential) GetExpired() OptBool {
	return s.Expired
}

// GetSipUsername returns the value of SipUsername.
func (s *TelephonyCredential) GetSipUsername() OptString {
	return s.SipUsername
}

// GetSipPassword returns the value of SipPassword.
func (s *TelephonyCredential) GetSipPassword() OptString {
	return s.SipPassword
}

// GetCreatedAt returns the value of CreatedAt.
func (s *TelephonyCredential) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *TelephonyCredential) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *TelephonyCredential) GetExpiresAt() OptString {
	return s.ExpiresAt
}

// SetID sets the value of ID.
func (s *TelephonyCredential) SetID(val OptString) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *TelephonyCredential) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetName sets the value of Name.
func (s *TelephonyCredential) SetName(val OptString) {
	s.Name = val
}

// SetResourceID sets the value of ResourceID.
func (s *TelephonyCredential) SetResourceID(val OptString) {
	s.ResourceID = val
}

// SetExpired sets the value of Expired.
func (s *TelephonyCredential) SetExpired(val OptBool) {
	s.Expired = val
}

// SetSipUsername sets the value of SipUsername.
func (s *TelephonyCredential) SetSipUsername(val OptString) {
	s.SipUsername = val
}

// SetSipPassword sets the value of SipPassword.
func (s *TelephonyCredential) SetSipPassword(val OptString) {
	s.SipPassword = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *TelephonyCredential) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *TelephonyCredential) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *TelephonyCredential) SetExpiresAt(val OptString) {
	s.ExpiresAt = val
}

// Ref: #/components/schemas/TelephonyCredentialCreateRequest
type TelephonyCredentialCreateRequest struct {
	Name OptString `json:"name"`
	// Tags a credential to filter for bulk operations. A single tag can hold at maximum 1000 credentials.
	Tag OptString `json:"tag"`
	// Identifies the Credential Connection this credential is associated with.
	ConnectionID string `json:"connection_id"`
	// ISO-8601 formatted date indicating when the credential will expire.
	ExpiresAt OptString `json:"expires_at"`
}

// GetName returns the value of Name.
func (s *TelephonyCredentialCreateRequest) GetName() OptString {
	return s.Name
}

// GetTag returns the value of Tag.
func (s *TelephonyCredentialCreateRequest) GetTag() OptString {
	return s.Tag
}

// GetConnectionID returns the value of ConnectionID.
func (s *TelephonyCredentialCreateRequest) GetConnectionID() string {
	return s.ConnectionID
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *TelephonyCredentialCreateRequest) GetExpiresAt() OptString {
	return s.ExpiresAt
}

// SetName sets the value of Name.
func (s *TelephonyCredentialCreateRequest) SetName(val OptString) {
	s.Name = val
}

// SetTag sets the value of Tag.
func (s *TelephonyCredentialCreateRequest) SetTag(val OptString) {
	s.Tag = val
}

// SetConnectionID sets the value of ConnectionID.
func (s *TelephonyCredentialCreateRequest) SetConnectionID(val string) {
	s.ConnectionID = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *TelephonyCredentialCreateRequest) SetExpiresAt(val OptString) {
	s.ExpiresAt = val
}

type TelephonyCredentialResponse struct {
	Data OptTelephonyCredential `json:"data"`
}

// GetData returns the value of Data.
func (s *TelephonyCredentialResponse) GetData() OptTelephonyCredential {
	return s.Data
}

// SetData sets the value of Data.
func (s *TelephonyCredentialResponse) SetData(val OptTelephonyCredential) {
	s.Data = val
}

func (*TelephonyCredentialResponse) createTelephonyCredentialRes() {}
func (*TelephonyCredentialResponse) deleteTelephonyCredentialRes() {}
func (*TelephonyCredentialResponse) getTelephonyCredentialRes()    {}
func (*TelephonyCredentialResponse) performCredentialActionRes()   {}
func (*TelephonyCredentialResponse) updateTelephonyCredentialRes() {}

// Ref: #/components/schemas/TelephonyCredentialUpdateRequest
type TelephonyCredentialUpdateRequest struct {
	Name OptString `json:"name"`
	// Tags a credential to filter for bulk operations. A single tag can hold at maximum 1000 credentials.
	Tag OptString `json:"tag"`
	// Identifies the Credential Connection this credential is associated with.
	ConnectionID OptString `json:"connection_id"`
	// ISO-8601 formatted date indicating when the credential will expire.
	ExpiresAt OptString `json:"expires_at"`
}

// GetName returns the value of Name.
func (s *TelephonyCredentialUpdateRequest) GetName() OptString {
	return s.Name
}

// GetTag returns the value of Tag.
func (s *TelephonyCredentialUpdateRequest) GetTag() OptString {
	return s.Tag
}

// GetConnectionID returns the value of ConnectionID.
func (s *TelephonyCredentialUpdateRequest) GetConnectionID() OptString {
	return s.ConnectionID
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *TelephonyCredentialUpdateRequest) GetExpiresAt() OptString {
	return s.ExpiresAt
}

// SetName sets the value of Name.
func (s *TelephonyCredentialUpdateRequest) SetName(val OptString) {
	s.Name = val
}

// SetTag sets the value of Tag.
func (s *TelephonyCredentialUpdateRequest) SetTag(val OptString) {
	s.Tag = val
}

// SetConnectionID sets the value of ConnectionID.
func (s *TelephonyCredentialUpdateRequest) SetConnectionID(val OptString) {
	s.ConnectionID = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *TelephonyCredentialUpdateRequest) SetExpiresAt(val OptString) {
	s.ExpiresAt = val
}

// Ref: #/components/schemas/TexmlApplication
type TexmlApplication struct {
	ID OptIntId `json:"id"`
	// Identifies the type of the resource.
	RecordType              OptString                  `json:"record_type"`
	FriendlyName            OptApplicationName         `json:"friendly_name"`
	Active                  OptConnectionActive        `json:"active"`
	AnchorsiteOverride      OptAnchorsiteOverride      `json:"anchorsite_override"`
	DtmfType                OptDtmfType                `json:"dtmf_type"`
	FirstCommandTimeout     OptFirstCommandTimeout     `json:"first_command_timeout"`
	FirstCommandTimeoutSecs OptFirstCommandTimeoutSecs `json:"first_command_timeout_secs"`
	// URL to which Telnyx will deliver your XML Translator webhooks.
	VoiceURL OptString `json:"voice_url"`
	// URL to which Telnyx will deliver your XML Translator webhooks if we get an error response from
	// your voice_url.
	VoiceFallbackURL OptString `json:"voice_fallback_url"`
	// HTTP request method Telnyx will use to interact with your XML Translator webhooks. Either 'get' or
	// 'post'.
	VoiceMethod OptTexmlApplicationVoiceMethod `json:"voice_method"`
	// URL for Telnyx to send requests to containing information about call progress events.
	StatusCallback OptString `json:"status_callback"`
	// HTTP request method Telnyx should use when requesting the status_callback URL.
	StatusCallbackMethod OptTexmlApplicationStatusCallbackMethod `json:"status_callback_method"`
	Inbound              OptTexmlApplicationInbound              `json:"inbound"`
	Outbound             OptTexmlApplicationOutbound             `json:"outbound"`
	CreatedAt            OptCreatedAt                            `json:"created_at"`
	UpdatedAt            OptUpdatedAt                            `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *TexmlApplication) GetID() OptIntId {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *TexmlApplication) GetRecordType() OptString {
	return s.RecordType
}

// GetFriendlyName returns the value of FriendlyName.
func (s *TexmlApplication) GetFriendlyName() OptApplicationName {
	return s.FriendlyName
}

// GetActive returns the value of Active.
func (s *TexmlApplication) GetActive() OptConnectionActive {
	return s.Active
}

// GetAnchorsiteOverride returns the value of AnchorsiteOverride.
func (s *TexmlApplication) GetAnchorsiteOverride() OptAnchorsiteOverride {
	return s.AnchorsiteOverride
}

// GetDtmfType returns the value of DtmfType.
func (s *TexmlApplication) GetDtmfType() OptDtmfType {
	return s.DtmfType
}

// GetFirstCommandTimeout returns the value of FirstCommandTimeout.
func (s *TexmlApplication) GetFirstCommandTimeout() OptFirstCommandTimeout {
	return s.FirstCommandTimeout
}

// GetFirstCommandTimeoutSecs returns the value of FirstCommandTimeoutSecs.
func (s *TexmlApplication) GetFirstCommandTimeoutSecs() OptFirstCommandTimeoutSecs {
	return s.FirstCommandTimeoutSecs
}

// GetVoiceURL returns the value of VoiceURL.
func (s *TexmlApplication) GetVoiceURL() OptString {
	return s.VoiceURL
}

// GetVoiceFallbackURL returns the value of VoiceFallbackURL.
func (s *TexmlApplication) GetVoiceFallbackURL() OptString {
	return s.VoiceFallbackURL
}

// GetVoiceMethod returns the value of VoiceMethod.
func (s *TexmlApplication) GetVoiceMethod() OptTexmlApplicationVoiceMethod {
	return s.VoiceMethod
}

// GetStatusCallback returns the value of StatusCallback.
func (s *TexmlApplication) GetStatusCallback() OptString {
	return s.StatusCallback
}

// GetStatusCallbackMethod returns the value of StatusCallbackMethod.
func (s *TexmlApplication) GetStatusCallbackMethod() OptTexmlApplicationStatusCallbackMethod {
	return s.StatusCallbackMethod
}

// GetInbound returns the value of Inbound.
func (s *TexmlApplication) GetInbound() OptTexmlApplicationInbound {
	return s.Inbound
}

// GetOutbound returns the value of Outbound.
func (s *TexmlApplication) GetOutbound() OptTexmlApplicationOutbound {
	return s.Outbound
}

// GetCreatedAt returns the value of CreatedAt.
func (s *TexmlApplication) GetCreatedAt() OptCreatedAt {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *TexmlApplication) GetUpdatedAt() OptUpdatedAt {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *TexmlApplication) SetID(val OptIntId) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *TexmlApplication) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetFriendlyName sets the value of FriendlyName.
func (s *TexmlApplication) SetFriendlyName(val OptApplicationName) {
	s.FriendlyName = val
}

// SetActive sets the value of Active.
func (s *TexmlApplication) SetActive(val OptConnectionActive) {
	s.Active = val
}

// SetAnchorsiteOverride sets the value of AnchorsiteOverride.
func (s *TexmlApplication) SetAnchorsiteOverride(val OptAnchorsiteOverride) {
	s.AnchorsiteOverride = val
}

// SetDtmfType sets the value of DtmfType.
func (s *TexmlApplication) SetDtmfType(val OptDtmfType) {
	s.DtmfType = val
}

// SetFirstCommandTimeout sets the value of FirstCommandTimeout.
func (s *TexmlApplication) SetFirstCommandTimeout(val OptFirstCommandTimeout) {
	s.FirstCommandTimeout = val
}

// SetFirstCommandTimeoutSecs sets the value of FirstCommandTimeoutSecs.
func (s *TexmlApplication) SetFirstCommandTimeoutSecs(val OptFirstCommandTimeoutSecs) {
	s.FirstCommandTimeoutSecs = val
}

// SetVoiceURL sets the value of VoiceURL.
func (s *TexmlApplication) SetVoiceURL(val OptString) {
	s.VoiceURL = val
}

// SetVoiceFallbackURL sets the value of VoiceFallbackURL.
func (s *TexmlApplication) SetVoiceFallbackURL(val OptString) {
	s.VoiceFallbackURL = val
}

// SetVoiceMethod sets the value of VoiceMethod.
func (s *TexmlApplication) SetVoiceMethod(val OptTexmlApplicationVoiceMethod) {
	s.VoiceMethod = val
}

// SetStatusCallback sets the value of StatusCallback.
func (s *TexmlApplication) SetStatusCallback(val OptString) {
	s.StatusCallback = val
}

// SetStatusCallbackMethod sets the value of StatusCallbackMethod.
func (s *TexmlApplication) SetStatusCallbackMethod(val OptTexmlApplicationStatusCallbackMethod) {
	s.StatusCallbackMethod = val
}

// SetInbound sets the value of Inbound.
func (s *TexmlApplication) SetInbound(val OptTexmlApplicationInbound) {
	s.Inbound = val
}

// SetOutbound sets the value of Outbound.
func (s *TexmlApplication) SetOutbound(val OptTexmlApplicationOutbound) {
	s.Outbound = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *TexmlApplication) SetCreatedAt(val OptCreatedAt) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *TexmlApplication) SetUpdatedAt(val OptUpdatedAt) {
	s.UpdatedAt = val
}

type TexmlApplicationInbound struct {
	// When set, this will limit the total number of inbound calls to phone numbers associated with this
	// connection.
	ChannelLimit OptInt `json:"channel_limit"`
	// When enabled Telnyx will include Shaken/Stir data in the Webhook for new inbound calls.
	ShakenStirEnabled OptBool `json:"shaken_stir_enabled"`
	// Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a
	// phone number is used, from a SIP endpoint. Example: the subdomain "example.sip.telnyx.com" can be
	// called from any SIP endpoint by using the SIP URI "sip:@example.sip.telnyx.com" where the user
	// part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain
	// calls.
	SipSubdomain OptString `json:"sip_subdomain"`
	// This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public
	// Internet) or "Only my connections" (any connection assigned to the same Telnyx user).
	SipSubdomainReceiveSettings OptTexmlApplicationInboundSipSubdomainReceiveSettings `json:"sip_subdomain_receive_settings"`
}

// GetChannelLimit returns the value of ChannelLimit.
func (s *TexmlApplicationInbound) GetChannelLimit() OptInt {
	return s.ChannelLimit
}

// GetShakenStirEnabled returns the value of ShakenStirEnabled.
func (s *TexmlApplicationInbound) GetShakenStirEnabled() OptBool {
	return s.ShakenStirEnabled
}

// GetSipSubdomain returns the value of SipSubdomain.
func (s *TexmlApplicationInbound) GetSipSubdomain() OptString {
	return s.SipSubdomain
}

// GetSipSubdomainReceiveSettings returns the value of SipSubdomainReceiveSettings.
func (s *TexmlApplicationInbound) GetSipSubdomainReceiveSettings() OptTexmlApplicationInboundSipSubdomainReceiveSettings {
	return s.SipSubdomainReceiveSettings
}

// SetChannelLimit sets the value of ChannelLimit.
func (s *TexmlApplicationInbound) SetChannelLimit(val OptInt) {
	s.ChannelLimit = val
}

// SetShakenStirEnabled sets the value of ShakenStirEnabled.
func (s *TexmlApplicationInbound) SetShakenStirEnabled(val OptBool) {
	s.ShakenStirEnabled = val
}

// SetSipSubdomain sets the value of SipSubdomain.
func (s *TexmlApplicationInbound) SetSipSubdomain(val OptString) {
	s.SipSubdomain = val
}

// SetSipSubdomainReceiveSettings sets the value of SipSubdomainReceiveSettings.
func (s *TexmlApplicationInbound) SetSipSubdomainReceiveSettings(val OptTexmlApplicationInboundSipSubdomainReceiveSettings) {
	s.SipSubdomainReceiveSettings = val
}

// This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public
// Internet) or "Only my connections" (any connection assigned to the same Telnyx user).
type TexmlApplicationInboundSipSubdomainReceiveSettings string

const (
	TexmlApplicationInboundSipSubdomainReceiveSettingsOnlyMyConnections TexmlApplicationInboundSipSubdomainReceiveSettings = "only_my_connections"
	TexmlApplicationInboundSipSubdomainReceiveSettingsFromAnyone        TexmlApplicationInboundSipSubdomainReceiveSettings = "from_anyone"
)

// AllValues returns all TexmlApplicationInboundSipSubdomainReceiveSettings values.
func (TexmlApplicationInboundSipSubdomainReceiveSettings) AllValues() []TexmlApplicationInboundSipSubdomainReceiveSettings {
	return []TexmlApplicationInboundSipSubdomainReceiveSettings{
		TexmlApplicationInboundSipSubdomainReceiveSettingsOnlyMyConnections,
		TexmlApplicationInboundSipSubdomainReceiveSettingsFromAnyone,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TexmlApplicationInboundSipSubdomainReceiveSettings) MarshalText() ([]byte, error) {
	switch s {
	case TexmlApplicationInboundSipSubdomainReceiveSettingsOnlyMyConnections:
		return []byte(s), nil
	case TexmlApplicationInboundSipSubdomainReceiveSettingsFromAnyone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TexmlApplicationInboundSipSubdomainReceiveSettings) UnmarshalText(data []byte) error {
	switch TexmlApplicationInboundSipSubdomainReceiveSettings(data) {
	case TexmlApplicationInboundSipSubdomainReceiveSettingsOnlyMyConnections:
		*s = TexmlApplicationInboundSipSubdomainReceiveSettingsOnlyMyConnections
		return nil
	case TexmlApplicationInboundSipSubdomainReceiveSettingsFromAnyone:
		*s = TexmlApplicationInboundSipSubdomainReceiveSettingsFromAnyone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TexmlApplicationOutbound struct {
	// When set, this will limit the total number of outbound calls to phone numbers associated with this
	// connection.
	ChannelLimit           OptInt                    `json:"channel_limit"`
	OutboundVoiceProfileID OptOutboundVoiceProfileId `json:"outbound_voice_profile_id"`
}

// GetChannelLimit returns the value of ChannelLimit.
func (s *TexmlApplicationOutbound) GetChannelLimit() OptInt {
	return s.ChannelLimit
}

// GetOutboundVoiceProfileID returns the value of OutboundVoiceProfileID.
func (s *TexmlApplicationOutbound) GetOutboundVoiceProfileID() OptOutboundVoiceProfileId {
	return s.OutboundVoiceProfileID
}

// SetChannelLimit sets the value of ChannelLimit.
func (s *TexmlApplicationOutbound) SetChannelLimit(val OptInt) {
	s.ChannelLimit = val
}

// SetOutboundVoiceProfileID sets the value of OutboundVoiceProfileID.
func (s *TexmlApplicationOutbound) SetOutboundVoiceProfileID(val OptOutboundVoiceProfileId) {
	s.OutboundVoiceProfileID = val
}

type TexmlApplicationResponse struct {
	Data OptTexmlApplication `json:"data"`
}

// GetData returns the value of Data.
func (s *TexmlApplicationResponse) GetData() OptTexmlApplication {
	return s.Data
}

// SetData sets the value of Data.
func (s *TexmlApplicationResponse) SetData(val OptTexmlApplication) {
	s.Data = val
}

func (*TexmlApplicationResponse) createTexmlApplicationRes() {}
func (*TexmlApplicationResponse) deleteTexmlApplicationRes() {}
func (*TexmlApplicationResponse) getTexmlApplicationRes()    {}
func (*TexmlApplicationResponse) updateTexmlApplicationRes() {}

// HTTP request method Telnyx should use when requesting the status_callback URL.
type TexmlApplicationStatusCallbackMethod string

const (
	TexmlApplicationStatusCallbackMethodGet  TexmlApplicationStatusCallbackMethod = "get"
	TexmlApplicationStatusCallbackMethodPost TexmlApplicationStatusCallbackMethod = "post"
)

// AllValues returns all TexmlApplicationStatusCallbackMethod values.
func (TexmlApplicationStatusCallbackMethod) AllValues() []TexmlApplicationStatusCallbackMethod {
	return []TexmlApplicationStatusCallbackMethod{
		TexmlApplicationStatusCallbackMethodGet,
		TexmlApplicationStatusCallbackMethodPost,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TexmlApplicationStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case TexmlApplicationStatusCallbackMethodGet:
		return []byte(s), nil
	case TexmlApplicationStatusCallbackMethodPost:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TexmlApplicationStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch TexmlApplicationStatusCallbackMethod(data) {
	case TexmlApplicationStatusCallbackMethodGet:
		*s = TexmlApplicationStatusCallbackMethodGet
		return nil
	case TexmlApplicationStatusCallbackMethodPost:
		*s = TexmlApplicationStatusCallbackMethodPost
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request method Telnyx will use to interact with your XML Translator webhooks. Either 'get' or
// 'post'.
type TexmlApplicationVoiceMethod string

const (
	TexmlApplicationVoiceMethodGet  TexmlApplicationVoiceMethod = "get"
	TexmlApplicationVoiceMethodPost TexmlApplicationVoiceMethod = "post"
)

// AllValues returns all TexmlApplicationVoiceMethod values.
func (TexmlApplicationVoiceMethod) AllValues() []TexmlApplicationVoiceMethod {
	return []TexmlApplicationVoiceMethod{
		TexmlApplicationVoiceMethodGet,
		TexmlApplicationVoiceMethodPost,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TexmlApplicationVoiceMethod) MarshalText() ([]byte, error) {
	switch s {
	case TexmlApplicationVoiceMethodGet:
		return []byte(s), nil
	case TexmlApplicationVoiceMethodPost:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TexmlApplicationVoiceMethod) UnmarshalText(data []byte) error {
	switch TexmlApplicationVoiceMethod(data) {
	case TexmlApplicationVoiceMethodGet:
		*s = TexmlApplicationVoiceMethodGet
		return nil
	case TexmlApplicationVoiceMethodPost:
		*s = TexmlApplicationVoiceMethodPost
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TexmlCreateCallRecordingRequestBody
type TexmlCreateCallRecordingRequestBody struct {
	PlayBeep                      OptPlayBeep                     `json:"PlayBeep"`
	RecordingStatusCallbackEvent  OptRecordingStatusCallbackEvent `json:"RecordingStatusCallbackEvent"`
	RecordingStatusCallback       OptTexmlStatusCallback          `json:"RecordingStatusCallback"`
	RecordingStatusCallbackMethod OptTexmlStatusCallbackMethod    `json:"RecordingStatusCallbackMethod"`
	RecordingChannels             OptTexmlRecordingChannels       `json:"RecordingChannels"`
	RecordingTrack                OptRecordingTrack               `json:"RecordingTrack"`
}

// GetPlayBeep returns the value of PlayBeep.
func (s *TexmlCreateCallRecordingRequestBody) GetPlayBeep() OptPlayBeep {
	return s.PlayBeep
}

// GetRecordingStatusCallbackEvent returns the value of RecordingStatusCallbackEvent.
func (s *TexmlCreateCallRecordingRequestBody) GetRecordingStatusCallbackEvent() OptRecordingStatusCallbackEvent {
	return s.RecordingStatusCallbackEvent
}

// GetRecordingStatusCallback returns the value of RecordingStatusCallback.
func (s *TexmlCreateCallRecordingRequestBody) GetRecordingStatusCallback() OptTexmlStatusCallback {
	return s.RecordingStatusCallback
}

// GetRecordingStatusCallbackMethod returns the value of RecordingStatusCallbackMethod.
func (s *TexmlCreateCallRecordingRequestBody) GetRecordingStatusCallbackMethod() OptTexmlStatusCallbackMethod {
	return s.RecordingStatusCallbackMethod
}

// GetRecordingChannels returns the value of RecordingChannels.
func (s *TexmlCreateCallRecordingRequestBody) GetRecordingChannels() OptTexmlRecordingChannels {
	return s.RecordingChannels
}

// GetRecordingTrack returns the value of RecordingTrack.
func (s *TexmlCreateCallRecordingRequestBody) GetRecordingTrack() OptRecordingTrack {
	return s.RecordingTrack
}

// SetPlayBeep sets the value of PlayBeep.
func (s *TexmlCreateCallRecordingRequestBody) SetPlayBeep(val OptPlayBeep) {
	s.PlayBeep = val
}

// SetRecordingStatusCallbackEvent sets the value of RecordingStatusCallbackEvent.
func (s *TexmlCreateCallRecordingRequestBody) SetRecordingStatusCallbackEvent(val OptRecordingStatusCallbackEvent) {
	s.RecordingStatusCallbackEvent = val
}

// SetRecordingStatusCallback sets the value of RecordingStatusCallback.
func (s *TexmlCreateCallRecordingRequestBody) SetRecordingStatusCallback(val OptTexmlStatusCallback) {
	s.RecordingStatusCallback = val
}

// SetRecordingStatusCallbackMethod sets the value of RecordingStatusCallbackMethod.
func (s *TexmlCreateCallRecordingRequestBody) SetRecordingStatusCallbackMethod(val OptTexmlStatusCallbackMethod) {
	s.RecordingStatusCallbackMethod = val
}

// SetRecordingChannels sets the value of RecordingChannels.
func (s *TexmlCreateCallRecordingRequestBody) SetRecordingChannels(val OptTexmlRecordingChannels) {
	s.RecordingChannels = val
}

// SetRecordingTrack sets the value of RecordingTrack.
func (s *TexmlCreateCallRecordingRequestBody) SetRecordingTrack(val OptRecordingTrack) {
	s.RecordingTrack = val
}

// Ref: #/components/schemas/TexmlCreateCallRecordingResponseBody
type TexmlCreateCallRecordingResponseBody struct {
	AccountSid    OptAccountSid                `json:"account_sid"`
	CallSid       OptCallControlId             `json:"call_sid"`
	ConferenceSid OptNilConferenceSid          `json:"conference_sid"`
	Channels      OptTwimlRecordingChannels    `json:"channels"`
	DateCreated   OptDateTimeRFC2822           `json:"date_created"`
	DateUpdated   OptDateTimeRFC2822           `json:"date_updated"`
	StartTime     OptDateTimeRFC2822           `json:"start_time"`
	Price         OptNilTexmlRecordingPrice    `json:"price"`
	PriceUnit     OptNilTexmlPriceUnit         `json:"price_unit"`
	Duration      OptNilTexmlRecordingDuration `json:"duration"`
	Sid           OptTexmlSid                  `json:"sid"`
	Source        OptRecordingSource           `json:"source"`
	ErrorCode     OptNilTexmlErrorCode         `json:"error_code"`
	Track         OptRecordingTrack            `json:"track"`
	// The relative URI for this recording resource.
	URI OptString `json:"uri"`
}

// GetAccountSid returns the value of AccountSid.
func (s *TexmlCreateCallRecordingResponseBody) GetAccountSid() OptAccountSid {
	return s.AccountSid
}

// GetCallSid returns the value of CallSid.
func (s *TexmlCreateCallRecordingResponseBody) GetCallSid() OptCallControlId {
	return s.CallSid
}

// GetConferenceSid returns the value of ConferenceSid.
func (s *TexmlCreateCallRecordingResponseBody) GetConferenceSid() OptNilConferenceSid {
	return s.ConferenceSid
}

// GetChannels returns the value of Channels.
func (s *TexmlCreateCallRecordingResponseBody) GetChannels() OptTwimlRecordingChannels {
	return s.Channels
}

// GetDateCreated returns the value of DateCreated.
func (s *TexmlCreateCallRecordingResponseBody) GetDateCreated() OptDateTimeRFC2822 {
	return s.DateCreated
}

// GetDateUpdated returns the value of DateUpdated.
func (s *TexmlCreateCallRecordingResponseBody) GetDateUpdated() OptDateTimeRFC2822 {
	return s.DateUpdated
}

// GetStartTime returns the value of StartTime.
func (s *TexmlCreateCallRecordingResponseBody) GetStartTime() OptDateTimeRFC2822 {
	return s.StartTime
}

// GetPrice returns the value of Price.
func (s *TexmlCreateCallRecordingResponseBody) GetPrice() OptNilTexmlRecordingPrice {
	return s.Price
}

// GetPriceUnit returns the value of PriceUnit.
func (s *TexmlCreateCallRecordingResponseBody) GetPriceUnit() OptNilTexmlPriceUnit {
	return s.PriceUnit
}

// GetDuration returns the value of Duration.
func (s *TexmlCreateCallRecordingResponseBody) GetDuration() OptNilTexmlRecordingDuration {
	return s.Duration
}

// GetSid returns the value of Sid.
func (s *TexmlCreateCallRecordingResponseBody) GetSid() OptTexmlSid {
	return s.Sid
}

// GetSource returns the value of Source.
func (s *TexmlCreateCallRecordingResponseBody) GetSource() OptRecordingSource {
	return s.Source
}

// GetErrorCode returns the value of ErrorCode.
func (s *TexmlCreateCallRecordingResponseBody) GetErrorCode() OptNilTexmlErrorCode {
	return s.ErrorCode
}

// GetTrack returns the value of Track.
func (s *TexmlCreateCallRecordingResponseBody) GetTrack() OptRecordingTrack {
	return s.Track
}

// GetURI returns the value of URI.
func (s *TexmlCreateCallRecordingResponseBody) GetURI() OptString {
	return s.URI
}

// SetAccountSid sets the value of AccountSid.
func (s *TexmlCreateCallRecordingResponseBody) SetAccountSid(val OptAccountSid) {
	s.AccountSid = val
}

// SetCallSid sets the value of CallSid.
func (s *TexmlCreateCallRecordingResponseBody) SetCallSid(val OptCallControlId) {
	s.CallSid = val
}

// SetConferenceSid sets the value of ConferenceSid.
func (s *TexmlCreateCallRecordingResponseBody) SetConferenceSid(val OptNilConferenceSid) {
	s.ConferenceSid = val
}

// SetChannels sets the value of Channels.
func (s *TexmlCreateCallRecordingResponseBody) SetChannels(val OptTwimlRecordingChannels) {
	s.Channels = val
}

// SetDateCreated sets the value of DateCreated.
func (s *TexmlCreateCallRecordingResponseBody) SetDateCreated(val OptDateTimeRFC2822) {
	s.DateCreated = val
}

// SetDateUpdated sets the value of DateUpdated.
func (s *TexmlCreateCallRecordingResponseBody) SetDateUpdated(val OptDateTimeRFC2822) {
	s.DateUpdated = val
}

// SetStartTime sets the value of StartTime.
func (s *TexmlCreateCallRecordingResponseBody) SetStartTime(val OptDateTimeRFC2822) {
	s.StartTime = val
}

// SetPrice sets the value of Price.
func (s *TexmlCreateCallRecordingResponseBody) SetPrice(val OptNilTexmlRecordingPrice) {
	s.Price = val
}

// SetPriceUnit sets the value of PriceUnit.
func (s *TexmlCreateCallRecordingResponseBody) SetPriceUnit(val OptNilTexmlPriceUnit) {
	s.PriceUnit = val
}

// SetDuration sets the value of Duration.
func (s *TexmlCreateCallRecordingResponseBody) SetDuration(val OptNilTexmlRecordingDuration) {
	s.Duration = val
}

// SetSid sets the value of Sid.
func (s *TexmlCreateCallRecordingResponseBody) SetSid(val OptTexmlSid) {
	s.Sid = val
}

// SetSource sets the value of Source.
func (s *TexmlCreateCallRecordingResponseBody) SetSource(val OptRecordingSource) {
	s.Source = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *TexmlCreateCallRecordingResponseBody) SetErrorCode(val OptNilTexmlErrorCode) {
	s.ErrorCode = val
}

// SetTrack sets the value of Track.
func (s *TexmlCreateCallRecordingResponseBody) SetTrack(val OptRecordingTrack) {
	s.Track = val
}

// SetURI sets the value of URI.
func (s *TexmlCreateCallRecordingResponseBody) SetURI(val OptString) {
	s.URI = val
}

func (*TexmlCreateCallRecordingResponseBody) startTeXMLCallRecordingRes()  {}
func (*TexmlCreateCallRecordingResponseBody) updateTeXMLCallRecordingRes() {}

type TexmlErrorCode string

// Ref: #/components/schemas/TexmlGetCallRecordingResponseBody
type TexmlGetCallRecordingResponseBody struct {
	AccountSid       OptAccountSid                     `json:"account_sid"`
	CallSid          OptCallControlId                  `json:"call_sid"`
	ConferenceSid    OptNilConferenceSid               `json:"conference_sid"`
	Channels         OptTwimlRecordingChannels         `json:"channels"`
	DateCreated      OptDateTimeRFC2822                `json:"date_created"`
	DateUpdated      OptDateTimeRFC2822                `json:"date_updated"`
	StartTime        OptDateTimeRFC2822                `json:"start_time"`
	Duration         OptNilTexmlRecordingDuration      `json:"duration"`
	Sid              OptTexmlSid                       `json:"sid"`
	Source           OptRecordingSource                `json:"source"`
	Status           OptTexmlRecordingStatus           `json:"status"`
	ErrorCode        OptNilTexmlErrorCode              `json:"error_code"`
	SubresourcesUris OptTexmlRecordingSubresourcesUris `json:"subresources_uris"`
	// The relative URI for this recording resource.
	URI      OptString                 `json:"uri"`
	MediaURL OptTexmlRecordingMediaUrl `json:"media_url"`
}

// GetAccountSid returns the value of AccountSid.
func (s *TexmlGetCallRecordingResponseBody) GetAccountSid() OptAccountSid {
	return s.AccountSid
}

// GetCallSid returns the value of CallSid.
func (s *TexmlGetCallRecordingResponseBody) GetCallSid() OptCallControlId {
	return s.CallSid
}

// GetConferenceSid returns the value of ConferenceSid.
func (s *TexmlGetCallRecordingResponseBody) GetConferenceSid() OptNilConferenceSid {
	return s.ConferenceSid
}

// GetChannels returns the value of Channels.
func (s *TexmlGetCallRecordingResponseBody) GetChannels() OptTwimlRecordingChannels {
	return s.Channels
}

// GetDateCreated returns the value of DateCreated.
func (s *TexmlGetCallRecordingResponseBody) GetDateCreated() OptDateTimeRFC2822 {
	return s.DateCreated
}

// GetDateUpdated returns the value of DateUpdated.
func (s *TexmlGetCallRecordingResponseBody) GetDateUpdated() OptDateTimeRFC2822 {
	return s.DateUpdated
}

// GetStartTime returns the value of StartTime.
func (s *TexmlGetCallRecordingResponseBody) GetStartTime() OptDateTimeRFC2822 {
	return s.StartTime
}

// GetDuration returns the value of Duration.
func (s *TexmlGetCallRecordingResponseBody) GetDuration() OptNilTexmlRecordingDuration {
	return s.Duration
}

// GetSid returns the value of Sid.
func (s *TexmlGetCallRecordingResponseBody) GetSid() OptTexmlSid {
	return s.Sid
}

// GetSource returns the value of Source.
func (s *TexmlGetCallRecordingResponseBody) GetSource() OptRecordingSource {
	return s.Source
}

// GetStatus returns the value of Status.
func (s *TexmlGetCallRecordingResponseBody) GetStatus() OptTexmlRecordingStatus {
	return s.Status
}

// GetErrorCode returns the value of ErrorCode.
func (s *TexmlGetCallRecordingResponseBody) GetErrorCode() OptNilTexmlErrorCode {
	return s.ErrorCode
}

// GetSubresourcesUris returns the value of SubresourcesUris.
func (s *TexmlGetCallRecordingResponseBody) GetSubresourcesUris() OptTexmlRecordingSubresourcesUris {
	return s.SubresourcesUris
}

// GetURI returns the value of URI.
func (s *TexmlGetCallRecordingResponseBody) GetURI() OptString {
	return s.URI
}

// GetMediaURL returns the value of MediaURL.
func (s *TexmlGetCallRecordingResponseBody) GetMediaURL() OptTexmlRecordingMediaUrl {
	return s.MediaURL
}

// SetAccountSid sets the value of AccountSid.
func (s *TexmlGetCallRecordingResponseBody) SetAccountSid(val OptAccountSid) {
	s.AccountSid = val
}

// SetCallSid sets the value of CallSid.
func (s *TexmlGetCallRecordingResponseBody) SetCallSid(val OptCallControlId) {
	s.CallSid = val
}

// SetConferenceSid sets the value of ConferenceSid.
func (s *TexmlGetCallRecordingResponseBody) SetConferenceSid(val OptNilConferenceSid) {
	s.ConferenceSid = val
}

// SetChannels sets the value of Channels.
func (s *TexmlGetCallRecordingResponseBody) SetChannels(val OptTwimlRecordingChannels) {
	s.Channels = val
}

// SetDateCreated sets the value of DateCreated.
func (s *TexmlGetCallRecordingResponseBody) SetDateCreated(val OptDateTimeRFC2822) {
	s.DateCreated = val
}

// SetDateUpdated sets the value of DateUpdated.
func (s *TexmlGetCallRecordingResponseBody) SetDateUpdated(val OptDateTimeRFC2822) {
	s.DateUpdated = val
}

// SetStartTime sets the value of StartTime.
func (s *TexmlGetCallRecordingResponseBody) SetStartTime(val OptDateTimeRFC2822) {
	s.StartTime = val
}

// SetDuration sets the value of Duration.
func (s *TexmlGetCallRecordingResponseBody) SetDuration(val OptNilTexmlRecordingDuration) {
	s.Duration = val
}

// SetSid sets the value of Sid.
func (s *TexmlGetCallRecordingResponseBody) SetSid(val OptTexmlSid) {
	s.Sid = val
}

// SetSource sets the value of Source.
func (s *TexmlGetCallRecordingResponseBody) SetSource(val OptRecordingSource) {
	s.Source = val
}

// SetStatus sets the value of Status.
func (s *TexmlGetCallRecordingResponseBody) SetStatus(val OptTexmlRecordingStatus) {
	s.Status = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *TexmlGetCallRecordingResponseBody) SetErrorCode(val OptNilTexmlErrorCode) {
	s.ErrorCode = val
}

// SetSubresourcesUris sets the value of SubresourcesUris.
func (s *TexmlGetCallRecordingResponseBody) SetSubresourcesUris(val OptTexmlRecordingSubresourcesUris) {
	s.SubresourcesUris = val
}

// SetURI sets the value of URI.
func (s *TexmlGetCallRecordingResponseBody) SetURI(val OptString) {
	s.URI = val
}

// SetMediaURL sets the value of MediaURL.
func (s *TexmlGetCallRecordingResponseBody) SetMediaURL(val OptTexmlRecordingMediaUrl) {
	s.MediaURL = val
}

func (*TexmlGetCallRecordingResponseBody) getTeXMLCallRecordingRes() {}

// Ref: #/components/schemas/TexmlGetCallRecordingsResponseBody
type TexmlGetCallRecordingsResponseBody struct {
	Recordings []TexmlGetCallRecordingResponseBody `json:"recordings"`
	// The number of the last element on the page, zero-indexed.
	End OptInt `json:"end"`
	// Relative uri to the first page of the query results.
	FirstPageURI OptURI `json:"first_page_uri"`
	// Relative uri to the previous page of the query results.
	PreviousPageURI OptURI `json:"previous_page_uri"`
	// Relative uri to the next page of the query results.
	NextPageURI OptString `json:"next_page_uri"`
	// Current page number, zero-indexed.
	Page OptInt `json:"page"`
	// The number of items on the page.
	PageSize OptInt `json:"page_size"`
	// The number of the first element on the page, zero-indexed.
	Start OptInt `json:"start"`
	// The URI of the current page.
	URI OptString `json:"uri"`
}

// GetRecordings returns the value of Recordings.
func (s *TexmlGetCallRecordingsResponseBody) GetRecordings() []TexmlGetCallRecordingResponseBody {
	return s.Recordings
}

// GetEnd returns the value of End.
func (s *TexmlGetCallRecordingsResponseBody) GetEnd() OptInt {
	return s.End
}

// GetFirstPageURI returns the value of FirstPageURI.
func (s *TexmlGetCallRecordingsResponseBody) GetFirstPageURI() OptURI {
	return s.FirstPageURI
}

// GetPreviousPageURI returns the value of PreviousPageURI.
func (s *TexmlGetCallRecordingsResponseBody) GetPreviousPageURI() OptURI {
	return s.PreviousPageURI
}

// GetNextPageURI returns the value of NextPageURI.
func (s *TexmlGetCallRecordingsResponseBody) GetNextPageURI() OptString {
	return s.NextPageURI
}

// GetPage returns the value of Page.
func (s *TexmlGetCallRecordingsResponseBody) GetPage() OptInt {
	return s.Page
}

// GetPageSize returns the value of PageSize.
func (s *TexmlGetCallRecordingsResponseBody) GetPageSize() OptInt {
	return s.PageSize
}

// GetStart returns the value of Start.
func (s *TexmlGetCallRecordingsResponseBody) GetStart() OptInt {
	return s.Start
}

// GetURI returns the value of URI.
func (s *TexmlGetCallRecordingsResponseBody) GetURI() OptString {
	return s.URI
}

// SetRecordings sets the value of Recordings.
func (s *TexmlGetCallRecordingsResponseBody) SetRecordings(val []TexmlGetCallRecordingResponseBody) {
	s.Recordings = val
}

// SetEnd sets the value of End.
func (s *TexmlGetCallRecordingsResponseBody) SetEnd(val OptInt) {
	s.End = val
}

// SetFirstPageURI sets the value of FirstPageURI.
func (s *TexmlGetCallRecordingsResponseBody) SetFirstPageURI(val OptURI) {
	s.FirstPageURI = val
}

// SetPreviousPageURI sets the value of PreviousPageURI.
func (s *TexmlGetCallRecordingsResponseBody) SetPreviousPageURI(val OptURI) {
	s.PreviousPageURI = val
}

// SetNextPageURI sets the value of NextPageURI.
func (s *TexmlGetCallRecordingsResponseBody) SetNextPageURI(val OptString) {
	s.NextPageURI = val
}

// SetPage sets the value of Page.
func (s *TexmlGetCallRecordingsResponseBody) SetPage(val OptInt) {
	s.Page = val
}

// SetPageSize sets the value of PageSize.
func (s *TexmlGetCallRecordingsResponseBody) SetPageSize(val OptInt) {
	s.PageSize = val
}

// SetStart sets the value of Start.
func (s *TexmlGetCallRecordingsResponseBody) SetStart(val OptInt) {
	s.Start = val
}

// SetURI sets the value of URI.
func (s *TexmlGetCallRecordingsResponseBody) SetURI(val OptString) {
	s.URI = val
}

func (*TexmlGetCallRecordingsResponseBody) fetchTeXMLCallRecordingsRes()       {}
func (*TexmlGetCallRecordingsResponseBody) fetchTeXMLConferenceRecordingsRes() {}
func (*TexmlGetCallRecordingsResponseBody) getTeXMLCallRecordingsRes()         {}

type TexmlListRecordingTranscriptionResponse struct {
	Transcriptions []TexmlRecordingTranscription `json:"transcriptions"`
	// The number of the last element on the page, zero-indexed.
	End OptInt `json:"end"`
	// Relative uri to the first page of the query results.
	FirstPageURI OptURI `json:"first_page_uri"`
	// Relative uri to the previous page of the query results.
	PreviousPageURI OptURI `json:"previous_page_uri"`
	// Relative uri to the next page of the query results.
	NextPageURI OptString `json:"next_page_uri"`
	// Current page number, zero-indexed.
	Page OptInt `json:"page"`
	// The number of items on the page.
	PageSize OptInt `json:"page_size"`
	// The number of the first element on the page, zero-indexed.
	Start OptInt `json:"start"`
	// The URI of the current page.
	URI OptString `json:"uri"`
}

// GetTranscriptions returns the value of Transcriptions.
func (s *TexmlListRecordingTranscriptionResponse) GetTranscriptions() []TexmlRecordingTranscription {
	return s.Transcriptions
}

// GetEnd returns the value of End.
func (s *TexmlListRecordingTranscriptionResponse) GetEnd() OptInt {
	return s.End
}

// GetFirstPageURI returns the value of FirstPageURI.
func (s *TexmlListRecordingTranscriptionResponse) GetFirstPageURI() OptURI {
	return s.FirstPageURI
}

// GetPreviousPageURI returns the value of PreviousPageURI.
func (s *TexmlListRecordingTranscriptionResponse) GetPreviousPageURI() OptURI {
	return s.PreviousPageURI
}

// GetNextPageURI returns the value of NextPageURI.
func (s *TexmlListRecordingTranscriptionResponse) GetNextPageURI() OptString {
	return s.NextPageURI
}

// GetPage returns the value of Page.
func (s *TexmlListRecordingTranscriptionResponse) GetPage() OptInt {
	return s.Page
}

// GetPageSize returns the value of PageSize.
func (s *TexmlListRecordingTranscriptionResponse) GetPageSize() OptInt {
	return s.PageSize
}

// GetStart returns the value of Start.
func (s *TexmlListRecordingTranscriptionResponse) GetStart() OptInt {
	return s.Start
}

// GetURI returns the value of URI.
func (s *TexmlListRecordingTranscriptionResponse) GetURI() OptString {
	return s.URI
}

// SetTranscriptions sets the value of Transcriptions.
func (s *TexmlListRecordingTranscriptionResponse) SetTranscriptions(val []TexmlRecordingTranscription) {
	s.Transcriptions = val
}

// SetEnd sets the value of End.
func (s *TexmlListRecordingTranscriptionResponse) SetEnd(val OptInt) {
	s.End = val
}

// SetFirstPageURI sets the value of FirstPageURI.
func (s *TexmlListRecordingTranscriptionResponse) SetFirstPageURI(val OptURI) {
	s.FirstPageURI = val
}

// SetPreviousPageURI sets the value of PreviousPageURI.
func (s *TexmlListRecordingTranscriptionResponse) SetPreviousPageURI(val OptURI) {
	s.PreviousPageURI = val
}

// SetNextPageURI sets the value of NextPageURI.
func (s *TexmlListRecordingTranscriptionResponse) SetNextPageURI(val OptString) {
	s.NextPageURI = val
}

// SetPage sets the value of Page.
func (s *TexmlListRecordingTranscriptionResponse) SetPage(val OptInt) {
	s.Page = val
}

// SetPageSize sets the value of PageSize.
func (s *TexmlListRecordingTranscriptionResponse) SetPageSize(val OptInt) {
	s.PageSize = val
}

// SetStart sets the value of Start.
func (s *TexmlListRecordingTranscriptionResponse) SetStart(val OptInt) {
	s.Start = val
}

// SetURI sets the value of URI.
func (s *TexmlListRecordingTranscriptionResponse) SetURI(val OptString) {
	s.URI = val
}

func (*TexmlListRecordingTranscriptionResponse) getTeXMLRecordingTranscriptionsRes() {}

type TexmlPriceUnit string

// When `dual`, final audio file has the first leg on channel A, and the rest on channel B. `mono`
// mixes both tracks into a single channel.
// Ref: #/components/schemas/TexmlRecordingChannels
type TexmlRecordingChannels string

const (
	TexmlRecordingChannelsMono TexmlRecordingChannels = "mono"
	TexmlRecordingChannelsDual TexmlRecordingChannels = "dual"
)

// AllValues returns all TexmlRecordingChannels values.
func (TexmlRecordingChannels) AllValues() []TexmlRecordingChannels {
	return []TexmlRecordingChannels{
		TexmlRecordingChannelsMono,
		TexmlRecordingChannelsDual,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TexmlRecordingChannels) MarshalText() ([]byte, error) {
	switch s {
	case TexmlRecordingChannelsMono:
		return []byte(s), nil
	case TexmlRecordingChannelsDual:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TexmlRecordingChannels) UnmarshalText(data []byte) error {
	switch TexmlRecordingChannels(data) {
	case TexmlRecordingChannelsMono:
		*s = TexmlRecordingChannelsMono
		return nil
	case TexmlRecordingChannelsDual:
		*s = TexmlRecordingChannelsDual
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TexmlRecordingDuration string

type TexmlRecordingMediaUrl url.URL

type TexmlRecordingPrice string

// Ref: #/components/schemas/TexmlRecordingStatus
type TexmlRecordingStatus string

const (
	TexmlRecordingStatusInProgress TexmlRecordingStatus = "in-progress"
	TexmlRecordingStatusCompleted  TexmlRecordingStatus = "completed"
	TexmlRecordingStatusPaused     TexmlRecordingStatus = "paused"
	TexmlRecordingStatusStopped    TexmlRecordingStatus = "stopped"
)

// AllValues returns all TexmlRecordingStatus values.
func (TexmlRecordingStatus) AllValues() []TexmlRecordingStatus {
	return []TexmlRecordingStatus{
		TexmlRecordingStatusInProgress,
		TexmlRecordingStatusCompleted,
		TexmlRecordingStatusPaused,
		TexmlRecordingStatusStopped,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TexmlRecordingStatus) MarshalText() ([]byte, error) {
	switch s {
	case TexmlRecordingStatusInProgress:
		return []byte(s), nil
	case TexmlRecordingStatusCompleted:
		return []byte(s), nil
	case TexmlRecordingStatusPaused:
		return []byte(s), nil
	case TexmlRecordingStatusStopped:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TexmlRecordingStatus) UnmarshalText(data []byte) error {
	switch TexmlRecordingStatus(data) {
	case TexmlRecordingStatusInProgress:
		*s = TexmlRecordingStatusInProgress
		return nil
	case TexmlRecordingStatusCompleted:
		*s = TexmlRecordingStatusCompleted
		return nil
	case TexmlRecordingStatusPaused:
		*s = TexmlRecordingStatusPaused
		return nil
	case TexmlRecordingStatusStopped:
		*s = TexmlRecordingStatusStopped
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Subresources details for a recording if available.
// Ref: #/components/schemas/TexmlRecordingSubresourcesUris
type TexmlRecordingSubresourcesUris struct {
	Transcriptions OptNilURI `json:"transcriptions"`
}

// GetTranscriptions returns the value of Transcriptions.
func (s *TexmlRecordingSubresourcesUris) GetTranscriptions() OptNilURI {
	return s.Transcriptions
}

// SetTranscriptions sets the value of Transcriptions.
func (s *TexmlRecordingSubresourcesUris) SetTranscriptions(val OptNilURI) {
	s.Transcriptions = val
}

// Ref: #/components/schemas/TexmlRecordingTranscription
type TexmlRecordingTranscription struct {
	AccountSid OptAccountSid    `json:"account_sid"`
	CallSid    OptCallControlId `json:"call_sid"`
	// The version of the API that was used to make the request.
	APIVersion   OptString                    `json:"api_version"`
	DateCreated  OptDateTimeRFC2822           `json:"date_created"`
	DateUpdated  OptDateTimeRFC2822           `json:"date_updated"`
	Duration     OptNilTexmlRecordingDuration `json:"duration"`
	Sid          OptTexmlSid                  `json:"sid"`
	RecordingSid OptTexmlSid                  `json:"recording_sid"`
	// The status of the recording transcriptions. The transcription text will be available only when the
	// status is completed.
	Status OptTexmlRecordingTranscriptionStatus `json:"status"`
	// The recording's transcribed text.
	TranscriptionText OptString `json:"transcription_text"`
	// The relative URI for the recording transcription resource.
	URI OptString `json:"uri"`
}

// GetAccountSid returns the value of AccountSid.
func (s *TexmlRecordingTranscription) GetAccountSid() OptAccountSid {
	return s.AccountSid
}

// GetCallSid returns the value of CallSid.
func (s *TexmlRecordingTranscription) GetCallSid() OptCallControlId {
	return s.CallSid
}

// GetAPIVersion returns the value of APIVersion.
func (s *TexmlRecordingTranscription) GetAPIVersion() OptString {
	return s.APIVersion
}

// GetDateCreated returns the value of DateCreated.
func (s *TexmlRecordingTranscription) GetDateCreated() OptDateTimeRFC2822 {
	return s.DateCreated
}

// GetDateUpdated returns the value of DateUpdated.
func (s *TexmlRecordingTranscription) GetDateUpdated() OptDateTimeRFC2822 {
	return s.DateUpdated
}

// GetDuration returns the value of Duration.
func (s *TexmlRecordingTranscription) GetDuration() OptNilTexmlRecordingDuration {
	return s.Duration
}

// GetSid returns the value of Sid.
func (s *TexmlRecordingTranscription) GetSid() OptTexmlSid {
	return s.Sid
}

// GetRecordingSid returns the value of RecordingSid.
func (s *TexmlRecordingTranscription) GetRecordingSid() OptTexmlSid {
	return s.RecordingSid
}

// GetStatus returns the value of Status.
func (s *TexmlRecordingTranscription) GetStatus() OptTexmlRecordingTranscriptionStatus {
	return s.Status
}

// GetTranscriptionText returns the value of TranscriptionText.
func (s *TexmlRecordingTranscription) GetTranscriptionText() OptString {
	return s.TranscriptionText
}

// GetURI returns the value of URI.
func (s *TexmlRecordingTranscription) GetURI() OptString {
	return s.URI
}

// SetAccountSid sets the value of AccountSid.
func (s *TexmlRecordingTranscription) SetAccountSid(val OptAccountSid) {
	s.AccountSid = val
}

// SetCallSid sets the value of CallSid.
func (s *TexmlRecordingTranscription) SetCallSid(val OptCallControlId) {
	s.CallSid = val
}

// SetAPIVersion sets the value of APIVersion.
func (s *TexmlRecordingTranscription) SetAPIVersion(val OptString) {
	s.APIVersion = val
}

// SetDateCreated sets the value of DateCreated.
func (s *TexmlRecordingTranscription) SetDateCreated(val OptDateTimeRFC2822) {
	s.DateCreated = val
}

// SetDateUpdated sets the value of DateUpdated.
func (s *TexmlRecordingTranscription) SetDateUpdated(val OptDateTimeRFC2822) {
	s.DateUpdated = val
}

// SetDuration sets the value of Duration.
func (s *TexmlRecordingTranscription) SetDuration(val OptNilTexmlRecordingDuration) {
	s.Duration = val
}

// SetSid sets the value of Sid.
func (s *TexmlRecordingTranscription) SetSid(val OptTexmlSid) {
	s.Sid = val
}

// SetRecordingSid sets the value of RecordingSid.
func (s *TexmlRecordingTranscription) SetRecordingSid(val OptTexmlSid) {
	s.RecordingSid = val
}

// SetStatus sets the value of Status.
func (s *TexmlRecordingTranscription) SetStatus(val OptTexmlRecordingTranscriptionStatus) {
	s.Status = val
}

// SetTranscriptionText sets the value of TranscriptionText.
func (s *TexmlRecordingTranscription) SetTranscriptionText(val OptString) {
	s.TranscriptionText = val
}

// SetURI sets the value of URI.
func (s *TexmlRecordingTranscription) SetURI(val OptString) {
	s.URI = val
}

func (*TexmlRecordingTranscription) getTeXMLRecordingTranscriptionRes() {}

// The status of the recording transcriptions. The transcription text will be available only when the
// status is completed.
type TexmlRecordingTranscriptionStatus string

const (
	TexmlRecordingTranscriptionStatusInProgress TexmlRecordingTranscriptionStatus = "in-progress"
	TexmlRecordingTranscriptionStatusCompleted  TexmlRecordingTranscriptionStatus = "completed"
)

// AllValues returns all TexmlRecordingTranscriptionStatus values.
func (TexmlRecordingTranscriptionStatus) AllValues() []TexmlRecordingTranscriptionStatus {
	return []TexmlRecordingTranscriptionStatus{
		TexmlRecordingTranscriptionStatusInProgress,
		TexmlRecordingTranscriptionStatusCompleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TexmlRecordingTranscriptionStatus) MarshalText() ([]byte, error) {
	switch s {
	case TexmlRecordingTranscriptionStatusInProgress:
		return []byte(s), nil
	case TexmlRecordingTranscriptionStatusCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TexmlRecordingTranscriptionStatus) UnmarshalText(data []byte) error {
	switch TexmlRecordingTranscriptionStatus(data) {
	case TexmlRecordingTranscriptionStatusInProgress:
		*s = TexmlRecordingTranscriptionStatusInProgress
		return nil
	case TexmlRecordingTranscriptionStatusCompleted:
		*s = TexmlRecordingTranscriptionStatusCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TexmlSid string

type TexmlStatusCallback url.URL

// HTTP method used to send status callbacks.
// Ref: #/components/schemas/TexmlStatusCallbackMethod
type TexmlStatusCallbackMethod string

const (
	TexmlStatusCallbackMethodGET  TexmlStatusCallbackMethod = "GET"
	TexmlStatusCallbackMethodPOST TexmlStatusCallbackMethod = "POST"
)

// AllValues returns all TexmlStatusCallbackMethod values.
func (TexmlStatusCallbackMethod) AllValues() []TexmlStatusCallbackMethod {
	return []TexmlStatusCallbackMethod{
		TexmlStatusCallbackMethodGET,
		TexmlStatusCallbackMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TexmlStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case TexmlStatusCallbackMethodGET:
		return []byte(s), nil
	case TexmlStatusCallbackMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TexmlStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch TexmlStatusCallbackMethod(data) {
	case TexmlStatusCallbackMethodGET:
		*s = TexmlStatusCallbackMethodGET
		return nil
	case TexmlStatusCallbackMethodPOST:
		*s = TexmlStatusCallbackMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TexmlUpdateCallRecordingRequestBody
type TexmlUpdateCallRecordingRequestBody struct {
	Status OptTexmlUpdateCallRecordingRequestBodyStatus `json:"Status"`
}

// GetStatus returns the value of Status.
func (s *TexmlUpdateCallRecordingRequestBody) GetStatus() OptTexmlUpdateCallRecordingRequestBodyStatus {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *TexmlUpdateCallRecordingRequestBody) SetStatus(val OptTexmlUpdateCallRecordingRequestBodyStatus) {
	s.Status = val
}

type TexmlUpdateCallRecordingRequestBodyStatus string

const (
	TexmlUpdateCallRecordingRequestBodyStatusInProgress TexmlUpdateCallRecordingRequestBodyStatus = "in-progress"
	TexmlUpdateCallRecordingRequestBodyStatusPaused     TexmlUpdateCallRecordingRequestBodyStatus = "paused"
	TexmlUpdateCallRecordingRequestBodyStatusStopped    TexmlUpdateCallRecordingRequestBodyStatus = "stopped"
)

// AllValues returns all TexmlUpdateCallRecordingRequestBodyStatus values.
func (TexmlUpdateCallRecordingRequestBodyStatus) AllValues() []TexmlUpdateCallRecordingRequestBodyStatus {
	return []TexmlUpdateCallRecordingRequestBodyStatus{
		TexmlUpdateCallRecordingRequestBodyStatusInProgress,
		TexmlUpdateCallRecordingRequestBodyStatusPaused,
		TexmlUpdateCallRecordingRequestBodyStatusStopped,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TexmlUpdateCallRecordingRequestBodyStatus) MarshalText() ([]byte, error) {
	switch s {
	case TexmlUpdateCallRecordingRequestBodyStatusInProgress:
		return []byte(s), nil
	case TexmlUpdateCallRecordingRequestBodyStatusPaused:
		return []byte(s), nil
	case TexmlUpdateCallRecordingRequestBodyStatusStopped:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TexmlUpdateCallRecordingRequestBodyStatus) UnmarshalText(data []byte) error {
	switch TexmlUpdateCallRecordingRequestBodyStatus(data) {
	case TexmlUpdateCallRecordingRequestBodyStatusInProgress:
		*s = TexmlUpdateCallRecordingRequestBodyStatusInProgress
		return nil
	case TexmlUpdateCallRecordingRequestBodyStatusPaused:
		*s = TexmlUpdateCallRecordingRequestBodyStatusPaused
		return nil
	case TexmlUpdateCallRecordingRequestBodyStatusStopped:
		*s = TexmlUpdateCallRecordingRequestBodyStatusStopped
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ToNumber string

// Specifies the type of traffic allowed in this profile.
// Ref: #/components/schemas/TrafficType
type TrafficType string

const (
	TrafficTypeConversational TrafficType = "conversational"
)

// AllValues returns all TrafficType values.
func (TrafficType) AllValues() []TrafficType {
	return []TrafficType{
		TrafficTypeConversational,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TrafficType) MarshalText() ([]byte, error) {
	switch s {
	case TrafficTypeConversational:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TrafficType) UnmarshalText(data []byte) error {
	switch TrafficType(data) {
	case TrafficTypeConversational:
		*s = TrafficTypeConversational
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TranscriptionStartRequest
type TranscriptionStartRequest struct {
	// Engine to use for speech recognition. `A` - `google`, `B` - `telnyx`.
	TranscriptionEngine OptTranscriptionStartRequestTranscriptionEngine `json:"transcription_engine"`
	// Language to use for speech recognition.
	Language OptTranscriptionStartRequestLanguage `json:"language"`
	// Whether to send also interim results. If set to false, only final results will be sent. Applies to
	// `google` engine only.
	InterimResults OptBool `json:"interim_results"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Indicates which leg of the call will be transcribed. Use `inbound` for the leg that requested the
	// transcription, `outbound` for the other leg, and `both` for both legs of the call. Will default to
	// `inbound`.
	TranscriptionTracks OptString `json:"transcription_tracks"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetTranscriptionEngine returns the value of TranscriptionEngine.
func (s *TranscriptionStartRequest) GetTranscriptionEngine() OptTranscriptionStartRequestTranscriptionEngine {
	return s.TranscriptionEngine
}

// GetLanguage returns the value of Language.
func (s *TranscriptionStartRequest) GetLanguage() OptTranscriptionStartRequestLanguage {
	return s.Language
}

// GetInterimResults returns the value of InterimResults.
func (s *TranscriptionStartRequest) GetInterimResults() OptBool {
	return s.InterimResults
}

// GetClientState returns the value of ClientState.
func (s *TranscriptionStartRequest) GetClientState() OptString {
	return s.ClientState
}

// GetTranscriptionTracks returns the value of TranscriptionTracks.
func (s *TranscriptionStartRequest) GetTranscriptionTracks() OptString {
	return s.TranscriptionTracks
}

// GetCommandID returns the value of CommandID.
func (s *TranscriptionStartRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetTranscriptionEngine sets the value of TranscriptionEngine.
func (s *TranscriptionStartRequest) SetTranscriptionEngine(val OptTranscriptionStartRequestTranscriptionEngine) {
	s.TranscriptionEngine = val
}

// SetLanguage sets the value of Language.
func (s *TranscriptionStartRequest) SetLanguage(val OptTranscriptionStartRequestLanguage) {
	s.Language = val
}

// SetInterimResults sets the value of InterimResults.
func (s *TranscriptionStartRequest) SetInterimResults(val OptBool) {
	s.InterimResults = val
}

// SetClientState sets the value of ClientState.
func (s *TranscriptionStartRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetTranscriptionTracks sets the value of TranscriptionTracks.
func (s *TranscriptionStartRequest) SetTranscriptionTracks(val OptString) {
	s.TranscriptionTracks = val
}

// SetCommandID sets the value of CommandID.
func (s *TranscriptionStartRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// Language to use for speech recognition.
type TranscriptionStartRequestLanguage string

const (
	TranscriptionStartRequestLanguageDe TranscriptionStartRequestLanguage = "de"
	TranscriptionStartRequestLanguageEn TranscriptionStartRequestLanguage = "en"
	TranscriptionStartRequestLanguageEs TranscriptionStartRequestLanguage = "es"
	TranscriptionStartRequestLanguageFr TranscriptionStartRequestLanguage = "fr"
	TranscriptionStartRequestLanguageIt TranscriptionStartRequestLanguage = "it"
	TranscriptionStartRequestLanguagePl TranscriptionStartRequestLanguage = "pl"
)

// AllValues returns all TranscriptionStartRequestLanguage values.
func (TranscriptionStartRequestLanguage) AllValues() []TranscriptionStartRequestLanguage {
	return []TranscriptionStartRequestLanguage{
		TranscriptionStartRequestLanguageDe,
		TranscriptionStartRequestLanguageEn,
		TranscriptionStartRequestLanguageEs,
		TranscriptionStartRequestLanguageFr,
		TranscriptionStartRequestLanguageIt,
		TranscriptionStartRequestLanguagePl,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TranscriptionStartRequestLanguage) MarshalText() ([]byte, error) {
	switch s {
	case TranscriptionStartRequestLanguageDe:
		return []byte(s), nil
	case TranscriptionStartRequestLanguageEn:
		return []byte(s), nil
	case TranscriptionStartRequestLanguageEs:
		return []byte(s), nil
	case TranscriptionStartRequestLanguageFr:
		return []byte(s), nil
	case TranscriptionStartRequestLanguageIt:
		return []byte(s), nil
	case TranscriptionStartRequestLanguagePl:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TranscriptionStartRequestLanguage) UnmarshalText(data []byte) error {
	switch TranscriptionStartRequestLanguage(data) {
	case TranscriptionStartRequestLanguageDe:
		*s = TranscriptionStartRequestLanguageDe
		return nil
	case TranscriptionStartRequestLanguageEn:
		*s = TranscriptionStartRequestLanguageEn
		return nil
	case TranscriptionStartRequestLanguageEs:
		*s = TranscriptionStartRequestLanguageEs
		return nil
	case TranscriptionStartRequestLanguageFr:
		*s = TranscriptionStartRequestLanguageFr
		return nil
	case TranscriptionStartRequestLanguageIt:
		*s = TranscriptionStartRequestLanguageIt
		return nil
	case TranscriptionStartRequestLanguagePl:
		*s = TranscriptionStartRequestLanguagePl
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Engine to use for speech recognition. `A` - `google`, `B` - `telnyx`.
type TranscriptionStartRequestTranscriptionEngine string

const (
	TranscriptionStartRequestTranscriptionEngineA TranscriptionStartRequestTranscriptionEngine = "A"
	TranscriptionStartRequestTranscriptionEngineB TranscriptionStartRequestTranscriptionEngine = "B"
)

// AllValues returns all TranscriptionStartRequestTranscriptionEngine values.
func (TranscriptionStartRequestTranscriptionEngine) AllValues() []TranscriptionStartRequestTranscriptionEngine {
	return []TranscriptionStartRequestTranscriptionEngine{
		TranscriptionStartRequestTranscriptionEngineA,
		TranscriptionStartRequestTranscriptionEngineB,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TranscriptionStartRequestTranscriptionEngine) MarshalText() ([]byte, error) {
	switch s {
	case TranscriptionStartRequestTranscriptionEngineA:
		return []byte(s), nil
	case TranscriptionStartRequestTranscriptionEngineB:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TranscriptionStartRequestTranscriptionEngine) UnmarshalText(data []byte) error {
	switch TranscriptionStartRequestTranscriptionEngine(data) {
	case TranscriptionStartRequestTranscriptionEngineA:
		*s = TranscriptionStartRequestTranscriptionEngineA
		return nil
	case TranscriptionStartRequestTranscriptionEngineB:
		*s = TranscriptionStartRequestTranscriptionEngineB
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TranscriptionStopRequest
type TranscriptionStopRequest struct {
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
}

// GetClientState returns the value of ClientState.
func (s *TranscriptionStopRequest) GetClientState() OptString {
	return s.ClientState
}

// GetCommandID returns the value of CommandID.
func (s *TranscriptionStopRequest) GetCommandID() OptString {
	return s.CommandID
}

// SetClientState sets the value of ClientState.
func (s *TranscriptionStopRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *TranscriptionStopRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// Ref: #/components/schemas/TransferCallRequest
type TransferCallRequest struct {
	// The DID or SIP URI to dial out to.
	To string `json:"to"`
	// The `from` number to be used as the caller id presented to the destination (`to` number). The
	// number should be in +E164 format. This attribute will default to the `to` number of the original
	// call if omitted.
	From OptString `json:"from"`
	// The `from_display_name` string to be used as the caller id name (SIP From Display Name) presented
	// to the destination (`to` number). The string should have a maximum of 128 characters, containing
	// only letters, numbers, spaces, and -_~!.+ special characters. If ommited, the display name will be
	// the same as the number in the `from` field.
	FromDisplayName OptString `json:"from_display_name"`
	// The URL of a file to be played back when the transfer destination answers before bridging the call.
	//  The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together
	// in one request.
	AudioURL OptString `json:"audio_url"`
	// The media_name of a file to be played back when the transfer destination answers before bridging
	// the call. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by
	// the same user/organization. The file must either be a WAV or MP3 file.
	MediaName OptString `json:"media_name"`
	// The number of seconds that Telnyx will wait for the call to be answered by the destination to
	// which it is being transferred. If the timeout is reached before an answer is received, the call
	// will hangup and a `call.hangup` webhook with a `hangup_cause` of `timeout` will be sent. Minimum
	// value is 5 seconds. Maximum value is 120 seconds.
	TimeoutSecs OptInt32 `json:"timeout_secs"`
	// Sets the maximum duration of a Call Control Leg in seconds. If the time limit is reached, the call
	// will hangup and a `call.hangup` webhook with a `hangup_cause` of `time_limit` will be sent. For
	// example, by setting a time limit of 120 seconds, a Call Leg will be automatically terminated two
	// minutes after being answered. The default time limit is 14400 seconds or 4 hours and this is also
	// the maximum allowed call length.
	TimeLimitSecs OptInt32 `json:"time_limit_secs"`
	// Enables Answering Machine Detection. When a call is answered, Telnyx runs real-time detection to
	// determine if it was picked up by a human or a machine and sends an `call.machine.detection.ended`
	// webhook with the analysis result. If 'greeting_end' or 'detect_words' is used and a 'machine' is
	// detected, you will receive another 'call.machine.greeting.ended' webhook when the answering
	// machine greeting ends with a beep or silence. If `detect_beep` is used, you will only receive
	// 'call.machine.greeting.ended' if a beep is detected.
	AnsweringMachineDetection OptTransferCallRequestAnsweringMachineDetection `json:"answering_machine_detection"`
	// Optional configuration parameters to modify 'answering_machine_detection' performance.
	AnsweringMachineDetectionConfig OptTransferCallRequestAnsweringMachineDetectionConfig `json:"answering_machine_detection_config"`
	// Custom headers to be added to the SIP INVITE.
	CustomHeaders []CustomSipHeader `json:"custom_headers"`
	// Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
	ClientState OptString `json:"client_state"`
	// Use this field to add state to every subsequent webhook for the new leg. It must be a valid
	// Base-64 encoded string.
	TargetLegClientState OptString `json:"target_leg_client_state"`
	// Use this field to avoid duplicate commands. Telnyx will ignore any command with the same
	// `command_id` for the same `call_control_id`.
	CommandID OptString `json:"command_id"`
	// Defines whether media should be encrypted on the new call leg.
	MediaEncryption OptTransferCallRequestMediaEncryption `json:"media_encryption"`
	// SIP Authentication username used for SIP challenges.
	SipAuthUsername OptString `json:"sip_auth_username"`
	// SIP Authentication password used for SIP challenges.
	SipAuthPassword OptString `json:"sip_auth_password"`
	// SIP headers to be added to the SIP INVITE. Currently only User-to-User header is supported.
	SipHeaders []SipHeader `json:"sip_headers"`
	// Defines SIP transport protocol to be used on the call.
	SipTransportProtocol OptTransferCallRequestSipTransportProtocol `json:"sip_transport_protocol"`
	SoundModifications   OptSoundModifications                      `json:"sound_modifications"`
	// Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.
	WebhookURL OptString `json:"webhook_url"`
	// HTTP request type used for `webhook_url`.
	WebhookURLMethod OptTransferCallRequestWebhookURLMethod `json:"webhook_url_method"`
}

// GetTo returns the value of To.
func (s *TransferCallRequest) GetTo() string {
	return s.To
}

// GetFrom returns the value of From.
func (s *TransferCallRequest) GetFrom() OptString {
	return s.From
}

// GetFromDisplayName returns the value of FromDisplayName.
func (s *TransferCallRequest) GetFromDisplayName() OptString {
	return s.FromDisplayName
}

// GetAudioURL returns the value of AudioURL.
func (s *TransferCallRequest) GetAudioURL() OptString {
	return s.AudioURL
}

// GetMediaName returns the value of MediaName.
func (s *TransferCallRequest) GetMediaName() OptString {
	return s.MediaName
}

// GetTimeoutSecs returns the value of TimeoutSecs.
func (s *TransferCallRequest) GetTimeoutSecs() OptInt32 {
	return s.TimeoutSecs
}

// GetTimeLimitSecs returns the value of TimeLimitSecs.
func (s *TransferCallRequest) GetTimeLimitSecs() OptInt32 {
	return s.TimeLimitSecs
}

// GetAnsweringMachineDetection returns the value of AnsweringMachineDetection.
func (s *TransferCallRequest) GetAnsweringMachineDetection() OptTransferCallRequestAnsweringMachineDetection {
	return s.AnsweringMachineDetection
}

// GetAnsweringMachineDetectionConfig returns the value of AnsweringMachineDetectionConfig.
func (s *TransferCallRequest) GetAnsweringMachineDetectionConfig() OptTransferCallRequestAnsweringMachineDetectionConfig {
	return s.AnsweringMachineDetectionConfig
}

// GetCustomHeaders returns the value of CustomHeaders.
func (s *TransferCallRequest) GetCustomHeaders() []CustomSipHeader {
	return s.CustomHeaders
}

// GetClientState returns the value of ClientState.
func (s *TransferCallRequest) GetClientState() OptString {
	return s.ClientState
}

// GetTargetLegClientState returns the value of TargetLegClientState.
func (s *TransferCallRequest) GetTargetLegClientState() OptString {
	return s.TargetLegClientState
}

// GetCommandID returns the value of CommandID.
func (s *TransferCallRequest) GetCommandID() OptString {
	return s.CommandID
}

// GetMediaEncryption returns the value of MediaEncryption.
func (s *TransferCallRequest) GetMediaEncryption() OptTransferCallRequestMediaEncryption {
	return s.MediaEncryption
}

// GetSipAuthUsername returns the value of SipAuthUsername.
func (s *TransferCallRequest) GetSipAuthUsername() OptString {
	return s.SipAuthUsername
}

// GetSipAuthPassword returns the value of SipAuthPassword.
func (s *TransferCallRequest) GetSipAuthPassword() OptString {
	return s.SipAuthPassword
}

// GetSipHeaders returns the value of SipHeaders.
func (s *TransferCallRequest) GetSipHeaders() []SipHeader {
	return s.SipHeaders
}

// GetSipTransportProtocol returns the value of SipTransportProtocol.
func (s *TransferCallRequest) GetSipTransportProtocol() OptTransferCallRequestSipTransportProtocol {
	return s.SipTransportProtocol
}

// GetSoundModifications returns the value of SoundModifications.
func (s *TransferCallRequest) GetSoundModifications() OptSoundModifications {
	return s.SoundModifications
}

// GetWebhookURL returns the value of WebhookURL.
func (s *TransferCallRequest) GetWebhookURL() OptString {
	return s.WebhookURL
}

// GetWebhookURLMethod returns the value of WebhookURLMethod.
func (s *TransferCallRequest) GetWebhookURLMethod() OptTransferCallRequestWebhookURLMethod {
	return s.WebhookURLMethod
}

// SetTo sets the value of To.
func (s *TransferCallRequest) SetTo(val string) {
	s.To = val
}

// SetFrom sets the value of From.
func (s *TransferCallRequest) SetFrom(val OptString) {
	s.From = val
}

// SetFromDisplayName sets the value of FromDisplayName.
func (s *TransferCallRequest) SetFromDisplayName(val OptString) {
	s.FromDisplayName = val
}

// SetAudioURL sets the value of AudioURL.
func (s *TransferCallRequest) SetAudioURL(val OptString) {
	s.AudioURL = val
}

// SetMediaName sets the value of MediaName.
func (s *TransferCallRequest) SetMediaName(val OptString) {
	s.MediaName = val
}

// SetTimeoutSecs sets the value of TimeoutSecs.
func (s *TransferCallRequest) SetTimeoutSecs(val OptInt32) {
	s.TimeoutSecs = val
}

// SetTimeLimitSecs sets the value of TimeLimitSecs.
func (s *TransferCallRequest) SetTimeLimitSecs(val OptInt32) {
	s.TimeLimitSecs = val
}

// SetAnsweringMachineDetection sets the value of AnsweringMachineDetection.
func (s *TransferCallRequest) SetAnsweringMachineDetection(val OptTransferCallRequestAnsweringMachineDetection) {
	s.AnsweringMachineDetection = val
}

// SetAnsweringMachineDetectionConfig sets the value of AnsweringMachineDetectionConfig.
func (s *TransferCallRequest) SetAnsweringMachineDetectionConfig(val OptTransferCallRequestAnsweringMachineDetectionConfig) {
	s.AnsweringMachineDetectionConfig = val
}

// SetCustomHeaders sets the value of CustomHeaders.
func (s *TransferCallRequest) SetCustomHeaders(val []CustomSipHeader) {
	s.CustomHeaders = val
}

// SetClientState sets the value of ClientState.
func (s *TransferCallRequest) SetClientState(val OptString) {
	s.ClientState = val
}

// SetTargetLegClientState sets the value of TargetLegClientState.
func (s *TransferCallRequest) SetTargetLegClientState(val OptString) {
	s.TargetLegClientState = val
}

// SetCommandID sets the value of CommandID.
func (s *TransferCallRequest) SetCommandID(val OptString) {
	s.CommandID = val
}

// SetMediaEncryption sets the value of MediaEncryption.
func (s *TransferCallRequest) SetMediaEncryption(val OptTransferCallRequestMediaEncryption) {
	s.MediaEncryption = val
}

// SetSipAuthUsername sets the value of SipAuthUsername.
func (s *TransferCallRequest) SetSipAuthUsername(val OptString) {
	s.SipAuthUsername = val
}

// SetSipAuthPassword sets the value of SipAuthPassword.
func (s *TransferCallRequest) SetSipAuthPassword(val OptString) {
	s.SipAuthPassword = val
}

// SetSipHeaders sets the value of SipHeaders.
func (s *TransferCallRequest) SetSipHeaders(val []SipHeader) {
	s.SipHeaders = val
}

// SetSipTransportProtocol sets the value of SipTransportProtocol.
func (s *TransferCallRequest) SetSipTransportProtocol(val OptTransferCallRequestSipTransportProtocol) {
	s.SipTransportProtocol = val
}

// SetSoundModifications sets the value of SoundModifications.
func (s *TransferCallRequest) SetSoundModifications(val OptSoundModifications) {
	s.SoundModifications = val
}

// SetWebhookURL sets the value of WebhookURL.
func (s *TransferCallRequest) SetWebhookURL(val OptString) {
	s.WebhookURL = val
}

// SetWebhookURLMethod sets the value of WebhookURLMethod.
func (s *TransferCallRequest) SetWebhookURLMethod(val OptTransferCallRequestWebhookURLMethod) {
	s.WebhookURLMethod = val
}

// Enables Answering Machine Detection. When a call is answered, Telnyx runs real-time detection to
// determine if it was picked up by a human or a machine and sends an `call.machine.detection.ended`
// webhook with the analysis result. If 'greeting_end' or 'detect_words' is used and a 'machine' is
// detected, you will receive another 'call.machine.greeting.ended' webhook when the answering
// machine greeting ends with a beep or silence. If `detect_beep` is used, you will only receive
// 'call.machine.greeting.ended' if a beep is detected.
type TransferCallRequestAnsweringMachineDetection string

const (
	TransferCallRequestAnsweringMachineDetectionPremium     TransferCallRequestAnsweringMachineDetection = "premium"
	TransferCallRequestAnsweringMachineDetectionDetect      TransferCallRequestAnsweringMachineDetection = "detect"
	TransferCallRequestAnsweringMachineDetectionDetectBeep  TransferCallRequestAnsweringMachineDetection = "detect_beep"
	TransferCallRequestAnsweringMachineDetectionDetectWords TransferCallRequestAnsweringMachineDetection = "detect_words"
	TransferCallRequestAnsweringMachineDetectionGreetingEnd TransferCallRequestAnsweringMachineDetection = "greeting_end"
	TransferCallRequestAnsweringMachineDetectionDisabled    TransferCallRequestAnsweringMachineDetection = "disabled"
)

// AllValues returns all TransferCallRequestAnsweringMachineDetection values.
func (TransferCallRequestAnsweringMachineDetection) AllValues() []TransferCallRequestAnsweringMachineDetection {
	return []TransferCallRequestAnsweringMachineDetection{
		TransferCallRequestAnsweringMachineDetectionPremium,
		TransferCallRequestAnsweringMachineDetectionDetect,
		TransferCallRequestAnsweringMachineDetectionDetectBeep,
		TransferCallRequestAnsweringMachineDetectionDetectWords,
		TransferCallRequestAnsweringMachineDetectionGreetingEnd,
		TransferCallRequestAnsweringMachineDetectionDisabled,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TransferCallRequestAnsweringMachineDetection) MarshalText() ([]byte, error) {
	switch s {
	case TransferCallRequestAnsweringMachineDetectionPremium:
		return []byte(s), nil
	case TransferCallRequestAnsweringMachineDetectionDetect:
		return []byte(s), nil
	case TransferCallRequestAnsweringMachineDetectionDetectBeep:
		return []byte(s), nil
	case TransferCallRequestAnsweringMachineDetectionDetectWords:
		return []byte(s), nil
	case TransferCallRequestAnsweringMachineDetectionGreetingEnd:
		return []byte(s), nil
	case TransferCallRequestAnsweringMachineDetectionDisabled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TransferCallRequestAnsweringMachineDetection) UnmarshalText(data []byte) error {
	switch TransferCallRequestAnsweringMachineDetection(data) {
	case TransferCallRequestAnsweringMachineDetectionPremium:
		*s = TransferCallRequestAnsweringMachineDetectionPremium
		return nil
	case TransferCallRequestAnsweringMachineDetectionDetect:
		*s = TransferCallRequestAnsweringMachineDetectionDetect
		return nil
	case TransferCallRequestAnsweringMachineDetectionDetectBeep:
		*s = TransferCallRequestAnsweringMachineDetectionDetectBeep
		return nil
	case TransferCallRequestAnsweringMachineDetectionDetectWords:
		*s = TransferCallRequestAnsweringMachineDetectionDetectWords
		return nil
	case TransferCallRequestAnsweringMachineDetectionGreetingEnd:
		*s = TransferCallRequestAnsweringMachineDetectionGreetingEnd
		return nil
	case TransferCallRequestAnsweringMachineDetectionDisabled:
		*s = TransferCallRequestAnsweringMachineDetectionDisabled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Optional configuration parameters to modify 'answering_machine_detection' performance.
type TransferCallRequestAnsweringMachineDetectionConfig struct {
	// Maximum timeout threshold for overall detection.
	TotalAnalysisTimeMillis OptInt32 `json:"total_analysis_time_millis"`
	// Silence duration threshold after a greeting message or voice for it be considered human.
	AfterGreetingSilenceMillis OptInt32 `json:"after_greeting_silence_millis"`
	// Maximum threshold for silence between words.
	BetweenWordsSilenceMillis OptInt32 `json:"between_words_silence_millis"`
	// Maximum threshold of a human greeting. If greeting longer than this value, considered machine.
	GreetingDurationMillis OptInt32 `json:"greeting_duration_millis"`
	// If initial silence duration is greater than this value, consider it a machine.
	InitialSilenceMillis OptInt32 `json:"initial_silence_millis"`
	// If number of detected words is greater than this value, consder it a machine.
	MaximumNumberOfWords OptInt32 `json:"maximum_number_of_words"`
	// If a single word lasts longer than this threshold, consider it a machine.
	MaximumWordLengthMillis OptInt32 `json:"maximum_word_length_millis"`
	// Minimum noise threshold for any analysis.
	SilenceThreshold OptInt32 `json:"silence_threshold"`
	// If machine already detected, maximum timeout threshold to determine the end of the machine
	// greeting.
	GreetingTotalAnalysisTimeMillis OptInt32 `json:"greeting_total_analysis_time_millis"`
	// If machine already detected, maximum threshold for silence between words. If exceeded, the
	// greeting is considered ended.
	GreetingSilenceDurationMillis OptInt32 `json:"greeting_silence_duration_millis"`
}

// GetTotalAnalysisTimeMillis returns the value of TotalAnalysisTimeMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) GetTotalAnalysisTimeMillis() OptInt32 {
	return s.TotalAnalysisTimeMillis
}

// GetAfterGreetingSilenceMillis returns the value of AfterGreetingSilenceMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) GetAfterGreetingSilenceMillis() OptInt32 {
	return s.AfterGreetingSilenceMillis
}

// GetBetweenWordsSilenceMillis returns the value of BetweenWordsSilenceMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) GetBetweenWordsSilenceMillis() OptInt32 {
	return s.BetweenWordsSilenceMillis
}

// GetGreetingDurationMillis returns the value of GreetingDurationMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) GetGreetingDurationMillis() OptInt32 {
	return s.GreetingDurationMillis
}

// GetInitialSilenceMillis returns the value of InitialSilenceMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) GetInitialSilenceMillis() OptInt32 {
	return s.InitialSilenceMillis
}

// GetMaximumNumberOfWords returns the value of MaximumNumberOfWords.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) GetMaximumNumberOfWords() OptInt32 {
	return s.MaximumNumberOfWords
}

// GetMaximumWordLengthMillis returns the value of MaximumWordLengthMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) GetMaximumWordLengthMillis() OptInt32 {
	return s.MaximumWordLengthMillis
}

// GetSilenceThreshold returns the value of SilenceThreshold.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) GetSilenceThreshold() OptInt32 {
	return s.SilenceThreshold
}

// GetGreetingTotalAnalysisTimeMillis returns the value of GreetingTotalAnalysisTimeMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) GetGreetingTotalAnalysisTimeMillis() OptInt32 {
	return s.GreetingTotalAnalysisTimeMillis
}

// GetGreetingSilenceDurationMillis returns the value of GreetingSilenceDurationMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) GetGreetingSilenceDurationMillis() OptInt32 {
	return s.GreetingSilenceDurationMillis
}

// SetTotalAnalysisTimeMillis sets the value of TotalAnalysisTimeMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) SetTotalAnalysisTimeMillis(val OptInt32) {
	s.TotalAnalysisTimeMillis = val
}

// SetAfterGreetingSilenceMillis sets the value of AfterGreetingSilenceMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) SetAfterGreetingSilenceMillis(val OptInt32) {
	s.AfterGreetingSilenceMillis = val
}

// SetBetweenWordsSilenceMillis sets the value of BetweenWordsSilenceMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) SetBetweenWordsSilenceMillis(val OptInt32) {
	s.BetweenWordsSilenceMillis = val
}

// SetGreetingDurationMillis sets the value of GreetingDurationMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) SetGreetingDurationMillis(val OptInt32) {
	s.GreetingDurationMillis = val
}

// SetInitialSilenceMillis sets the value of InitialSilenceMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) SetInitialSilenceMillis(val OptInt32) {
	s.InitialSilenceMillis = val
}

// SetMaximumNumberOfWords sets the value of MaximumNumberOfWords.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) SetMaximumNumberOfWords(val OptInt32) {
	s.MaximumNumberOfWords = val
}

// SetMaximumWordLengthMillis sets the value of MaximumWordLengthMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) SetMaximumWordLengthMillis(val OptInt32) {
	s.MaximumWordLengthMillis = val
}

// SetSilenceThreshold sets the value of SilenceThreshold.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) SetSilenceThreshold(val OptInt32) {
	s.SilenceThreshold = val
}

// SetGreetingTotalAnalysisTimeMillis sets the value of GreetingTotalAnalysisTimeMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) SetGreetingTotalAnalysisTimeMillis(val OptInt32) {
	s.GreetingTotalAnalysisTimeMillis = val
}

// SetGreetingSilenceDurationMillis sets the value of GreetingSilenceDurationMillis.
func (s *TransferCallRequestAnsweringMachineDetectionConfig) SetGreetingSilenceDurationMillis(val OptInt32) {
	s.GreetingSilenceDurationMillis = val
}

// Defines whether media should be encrypted on the new call leg.
type TransferCallRequestMediaEncryption string

const (
	TransferCallRequestMediaEncryptionDisabled TransferCallRequestMediaEncryption = "disabled"
	TransferCallRequestMediaEncryptionSRTP     TransferCallRequestMediaEncryption = "SRTP"
)

// AllValues returns all TransferCallRequestMediaEncryption values.
func (TransferCallRequestMediaEncryption) AllValues() []TransferCallRequestMediaEncryption {
	return []TransferCallRequestMediaEncryption{
		TransferCallRequestMediaEncryptionDisabled,
		TransferCallRequestMediaEncryptionSRTP,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TransferCallRequestMediaEncryption) MarshalText() ([]byte, error) {
	switch s {
	case TransferCallRequestMediaEncryptionDisabled:
		return []byte(s), nil
	case TransferCallRequestMediaEncryptionSRTP:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TransferCallRequestMediaEncryption) UnmarshalText(data []byte) error {
	switch TransferCallRequestMediaEncryption(data) {
	case TransferCallRequestMediaEncryptionDisabled:
		*s = TransferCallRequestMediaEncryptionDisabled
		return nil
	case TransferCallRequestMediaEncryptionSRTP:
		*s = TransferCallRequestMediaEncryptionSRTP
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Defines SIP transport protocol to be used on the call.
type TransferCallRequestSipTransportProtocol string

const (
	TransferCallRequestSipTransportProtocolUDP TransferCallRequestSipTransportProtocol = "UDP"
	TransferCallRequestSipTransportProtocolTCP TransferCallRequestSipTransportProtocol = "TCP"
	TransferCallRequestSipTransportProtocolTLS TransferCallRequestSipTransportProtocol = "TLS"
)

// AllValues returns all TransferCallRequestSipTransportProtocol values.
func (TransferCallRequestSipTransportProtocol) AllValues() []TransferCallRequestSipTransportProtocol {
	return []TransferCallRequestSipTransportProtocol{
		TransferCallRequestSipTransportProtocolUDP,
		TransferCallRequestSipTransportProtocolTCP,
		TransferCallRequestSipTransportProtocolTLS,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TransferCallRequestSipTransportProtocol) MarshalText() ([]byte, error) {
	switch s {
	case TransferCallRequestSipTransportProtocolUDP:
		return []byte(s), nil
	case TransferCallRequestSipTransportProtocolTCP:
		return []byte(s), nil
	case TransferCallRequestSipTransportProtocolTLS:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TransferCallRequestSipTransportProtocol) UnmarshalText(data []byte) error {
	switch TransferCallRequestSipTransportProtocol(data) {
	case TransferCallRequestSipTransportProtocolUDP:
		*s = TransferCallRequestSipTransportProtocolUDP
		return nil
	case TransferCallRequestSipTransportProtocolTCP:
		*s = TransferCallRequestSipTransportProtocolTCP
		return nil
	case TransferCallRequestSipTransportProtocolTLS:
		*s = TransferCallRequestSipTransportProtocolTLS
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request type used for `webhook_url`.
type TransferCallRequestWebhookURLMethod string

const (
	TransferCallRequestWebhookURLMethodPOST TransferCallRequestWebhookURLMethod = "POST"
	TransferCallRequestWebhookURLMethodGET  TransferCallRequestWebhookURLMethod = "GET"
)

// AllValues returns all TransferCallRequestWebhookURLMethod values.
func (TransferCallRequestWebhookURLMethod) AllValues() []TransferCallRequestWebhookURLMethod {
	return []TransferCallRequestWebhookURLMethod{
		TransferCallRequestWebhookURLMethodPOST,
		TransferCallRequestWebhookURLMethodGET,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TransferCallRequestWebhookURLMethod) MarshalText() ([]byte, error) {
	switch s {
	case TransferCallRequestWebhookURLMethodPOST:
		return []byte(s), nil
	case TransferCallRequestWebhookURLMethodGET:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TransferCallRequestWebhookURLMethod) UnmarshalText(data []byte) error {
	switch TransferCallRequestWebhookURLMethod(data) {
	case TransferCallRequestWebhookURLMethodPOST:
		*s = TransferCallRequestWebhookURLMethodPOST
		return nil
	case TransferCallRequestWebhookURLMethodGET:
		*s = TransferCallRequestWebhookURLMethodGET
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TwimlRecordingChannels
type TwimlRecordingChannels int

const (
	TwimlRecordingChannels1 TwimlRecordingChannels = 1
	TwimlRecordingChannels2 TwimlRecordingChannels = 2
)

// AllValues returns all TwimlRecordingChannels values.
func (TwimlRecordingChannels) AllValues() []TwimlRecordingChannels {
	return []TwimlRecordingChannels{
		TwimlRecordingChannels1,
		TwimlRecordingChannels2,
	}
}

type UUID uuid.UUID

// UnassignPhoneNumberOK is response for UnassignPhoneNumber operation.
type UnassignPhoneNumberOK struct{}

func (*UnassignPhoneNumberOK) unassignPhoneNumberRes() {}

// Ref: #/components/responses/UnauthorizedResponse
type UnauthorizedResponse struct{}

func (*UnauthorizedResponse) createDeletePhoneNumbersJobRes()                  {}
func (*UnauthorizedResponse) createPhoneNumbersJobUpdateEmergencySettingsRes() {}
func (*UnauthorizedResponse) createTexmlApplicationRes()                       {}
func (*UnauthorizedResponse) createUpdatePhoneNumbersJobRes()                  {}
func (*UnauthorizedResponse) deleteCallControlApplicationRes()                 {}
func (*UnauthorizedResponse) deleteTexmlApplicationRes()                       {}
func (*UnauthorizedResponse) findTexmlApplicationsRes()                        {}
func (*UnauthorizedResponse) getTexmlApplicationRes()                          {}
func (*UnauthorizedResponse) listCallControlApplicationsRes()                  {}
func (*UnauthorizedResponse) listPhoneNumbersJobsRes()                         {}
func (*UnauthorizedResponse) retrieveCallControlApplicationRes()               {}
func (*UnauthorizedResponse) retrievePhoneNumbersJobRes()                      {}
func (*UnauthorizedResponse) updateCallControlApplicationRes()                 {}
func (*UnauthorizedResponse) updateTexmlApplicationRes()                       {}

// Merged schema.
// Ref: #/components/schemas/UnprocessableEntityError
type UnprocessableEntityError struct {
	// Merged property.
	Code OptStringInt `json:"code"`
	// Merged property.
	Title OptString `json:"title"`
	// Merged property.
	Detail OptString `json:"detail"`
	// Merged property.
	Source OptUnprocessableEntityErrorSource `json:"source"`
	// Merged property.
	Meta OptUnprocessableEntityErrorMeta `json:"meta"`
}

// GetCode returns the value of Code.
func (s *UnprocessableEntityError) GetCode() OptStringInt {
	return s.Code
}

// GetTitle returns the value of Title.
func (s *UnprocessableEntityError) GetTitle() OptString {
	return s.Title
}

// GetDetail returns the value of Detail.
func (s *UnprocessableEntityError) GetDetail() OptString {
	return s.Detail
}

// GetSource returns the value of Source.
func (s *UnprocessableEntityError) GetSource() OptUnprocessableEntityErrorSource {
	return s.Source
}

// GetMeta returns the value of Meta.
func (s *UnprocessableEntityError) GetMeta() OptUnprocessableEntityErrorMeta {
	return s.Meta
}

// SetCode sets the value of Code.
func (s *UnprocessableEntityError) SetCode(val OptStringInt) {
	s.Code = val
}

// SetTitle sets the value of Title.
func (s *UnprocessableEntityError) SetTitle(val OptString) {
	s.Title = val
}

// SetDetail sets the value of Detail.
func (s *UnprocessableEntityError) SetDetail(val OptString) {
	s.Detail = val
}

// SetSource sets the value of Source.
func (s *UnprocessableEntityError) SetSource(val OptUnprocessableEntityErrorSource) {
	s.Source = val
}

// SetMeta sets the value of Meta.
func (s *UnprocessableEntityError) SetMeta(val OptUnprocessableEntityErrorMeta) {
	s.Meta = val
}

// Merged schema.
type UnprocessableEntityErrorMeta struct {
	URL OptString `json:"url"`
}

// GetURL returns the value of URL.
func (s *UnprocessableEntityErrorMeta) GetURL() OptString {
	return s.URL
}

// SetURL sets the value of URL.
func (s *UnprocessableEntityErrorMeta) SetURL(val OptString) {
	s.URL = val
}

type UnprocessableEntityErrorResponse struct {
	Errors []UnprocessableEntityError `json:"errors"`
}

// GetErrors returns the value of Errors.
func (s *UnprocessableEntityErrorResponse) GetErrors() []UnprocessableEntityError {
	return s.Errors
}

// SetErrors sets the value of Errors.
func (s *UnprocessableEntityErrorResponse) SetErrors(val []UnprocessableEntityError) {
	s.Errors = val
}

func (*UnprocessableEntityErrorResponse) createVerifiedNumberRes()   {}
func (*UnprocessableEntityErrorResponse) listVerifiedNumbersRes()    {}
func (*UnprocessableEntityErrorResponse) verifyVerificationCodeRes() {}

// Merged schema.
type UnprocessableEntityErrorSource struct {
	// Merged property.
	Pointer OptString `json:"pointer"`
	// Indicates which query parameter caused the error.
	Parameter OptString `json:"parameter"`
}

// GetPointer returns the value of Pointer.
func (s *UnprocessableEntityErrorSource) GetPointer() OptString {
	return s.Pointer
}

// GetParameter returns the value of Parameter.
func (s *UnprocessableEntityErrorSource) GetParameter() OptString {
	return s.Parameter
}

// SetPointer sets the value of Pointer.
func (s *UnprocessableEntityErrorSource) SetPointer(val OptString) {
	s.Pointer = val
}

// SetParameter sets the value of Parameter.
func (s *UnprocessableEntityErrorSource) SetParameter(val OptString) {
	s.Parameter = val
}

// UpdateBulkTelephonyCredentialUnprocessableEntity is response for UpdateBulkTelephonyCredential operation.
type UpdateBulkTelephonyCredentialUnprocessableEntity struct{}

func (*UpdateBulkTelephonyCredentialUnprocessableEntity) updateBulkTelephonyCredentialRes() {}

// UpdateCallControlApplicationNotFound is response for UpdateCallControlApplication operation.
type UpdateCallControlApplicationNotFound struct{}

func (*UpdateCallControlApplicationNotFound) updateCallControlApplicationRes() {}

// Ref: #/components/schemas/UpdateCallControlApplicationRequest
type UpdateCallControlApplicationRequest struct {
	// A user-assigned name to help manage the application.
	ApplicationName string `json:"application_name"`
	// The URL where webhooks related to this connection will be sent. Must include a scheme, such as
	// 'https'.
	WebhookEventURL string `json:"webhook_event_url"`
	// Specifies whether the connection can be used.
	Active             OptBool               `json:"active"`
	AnchorsiteOverride OptAnchorsiteOverride `json:"anchorsite_override"`
	// Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to
	// Telnyx will be accepted in all formats.
	DtmfType OptUpdateCallControlApplicationRequestDtmfType `json:"dtmf_type"`
	// Specifies whether calls to phone numbers associated with this connection should hangup after
	// timing out.
	FirstCommandTimeout OptBool `json:"first_command_timeout"`
	// Specifies how many seconds to wait before timing out a dial command.
	FirstCommandTimeoutSecs OptInt                            `json:"first_command_timeout_secs"`
	Inbound                 OptCallControlApplicationInbound  `json:"inbound"`
	Outbound                OptCallControlApplicationOutbound `json:"outbound"`
	// Determines which webhook format will be used, Telnyx API v1 or v2.
	WebhookAPIVersion OptUpdateCallControlApplicationRequestWebhookAPIVersion `json:"webhook_api_version"`
	// The failover URL where webhooks related to this connection will be sent if sending to the primary
	// URL fails. Must include a scheme, such as 'https'.
	WebhookEventFailoverURL OptNilString `json:"webhook_event_failover_url"`
	// Specifies how many seconds to wait before timing out a webhook.
	WebhookTimeoutSecs OptNilInt `json:"webhook_timeout_secs"`
}

// GetApplicationName returns the value of ApplicationName.
func (s *UpdateCallControlApplicationRequest) GetApplicationName() string {
	return s.ApplicationName
}

// GetWebhookEventURL returns the value of WebhookEventURL.
func (s *UpdateCallControlApplicationRequest) GetWebhookEventURL() string {
	return s.WebhookEventURL
}

// GetActive returns the value of Active.
func (s *UpdateCallControlApplicationRequest) GetActive() OptBool {
	return s.Active
}

// GetAnchorsiteOverride returns the value of AnchorsiteOverride.
func (s *UpdateCallControlApplicationRequest) GetAnchorsiteOverride() OptAnchorsiteOverride {
	return s.AnchorsiteOverride
}

// GetDtmfType returns the value of DtmfType.
func (s *UpdateCallControlApplicationRequest) GetDtmfType() OptUpdateCallControlApplicationRequestDtmfType {
	return s.DtmfType
}

// GetFirstCommandTimeout returns the value of FirstCommandTimeout.
func (s *UpdateCallControlApplicationRequest) GetFirstCommandTimeout() OptBool {
	return s.FirstCommandTimeout
}

// GetFirstCommandTimeoutSecs returns the value of FirstCommandTimeoutSecs.
func (s *UpdateCallControlApplicationRequest) GetFirstCommandTimeoutSecs() OptInt {
	return s.FirstCommandTimeoutSecs
}

// GetInbound returns the value of Inbound.
func (s *UpdateCallControlApplicationRequest) GetInbound() OptCallControlApplicationInbound {
	return s.Inbound
}

// GetOutbound returns the value of Outbound.
func (s *UpdateCallControlApplicationRequest) GetOutbound() OptCallControlApplicationOutbound {
	return s.Outbound
}

// GetWebhookAPIVersion returns the value of WebhookAPIVersion.
func (s *UpdateCallControlApplicationRequest) GetWebhookAPIVersion() OptUpdateCallControlApplicationRequestWebhookAPIVersion {
	return s.WebhookAPIVersion
}

// GetWebhookEventFailoverURL returns the value of WebhookEventFailoverURL.
func (s *UpdateCallControlApplicationRequest) GetWebhookEventFailoverURL() OptNilString {
	return s.WebhookEventFailoverURL
}

// GetWebhookTimeoutSecs returns the value of WebhookTimeoutSecs.
func (s *UpdateCallControlApplicationRequest) GetWebhookTimeoutSecs() OptNilInt {
	return s.WebhookTimeoutSecs
}

// SetApplicationName sets the value of ApplicationName.
func (s *UpdateCallControlApplicationRequest) SetApplicationName(val string) {
	s.ApplicationName = val
}

// SetWebhookEventURL sets the value of WebhookEventURL.
func (s *UpdateCallControlApplicationRequest) SetWebhookEventURL(val string) {
	s.WebhookEventURL = val
}

// SetActive sets the value of Active.
func (s *UpdateCallControlApplicationRequest) SetActive(val OptBool) {
	s.Active = val
}

// SetAnchorsiteOverride sets the value of AnchorsiteOverride.
func (s *UpdateCallControlApplicationRequest) SetAnchorsiteOverride(val OptAnchorsiteOverride) {
	s.AnchorsiteOverride = val
}

// SetDtmfType sets the value of DtmfType.
func (s *UpdateCallControlApplicationRequest) SetDtmfType(val OptUpdateCallControlApplicationRequestDtmfType) {
	s.DtmfType = val
}

// SetFirstCommandTimeout sets the value of FirstCommandTimeout.
func (s *UpdateCallControlApplicationRequest) SetFirstCommandTimeout(val OptBool) {
	s.FirstCommandTimeout = val
}

// SetFirstCommandTimeoutSecs sets the value of FirstCommandTimeoutSecs.
func (s *UpdateCallControlApplicationRequest) SetFirstCommandTimeoutSecs(val OptInt) {
	s.FirstCommandTimeoutSecs = val
}

// SetInbound sets the value of Inbound.
func (s *UpdateCallControlApplicationRequest) SetInbound(val OptCallControlApplicationInbound) {
	s.Inbound = val
}

// SetOutbound sets the value of Outbound.
func (s *UpdateCallControlApplicationRequest) SetOutbound(val OptCallControlApplicationOutbound) {
	s.Outbound = val
}

// SetWebhookAPIVersion sets the value of WebhookAPIVersion.
func (s *UpdateCallControlApplicationRequest) SetWebhookAPIVersion(val OptUpdateCallControlApplicationRequestWebhookAPIVersion) {
	s.WebhookAPIVersion = val
}

// SetWebhookEventFailoverURL sets the value of WebhookEventFailoverURL.
func (s *UpdateCallControlApplicationRequest) SetWebhookEventFailoverURL(val OptNilString) {
	s.WebhookEventFailoverURL = val
}

// SetWebhookTimeoutSecs sets the value of WebhookTimeoutSecs.
func (s *UpdateCallControlApplicationRequest) SetWebhookTimeoutSecs(val OptNilInt) {
	s.WebhookTimeoutSecs = val
}

// Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to
// Telnyx will be accepted in all formats.
type UpdateCallControlApplicationRequestDtmfType string

const (
	UpdateCallControlApplicationRequestDtmfTypeRFC2833 UpdateCallControlApplicationRequestDtmfType = "RFC 2833"
	UpdateCallControlApplicationRequestDtmfTypeInband  UpdateCallControlApplicationRequestDtmfType = "Inband"
	UpdateCallControlApplicationRequestDtmfTypeSIPINFO UpdateCallControlApplicationRequestDtmfType = "SIP INFO"
)

// AllValues returns all UpdateCallControlApplicationRequestDtmfType values.
func (UpdateCallControlApplicationRequestDtmfType) AllValues() []UpdateCallControlApplicationRequestDtmfType {
	return []UpdateCallControlApplicationRequestDtmfType{
		UpdateCallControlApplicationRequestDtmfTypeRFC2833,
		UpdateCallControlApplicationRequestDtmfTypeInband,
		UpdateCallControlApplicationRequestDtmfTypeSIPINFO,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateCallControlApplicationRequestDtmfType) MarshalText() ([]byte, error) {
	switch s {
	case UpdateCallControlApplicationRequestDtmfTypeRFC2833:
		return []byte(s), nil
	case UpdateCallControlApplicationRequestDtmfTypeInband:
		return []byte(s), nil
	case UpdateCallControlApplicationRequestDtmfTypeSIPINFO:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateCallControlApplicationRequestDtmfType) UnmarshalText(data []byte) error {
	switch UpdateCallControlApplicationRequestDtmfType(data) {
	case UpdateCallControlApplicationRequestDtmfTypeRFC2833:
		*s = UpdateCallControlApplicationRequestDtmfTypeRFC2833
		return nil
	case UpdateCallControlApplicationRequestDtmfTypeInband:
		*s = UpdateCallControlApplicationRequestDtmfTypeInband
		return nil
	case UpdateCallControlApplicationRequestDtmfTypeSIPINFO:
		*s = UpdateCallControlApplicationRequestDtmfTypeSIPINFO
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Determines which webhook format will be used, Telnyx API v1 or v2.
type UpdateCallControlApplicationRequestWebhookAPIVersion string

const (
	UpdateCallControlApplicationRequestWebhookAPIVersion1 UpdateCallControlApplicationRequestWebhookAPIVersion = "1"
	UpdateCallControlApplicationRequestWebhookAPIVersion2 UpdateCallControlApplicationRequestWebhookAPIVersion = "2"
)

// AllValues returns all UpdateCallControlApplicationRequestWebhookAPIVersion values.
func (UpdateCallControlApplicationRequestWebhookAPIVersion) AllValues() []UpdateCallControlApplicationRequestWebhookAPIVersion {
	return []UpdateCallControlApplicationRequestWebhookAPIVersion{
		UpdateCallControlApplicationRequestWebhookAPIVersion1,
		UpdateCallControlApplicationRequestWebhookAPIVersion2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateCallControlApplicationRequestWebhookAPIVersion) MarshalText() ([]byte, error) {
	switch s {
	case UpdateCallControlApplicationRequestWebhookAPIVersion1:
		return []byte(s), nil
	case UpdateCallControlApplicationRequestWebhookAPIVersion2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateCallControlApplicationRequestWebhookAPIVersion) UnmarshalText(data []byte) error {
	switch UpdateCallControlApplicationRequestWebhookAPIVersion(data) {
	case UpdateCallControlApplicationRequestWebhookAPIVersion1:
		*s = UpdateCallControlApplicationRequestWebhookAPIVersion1
		return nil
	case UpdateCallControlApplicationRequestWebhookAPIVersion2:
		*s = UpdateCallControlApplicationRequestWebhookAPIVersion2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// UpdateCallControlApplicationUnprocessableEntity is response for UpdateCallControlApplication operation.
type UpdateCallControlApplicationUnprocessableEntity struct{}

func (*UpdateCallControlApplicationUnprocessableEntity) updateCallControlApplicationRes() {}

// Ref: #/components/schemas/UpdateCallRequest
type UpdateCallRequest struct {
	// The value to set the call status to. Setting the status to completed ends the call.
	Status OptString `json:"Status"`
	// The URL where TeXML will make a request to retrieve a new set of TeXML instructions to continue
	// the call flow.
	URL OptString `json:"Url"`
	// HTTP request type used for `Url`.
	Method OptUpdateCallRequestMethod `json:"Method"`
	// A failover URL for which Telnyx will retrieve the TeXML call instructions if the Url is not
	// responding.
	FallbackUrl OptString `json:"FallbackUrl"`
	// HTTP request type used for `FallbackUrl`.
	FallbackMethod OptUpdateCallRequestFallbackMethod `json:"FallbackMethod"`
	// URL destination for Telnyx to send status callback events to for the call.
	StatusCallback OptString `json:"StatusCallback"`
	// HTTP request type used for `StatusCallback`.
	StatusCallbackMethod OptUpdateCallRequestStatusCallbackMethod `json:"StatusCallbackMethod"`
	// TeXML to replace the current one with.
	Texml OptString `json:"Texml"`
}

// GetStatus returns the value of Status.
func (s *UpdateCallRequest) GetStatus() OptString {
	return s.Status
}

// GetURL returns the value of URL.
func (s *UpdateCallRequest) GetURL() OptString {
	return s.URL
}

// GetMethod returns the value of Method.
func (s *UpdateCallRequest) GetMethod() OptUpdateCallRequestMethod {
	return s.Method
}

// GetFallbackUrl returns the value of FallbackUrl.
func (s *UpdateCallRequest) GetFallbackUrl() OptString {
	return s.FallbackUrl
}

// GetFallbackMethod returns the value of FallbackMethod.
func (s *UpdateCallRequest) GetFallbackMethod() OptUpdateCallRequestFallbackMethod {
	return s.FallbackMethod
}

// GetStatusCallback returns the value of StatusCallback.
func (s *UpdateCallRequest) GetStatusCallback() OptString {
	return s.StatusCallback
}

// GetStatusCallbackMethod returns the value of StatusCallbackMethod.
func (s *UpdateCallRequest) GetStatusCallbackMethod() OptUpdateCallRequestStatusCallbackMethod {
	return s.StatusCallbackMethod
}

// GetTexml returns the value of Texml.
func (s *UpdateCallRequest) GetTexml() OptString {
	return s.Texml
}

// SetStatus sets the value of Status.
func (s *UpdateCallRequest) SetStatus(val OptString) {
	s.Status = val
}

// SetURL sets the value of URL.
func (s *UpdateCallRequest) SetURL(val OptString) {
	s.URL = val
}

// SetMethod sets the value of Method.
func (s *UpdateCallRequest) SetMethod(val OptUpdateCallRequestMethod) {
	s.Method = val
}

// SetFallbackUrl sets the value of FallbackUrl.
func (s *UpdateCallRequest) SetFallbackUrl(val OptString) {
	s.FallbackUrl = val
}

// SetFallbackMethod sets the value of FallbackMethod.
func (s *UpdateCallRequest) SetFallbackMethod(val OptUpdateCallRequestFallbackMethod) {
	s.FallbackMethod = val
}

// SetStatusCallback sets the value of StatusCallback.
func (s *UpdateCallRequest) SetStatusCallback(val OptString) {
	s.StatusCallback = val
}

// SetStatusCallbackMethod sets the value of StatusCallbackMethod.
func (s *UpdateCallRequest) SetStatusCallbackMethod(val OptUpdateCallRequestStatusCallbackMethod) {
	s.StatusCallbackMethod = val
}

// SetTexml sets the value of Texml.
func (s *UpdateCallRequest) SetTexml(val OptString) {
	s.Texml = val
}

// HTTP request type used for `FallbackUrl`.
type UpdateCallRequestFallbackMethod string

const (
	UpdateCallRequestFallbackMethodGET  UpdateCallRequestFallbackMethod = "GET"
	UpdateCallRequestFallbackMethodPOST UpdateCallRequestFallbackMethod = "POST"
)

// AllValues returns all UpdateCallRequestFallbackMethod values.
func (UpdateCallRequestFallbackMethod) AllValues() []UpdateCallRequestFallbackMethod {
	return []UpdateCallRequestFallbackMethod{
		UpdateCallRequestFallbackMethodGET,
		UpdateCallRequestFallbackMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateCallRequestFallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case UpdateCallRequestFallbackMethodGET:
		return []byte(s), nil
	case UpdateCallRequestFallbackMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateCallRequestFallbackMethod) UnmarshalText(data []byte) error {
	switch UpdateCallRequestFallbackMethod(data) {
	case UpdateCallRequestFallbackMethodGET:
		*s = UpdateCallRequestFallbackMethodGET
		return nil
	case UpdateCallRequestFallbackMethodPOST:
		*s = UpdateCallRequestFallbackMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request type used for `Url`.
type UpdateCallRequestMethod string

const (
	UpdateCallRequestMethodGET  UpdateCallRequestMethod = "GET"
	UpdateCallRequestMethodPOST UpdateCallRequestMethod = "POST"
)

// AllValues returns all UpdateCallRequestMethod values.
func (UpdateCallRequestMethod) AllValues() []UpdateCallRequestMethod {
	return []UpdateCallRequestMethod{
		UpdateCallRequestMethodGET,
		UpdateCallRequestMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateCallRequestMethod) MarshalText() ([]byte, error) {
	switch s {
	case UpdateCallRequestMethodGET:
		return []byte(s), nil
	case UpdateCallRequestMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateCallRequestMethod) UnmarshalText(data []byte) error {
	switch UpdateCallRequestMethod(data) {
	case UpdateCallRequestMethodGET:
		*s = UpdateCallRequestMethodGET
		return nil
	case UpdateCallRequestMethodPOST:
		*s = UpdateCallRequestMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request type used for `StatusCallback`.
type UpdateCallRequestStatusCallbackMethod string

const (
	UpdateCallRequestStatusCallbackMethodGET  UpdateCallRequestStatusCallbackMethod = "GET"
	UpdateCallRequestStatusCallbackMethodPOST UpdateCallRequestStatusCallbackMethod = "POST"
)

// AllValues returns all UpdateCallRequestStatusCallbackMethod values.
func (UpdateCallRequestStatusCallbackMethod) AllValues() []UpdateCallRequestStatusCallbackMethod {
	return []UpdateCallRequestStatusCallbackMethod{
		UpdateCallRequestStatusCallbackMethodGET,
		UpdateCallRequestStatusCallbackMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateCallRequestStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case UpdateCallRequestStatusCallbackMethodGET:
		return []byte(s), nil
	case UpdateCallRequestStatusCallbackMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateCallRequestStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch UpdateCallRequestStatusCallbackMethod(data) {
	case UpdateCallRequestStatusCallbackMethodGET:
		*s = UpdateCallRequestStatusCallbackMethodGET
		return nil
	case UpdateCallRequestStatusCallbackMethodPOST:
		*s = UpdateCallRequestStatusCallbackMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/UpdateCommandResult
type UpdateCommandResult struct {
	Sid    OptString `json:"sid"`
	Status OptString `json:"status"`
}

// GetSid returns the value of Sid.
func (s *UpdateCommandResult) GetSid() OptString {
	return s.Sid
}

// GetStatus returns the value of Status.
func (s *UpdateCommandResult) GetStatus() OptString {
	return s.Status
}

// SetSid sets the value of Sid.
func (s *UpdateCommandResult) SetSid(val OptString) {
	s.Sid = val
}

// SetStatus sets the value of Status.
func (s *UpdateCommandResult) SetStatus(val OptString) {
	s.Status = val
}

// Ref: #/components/schemas/UpdateConferenceParticipantRequest
type UpdateConferenceParticipantRequest struct {
	// Whether the participant should be muted.
	Muted OptBool `json:"Muted"`
	// Whether the participant should be on hold.
	Hold OptBool `json:"Hold"`
	// The URL to be called using the `HoldMethod` for music that plays when the participant is on hold.
	// The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`,
	// `<Pause>`, or `<Redirect>` verbs.
	HoldUrl OptString `json:"HoldUrl"`
	// The HTTP method to use when calling the `HoldUrl`.
	HoldMethod OptUpdateConferenceParticipantRequestHoldMethod `json:"HoldMethod"`
	// The URL to call to announce something to the participant. The URL may return an MP3 fileo a WAV
	// file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
	AnnounceUrl OptString `json:"AnnounceUrl"`
	// The HTTP method used to call the `AnnounceUrl`. Defaults to `POST`.
	AnnounceMethod OptUpdateConferenceParticipantRequestAnnounceMethod `json:"AnnounceMethod"`
	// The URL to call for an audio file to play while the participant is waiting for the conference to
	// start.
	WaitUrl OptString `json:"WaitUrl"`
	// Whether to play a notification beep to the conference when the participant exits.
	BeepOnExit OptBool `json:"BeepOnExit"`
	// Whether to end the conference when the participant leaves.
	EndConferenceOnExit OptBool `json:"EndConferenceOnExit"`
	// Whether the participant is coaching another call. When `true`, `CallSidToCoach` has to be given.
	Coaching OptBool `json:"Coaching"`
	// The SID of the participant who is being coached. The participant being coached is the only
	// participant who can hear the participant who is coaching.
	CallSidToCoach OptString `json:"CallSidToCoach"`
}

// GetMuted returns the value of Muted.
func (s *UpdateConferenceParticipantRequest) GetMuted() OptBool {
	return s.Muted
}

// GetHold returns the value of Hold.
func (s *UpdateConferenceParticipantRequest) GetHold() OptBool {
	return s.Hold
}

// GetHoldUrl returns the value of HoldUrl.
func (s *UpdateConferenceParticipantRequest) GetHoldUrl() OptString {
	return s.HoldUrl
}

// GetHoldMethod returns the value of HoldMethod.
func (s *UpdateConferenceParticipantRequest) GetHoldMethod() OptUpdateConferenceParticipantRequestHoldMethod {
	return s.HoldMethod
}

// GetAnnounceUrl returns the value of AnnounceUrl.
func (s *UpdateConferenceParticipantRequest) GetAnnounceUrl() OptString {
	return s.AnnounceUrl
}

// GetAnnounceMethod returns the value of AnnounceMethod.
func (s *UpdateConferenceParticipantRequest) GetAnnounceMethod() OptUpdateConferenceParticipantRequestAnnounceMethod {
	return s.AnnounceMethod
}

// GetWaitUrl returns the value of WaitUrl.
func (s *UpdateConferenceParticipantRequest) GetWaitUrl() OptString {
	return s.WaitUrl
}

// GetBeepOnExit returns the value of BeepOnExit.
func (s *UpdateConferenceParticipantRequest) GetBeepOnExit() OptBool {
	return s.BeepOnExit
}

// GetEndConferenceOnExit returns the value of EndConferenceOnExit.
func (s *UpdateConferenceParticipantRequest) GetEndConferenceOnExit() OptBool {
	return s.EndConferenceOnExit
}

// GetCoaching returns the value of Coaching.
func (s *UpdateConferenceParticipantRequest) GetCoaching() OptBool {
	return s.Coaching
}

// GetCallSidToCoach returns the value of CallSidToCoach.
func (s *UpdateConferenceParticipantRequest) GetCallSidToCoach() OptString {
	return s.CallSidToCoach
}

// SetMuted sets the value of Muted.
func (s *UpdateConferenceParticipantRequest) SetMuted(val OptBool) {
	s.Muted = val
}

// SetHold sets the value of Hold.
func (s *UpdateConferenceParticipantRequest) SetHold(val OptBool) {
	s.Hold = val
}

// SetHoldUrl sets the value of HoldUrl.
func (s *UpdateConferenceParticipantRequest) SetHoldUrl(val OptString) {
	s.HoldUrl = val
}

// SetHoldMethod sets the value of HoldMethod.
func (s *UpdateConferenceParticipantRequest) SetHoldMethod(val OptUpdateConferenceParticipantRequestHoldMethod) {
	s.HoldMethod = val
}

// SetAnnounceUrl sets the value of AnnounceUrl.
func (s *UpdateConferenceParticipantRequest) SetAnnounceUrl(val OptString) {
	s.AnnounceUrl = val
}

// SetAnnounceMethod sets the value of AnnounceMethod.
func (s *UpdateConferenceParticipantRequest) SetAnnounceMethod(val OptUpdateConferenceParticipantRequestAnnounceMethod) {
	s.AnnounceMethod = val
}

// SetWaitUrl sets the value of WaitUrl.
func (s *UpdateConferenceParticipantRequest) SetWaitUrl(val OptString) {
	s.WaitUrl = val
}

// SetBeepOnExit sets the value of BeepOnExit.
func (s *UpdateConferenceParticipantRequest) SetBeepOnExit(val OptBool) {
	s.BeepOnExit = val
}

// SetEndConferenceOnExit sets the value of EndConferenceOnExit.
func (s *UpdateConferenceParticipantRequest) SetEndConferenceOnExit(val OptBool) {
	s.EndConferenceOnExit = val
}

// SetCoaching sets the value of Coaching.
func (s *UpdateConferenceParticipantRequest) SetCoaching(val OptBool) {
	s.Coaching = val
}

// SetCallSidToCoach sets the value of CallSidToCoach.
func (s *UpdateConferenceParticipantRequest) SetCallSidToCoach(val OptString) {
	s.CallSidToCoach = val
}

// The HTTP method used to call the `AnnounceUrl`. Defaults to `POST`.
type UpdateConferenceParticipantRequestAnnounceMethod string

const (
	UpdateConferenceParticipantRequestAnnounceMethodGET  UpdateConferenceParticipantRequestAnnounceMethod = "GET"
	UpdateConferenceParticipantRequestAnnounceMethodPOST UpdateConferenceParticipantRequestAnnounceMethod = "POST"
)

// AllValues returns all UpdateConferenceParticipantRequestAnnounceMethod values.
func (UpdateConferenceParticipantRequestAnnounceMethod) AllValues() []UpdateConferenceParticipantRequestAnnounceMethod {
	return []UpdateConferenceParticipantRequestAnnounceMethod{
		UpdateConferenceParticipantRequestAnnounceMethodGET,
		UpdateConferenceParticipantRequestAnnounceMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateConferenceParticipantRequestAnnounceMethod) MarshalText() ([]byte, error) {
	switch s {
	case UpdateConferenceParticipantRequestAnnounceMethodGET:
		return []byte(s), nil
	case UpdateConferenceParticipantRequestAnnounceMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateConferenceParticipantRequestAnnounceMethod) UnmarshalText(data []byte) error {
	switch UpdateConferenceParticipantRequestAnnounceMethod(data) {
	case UpdateConferenceParticipantRequestAnnounceMethodGET:
		*s = UpdateConferenceParticipantRequestAnnounceMethodGET
		return nil
	case UpdateConferenceParticipantRequestAnnounceMethodPOST:
		*s = UpdateConferenceParticipantRequestAnnounceMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The HTTP method to use when calling the `HoldUrl`.
type UpdateConferenceParticipantRequestHoldMethod string

const (
	UpdateConferenceParticipantRequestHoldMethodGET  UpdateConferenceParticipantRequestHoldMethod = "GET"
	UpdateConferenceParticipantRequestHoldMethodPOST UpdateConferenceParticipantRequestHoldMethod = "POST"
)

// AllValues returns all UpdateConferenceParticipantRequestHoldMethod values.
func (UpdateConferenceParticipantRequestHoldMethod) AllValues() []UpdateConferenceParticipantRequestHoldMethod {
	return []UpdateConferenceParticipantRequestHoldMethod{
		UpdateConferenceParticipantRequestHoldMethodGET,
		UpdateConferenceParticipantRequestHoldMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateConferenceParticipantRequestHoldMethod) MarshalText() ([]byte, error) {
	switch s {
	case UpdateConferenceParticipantRequestHoldMethodGET:
		return []byte(s), nil
	case UpdateConferenceParticipantRequestHoldMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateConferenceParticipantRequestHoldMethod) UnmarshalText(data []byte) error {
	switch UpdateConferenceParticipantRequestHoldMethod(data) {
	case UpdateConferenceParticipantRequestHoldMethodGET:
		*s = UpdateConferenceParticipantRequestHoldMethodGET
		return nil
	case UpdateConferenceParticipantRequestHoldMethodPOST:
		*s = UpdateConferenceParticipantRequestHoldMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/UpdateConferenceRequest
type UpdateConferenceRequest struct {
	// The new status of the resource. Specifying `completed` will end the conference and hang up all
	// participants.
	Status OptString `json:"Status"`
	// The URL we should call to announce something into the conference. The URL may return an MP3 file,
	// a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
	AnnounceUrl OptString `json:"AnnounceUrl"`
	// The HTTP method used to call the `AnnounceUrl`. Defaults to `POST`.
	AnnounceMethod OptUpdateConferenceRequestAnnounceMethod `json:"AnnounceMethod"`
}

// GetStatus returns the value of Status.
func (s *UpdateConferenceRequest) GetStatus() OptString {
	return s.Status
}

// GetAnnounceUrl returns the value of AnnounceUrl.
func (s *UpdateConferenceRequest) GetAnnounceUrl() OptString {
	return s.AnnounceUrl
}

// GetAnnounceMethod returns the value of AnnounceMethod.
func (s *UpdateConferenceRequest) GetAnnounceMethod() OptUpdateConferenceRequestAnnounceMethod {
	return s.AnnounceMethod
}

// SetStatus sets the value of Status.
func (s *UpdateConferenceRequest) SetStatus(val OptString) {
	s.Status = val
}

// SetAnnounceUrl sets the value of AnnounceUrl.
func (s *UpdateConferenceRequest) SetAnnounceUrl(val OptString) {
	s.AnnounceUrl = val
}

// SetAnnounceMethod sets the value of AnnounceMethod.
func (s *UpdateConferenceRequest) SetAnnounceMethod(val OptUpdateConferenceRequestAnnounceMethod) {
	s.AnnounceMethod = val
}

// The HTTP method used to call the `AnnounceUrl`. Defaults to `POST`.
type UpdateConferenceRequestAnnounceMethod string

const (
	UpdateConferenceRequestAnnounceMethodGET  UpdateConferenceRequestAnnounceMethod = "GET"
	UpdateConferenceRequestAnnounceMethodPOST UpdateConferenceRequestAnnounceMethod = "POST"
)

// AllValues returns all UpdateConferenceRequestAnnounceMethod values.
func (UpdateConferenceRequestAnnounceMethod) AllValues() []UpdateConferenceRequestAnnounceMethod {
	return []UpdateConferenceRequestAnnounceMethod{
		UpdateConferenceRequestAnnounceMethodGET,
		UpdateConferenceRequestAnnounceMethodPOST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateConferenceRequestAnnounceMethod) MarshalText() ([]byte, error) {
	switch s {
	case UpdateConferenceRequestAnnounceMethodGET:
		return []byte(s), nil
	case UpdateConferenceRequestAnnounceMethodPOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateConferenceRequestAnnounceMethod) UnmarshalText(data []byte) error {
	switch UpdateConferenceRequestAnnounceMethod(data) {
	case UpdateConferenceRequestAnnounceMethodGET:
		*s = UpdateConferenceRequestAnnounceMethodGET
		return nil
	case UpdateConferenceRequestAnnounceMethodPOST:
		*s = UpdateConferenceRequestAnnounceMethodPOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// UpdateExternalConnectionPhoneNumberNotFound is response for UpdateExternalConnectionPhoneNumber operation.
type UpdateExternalConnectionPhoneNumberNotFound struct{}

func (*UpdateExternalConnectionPhoneNumberNotFound) updateExternalConnectionPhoneNumberRes() {}

// Ref: #/components/schemas/UpdateExternalConnectionPhoneNumberRequest
type UpdateExternalConnectionPhoneNumberRequest struct {
	// Identifies the location to assign the phone number to.
	LocationID OptUUID `json:"location_id"`
}

// GetLocationID returns the value of LocationID.
func (s *UpdateExternalConnectionPhoneNumberRequest) GetLocationID() OptUUID {
	return s.LocationID
}

// SetLocationID sets the value of LocationID.
func (s *UpdateExternalConnectionPhoneNumberRequest) SetLocationID(val OptUUID) {
	s.LocationID = val
}

// UpdateExternalConnectionPhoneNumberUnauthorized is response for UpdateExternalConnectionPhoneNumber operation.
type UpdateExternalConnectionPhoneNumberUnauthorized struct{}

func (*UpdateExternalConnectionPhoneNumberUnauthorized) updateExternalConnectionPhoneNumberRes() {}

// UpdateExternalConnectionPhoneNumberUnprocessableEntity is response for UpdateExternalConnectionPhoneNumber operation.
type UpdateExternalConnectionPhoneNumberUnprocessableEntity struct{}

func (*UpdateExternalConnectionPhoneNumberUnprocessableEntity) updateExternalConnectionPhoneNumberRes() {
}

// UpdateLoaConfigurationInternalServerError is response for UpdateLoaConfiguration operation.
type UpdateLoaConfigurationInternalServerError struct{}

func (*UpdateLoaConfigurationInternalServerError) updateLoaConfigurationRes() {}

// UpdateLoaConfigurationNotFound is response for UpdateLoaConfiguration operation.
type UpdateLoaConfigurationNotFound struct{}

func (*UpdateLoaConfigurationNotFound) updateLoaConfigurationRes() {}

// The parameters for creating a new LOA configuration.
type UpdateLoaConfigurationReq struct {
	// The name of the LOA configuration.
	Name string `json:"name"`
	// The logo of the LOA configuration.
	Logo UpdateLoaConfigurationReqLogo `json:"logo"`
	// The name of the company.
	CompanyName string `json:"company_name"`
	// The address of the company.
	Address UpdateLoaConfigurationReqAddress `json:"address"`
	// The contact information of the company.
	Contact UpdateLoaConfigurationReqContact `json:"contact"`
}

// GetName returns the value of Name.
func (s *UpdateLoaConfigurationReq) GetName() string {
	return s.Name
}

// GetLogo returns the value of Logo.
func (s *UpdateLoaConfigurationReq) GetLogo() UpdateLoaConfigurationReqLogo {
	return s.Logo
}

// GetCompanyName returns the value of CompanyName.
func (s *UpdateLoaConfigurationReq) GetCompanyName() string {
	return s.CompanyName
}

// GetAddress returns the value of Address.
func (s *UpdateLoaConfigurationReq) GetAddress() UpdateLoaConfigurationReqAddress {
	return s.Address
}

// GetContact returns the value of Contact.
func (s *UpdateLoaConfigurationReq) GetContact() UpdateLoaConfigurationReqContact {
	return s.Contact
}

// SetName sets the value of Name.
func (s *UpdateLoaConfigurationReq) SetName(val string) {
	s.Name = val
}

// SetLogo sets the value of Logo.
func (s *UpdateLoaConfigurationReq) SetLogo(val UpdateLoaConfigurationReqLogo) {
	s.Logo = val
}

// SetCompanyName sets the value of CompanyName.
func (s *UpdateLoaConfigurationReq) SetCompanyName(val string) {
	s.CompanyName = val
}

// SetAddress sets the value of Address.
func (s *UpdateLoaConfigurationReq) SetAddress(val UpdateLoaConfigurationReqAddress) {
	s.Address = val
}

// SetContact sets the value of Contact.
func (s *UpdateLoaConfigurationReq) SetContact(val UpdateLoaConfigurationReqContact) {
	s.Contact = val
}

// The address of the company.
type UpdateLoaConfigurationReqAddress struct {
	// The street address of the company.
	StreetAddress string `json:"street_address"`
	// The extended address of the company.
	ExtendedAddress OptString `json:"extended_address"`
	// The locality of the company.
	City OptString `json:"city"`
	// The administrative area of the company.
	State OptString `json:"state"`
	// The postal code of the company.
	ZipCode OptString `json:"zip_code"`
	// The country code of the company.
	CountryCode string `json:"country_code"`
}

// GetStreetAddress returns the value of StreetAddress.
func (s *UpdateLoaConfigurationReqAddress) GetStreetAddress() string {
	return s.StreetAddress
}

// GetExtendedAddress returns the value of ExtendedAddress.
func (s *UpdateLoaConfigurationReqAddress) GetExtendedAddress() OptString {
	return s.ExtendedAddress
}

// GetCity returns the value of City.
func (s *UpdateLoaConfigurationReqAddress) GetCity() OptString {
	return s.City
}

// GetState returns the value of State.
func (s *UpdateLoaConfigurationReqAddress) GetState() OptString {
	return s.State
}

// GetZipCode returns the value of ZipCode.
func (s *UpdateLoaConfigurationReqAddress) GetZipCode() OptString {
	return s.ZipCode
}

// GetCountryCode returns the value of CountryCode.
func (s *UpdateLoaConfigurationReqAddress) GetCountryCode() string {
	return s.CountryCode
}

// SetStreetAddress sets the value of StreetAddress.
func (s *UpdateLoaConfigurationReqAddress) SetStreetAddress(val string) {
	s.StreetAddress = val
}

// SetExtendedAddress sets the value of ExtendedAddress.
func (s *UpdateLoaConfigurationReqAddress) SetExtendedAddress(val OptString) {
	s.ExtendedAddress = val
}

// SetCity sets the value of City.
func (s *UpdateLoaConfigurationReqAddress) SetCity(val OptString) {
	s.City = val
}

// SetState sets the value of State.
func (s *UpdateLoaConfigurationReqAddress) SetState(val OptString) {
	s.State = val
}

// SetZipCode sets the value of ZipCode.
func (s *UpdateLoaConfigurationReqAddress) SetZipCode(val OptString) {
	s.ZipCode = val
}

// SetCountryCode sets the value of CountryCode.
func (s *UpdateLoaConfigurationReqAddress) SetCountryCode(val string) {
	s.CountryCode = val
}

// The contact information of the company.
type UpdateLoaConfigurationReqContact struct {
	// The email address of the contact.
	Email string `json:"email"`
	// The phone number of the contact.
	PhoneNumber string `json:"phone_number"`
}

// GetEmail returns the value of Email.
func (s *UpdateLoaConfigurationReqContact) GetEmail() string {
	return s.Email
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *UpdateLoaConfigurationReqContact) GetPhoneNumber() string {
	return s.PhoneNumber
}

// SetEmail sets the value of Email.
func (s *UpdateLoaConfigurationReqContact) SetEmail(val string) {
	s.Email = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *UpdateLoaConfigurationReqContact) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// The logo of the LOA configuration.
type UpdateLoaConfigurationReqLogo struct {
	// The document identification.
	DocumentID uuid.UUID `json:"document_id"`
}

// GetDocumentID returns the value of DocumentID.
func (s *UpdateLoaConfigurationReqLogo) GetDocumentID() uuid.UUID {
	return s.DocumentID
}

// SetDocumentID sets the value of DocumentID.
func (s *UpdateLoaConfigurationReqLogo) SetDocumentID(val uuid.UUID) {
	s.DocumentID = val
}

// UpdateLoaConfigurationUnprocessableEntity is response for UpdateLoaConfiguration operation.
type UpdateLoaConfigurationUnprocessableEntity struct{}

func (*UpdateLoaConfigurationUnprocessableEntity) updateLoaConfigurationRes() {}

type UpdateNotificationChannelOK struct {
	Data OptNotificationChannel `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateNotificationChannelOK) GetData() OptNotificationChannel {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateNotificationChannelOK) SetData(val OptNotificationChannel) {
	s.Data = val
}

func (*UpdateNotificationChannelOK) updateNotificationChannelRes() {}

// Ref: #/components/schemas/UpdateNumberOrderDocumentRequest
type UpdateNumberOrderDocumentRequest struct {
	ID         OptUUID   `json:"id"`
	RecordType OptString `json:"record_type"`
	// The id of the file to associate as a number order document.
	FileID OptString `json:"file_id"`
	// Unique id for a requirement.
	RequirementsID OptString `json:"requirements_id"`
	// A customer reference string for customer look ups.
	CustomerReference OptString                                          `json:"customer_reference"`
	RequirementType   OptUpdateNumberOrderDocumentRequestRequirementType `json:"requirement_type"`
	// An ISO 8901 datetime string denoting when the number order document was uploaded.
	CreatedAt OptString `json:"created_at"`
}

// GetID returns the value of ID.
func (s *UpdateNumberOrderDocumentRequest) GetID() OptUUID {
	return s.ID
}

// GetRecordType returns the value of RecordType.
func (s *UpdateNumberOrderDocumentRequest) GetRecordType() OptString {
	return s.RecordType
}

// GetFileID returns the value of FileID.
func (s *UpdateNumberOrderDocumentRequest) GetFileID() OptString {
	return s.FileID
}

// GetRequirementsID returns the value of RequirementsID.
func (s *UpdateNumberOrderDocumentRequest) GetRequirementsID() OptString {
	return s.RequirementsID
}

// GetCustomerReference returns the value of CustomerReference.
func (s *UpdateNumberOrderDocumentRequest) GetCustomerReference() OptString {
	return s.CustomerReference
}

// GetRequirementType returns the value of RequirementType.
func (s *UpdateNumberOrderDocumentRequest) GetRequirementType() OptUpdateNumberOrderDocumentRequestRequirementType {
	return s.RequirementType
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UpdateNumberOrderDocumentRequest) GetCreatedAt() OptString {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *UpdateNumberOrderDocumentRequest) SetID(val OptUUID) {
	s.ID = val
}

// SetRecordType sets the value of RecordType.
func (s *UpdateNumberOrderDocumentRequest) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetFileID sets the value of FileID.
func (s *UpdateNumberOrderDocumentRequest) SetFileID(val OptString) {
	s.FileID = val
}

// SetRequirementsID sets the value of RequirementsID.
func (s *UpdateNumberOrderDocumentRequest) SetRequirementsID(val OptString) {
	s.RequirementsID = val
}

// SetCustomerReference sets the value of CustomerReference.
func (s *UpdateNumberOrderDocumentRequest) SetCustomerReference(val OptString) {
	s.CustomerReference = val
}

// SetRequirementType sets the value of RequirementType.
func (s *UpdateNumberOrderDocumentRequest) SetRequirementType(val OptUpdateNumberOrderDocumentRequestRequirementType) {
	s.RequirementType = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UpdateNumberOrderDocumentRequest) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

type UpdateNumberOrderDocumentRequestRequirementType string

const (
	UpdateNumberOrderDocumentRequestRequirementTypeAddressProof   UpdateNumberOrderDocumentRequestRequirementType = "address_proof"
	UpdateNumberOrderDocumentRequestRequirementTypeIdentification UpdateNumberOrderDocumentRequestRequirementType = "identification"
	UpdateNumberOrderDocumentRequestRequirementTypeRegForm        UpdateNumberOrderDocumentRequestRequirementType = "reg_form"
)

// AllValues returns all UpdateNumberOrderDocumentRequestRequirementType values.
func (UpdateNumberOrderDocumentRequestRequirementType) AllValues() []UpdateNumberOrderDocumentRequestRequirementType {
	return []UpdateNumberOrderDocumentRequestRequirementType{
		UpdateNumberOrderDocumentRequestRequirementTypeAddressProof,
		UpdateNumberOrderDocumentRequestRequirementTypeIdentification,
		UpdateNumberOrderDocumentRequestRequirementTypeRegForm,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateNumberOrderDocumentRequestRequirementType) MarshalText() ([]byte, error) {
	switch s {
	case UpdateNumberOrderDocumentRequestRequirementTypeAddressProof:
		return []byte(s), nil
	case UpdateNumberOrderDocumentRequestRequirementTypeIdentification:
		return []byte(s), nil
	case UpdateNumberOrderDocumentRequestRequirementTypeRegForm:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateNumberOrderDocumentRequestRequirementType) UnmarshalText(data []byte) error {
	switch UpdateNumberOrderDocumentRequestRequirementType(data) {
	case UpdateNumberOrderDocumentRequestRequirementTypeAddressProof:
		*s = UpdateNumberOrderDocumentRequestRequirementTypeAddressProof
		return nil
	case UpdateNumberOrderDocumentRequestRequirementTypeIdentification:
		*s = UpdateNumberOrderDocumentRequestRequirementTypeIdentification
		return nil
	case UpdateNumberOrderDocumentRequestRequirementTypeRegForm:
		*s = UpdateNumberOrderDocumentRequestRequirementTypeRegForm
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/UpdateNumberOrderPhoneNumberRequest
type UpdateNumberOrderPhoneNumberRequest struct {
	RegulatoryRequirements []UpdateRegulatoryRequirement `json:"regulatory_requirements"`
}

// GetRegulatoryRequirements returns the value of RegulatoryRequirements.
func (s *UpdateNumberOrderPhoneNumberRequest) GetRegulatoryRequirements() []UpdateRegulatoryRequirement {
	return s.RegulatoryRequirements
}

// SetRegulatoryRequirements sets the value of RegulatoryRequirements.
func (s *UpdateNumberOrderPhoneNumberRequest) SetRegulatoryRequirements(val []UpdateRegulatoryRequirement) {
	s.RegulatoryRequirements = val
}

type UpdateOutboundChannelsDef struct {
	Errors []UpdateOutboundChannelsDefErrorsItem `json:"errors"`
}

// GetErrors returns the value of Errors.
func (s *UpdateOutboundChannelsDef) GetErrors() []UpdateOutboundChannelsDefErrorsItem {
	return s.Errors
}

// SetErrors sets the value of Errors.
func (s *UpdateOutboundChannelsDef) SetErrors(val []UpdateOutboundChannelsDefErrorsItem) {
	s.Errors = val
}

type UpdateOutboundChannelsDefErrorsItem struct {
	Code   int                                          `json:"code"`
	Title  string                                       `json:"title"`
	Detail OptString                                    `json:"detail"`
	Source OptUpdateOutboundChannelsDefErrorsItemSource `json:"source"`
	Meta   OptUpdateOutboundChannelsDefErrorsItemMeta   `json:"meta"`
}

// GetCode returns the value of Code.
func (s *UpdateOutboundChannelsDefErrorsItem) GetCode() int {
	return s.Code
}

// GetTitle returns the value of Title.
func (s *UpdateOutboundChannelsDefErrorsItem) GetTitle() string {
	return s.Title
}

// GetDetail returns the value of Detail.
func (s *UpdateOutboundChannelsDefErrorsItem) GetDetail() OptString {
	return s.Detail
}

// GetSource returns the value of Source.
func (s *UpdateOutboundChannelsDefErrorsItem) GetSource() OptUpdateOutboundChannelsDefErrorsItemSource {
	return s.Source
}

// GetMeta returns the value of Meta.
func (s *UpdateOutboundChannelsDefErrorsItem) GetMeta() OptUpdateOutboundChannelsDefErrorsItemMeta {
	return s.Meta
}

// SetCode sets the value of Code.
func (s *UpdateOutboundChannelsDefErrorsItem) SetCode(val int) {
	s.Code = val
}

// SetTitle sets the value of Title.
func (s *UpdateOutboundChannelsDefErrorsItem) SetTitle(val string) {
	s.Title = val
}

// SetDetail sets the value of Detail.
func (s *UpdateOutboundChannelsDefErrorsItem) SetDetail(val OptString) {
	s.Detail = val
}

// SetSource sets the value of Source.
func (s *UpdateOutboundChannelsDefErrorsItem) SetSource(val OptUpdateOutboundChannelsDefErrorsItemSource) {
	s.Source = val
}

// SetMeta sets the value of Meta.
func (s *UpdateOutboundChannelsDefErrorsItem) SetMeta(val OptUpdateOutboundChannelsDefErrorsItemMeta) {
	s.Meta = val
}

type UpdateOutboundChannelsDefErrorsItemMeta map[string]jx.Raw

func (s *UpdateOutboundChannelsDefErrorsItemMeta) init() UpdateOutboundChannelsDefErrorsItemMeta {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type UpdateOutboundChannelsDefErrorsItemSource struct {
	// JSON pointer (RFC6901) to the offending entity.
	Pointer OptString `json:"pointer"`
	// Indicates which query parameter caused the error.
	Parameter OptString `json:"parameter"`
}

// GetPointer returns the value of Pointer.
func (s *UpdateOutboundChannelsDefErrorsItemSource) GetPointer() OptString {
	return s.Pointer
}

// GetParameter returns the value of Parameter.
func (s *UpdateOutboundChannelsDefErrorsItemSource) GetParameter() OptString {
	return s.Parameter
}

// SetPointer sets the value of Pointer.
func (s *UpdateOutboundChannelsDefErrorsItemSource) SetPointer(val OptString) {
	s.Pointer = val
}

// SetParameter sets the value of Parameter.
func (s *UpdateOutboundChannelsDefErrorsItemSource) SetParameter(val OptString) {
	s.Parameter = val
}

// UpdateOutboundChannelsDefStatusCode wraps UpdateOutboundChannelsDef with StatusCode.
type UpdateOutboundChannelsDefStatusCode struct {
	StatusCode int
	Response   UpdateOutboundChannelsDef
}

// GetStatusCode returns the value of StatusCode.
func (s *UpdateOutboundChannelsDefStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *UpdateOutboundChannelsDefStatusCode) GetResponse() UpdateOutboundChannelsDef {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *UpdateOutboundChannelsDefStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *UpdateOutboundChannelsDefStatusCode) SetResponse(val UpdateOutboundChannelsDef) {
	s.Response = val
}

func (*UpdateOutboundChannelsDefStatusCode) updateOutboundChannelsRes() {}

type UpdateOutboundChannelsOK struct {
	Data OptUpdateOutboundChannelsOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateOutboundChannelsOK) GetData() OptUpdateOutboundChannelsOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateOutboundChannelsOK) SetData(val OptUpdateOutboundChannelsOKData) {
	s.Data = val
}

func (*UpdateOutboundChannelsOK) updateOutboundChannelsRes() {}

type UpdateOutboundChannelsOKData struct {
	// The number of channels set for the account.
	Channels OptInt `json:"channels"`
	// Identifies the type of the response.
	RecordType OptString `json:"record_type"`
}

// GetChannels returns the value of Channels.
func (s *UpdateOutboundChannelsOKData) GetChannels() OptInt {
	return s.Channels
}

// GetRecordType returns the value of RecordType.
func (s *UpdateOutboundChannelsOKData) GetRecordType() OptString {
	return s.RecordType
}

// SetChannels sets the value of Channels.
func (s *UpdateOutboundChannelsOKData) SetChannels(val OptInt) {
	s.Channels = val
}

// SetRecordType sets the value of RecordType.
func (s *UpdateOutboundChannelsOKData) SetRecordType(val OptString) {
	s.RecordType = val
}

type UpdateOutboundChannelsReq struct {
	// The new number of concurrent channels for the account.
	Channels int `json:"channels"`
}

// GetChannels returns the value of Channels.
func (s *UpdateOutboundChannelsReq) GetChannels() int {
	return s.Channels
}

// SetChannels sets the value of Channels.
func (s *UpdateOutboundChannelsReq) SetChannels(val int) {
	s.Channels = val
}

// UpdateOutboundVoiceProfileNotFound is response for UpdateOutboundVoiceProfile operation.
type UpdateOutboundVoiceProfileNotFound struct{}

func (*UpdateOutboundVoiceProfileNotFound) updateOutboundVoiceProfileRes() {}

// Ref: #/components/schemas/UpdateOutboundVoiceProfileRequest
type UpdateOutboundVoiceProfileRequest struct {
	// A user-supplied name to help with organization.
	Name        string         `json:"name"`
	TrafficType OptTrafficType `json:"traffic_type"`
	ServicePlan OptServicePlan `json:"service_plan"`
	// Must be no more than your global concurrent call limit. Null means no limit.
	ConcurrentCallLimit OptNilInt `json:"concurrent_call_limit"`
	// Specifies whether the outbound voice profile can be used. Disabled profiles will result in
	// outbound calls being blocked for the associated Connections.
	Enabled            OptBool               `json:"enabled"`
	Tags               []string              `json:"tags"`
	UsagePaymentMethod OptUsagePaymentMethod `json:"usage_payment_method"`
	// The list of destinations you want to be able to call using this outbound voice profile formatted
	// in alpha2.
	WhitelistedDestinations []string `json:"whitelisted_destinations"`
	// Maximum rate (price per minute) for a Destination to be allowed when making outbound calls.
	MaxDestinationRate OptFloat64 `json:"max_destination_rate"`
	// The maximum amount of usage charges, in USD, you want Telnyx to allow on this outbound voice
	// profile in a day before disallowing new calls.
	DailySpendLimit OptString `json:"daily_spend_limit"`
	// Specifies whether to enforce the daily_spend_limit on this outbound voice profile.
	DailySpendLimitEnabled OptBool                  `json:"daily_spend_limit_enabled"`
	CallRecording          OptOutboundCallRecording `json:"call_recording"`
	// The ID of the billing group associated with the outbound proflile. Defaults to null (for no group
	// assigned).
	BillingGroupID OptNilUUID `json:"billing_group_id"`
}

// GetName returns the value of Name.
func (s *UpdateOutboundVoiceProfileRequest) GetName() string {
	return s.Name
}

// GetTrafficType returns the value of TrafficType.
func (s *UpdateOutboundVoiceProfileRequest) GetTrafficType() OptTrafficType {
	return s.TrafficType
}

// GetServicePlan returns the value of ServicePlan.
func (s *UpdateOutboundVoiceProfileRequest) GetServicePlan() OptServicePlan {
	return s.ServicePlan
}

// GetConcurrentCallLimit returns the value of ConcurrentCallLimit.
func (s *UpdateOutboundVoiceProfileRequest) GetConcurrentCallLimit() OptNilInt {
	return s.ConcurrentCallLimit
}

// GetEnabled returns the value of Enabled.
func (s *UpdateOutboundVoiceProfileRequest) GetEnabled() OptBool {
	return s.Enabled
}

// GetTags returns the value of Tags.
func (s *UpdateOutboundVoiceProfileRequest) GetTags() []string {
	return s.Tags
}

// GetUsagePaymentMethod returns the value of UsagePaymentMethod.
func (s *UpdateOutboundVoiceProfileRequest) GetUsagePaymentMethod() OptUsagePaymentMethod {
	return s.UsagePaymentMethod
}

// GetWhitelistedDestinations returns the value of WhitelistedDestinations.
func (s *UpdateOutboundVoiceProfileRequest) GetWhitelistedDestinations() []string {
	return s.WhitelistedDestinations
}

// GetMaxDestinationRate returns the value of MaxDestinationRate.
func (s *UpdateOutboundVoiceProfileRequest) GetMaxDestinationRate() OptFloat64 {
	return s.MaxDestinationRate
}

// GetDailySpendLimit returns the value of DailySpendLimit.
func (s *UpdateOutboundVoiceProfileRequest) GetDailySpendLimit() OptString {
	return s.DailySpendLimit
}

// GetDailySpendLimitEnabled returns the value of DailySpendLimitEnabled.
func (s *UpdateOutboundVoiceProfileRequest) GetDailySpendLimitEnabled() OptBool {
	return s.DailySpendLimitEnabled
}

// GetCallRecording returns the value of CallRecording.
func (s *UpdateOutboundVoiceProfileRequest) GetCallRecording() OptOutboundCallRecording {
	return s.CallRecording
}

// GetBillingGroupID returns the value of BillingGroupID.
func (s *UpdateOutboundVoiceProfileRequest) GetBillingGroupID() OptNilUUID {
	return s.BillingGroupID
}

// SetName sets the value of Name.
func (s *UpdateOutboundVoiceProfileRequest) SetName(val string) {
	s.Name = val
}

// SetTrafficType sets the value of TrafficType.
func (s *UpdateOutboundVoiceProfileRequest) SetTrafficType(val OptTrafficType) {
	s.TrafficType = val
}

// SetServicePlan sets the value of ServicePlan.
func (s *UpdateOutboundVoiceProfileRequest) SetServicePlan(val OptServicePlan) {
	s.ServicePlan = val
}

// SetConcurrentCallLimit sets the value of ConcurrentCallLimit.
func (s *UpdateOutboundVoiceProfileRequest) SetConcurrentCallLimit(val OptNilInt) {
	s.ConcurrentCallLimit = val
}

// SetEnabled sets the value of Enabled.
func (s *UpdateOutboundVoiceProfileRequest) SetEnabled(val OptBool) {
	s.Enabled = val
}

// SetTags sets the value of Tags.
func (s *UpdateOutboundVoiceProfileRequest) SetTags(val []string) {
	s.Tags = val
}

// SetUsagePaymentMethod sets the value of UsagePaymentMethod.
func (s *UpdateOutboundVoiceProfileRequest) SetUsagePaymentMethod(val OptUsagePaymentMethod) {
	s.UsagePaymentMethod = val
}

// SetWhitelistedDestinations sets the value of WhitelistedDestinations.
func (s *UpdateOutboundVoiceProfileRequest) SetWhitelistedDestinations(val []string) {
	s.WhitelistedDestinations = val
}

// SetMaxDestinationRate sets the value of MaxDestinationRate.
func (s *UpdateOutboundVoiceProfileRequest) SetMaxDestinationRate(val OptFloat64) {
	s.MaxDestinationRate = val
}

// SetDailySpendLimit sets the value of DailySpendLimit.
func (s *UpdateOutboundVoiceProfileRequest) SetDailySpendLimit(val OptString) {
	s.DailySpendLimit = val
}

// SetDailySpendLimitEnabled sets the value of DailySpendLimitEnabled.
func (s *UpdateOutboundVoiceProfileRequest) SetDailySpendLimitEnabled(val OptBool) {
	s.DailySpendLimitEnabled = val
}

// SetCallRecording sets the value of CallRecording.
func (s *UpdateOutboundVoiceProfileRequest) SetCallRecording(val OptOutboundCallRecording) {
	s.CallRecording = val
}

// SetBillingGroupID sets the value of BillingGroupID.
func (s *UpdateOutboundVoiceProfileRequest) SetBillingGroupID(val OptNilUUID) {
	s.BillingGroupID = val
}

// UpdateOutboundVoiceProfileUnauthorized is response for UpdateOutboundVoiceProfile operation.
type UpdateOutboundVoiceProfileUnauthorized struct{}

func (*UpdateOutboundVoiceProfileUnauthorized) updateOutboundVoiceProfileRes() {}

// UpdateOutboundVoiceProfileUnprocessableEntity is response for UpdateOutboundVoiceProfile operation.
type UpdateOutboundVoiceProfileUnprocessableEntity struct{}

func (*UpdateOutboundVoiceProfileUnprocessableEntity) updateOutboundVoiceProfileRes() {}

// Ref: #/components/schemas/UpdatePhoneNumberMessagingSettingsRequest
type UpdatePhoneNumberMessagingSettingsRequest struct {
	// Unique identifier for a messaging profile.
	MessagingProfileID OptString `json:"messaging_profile_id"`
	// The requested messaging product the number should be on.
	MessagingProduct OptString `json:"messaging_product"`
}

// GetMessagingProfileID returns the value of MessagingProfileID.
func (s *UpdatePhoneNumberMessagingSettingsRequest) GetMessagingProfileID() OptString {
	return s.MessagingProfileID
}

// GetMessagingProduct returns the value of MessagingProduct.
func (s *UpdatePhoneNumberMessagingSettingsRequest) GetMessagingProduct() OptString {
	return s.MessagingProduct
}

// SetMessagingProfileID sets the value of MessagingProfileID.
func (s *UpdatePhoneNumberMessagingSettingsRequest) SetMessagingProfileID(val OptString) {
	s.MessagingProfileID = val
}

// SetMessagingProduct sets the value of MessagingProduct.
func (s *UpdatePhoneNumberMessagingSettingsRequest) SetMessagingProduct(val OptString) {
	s.MessagingProduct = val
}

// Ref: #/components/schemas/UpdatePhoneNumberRequest
type UpdatePhoneNumberRequest struct {
	// Identifies the type of resource.
	ID OptString `json:"id"`
	// A list of user-assigned tags to help organize phone numbers.
	Tags []string `json:"tags"`
	// If someone attempts to port your phone number away from Telnyx and your phone number has an
	// external PIN set, we will attempt to verify that you provided the correct external PIN to the
	// winning carrier. Note that not all carriers cooperate with this security mechanism.
	ExternalPin OptString `json:"external_pin"`
	// Indicates whether HD voice is enabled for this number.
	HdVoiceEnabled OptBool `json:"hd_voice_enabled"`
	// A customer reference string for customer look ups.
	CustomerReference OptString `json:"customer_reference"`
	// Identifies the connection associated with the phone number.
	ConnectionID OptString `json:"connection_id"`
	// Identifies the billing group associated with the phone number.
	BillingGroupID OptString `json:"billing_group_id"`
	// Deprecated field, the only value for this is 'disabled'. All routing for numbers should be
	// configured via connection settings.
	NumberLevelRouting OptUpdatePhoneNumberRequestNumberLevelRouting `json:"number_level_routing"`
}

// GetID returns the value of ID.
func (s *UpdatePhoneNumberRequest) GetID() OptString {
	return s.ID
}

// GetTags returns the value of Tags.
func (s *UpdatePhoneNumberRequest) GetTags() []string {
	return s.Tags
}

// GetExternalPin returns the value of ExternalPin.
func (s *UpdatePhoneNumberRequest) GetExternalPin() OptString {
	return s.ExternalPin
}

// GetHdVoiceEnabled returns the value of HdVoiceEnabled.
func (s *UpdatePhoneNumberRequest) GetHdVoiceEnabled() OptBool {
	return s.HdVoiceEnabled
}

// GetCustomerReference returns the value of CustomerReference.
func (s *UpdatePhoneNumberRequest) GetCustomerReference() OptString {
	return s.CustomerReference
}

// GetConnectionID returns the value of ConnectionID.
func (s *UpdatePhoneNumberRequest) GetConnectionID() OptString {
	return s.ConnectionID
}

// GetBillingGroupID returns the value of BillingGroupID.
func (s *UpdatePhoneNumberRequest) GetBillingGroupID() OptString {
	return s.BillingGroupID
}

// GetNumberLevelRouting returns the value of NumberLevelRouting.
func (s *UpdatePhoneNumberRequest) GetNumberLevelRouting() OptUpdatePhoneNumberRequestNumberLevelRouting {
	return s.NumberLevelRouting
}

// SetID sets the value of ID.
func (s *UpdatePhoneNumberRequest) SetID(val OptString) {
	s.ID = val
}

// SetTags sets the value of Tags.
func (s *UpdatePhoneNumberRequest) SetTags(val []string) {
	s.Tags = val
}

// SetExternalPin sets the value of ExternalPin.
func (s *UpdatePhoneNumberRequest) SetExternalPin(val OptString) {
	s.ExternalPin = val
}

// SetHdVoiceEnabled sets the value of HdVoiceEnabled.
func (s *UpdatePhoneNumberRequest) SetHdVoiceEnabled(val OptBool) {
	s.HdVoiceEnabled = val
}

// SetCustomerReference sets the value of CustomerReference.
func (s *UpdatePhoneNumberRequest) SetCustomerReference(val OptString) {
	s.CustomerReference = val
}

// SetConnectionID sets the value of ConnectionID.
func (s *UpdatePhoneNumberRequest) SetConnectionID(val OptString) {
	s.ConnectionID = val
}

// SetBillingGroupID sets the value of BillingGroupID.
func (s *UpdatePhoneNumberRequest) SetBillingGroupID(val OptString) {
	s.BillingGroupID = val
}

// SetNumberLevelRouting sets the value of NumberLevelRouting.
func (s *UpdatePhoneNumberRequest) SetNumberLevelRouting(val OptUpdatePhoneNumberRequestNumberLevelRouting) {
	s.NumberLevelRouting = val
}

// Deprecated field, the only value for this is 'disabled'. All routing for numbers should be
// configured via connection settings.
type UpdatePhoneNumberRequestNumberLevelRouting string

const (
	UpdatePhoneNumberRequestNumberLevelRoutingDisabled UpdatePhoneNumberRequestNumberLevelRouting = "disabled"
)

// AllValues returns all UpdatePhoneNumberRequestNumberLevelRouting values.
func (UpdatePhoneNumberRequestNumberLevelRouting) AllValues() []UpdatePhoneNumberRequestNumberLevelRouting {
	return []UpdatePhoneNumberRequestNumberLevelRouting{
		UpdatePhoneNumberRequestNumberLevelRoutingDisabled,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdatePhoneNumberRequestNumberLevelRouting) MarshalText() ([]byte, error) {
	switch s {
	case UpdatePhoneNumberRequestNumberLevelRoutingDisabled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdatePhoneNumberRequestNumberLevelRouting) UnmarshalText(data []byte) error {
	switch UpdatePhoneNumberRequestNumberLevelRouting(data) {
	case UpdatePhoneNumberRequestNumberLevelRoutingDisabled:
		*s = UpdatePhoneNumberRequestNumberLevelRoutingDisabled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/UpdatePhoneNumberVoiceSettingsRequest
type UpdatePhoneNumberVoiceSettingsRequest struct {
	// Controls whether a tech prefix is enabled for this phone number.
	TechPrefixEnabled OptBool `json:"tech_prefix_enabled"`
	// This field allows you to rewrite the destination number of an inbound call before the call is
	// routed to you. The value of this field may be any alphanumeric value, and the value will replace
	// the number originally dialed.
	TranslatedNumber OptString `json:"translated_number"`
	// Controls whether the caller ID name is enabled for this phone number.
	CallerIDNameEnabled OptBool           `json:"caller_id_name_enabled"`
	CallForwarding      OptCallForwarding `json:"call_forwarding"`
	CnamListing         OptCnamListing    `json:"cnam_listing"`
	// Controls whether a number is billed per minute or uses your concurrent channels.
	UsagePaymentMethod OptUpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod `json:"usage_payment_method"`
	MediaFeatures      OptMediaFeatures                                           `json:"media_features"`
	CallRecording      OptCallRecording                                           `json:"call_recording"`
	// The inbound_call_screening setting is a phone number configuration option variable that allows
	// users to configure their settings to block or flag fraudulent calls. It can be set to disabled,
	// reject_calls, or flag_calls. This feature has an additional per-number monthly cost associated
	// with it.
	InboundCallScreening OptUpdatePhoneNumberVoiceSettingsRequestInboundCallScreening `json:"inbound_call_screening"`
}

// GetTechPrefixEnabled returns the value of TechPrefixEnabled.
func (s *UpdatePhoneNumberVoiceSettingsRequest) GetTechPrefixEnabled() OptBool {
	return s.TechPrefixEnabled
}

// GetTranslatedNumber returns the value of TranslatedNumber.
func (s *UpdatePhoneNumberVoiceSettingsRequest) GetTranslatedNumber() OptString {
	return s.TranslatedNumber
}

// GetCallerIDNameEnabled returns the value of CallerIDNameEnabled.
func (s *UpdatePhoneNumberVoiceSettingsRequest) GetCallerIDNameEnabled() OptBool {
	return s.CallerIDNameEnabled
}

// GetCallForwarding returns the value of CallForwarding.
func (s *UpdatePhoneNumberVoiceSettingsRequest) GetCallForwarding() OptCallForwarding {
	return s.CallForwarding
}

// GetCnamListing returns the value of CnamListing.
func (s *UpdatePhoneNumberVoiceSettingsRequest) GetCnamListing() OptCnamListing {
	return s.CnamListing
}

// GetUsagePaymentMethod returns the value of UsagePaymentMethod.
func (s *UpdatePhoneNumberVoiceSettingsRequest) GetUsagePaymentMethod() OptUpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod {
	return s.UsagePaymentMethod
}

// GetMediaFeatures returns the value of MediaFeatures.
func (s *UpdatePhoneNumberVoiceSettingsRequest) GetMediaFeatures() OptMediaFeatures {
	return s.MediaFeatures
}

// GetCallRecording returns the value of CallRecording.
func (s *UpdatePhoneNumberVoiceSettingsRequest) GetCallRecording() OptCallRecording {
	return s.CallRecording
}

// GetInboundCallScreening returns the value of InboundCallScreening.
func (s *UpdatePhoneNumberVoiceSettingsRequest) GetInboundCallScreening() OptUpdatePhoneNumberVoiceSettingsRequestInboundCallScreening {
	return s.InboundCallScreening
}

// SetTechPrefixEnabled sets the value of TechPrefixEnabled.
func (s *UpdatePhoneNumberVoiceSettingsRequest) SetTechPrefixEnabled(val OptBool) {
	s.TechPrefixEnabled = val
}

// SetTranslatedNumber sets the value of TranslatedNumber.
func (s *UpdatePhoneNumberVoiceSettingsRequest) SetTranslatedNumber(val OptString) {
	s.TranslatedNumber = val
}

// SetCallerIDNameEnabled sets the value of CallerIDNameEnabled.
func (s *UpdatePhoneNumberVoiceSettingsRequest) SetCallerIDNameEnabled(val OptBool) {
	s.CallerIDNameEnabled = val
}

// SetCallForwarding sets the value of CallForwarding.
func (s *UpdatePhoneNumberVoiceSettingsRequest) SetCallForwarding(val OptCallForwarding) {
	s.CallForwarding = val
}

// SetCnamListing sets the value of CnamListing.
func (s *UpdatePhoneNumberVoiceSettingsRequest) SetCnamListing(val OptCnamListing) {
	s.CnamListing = val
}

// SetUsagePaymentMethod sets the value of UsagePaymentMethod.
func (s *UpdatePhoneNumberVoiceSettingsRequest) SetUsagePaymentMethod(val OptUpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod) {
	s.UsagePaymentMethod = val
}

// SetMediaFeatures sets the value of MediaFeatures.
func (s *UpdatePhoneNumberVoiceSettingsRequest) SetMediaFeatures(val OptMediaFeatures) {
	s.MediaFeatures = val
}

// SetCallRecording sets the value of CallRecording.
func (s *UpdatePhoneNumberVoiceSettingsRequest) SetCallRecording(val OptCallRecording) {
	s.CallRecording = val
}

// SetInboundCallScreening sets the value of InboundCallScreening.
func (s *UpdatePhoneNumberVoiceSettingsRequest) SetInboundCallScreening(val OptUpdatePhoneNumberVoiceSettingsRequestInboundCallScreening) {
	s.InboundCallScreening = val
}

// The inbound_call_screening setting is a phone number configuration option variable that allows
// users to configure their settings to block or flag fraudulent calls. It can be set to disabled,
// reject_calls, or flag_calls. This feature has an additional per-number monthly cost associated
// with it.
type UpdatePhoneNumberVoiceSettingsRequestInboundCallScreening string

const (
	UpdatePhoneNumberVoiceSettingsRequestInboundCallScreeningDisabled    UpdatePhoneNumberVoiceSettingsRequestInboundCallScreening = "disabled"
	UpdatePhoneNumberVoiceSettingsRequestInboundCallScreeningRejectCalls UpdatePhoneNumberVoiceSettingsRequestInboundCallScreening = "reject_calls"
	UpdatePhoneNumberVoiceSettingsRequestInboundCallScreeningFlagCalls   UpdatePhoneNumberVoiceSettingsRequestInboundCallScreening = "flag_calls"
)

// AllValues returns all UpdatePhoneNumberVoiceSettingsRequestInboundCallScreening values.
func (UpdatePhoneNumberVoiceSettingsRequestInboundCallScreening) AllValues() []UpdatePhoneNumberVoiceSettingsRequestInboundCallScreening {
	return []UpdatePhoneNumberVoiceSettingsRequestInboundCallScreening{
		UpdatePhoneNumberVoiceSettingsRequestInboundCallScreeningDisabled,
		UpdatePhoneNumberVoiceSettingsRequestInboundCallScreeningRejectCalls,
		UpdatePhoneNumberVoiceSettingsRequestInboundCallScreeningFlagCalls,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdatePhoneNumberVoiceSettingsRequestInboundCallScreening) MarshalText() ([]byte, error) {
	switch s {
	case UpdatePhoneNumberVoiceSettingsRequestInboundCallScreeningDisabled:
		return []byte(s), nil
	case UpdatePhoneNumberVoiceSettingsRequestInboundCallScreeningRejectCalls:
		return []byte(s), nil
	case UpdatePhoneNumberVoiceSettingsRequestInboundCallScreeningFlagCalls:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdatePhoneNumberVoiceSettingsRequestInboundCallScreening) UnmarshalText(data []byte) error {
	switch UpdatePhoneNumberVoiceSettingsRequestInboundCallScreening(data) {
	case UpdatePhoneNumberVoiceSettingsRequestInboundCallScreeningDisabled:
		*s = UpdatePhoneNumberVoiceSettingsRequestInboundCallScreeningDisabled
		return nil
	case UpdatePhoneNumberVoiceSettingsRequestInboundCallScreeningRejectCalls:
		*s = UpdatePhoneNumberVoiceSettingsRequestInboundCallScreeningRejectCalls
		return nil
	case UpdatePhoneNumberVoiceSettingsRequestInboundCallScreeningFlagCalls:
		*s = UpdatePhoneNumberVoiceSettingsRequestInboundCallScreeningFlagCalls
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Controls whether a number is billed per minute or uses your concurrent channels.
type UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod string

const (
	UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethodPayPerMinute UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod = "pay-per-minute"
	UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethodChannel      UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod = "channel"
)

// AllValues returns all UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod values.
func (UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod) AllValues() []UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod {
	return []UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod{
		UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethodPayPerMinute,
		UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethodChannel,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod) MarshalText() ([]byte, error) {
	switch s {
	case UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethodPayPerMinute:
		return []byte(s), nil
	case UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethodChannel:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod) UnmarshalText(data []byte) error {
	switch UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethod(data) {
	case UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethodPayPerMinute:
		*s = UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethodPayPerMinute
		return nil
	case UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethodChannel:
		*s = UpdatePhoneNumberVoiceSettingsRequestUsagePaymentMethodChannel
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdatePortingLOAConfiguration struct {
	Data OptPortingLOAConfiguration `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdatePortingLOAConfiguration) GetData() OptPortingLOAConfiguration {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdatePortingLOAConfiguration) SetData(val OptPortingLOAConfiguration) {
	s.Data = val
}

func (*UpdatePortingLOAConfiguration) updateLoaConfigurationRes() {}

// Ref: #/components/schemas/UpdatePortingOrder
type UpdatePortingOrder struct {
	Misc                     OptPortingOrderMisc                     `json:"misc"`
	EndUser                  OptPortingOrderEndUser                  `json:"end_user"`
	Documents                OptPortingOrderDocuments                `json:"documents"`
	ActivationSettings       OptUpdatePortingOrderActivationSettings `json:"activation_settings"`
	PhoneNumberConfiguration OptPortingOrderPhoneNumberConfiguration `json:"phone_number_configuration"`
	// List of requirements for porting numbers.
	Requirements      []UpdatePortingOrderRequirement `json:"requirements"`
	UserFeedback      OptPortingOrderUserFeedback     `json:"user_feedback"`
	WebhookURL        OptURI                          `json:"webhook_url"`
	CustomerReference OptString                       `json:"customer_reference"`
}

// GetMisc returns the value of Misc.
func (s *UpdatePortingOrder) GetMisc() OptPortingOrderMisc {
	return s.Misc
}

// GetEndUser returns the value of EndUser.
func (s *UpdatePortingOrder) GetEndUser() OptPortingOrderEndUser {
	return s.EndUser
}

// GetDocuments returns the value of Documents.
func (s *UpdatePortingOrder) GetDocuments() OptPortingOrderDocuments {
	return s.Documents
}

// GetActivationSettings returns the value of ActivationSettings.
func (s *UpdatePortingOrder) GetActivationSettings() OptUpdatePortingOrderActivationSettings {
	return s.ActivationSettings
}

// GetPhoneNumberConfiguration returns the value of PhoneNumberConfiguration.
func (s *UpdatePortingOrder) GetPhoneNumberConfiguration() OptPortingOrderPhoneNumberConfiguration {
	return s.PhoneNumberConfiguration
}

// GetRequirements returns the value of Requirements.
func (s *UpdatePortingOrder) GetRequirements() []UpdatePortingOrderRequirement {
	return s.Requirements
}

// GetUserFeedback returns the value of UserFeedback.
func (s *UpdatePortingOrder) GetUserFeedback() OptPortingOrderUserFeedback {
	return s.UserFeedback
}

// GetWebhookURL returns the value of WebhookURL.
func (s *UpdatePortingOrder) GetWebhookURL() OptURI {
	return s.WebhookURL
}

// GetCustomerReference returns the value of CustomerReference.
func (s *UpdatePortingOrder) GetCustomerReference() OptString {
	return s.CustomerReference
}

// SetMisc sets the value of Misc.
func (s *UpdatePortingOrder) SetMisc(val OptPortingOrderMisc) {
	s.Misc = val
}

// SetEndUser sets the value of EndUser.
func (s *UpdatePortingOrder) SetEndUser(val OptPortingOrderEndUser) {
	s.EndUser = val
}

// SetDocuments sets the value of Documents.
func (s *UpdatePortingOrder) SetDocuments(val OptPortingOrderDocuments) {
	s.Documents = val
}

// SetActivationSettings sets the value of ActivationSettings.
func (s *UpdatePortingOrder) SetActivationSettings(val OptUpdatePortingOrderActivationSettings) {
	s.ActivationSettings = val
}

// SetPhoneNumberConfiguration sets the value of PhoneNumberConfiguration.
func (s *UpdatePortingOrder) SetPhoneNumberConfiguration(val OptPortingOrderPhoneNumberConfiguration) {
	s.PhoneNumberConfiguration = val
}

// SetRequirements sets the value of Requirements.
func (s *UpdatePortingOrder) SetRequirements(val []UpdatePortingOrderRequirement) {
	s.Requirements = val
}

// SetUserFeedback sets the value of UserFeedback.
func (s *UpdatePortingOrder) SetUserFeedback(val OptPortingOrderUserFeedback) {
	s.UserFeedback = val
}

// SetWebhookURL sets the value of WebhookURL.
func (s *UpdatePortingOrder) SetWebhookURL(val OptURI) {
	s.WebhookURL = val
}

// SetCustomerReference sets the value of CustomerReference.
func (s *UpdatePortingOrder) SetCustomerReference(val OptString) {
	s.CustomerReference = val
}

type UpdatePortingOrderActivationSettings struct {
	// ISO 8601 formatted Date/Time requested for the FOC date.
	FocDatetimeRequested OptDateTime `json:"foc_datetime_requested"`
}

// GetFocDatetimeRequested returns the value of FocDatetimeRequested.
func (s *UpdatePortingOrderActivationSettings) GetFocDatetimeRequested() OptDateTime {
	return s.FocDatetimeRequested
}

// SetFocDatetimeRequested sets the value of FocDatetimeRequested.
func (s *UpdatePortingOrderActivationSettings) SetFocDatetimeRequested(val OptDateTime) {
	s.FocDatetimeRequested = val
}

// Ref: #/components/schemas/UpdatePortingOrderRequirement
type UpdatePortingOrderRequirement struct {
	// Identifies the document that satisfies this requirement.
	FieldValue string `json:"field_value"`
	// Identifies the requirement type that meets this requirement.
	RequirementTypeID string `json:"requirement_type_id"`
}

// GetFieldValue returns the value of FieldValue.
func (s *UpdatePortingOrderRequirement) GetFieldValue() string {
	return s.FieldValue
}

// GetRequirementTypeID returns the value of RequirementTypeID.
func (s *UpdatePortingOrderRequirement) GetRequirementTypeID() string {
	return s.RequirementTypeID
}

// SetFieldValue sets the value of FieldValue.
func (s *UpdatePortingOrderRequirement) SetFieldValue(val string) {
	s.FieldValue = val
}

// SetRequirementTypeID sets the value of RequirementTypeID.
func (s *UpdatePortingOrderRequirement) SetRequirementTypeID(val string) {
	s.RequirementTypeID = val
}

type UpdatePortingOrderResponse struct {
	Data OptPortingOrder                   `json:"data"`
	Meta OptUpdatePortingOrderResponseMeta `json:"meta"`
}

// GetData returns the value of Data.
func (s *UpdatePortingOrderResponse) GetData() OptPortingOrder {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *UpdatePortingOrderResponse) GetMeta() OptUpdatePortingOrderResponseMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *UpdatePortingOrderResponse) SetData(val OptPortingOrder) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *UpdatePortingOrderResponse) SetMeta(val OptUpdatePortingOrderResponseMeta) {
	s.Meta = val
}

func (*UpdatePortingOrderResponse) updatePortingOrderRes() {}

type UpdatePortingOrderResponseMeta struct {
	// Link to list all phone numbers.
	PhoneNumbersURL OptString `json:"phone_numbers_url"`
}

// GetPhoneNumbersURL returns the value of PhoneNumbersURL.
func (s *UpdatePortingOrderResponseMeta) GetPhoneNumbersURL() OptString {
	return s.PhoneNumbersURL
}

// SetPhoneNumbersURL sets the value of PhoneNumbersURL.
func (s *UpdatePortingOrderResponseMeta) SetPhoneNumbersURL(val OptString) {
	s.PhoneNumbersURL = val
}

// UpdatePortingOrderUnauthorized is response for UpdatePortingOrder operation.
type UpdatePortingOrderUnauthorized struct{}

func (*UpdatePortingOrderUnauthorized) updatePortingOrderRes() {}

// UpdatePortingOrderUnprocessableEntity is response for UpdatePortingOrder operation.
type UpdatePortingOrderUnprocessableEntity struct{}

func (*UpdatePortingOrderUnprocessableEntity) updatePortingOrderRes() {}

// UpdatePortingOrdersActivationJobNotFound is response for UpdatePortingOrdersActivationJob operation.
type UpdatePortingOrdersActivationJobNotFound struct{}

func (*UpdatePortingOrdersActivationJobNotFound) updatePortingOrdersActivationJobRes() {}

type UpdatePortingOrdersActivationJobReq struct {
	// The desired activation time. The activation time should be between any of the activation windows.
	ActivateAt OptDateTime `json:"activate_at"`
}

// GetActivateAt returns the value of ActivateAt.
func (s *UpdatePortingOrdersActivationJobReq) GetActivateAt() OptDateTime {
	return s.ActivateAt
}

// SetActivateAt sets the value of ActivateAt.
func (s *UpdatePortingOrdersActivationJobReq) SetActivateAt(val OptDateTime) {
	s.ActivateAt = val
}

// UpdatePortingOrdersActivationJobUnprocessableEntity is response for UpdatePortingOrdersActivationJob operation.
type UpdatePortingOrdersActivationJobUnprocessableEntity struct{}

func (*UpdatePortingOrdersActivationJobUnprocessableEntity) updatePortingOrdersActivationJobRes() {}

// UpdatePortoutStatusNotFound is response for UpdatePortoutStatus operation.
type UpdatePortoutStatusNotFound struct{}

func (*UpdatePortoutStatusNotFound) updatePortoutStatusRes() {}

type UpdatePortoutStatusReq struct {
	// Provide a reason if rejecting the port out request.
	Reason OptString `json:"reason"`
}

// GetReason returns the value of Reason.
func (s *UpdatePortoutStatusReq) GetReason() OptString {
	return s.Reason
}

// SetReason sets the value of Reason.
func (s *UpdatePortoutStatusReq) SetReason(val OptString) {
	s.Reason = val
}

type UpdatePortoutStatusStatus string

const (
	UpdatePortoutStatusStatusAuthorized      UpdatePortoutStatusStatus = "authorized"
	UpdatePortoutStatusStatusRejectedPending UpdatePortoutStatusStatus = "rejected-pending"
)

// AllValues returns all UpdatePortoutStatusStatus values.
func (UpdatePortoutStatusStatus) AllValues() []UpdatePortoutStatusStatus {
	return []UpdatePortoutStatusStatus{
		UpdatePortoutStatusStatusAuthorized,
		UpdatePortoutStatusStatusRejectedPending,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdatePortoutStatusStatus) MarshalText() ([]byte, error) {
	switch s {
	case UpdatePortoutStatusStatusAuthorized:
		return []byte(s), nil
	case UpdatePortoutStatusStatusRejectedPending:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdatePortoutStatusStatus) UnmarshalText(data []byte) error {
	switch UpdatePortoutStatusStatus(data) {
	case UpdatePortoutStatusStatusAuthorized:
		*s = UpdatePortoutStatusStatusAuthorized
		return nil
	case UpdatePortoutStatusStatusRejectedPending:
		*s = UpdatePortoutStatusStatusRejectedPending
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// UpdatePortoutStatusUnauthorized is response for UpdatePortoutStatus operation.
type UpdatePortoutStatusUnauthorized struct{}

func (*UpdatePortoutStatusUnauthorized) updatePortoutStatusRes() {}

// UpdatePortoutStatusUnprocessableEntity is response for UpdatePortoutStatus operation.
type UpdatePortoutStatusUnprocessableEntity struct{}

func (*UpdatePortoutStatusUnprocessableEntity) updatePortoutStatusRes() {}

// UpdateProfileOK is response for UpdateProfile operation.
type UpdateProfileOK struct{}

func (*UpdateProfileOK) updateProfileRes() {}

// Ref: #/components/schemas/UpdateRegulatoryRequirement
type UpdateRegulatoryRequirement struct {
	// Unique id for a requirement.
	RequirementID OptUUID `json:"requirement_id"`
	// The value of the requirement, this could be an id to a resource or a string value.
	FieldValue OptString `json:"field_value"`
}

// GetRequirementID returns the value of RequirementID.
func (s *UpdateRegulatoryRequirement) GetRequirementID() OptUUID {
	return s.RequirementID
}

// GetFieldValue returns the value of FieldValue.
func (s *UpdateRegulatoryRequirement) GetFieldValue() OptString {
	return s.FieldValue
}

// SetRequirementID sets the value of RequirementID.
func (s *UpdateRegulatoryRequirement) SetRequirementID(val OptUUID) {
	s.RequirementID = val
}

// SetFieldValue sets the value of FieldValue.
func (s *UpdateRegulatoryRequirement) SetFieldValue(val OptString) {
	s.FieldValue = val
}

type UpdateTeXMLCallResponse struct {
	Data OptUpdateCommandResult `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateTeXMLCallResponse) GetData() OptUpdateCommandResult {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateTeXMLCallResponse) SetData(val OptUpdateCommandResult) {
	s.Data = val
}

// UpdateTelephonyCredentialNotFound is response for UpdateTelephonyCredential operation.
type UpdateTelephonyCredentialNotFound struct{}

func (*UpdateTelephonyCredentialNotFound) updateTelephonyCredentialRes() {}

// UpdateTelephonyCredentialUnauthorized is response for UpdateTelephonyCredential operation.
type UpdateTelephonyCredentialUnauthorized struct{}

func (*UpdateTelephonyCredentialUnauthorized) updateTelephonyCredentialRes() {}

// UpdateTelephonyCredentialUnprocessableEntity is response for UpdateTelephonyCredential operation.
type UpdateTelephonyCredentialUnprocessableEntity struct{}

func (*UpdateTelephonyCredentialUnprocessableEntity) updateTelephonyCredentialRes() {}

type UpdateTexmlApplicationBadRequest ErrorResponse

func (*UpdateTexmlApplicationBadRequest) updateTexmlApplicationRes() {}

type UpdateTexmlApplicationNotFound ErrorResponse

func (*UpdateTexmlApplicationNotFound) updateTexmlApplicationRes() {}

// Ref: #/components/schemas/UpdateTexmlApplicationRequest
type UpdateTexmlApplicationRequest struct {
	FriendlyName            ApplicationName            `json:"friendly_name"`
	Active                  OptConnectionActive        `json:"active"`
	AnchorsiteOverride      OptAnchorsiteOverride      `json:"anchorsite_override"`
	DtmfType                OptDtmfType                `json:"dtmf_type"`
	FirstCommandTimeout     OptFirstCommandTimeout     `json:"first_command_timeout"`
	FirstCommandTimeoutSecs OptFirstCommandTimeoutSecs `json:"first_command_timeout_secs"`
	// URL to which Telnyx will deliver your XML Translator webhooks.
	VoiceURL string `json:"voice_url"`
	// URL to which Telnyx will deliver your XML Translator webhooks if we get an error response from
	// your voice_url.
	VoiceFallbackURL OptString `json:"voice_fallback_url"`
	// HTTP request method Telnyx will use to interact with your XML Translator webhooks. Either 'get' or
	// 'post'.
	VoiceMethod OptUpdateTexmlApplicationRequestVoiceMethod `json:"voice_method"`
	// URL for Telnyx to send requests to containing information about call progress events.
	StatusCallback OptString `json:"status_callback"`
	// HTTP request method Telnyx should use when requesting the status_callback URL.
	StatusCallbackMethod OptUpdateTexmlApplicationRequestStatusCallbackMethod `json:"status_callback_method"`
	Inbound              OptUpdateTexmlApplicationRequestInbound              `json:"inbound"`
	Outbound             OptUpdateTexmlApplicationRequestOutbound             `json:"outbound"`
}

// GetFriendlyName returns the value of FriendlyName.
func (s *UpdateTexmlApplicationRequest) GetFriendlyName() ApplicationName {
	return s.FriendlyName
}

// GetActive returns the value of Active.
func (s *UpdateTexmlApplicationRequest) GetActive() OptConnectionActive {
	return s.Active
}

// GetAnchorsiteOverride returns the value of AnchorsiteOverride.
func (s *UpdateTexmlApplicationRequest) GetAnchorsiteOverride() OptAnchorsiteOverride {
	return s.AnchorsiteOverride
}

// GetDtmfType returns the value of DtmfType.
func (s *UpdateTexmlApplicationRequest) GetDtmfType() OptDtmfType {
	return s.DtmfType
}

// GetFirstCommandTimeout returns the value of FirstCommandTimeout.
func (s *UpdateTexmlApplicationRequest) GetFirstCommandTimeout() OptFirstCommandTimeout {
	return s.FirstCommandTimeout
}

// GetFirstCommandTimeoutSecs returns the value of FirstCommandTimeoutSecs.
func (s *UpdateTexmlApplicationRequest) GetFirstCommandTimeoutSecs() OptFirstCommandTimeoutSecs {
	return s.FirstCommandTimeoutSecs
}

// GetVoiceURL returns the value of VoiceURL.
func (s *UpdateTexmlApplicationRequest) GetVoiceURL() string {
	return s.VoiceURL
}

// GetVoiceFallbackURL returns the value of VoiceFallbackURL.
func (s *UpdateTexmlApplicationRequest) GetVoiceFallbackURL() OptString {
	return s.VoiceFallbackURL
}

// GetVoiceMethod returns the value of VoiceMethod.
func (s *UpdateTexmlApplicationRequest) GetVoiceMethod() OptUpdateTexmlApplicationRequestVoiceMethod {
	return s.VoiceMethod
}

// GetStatusCallback returns the value of StatusCallback.
func (s *UpdateTexmlApplicationRequest) GetStatusCallback() OptString {
	return s.StatusCallback
}

// GetStatusCallbackMethod returns the value of StatusCallbackMethod.
func (s *UpdateTexmlApplicationRequest) GetStatusCallbackMethod() OptUpdateTexmlApplicationRequestStatusCallbackMethod {
	return s.StatusCallbackMethod
}

// GetInbound returns the value of Inbound.
func (s *UpdateTexmlApplicationRequest) GetInbound() OptUpdateTexmlApplicationRequestInbound {
	return s.Inbound
}

// GetOutbound returns the value of Outbound.
func (s *UpdateTexmlApplicationRequest) GetOutbound() OptUpdateTexmlApplicationRequestOutbound {
	return s.Outbound
}

// SetFriendlyName sets the value of FriendlyName.
func (s *UpdateTexmlApplicationRequest) SetFriendlyName(val ApplicationName) {
	s.FriendlyName = val
}

// SetActive sets the value of Active.
func (s *UpdateTexmlApplicationRequest) SetActive(val OptConnectionActive) {
	s.Active = val
}

// SetAnchorsiteOverride sets the value of AnchorsiteOverride.
func (s *UpdateTexmlApplicationRequest) SetAnchorsiteOverride(val OptAnchorsiteOverride) {
	s.AnchorsiteOverride = val
}

// SetDtmfType sets the value of DtmfType.
func (s *UpdateTexmlApplicationRequest) SetDtmfType(val OptDtmfType) {
	s.DtmfType = val
}

// SetFirstCommandTimeout sets the value of FirstCommandTimeout.
func (s *UpdateTexmlApplicationRequest) SetFirstCommandTimeout(val OptFirstCommandTimeout) {
	s.FirstCommandTimeout = val
}

// SetFirstCommandTimeoutSecs sets the value of FirstCommandTimeoutSecs.
func (s *UpdateTexmlApplicationRequest) SetFirstCommandTimeoutSecs(val OptFirstCommandTimeoutSecs) {
	s.FirstCommandTimeoutSecs = val
}

// SetVoiceURL sets the value of VoiceURL.
func (s *UpdateTexmlApplicationRequest) SetVoiceURL(val string) {
	s.VoiceURL = val
}

// SetVoiceFallbackURL sets the value of VoiceFallbackURL.
func (s *UpdateTexmlApplicationRequest) SetVoiceFallbackURL(val OptString) {
	s.VoiceFallbackURL = val
}

// SetVoiceMethod sets the value of VoiceMethod.
func (s *UpdateTexmlApplicationRequest) SetVoiceMethod(val OptUpdateTexmlApplicationRequestVoiceMethod) {
	s.VoiceMethod = val
}

// SetStatusCallback sets the value of StatusCallback.
func (s *UpdateTexmlApplicationRequest) SetStatusCallback(val OptString) {
	s.StatusCallback = val
}

// SetStatusCallbackMethod sets the value of StatusCallbackMethod.
func (s *UpdateTexmlApplicationRequest) SetStatusCallbackMethod(val OptUpdateTexmlApplicationRequestStatusCallbackMethod) {
	s.StatusCallbackMethod = val
}

// SetInbound sets the value of Inbound.
func (s *UpdateTexmlApplicationRequest) SetInbound(val OptUpdateTexmlApplicationRequestInbound) {
	s.Inbound = val
}

// SetOutbound sets the value of Outbound.
func (s *UpdateTexmlApplicationRequest) SetOutbound(val OptUpdateTexmlApplicationRequestOutbound) {
	s.Outbound = val
}

type UpdateTexmlApplicationRequestInbound struct {
	// When set, this will limit the total number of inbound calls to phone numbers associated with this
	// connection.
	ChannelLimit OptInt `json:"channel_limit"`
	// When enabled Telnyx will include Shaken/Stir data in the Webhook for new inbound calls.
	ShakenStirEnabled OptBool `json:"shaken_stir_enabled"`
	// Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a
	// phone number is used, from a SIP endpoint. Example: the subdomain "example.sip.telnyx.com" can be
	// called from any SIP endpoint by using the SIP URI "sip:@example.sip.telnyx.com" where the user
	// part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain
	// calls.
	SipSubdomain OptString `json:"sip_subdomain"`
	// This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public
	// Internet) or "Only my connections" (any connection assigned to the same Telnyx user).
	SipSubdomainReceiveSettings OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings `json:"sip_subdomain_receive_settings"`
}

// GetChannelLimit returns the value of ChannelLimit.
func (s *UpdateTexmlApplicationRequestInbound) GetChannelLimit() OptInt {
	return s.ChannelLimit
}

// GetShakenStirEnabled returns the value of ShakenStirEnabled.
func (s *UpdateTexmlApplicationRequestInbound) GetShakenStirEnabled() OptBool {
	return s.ShakenStirEnabled
}

// GetSipSubdomain returns the value of SipSubdomain.
func (s *UpdateTexmlApplicationRequestInbound) GetSipSubdomain() OptString {
	return s.SipSubdomain
}

// GetSipSubdomainReceiveSettings returns the value of SipSubdomainReceiveSettings.
func (s *UpdateTexmlApplicationRequestInbound) GetSipSubdomainReceiveSettings() OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings {
	return s.SipSubdomainReceiveSettings
}

// SetChannelLimit sets the value of ChannelLimit.
func (s *UpdateTexmlApplicationRequestInbound) SetChannelLimit(val OptInt) {
	s.ChannelLimit = val
}

// SetShakenStirEnabled sets the value of ShakenStirEnabled.
func (s *UpdateTexmlApplicationRequestInbound) SetShakenStirEnabled(val OptBool) {
	s.ShakenStirEnabled = val
}

// SetSipSubdomain sets the value of SipSubdomain.
func (s *UpdateTexmlApplicationRequestInbound) SetSipSubdomain(val OptString) {
	s.SipSubdomain = val
}

// SetSipSubdomainReceiveSettings sets the value of SipSubdomainReceiveSettings.
func (s *UpdateTexmlApplicationRequestInbound) SetSipSubdomainReceiveSettings(val OptUpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) {
	s.SipSubdomainReceiveSettings = val
}

// This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public
// Internet) or "Only my connections" (any connection assigned to the same Telnyx user).
type UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings string

const (
	UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsOnlyMyConnections UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings = "only_my_connections"
	UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsFromAnyone        UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings = "from_anyone"
)

// AllValues returns all UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings values.
func (UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) AllValues() []UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings {
	return []UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings{
		UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsOnlyMyConnections,
		UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsFromAnyone,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) MarshalText() ([]byte, error) {
	switch s {
	case UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsOnlyMyConnections:
		return []byte(s), nil
	case UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsFromAnyone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings) UnmarshalText(data []byte) error {
	switch UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettings(data) {
	case UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsOnlyMyConnections:
		*s = UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsOnlyMyConnections
		return nil
	case UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsFromAnyone:
		*s = UpdateTexmlApplicationRequestInboundSipSubdomainReceiveSettingsFromAnyone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateTexmlApplicationRequestOutbound struct {
	// When set, this will limit the total number of outbound calls to phone numbers associated with this
	// connection.
	ChannelLimit           OptInt                    `json:"channel_limit"`
	OutboundVoiceProfileID OptOutboundVoiceProfileId `json:"outbound_voice_profile_id"`
}

// GetChannelLimit returns the value of ChannelLimit.
func (s *UpdateTexmlApplicationRequestOutbound) GetChannelLimit() OptInt {
	return s.ChannelLimit
}

// GetOutboundVoiceProfileID returns the value of OutboundVoiceProfileID.
func (s *UpdateTexmlApplicationRequestOutbound) GetOutboundVoiceProfileID() OptOutboundVoiceProfileId {
	return s.OutboundVoiceProfileID
}

// SetChannelLimit sets the value of ChannelLimit.
func (s *UpdateTexmlApplicationRequestOutbound) SetChannelLimit(val OptInt) {
	s.ChannelLimit = val
}

// SetOutboundVoiceProfileID sets the value of OutboundVoiceProfileID.
func (s *UpdateTexmlApplicationRequestOutbound) SetOutboundVoiceProfileID(val OptOutboundVoiceProfileId) {
	s.OutboundVoiceProfileID = val
}

// HTTP request method Telnyx should use when requesting the status_callback URL.
type UpdateTexmlApplicationRequestStatusCallbackMethod string

const (
	UpdateTexmlApplicationRequestStatusCallbackMethodGet  UpdateTexmlApplicationRequestStatusCallbackMethod = "get"
	UpdateTexmlApplicationRequestStatusCallbackMethodPost UpdateTexmlApplicationRequestStatusCallbackMethod = "post"
)

// AllValues returns all UpdateTexmlApplicationRequestStatusCallbackMethod values.
func (UpdateTexmlApplicationRequestStatusCallbackMethod) AllValues() []UpdateTexmlApplicationRequestStatusCallbackMethod {
	return []UpdateTexmlApplicationRequestStatusCallbackMethod{
		UpdateTexmlApplicationRequestStatusCallbackMethodGet,
		UpdateTexmlApplicationRequestStatusCallbackMethodPost,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateTexmlApplicationRequestStatusCallbackMethod) MarshalText() ([]byte, error) {
	switch s {
	case UpdateTexmlApplicationRequestStatusCallbackMethodGet:
		return []byte(s), nil
	case UpdateTexmlApplicationRequestStatusCallbackMethodPost:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateTexmlApplicationRequestStatusCallbackMethod) UnmarshalText(data []byte) error {
	switch UpdateTexmlApplicationRequestStatusCallbackMethod(data) {
	case UpdateTexmlApplicationRequestStatusCallbackMethodGet:
		*s = UpdateTexmlApplicationRequestStatusCallbackMethodGet
		return nil
	case UpdateTexmlApplicationRequestStatusCallbackMethodPost:
		*s = UpdateTexmlApplicationRequestStatusCallbackMethodPost
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// HTTP request method Telnyx will use to interact with your XML Translator webhooks. Either 'get' or
// 'post'.
type UpdateTexmlApplicationRequestVoiceMethod string

const (
	UpdateTexmlApplicationRequestVoiceMethodGet  UpdateTexmlApplicationRequestVoiceMethod = "get"
	UpdateTexmlApplicationRequestVoiceMethodPost UpdateTexmlApplicationRequestVoiceMethod = "post"
)

// AllValues returns all UpdateTexmlApplicationRequestVoiceMethod values.
func (UpdateTexmlApplicationRequestVoiceMethod) AllValues() []UpdateTexmlApplicationRequestVoiceMethod {
	return []UpdateTexmlApplicationRequestVoiceMethod{
		UpdateTexmlApplicationRequestVoiceMethodGet,
		UpdateTexmlApplicationRequestVoiceMethodPost,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateTexmlApplicationRequestVoiceMethod) MarshalText() ([]byte, error) {
	switch s {
	case UpdateTexmlApplicationRequestVoiceMethodGet:
		return []byte(s), nil
	case UpdateTexmlApplicationRequestVoiceMethodPost:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateTexmlApplicationRequestVoiceMethod) UnmarshalText(data []byte) error {
	switch UpdateTexmlApplicationRequestVoiceMethod(data) {
	case UpdateTexmlApplicationRequestVoiceMethodGet:
		*s = UpdateTexmlApplicationRequestVoiceMethodGet
		return nil
	case UpdateTexmlApplicationRequestVoiceMethodPost:
		*s = UpdateTexmlApplicationRequestVoiceMethodPost
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateTexmlApplicationUnauthorized ErrorResponse

func (*UpdateTexmlApplicationUnauthorized) updateTexmlApplicationRes() {}

type UpdateTexmlApplicationUnprocessableEntity ErrorResponse

func (*UpdateTexmlApplicationUnprocessableEntity) updateTexmlApplicationRes() {}

// Ref: #/components/schemas/UpdateVerifiedCallsDisplayProfileRequest
type UpdateVerifiedCallsDisplayProfileRequest struct {
	CallReasons  CallReasons  `json:"call_reasons"`
	PhoneNumbers PhoneNumbers `json:"phone_numbers"`
}

// GetCallReasons returns the value of CallReasons.
func (s *UpdateVerifiedCallsDisplayProfileRequest) GetCallReasons() CallReasons {
	return s.CallReasons
}

// GetPhoneNumbers returns the value of PhoneNumbers.
func (s *UpdateVerifiedCallsDisplayProfileRequest) GetPhoneNumbers() PhoneNumbers {
	return s.PhoneNumbers
}

// SetCallReasons sets the value of CallReasons.
func (s *UpdateVerifiedCallsDisplayProfileRequest) SetCallReasons(val CallReasons) {
	s.CallReasons = val
}

// SetPhoneNumbers sets the value of PhoneNumbers.
func (s *UpdateVerifiedCallsDisplayProfileRequest) SetPhoneNumbers(val PhoneNumbers) {
	s.PhoneNumbers = val
}

// Ref: #/components/schemas/UpdateVerifyProfileCallRequest
type UpdateVerifyProfileCallRequest struct {
	// The message template identifier selected from /verify_profiles/templates.
	MessagingTemplateID OptUUID `json:"messaging_template_id"`
	// The name that identifies the application requesting 2fa in the verification message.
	AppName OptString `json:"app_name"`
	// Enabled country destinations to send verification codes. The elements in the list must be valid
	// ISO 3166-1 alpha-2 country codes. If set to `["*"]`, all destinations will be allowed.
	WhitelistedDestinations []string `json:"whitelisted_destinations"`
	// For every request that is initiated via this Verify profile, this sets the number of seconds
	// before a verification request code expires. Once the verification request expires, the user cannot
	// use the code to verify their identity.
	DefaultVerificationTimeoutSecs OptInt `json:"default_verification_timeout_secs"`
}

// GetMessagingTemplateID returns the value of MessagingTemplateID.
func (s *UpdateVerifyProfileCallRequest) GetMessagingTemplateID() OptUUID {
	return s.MessagingTemplateID
}

// GetAppName returns the value of AppName.
func (s *UpdateVerifyProfileCallRequest) GetAppName() OptString {
	return s.AppName
}

// GetWhitelistedDestinations returns the value of WhitelistedDestinations.
func (s *UpdateVerifyProfileCallRequest) GetWhitelistedDestinations() []string {
	return s.WhitelistedDestinations
}

// GetDefaultVerificationTimeoutSecs returns the value of DefaultVerificationTimeoutSecs.
func (s *UpdateVerifyProfileCallRequest) GetDefaultVerificationTimeoutSecs() OptInt {
	return s.DefaultVerificationTimeoutSecs
}

// SetMessagingTemplateID sets the value of MessagingTemplateID.
func (s *UpdateVerifyProfileCallRequest) SetMessagingTemplateID(val OptUUID) {
	s.MessagingTemplateID = val
}

// SetAppName sets the value of AppName.
func (s *UpdateVerifyProfileCallRequest) SetAppName(val OptString) {
	s.AppName = val
}

// SetWhitelistedDestinations sets the value of WhitelistedDestinations.
func (s *UpdateVerifyProfileCallRequest) SetWhitelistedDestinations(val []string) {
	s.WhitelistedDestinations = val
}

// SetDefaultVerificationTimeoutSecs sets the value of DefaultVerificationTimeoutSecs.
func (s *UpdateVerifyProfileCallRequest) SetDefaultVerificationTimeoutSecs(val OptInt) {
	s.DefaultVerificationTimeoutSecs = val
}

// Ref: #/components/schemas/UpdateVerifyProfileFlashcallRequest
type UpdateVerifyProfileFlashcallRequest struct {
	// Enabled country destinations to send verification codes. The elements in the list must be valid
	// ISO 3166-1 alpha-2 country codes. If set to `["*"]`, all destinations will be allowed.
	WhitelistedDestinations []string `json:"whitelisted_destinations"`
	// For every request that is initiated via this Verify profile, this sets the number of seconds
	// before a verification request code expires. Once the verification request expires, the user cannot
	// use the code to verify their identity.
	DefaultVerificationTimeoutSecs OptInt `json:"default_verification_timeout_secs"`
}

// GetWhitelistedDestinations returns the value of WhitelistedDestinations.
func (s *UpdateVerifyProfileFlashcallRequest) GetWhitelistedDestinations() []string {
	return s.WhitelistedDestinations
}

// GetDefaultVerificationTimeoutSecs returns the value of DefaultVerificationTimeoutSecs.
func (s *UpdateVerifyProfileFlashcallRequest) GetDefaultVerificationTimeoutSecs() OptInt {
	return s.DefaultVerificationTimeoutSecs
}

// SetWhitelistedDestinations sets the value of WhitelistedDestinations.
func (s *UpdateVerifyProfileFlashcallRequest) SetWhitelistedDestinations(val []string) {
	s.WhitelistedDestinations = val
}

// SetDefaultVerificationTimeoutSecs sets the value of DefaultVerificationTimeoutSecs.
func (s *UpdateVerifyProfileFlashcallRequest) SetDefaultVerificationTimeoutSecs(val OptInt) {
	s.DefaultVerificationTimeoutSecs = val
}

type UpdateVerifyProfileReq struct {
	Name               OptString                              `json:"name"`
	WebhookURL         OptString                              `json:"webhook_url"`
	WebhookFailoverURL OptString                              `json:"webhook_failover_url"`
	SMS                OptUpdateVerifyProfileSMSRequest       `json:"sms"`
	Call               OptUpdateVerifyProfileCallRequest      `json:"call"`
	Flashcall          OptUpdateVerifyProfileFlashcallRequest `json:"flashcall"`
	Language           OptString                              `json:"language"`
}

// GetName returns the value of Name.
func (s *UpdateVerifyProfileReq) GetName() OptString {
	return s.Name
}

// GetWebhookURL returns the value of WebhookURL.
func (s *UpdateVerifyProfileReq) GetWebhookURL() OptString {
	return s.WebhookURL
}

// GetWebhookFailoverURL returns the value of WebhookFailoverURL.
func (s *UpdateVerifyProfileReq) GetWebhookFailoverURL() OptString {
	return s.WebhookFailoverURL
}

// GetSMS returns the value of SMS.
func (s *UpdateVerifyProfileReq) GetSMS() OptUpdateVerifyProfileSMSRequest {
	return s.SMS
}

// GetCall returns the value of Call.
func (s *UpdateVerifyProfileReq) GetCall() OptUpdateVerifyProfileCallRequest {
	return s.Call
}

// GetFlashcall returns the value of Flashcall.
func (s *UpdateVerifyProfileReq) GetFlashcall() OptUpdateVerifyProfileFlashcallRequest {
	return s.Flashcall
}

// GetLanguage returns the value of Language.
func (s *UpdateVerifyProfileReq) GetLanguage() OptString {
	return s.Language
}

// SetName sets the value of Name.
func (s *UpdateVerifyProfileReq) SetName(val OptString) {
	s.Name = val
}

// SetWebhookURL sets the value of WebhookURL.
func (s *UpdateVerifyProfileReq) SetWebhookURL(val OptString) {
	s.WebhookURL = val
}

// SetWebhookFailoverURL sets the value of WebhookFailoverURL.
func (s *UpdateVerifyProfileReq) SetWebhookFailoverURL(val OptString) {
	s.WebhookFailoverURL = val
}

// SetSMS sets the value of SMS.
func (s *UpdateVerifyProfileReq) SetSMS(val OptUpdateVerifyProfileSMSRequest) {
	s.SMS = val
}

// SetCall sets the value of Call.
func (s *UpdateVerifyProfileReq) SetCall(val OptUpdateVerifyProfileCallRequest) {
	s.Call = val
}

// SetFlashcall sets the value of Flashcall.
func (s *UpdateVerifyProfileReq) SetFlashcall(val OptUpdateVerifyProfileFlashcallRequest) {
	s.Flashcall = val
}

// SetLanguage sets the value of Language.
func (s *UpdateVerifyProfileReq) SetLanguage(val OptString) {
	s.Language = val
}

// Ref: #/components/schemas/UpdateVerifyProfileSMSRequest
type UpdateVerifyProfileSMSRequest struct {
	// The message template identifier selected from /verify_profiles/templates.
	MessagingTemplateID OptUUID `json:"messaging_template_id"`
	// The name that identifies the application requesting 2fa in the verification message.
	AppName OptString `json:"app_name"`
	// The alphanumeric sender ID to use when sending to destinations that require an alphanumeric sender
	// ID.
	AlphaSender OptNilString `json:"alpha_sender"`
	// Enabled country destinations to send verification codes. The elements in the list must be valid
	// ISO 3166-1 alpha-2 country codes. If set to `["*"]`, all destinations will be allowed.
	WhitelistedDestinations []string `json:"whitelisted_destinations"`
	// For every request that is initiated via this Verify profile, this sets the number of seconds
	// before a verification request code expires. Once the verification request expires, the user cannot
	// use the code to verify their identity.
	DefaultVerificationTimeoutSecs OptInt `json:"default_verification_timeout_secs"`
}

// GetMessagingTemplateID returns the value of MessagingTemplateID.
func (s *UpdateVerifyProfileSMSRequest) GetMessagingTemplateID() OptUUID {
	return s.MessagingTemplateID
}

// GetAppName returns the value of AppName.
func (s *UpdateVerifyProfileSMSRequest) GetAppName() OptString {
	return s.AppName
}

// GetAlphaSender returns the value of AlphaSender.
func (s *UpdateVerifyProfileSMSRequest) GetAlphaSender() OptNilString {
	return s.AlphaSender
}

// GetWhitelistedDestinations returns the value of WhitelistedDestinations.
func (s *UpdateVerifyProfileSMSRequest) GetWhitelistedDestinations() []string {
	return s.WhitelistedDestinations
}

// GetDefaultVerificationTimeoutSecs returns the value of DefaultVerificationTimeoutSecs.
func (s *UpdateVerifyProfileSMSRequest) GetDefaultVerificationTimeoutSecs() OptInt {
	return s.DefaultVerificationTimeoutSecs
}

// SetMessagingTemplateID sets the value of MessagingTemplateID.
func (s *UpdateVerifyProfileSMSRequest) SetMessagingTemplateID(val OptUUID) {
	s.MessagingTemplateID = val
}

// SetAppName sets the value of AppName.
func (s *UpdateVerifyProfileSMSRequest) SetAppName(val OptString) {
	s.AppName = val
}

// SetAlphaSender sets the value of AlphaSender.
func (s *UpdateVerifyProfileSMSRequest) SetAlphaSender(val OptNilString) {
	s.AlphaSender = val
}

// SetWhitelistedDestinations sets the value of WhitelistedDestinations.
func (s *UpdateVerifyProfileSMSRequest) SetWhitelistedDestinations(val []string) {
	s.WhitelistedDestinations = val
}

// SetDefaultVerificationTimeoutSecs sets the value of DefaultVerificationTimeoutSecs.
func (s *UpdateVerifyProfileSMSRequest) SetDefaultVerificationTimeoutSecs(val OptInt) {
	s.DefaultVerificationTimeoutSecs = val
}

type UpdatedAt string

// Setting for how costs for outbound profile are calculated.
// Ref: #/components/schemas/UsagePaymentMethod
type UsagePaymentMethod string

const (
	UsagePaymentMethodRateDeck UsagePaymentMethod = "rate-deck"
)

// AllValues returns all UsagePaymentMethod values.
func (UsagePaymentMethod) AllValues() []UsagePaymentMethod {
	return []UsagePaymentMethod{
		UsagePaymentMethodRateDeck,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UsagePaymentMethod) MarshalText() ([]byte, error) {
	switch s {
	case UsagePaymentMethodRateDeck:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UsagePaymentMethod) UnmarshalText(data []byte) error {
	switch UsagePaymentMethod(data) {
	case UsagePaymentMethodRateDeck:
		*s = UsagePaymentMethodRateDeck
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/UserBalance
type UserBalance struct {
	// Identifies the type of the resource.
	RecordType OptUserBalanceRecordType `json:"record_type"`
	// The account's current balance.
	Balance OptString `json:"balance"`
	// The account's credit limit.
	CreditLimit OptString `json:"credit_limit"`
	// Available amount to spend (balance + credit limit).
	AvailableCredit OptString `json:"available_credit"`
	// The ISO 4217 currency identifier.
	Currency OptString `json:"currency"`
}

// GetRecordType returns the value of RecordType.
func (s *UserBalance) GetRecordType() OptUserBalanceRecordType {
	return s.RecordType
}

// GetBalance returns the value of Balance.
func (s *UserBalance) GetBalance() OptString {
	return s.Balance
}

// GetCreditLimit returns the value of CreditLimit.
func (s *UserBalance) GetCreditLimit() OptString {
	return s.CreditLimit
}

// GetAvailableCredit returns the value of AvailableCredit.
func (s *UserBalance) GetAvailableCredit() OptString {
	return s.AvailableCredit
}

// GetCurrency returns the value of Currency.
func (s *UserBalance) GetCurrency() OptString {
	return s.Currency
}

// SetRecordType sets the value of RecordType.
func (s *UserBalance) SetRecordType(val OptUserBalanceRecordType) {
	s.RecordType = val
}

// SetBalance sets the value of Balance.
func (s *UserBalance) SetBalance(val OptString) {
	s.Balance = val
}

// SetCreditLimit sets the value of CreditLimit.
func (s *UserBalance) SetCreditLimit(val OptString) {
	s.CreditLimit = val
}

// SetAvailableCredit sets the value of AvailableCredit.
func (s *UserBalance) SetAvailableCredit(val OptString) {
	s.AvailableCredit = val
}

// SetCurrency sets the value of Currency.
func (s *UserBalance) SetCurrency(val OptString) {
	s.Currency = val
}

// Identifies the type of the resource.
type UserBalanceRecordType string

const (
	UserBalanceRecordTypeBalance UserBalanceRecordType = "balance"
)

// AllValues returns all UserBalanceRecordType values.
func (UserBalanceRecordType) AllValues() []UserBalanceRecordType {
	return []UserBalanceRecordType{
		UserBalanceRecordTypeBalance,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserBalanceRecordType) MarshalText() ([]byte, error) {
	switch s {
	case UserBalanceRecordTypeBalance:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserBalanceRecordType) UnmarshalText(data []byte) error {
	switch UserBalanceRecordType(data) {
	case UserBalanceRecordTypeBalance:
		*s = UserBalanceRecordTypeBalance
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UserBalanceResponse struct {
	Data OptUserBalance `json:"data"`
}

// GetData returns the value of Data.
func (s *UserBalanceResponse) GetData() OptUserBalance {
	return s.Data
}

// SetData sets the value of Data.
func (s *UserBalanceResponse) SetData(val OptUserBalance) {
	s.Data = val
}

func (*UserBalanceResponse) getUserBalanceRes() {}

// Ref: #/components/schemas/ValidationError
type ValidationError struct {
	Loc  []ValidationErrorLocItem `json:"loc"`
	Msg  string                   `json:"msg"`
	Type string                   `json:"type"`
}

// GetLoc returns the value of Loc.
func (s *ValidationError) GetLoc() []ValidationErrorLocItem {
	return s.Loc
}

// GetMsg returns the value of Msg.
func (s *ValidationError) GetMsg() string {
	return s.Msg
}

// GetType returns the value of Type.
func (s *ValidationError) GetType() string {
	return s.Type
}

// SetLoc sets the value of Loc.
func (s *ValidationError) SetLoc(val []ValidationErrorLocItem) {
	s.Loc = val
}

// SetMsg sets the value of Msg.
func (s *ValidationError) SetMsg(val string) {
	s.Msg = val
}

// SetType sets the value of Type.
func (s *ValidationError) SetType(val string) {
	s.Type = val
}

// ValidationErrorLocItem represents sum type.
type ValidationErrorLocItem struct {
	Type   ValidationErrorLocItemType // switch on this field
	String string
	Int    int
}

// ValidationErrorLocItemType is oneOf type of ValidationErrorLocItem.
type ValidationErrorLocItemType string

// Possible values for ValidationErrorLocItemType.
const (
	StringValidationErrorLocItem ValidationErrorLocItemType = "string"
	IntValidationErrorLocItem    ValidationErrorLocItemType = "int"
)

// IsString reports whether ValidationErrorLocItem is string.
func (s ValidationErrorLocItem) IsString() bool { return s.Type == StringValidationErrorLocItem }

// IsInt reports whether ValidationErrorLocItem is int.
func (s ValidationErrorLocItem) IsInt() bool { return s.Type == IntValidationErrorLocItem }

// SetString sets ValidationErrorLocItem to string.
func (s *ValidationErrorLocItem) SetString(v string) {
	s.Type = StringValidationErrorLocItem
	s.String = v
}

// GetString returns string and true boolean if ValidationErrorLocItem is string.
func (s ValidationErrorLocItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringValidationErrorLocItem returns new ValidationErrorLocItem from string.
func NewStringValidationErrorLocItem(v string) ValidationErrorLocItem {
	var s ValidationErrorLocItem
	s.SetString(v)
	return s
}

// SetInt sets ValidationErrorLocItem to int.
func (s *ValidationErrorLocItem) SetInt(v int) {
	s.Type = IntValidationErrorLocItem
	s.Int = v
}

// GetInt returns int and true boolean if ValidationErrorLocItem is int.
func (s ValidationErrorLocItem) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntValidationErrorLocItem returns new ValidationErrorLocItem from int.
func NewIntValidationErrorLocItem(v int) ValidationErrorLocItem {
	var s ValidationErrorLocItem
	s.SetInt(v)
	return s
}

// Ref: #/components/schemas/Verification
type Verification struct {
	ID         OptUUID                   `json:"id"`
	Type       OptVerificationType       `json:"type"`
	RecordType OptVerificationRecordType `json:"record_type"`
	// +E164 formatted phone number.
	PhoneNumber OptString `json:"phone_number"`
	// The identifier of the associated Verify profile.
	VerifyProfileID OptUUID `json:"verify_profile_id"`
	// This is the number of seconds before the code of the request is expired. Once this request has
	// expired, the code will no longer verify the user. Note: this will override the
	// `default_verification_timeout_secs` on the Verify profile.
	TimeoutSecs OptInt                `json:"timeout_secs"`
	Status      OptVerificationStatus `json:"status"`
	CreatedAt   OptString             `json:"created_at"`
	UpdatedAt   OptString             `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *Verification) GetID() OptUUID {
	return s.ID
}

// GetType returns the value of Type.
func (s *Verification) GetType() OptVerificationType {
	return s.Type
}

// GetRecordType returns the value of RecordType.
func (s *Verification) GetRecordType() OptVerificationRecordType {
	return s.RecordType
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *Verification) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetVerifyProfileID returns the value of VerifyProfileID.
func (s *Verification) GetVerifyProfileID() OptUUID {
	return s.VerifyProfileID
}

// GetTimeoutSecs returns the value of TimeoutSecs.
func (s *Verification) GetTimeoutSecs() OptInt {
	return s.TimeoutSecs
}

// GetStatus returns the value of Status.
func (s *Verification) GetStatus() OptVerificationStatus {
	return s.Status
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Verification) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Verification) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Verification) SetID(val OptUUID) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *Verification) SetType(val OptVerificationType) {
	s.Type = val
}

// SetRecordType sets the value of RecordType.
func (s *Verification) SetRecordType(val OptVerificationRecordType) {
	s.RecordType = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *Verification) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetVerifyProfileID sets the value of VerifyProfileID.
func (s *Verification) SetVerifyProfileID(val OptUUID) {
	s.VerifyProfileID = val
}

// SetTimeoutSecs sets the value of TimeoutSecs.
func (s *Verification) SetTimeoutSecs(val OptInt) {
	s.TimeoutSecs = val
}

// SetStatus sets the value of Status.
func (s *Verification) SetStatus(val OptVerificationStatus) {
	s.Status = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Verification) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Verification) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// The possible verification profile record types.
// Ref: #/components/schemas/VerificationProfileRecordType
type VerificationProfileRecordType string

const (
	VerificationProfileRecordTypeVerificationProfile VerificationProfileRecordType = "verification_profile"
)

// AllValues returns all VerificationProfileRecordType values.
func (VerificationProfileRecordType) AllValues() []VerificationProfileRecordType {
	return []VerificationProfileRecordType{
		VerificationProfileRecordTypeVerificationProfile,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VerificationProfileRecordType) MarshalText() ([]byte, error) {
	switch s {
	case VerificationProfileRecordTypeVerificationProfile:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VerificationProfileRecordType) UnmarshalText(data []byte) error {
	switch VerificationProfileRecordType(data) {
	case VerificationProfileRecordTypeVerificationProfile:
		*s = VerificationProfileRecordTypeVerificationProfile
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The possible verification record types.
// Ref: #/components/schemas/VerificationRecordType
type VerificationRecordType string

const (
	VerificationRecordTypeVerification VerificationRecordType = "verification"
)

// AllValues returns all VerificationRecordType values.
func (VerificationRecordType) AllValues() []VerificationRecordType {
	return []VerificationRecordType{
		VerificationRecordTypeVerification,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VerificationRecordType) MarshalText() ([]byte, error) {
	switch s {
	case VerificationRecordTypeVerification:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VerificationRecordType) UnmarshalText(data []byte) error {
	switch VerificationRecordType(data) {
	case VerificationRecordTypeVerification:
		*s = VerificationRecordTypeVerification
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The possible statuses of the verification request.
// Ref: #/components/schemas/VerificationStatus
type VerificationStatus string

const (
	VerificationStatusPending  VerificationStatus = "pending"
	VerificationStatusAccepted VerificationStatus = "accepted"
	VerificationStatusInvalid  VerificationStatus = "invalid"
	VerificationStatusExpired  VerificationStatus = "expired"
	VerificationStatusError    VerificationStatus = "error"
)

// AllValues returns all VerificationStatus values.
func (VerificationStatus) AllValues() []VerificationStatus {
	return []VerificationStatus{
		VerificationStatusPending,
		VerificationStatusAccepted,
		VerificationStatusInvalid,
		VerificationStatusExpired,
		VerificationStatusError,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VerificationStatus) MarshalText() ([]byte, error) {
	switch s {
	case VerificationStatusPending:
		return []byte(s), nil
	case VerificationStatusAccepted:
		return []byte(s), nil
	case VerificationStatusInvalid:
		return []byte(s), nil
	case VerificationStatusExpired:
		return []byte(s), nil
	case VerificationStatusError:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VerificationStatus) UnmarshalText(data []byte) error {
	switch VerificationStatus(data) {
	case VerificationStatusPending:
		*s = VerificationStatusPending
		return nil
	case VerificationStatusAccepted:
		*s = VerificationStatusAccepted
		return nil
	case VerificationStatusInvalid:
		*s = VerificationStatusInvalid
		return nil
	case VerificationStatusExpired:
		*s = VerificationStatusExpired
		return nil
	case VerificationStatusError:
		*s = VerificationStatusError
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The possible types of verification.
// Ref: #/components/schemas/VerificationType
type VerificationType string

const (
	VerificationTypeSMS       VerificationType = "sms"
	VerificationTypeCall      VerificationType = "call"
	VerificationTypeFlashcall VerificationType = "flashcall"
)

// AllValues returns all VerificationType values.
func (VerificationType) AllValues() []VerificationType {
	return []VerificationType{
		VerificationTypeSMS,
		VerificationTypeCall,
		VerificationTypeFlashcall,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VerificationType) MarshalText() ([]byte, error) {
	switch s {
	case VerificationTypeSMS:
		return []byte(s), nil
	case VerificationTypeCall:
		return []byte(s), nil
	case VerificationTypeFlashcall:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VerificationType) UnmarshalText(data []byte) error {
	switch VerificationType(data) {
	case VerificationTypeSMS:
		*s = VerificationTypeSMS
		return nil
	case VerificationTypeCall:
		*s = VerificationTypeCall
		return nil
	case VerificationTypeFlashcall:
		*s = VerificationTypeFlashcall
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/VerifiedCallsDisplayProfile
type VerifiedCallsDisplayProfile struct {
	RecordType OptString `json:"record_type"`
	ID         OptUUID   `json:"id"`
	// The Verified Calls Display Profile's name.
	Name OptString `json:"name"`
	// The display name to be shown as the caller name in phones.
	DisplayName OptString `json:"display_name"`
	// The URL pointing to a public image file that will be displayed during calls in phones.
	LogoURL OptString `json:"logo_url"`
	// The approval status of the Verified Calls Display Profile in Google.
	Status OptVerifiedCallsDisplayProfileStatus `json:"status"`
	// The associated Business Identity.
	BusinessIdentity OptVerifiedCallsDisplayProfileBusinessIdentity `json:"business_identity"`
	PhoneNumbers     []VerifiedCallsDisplayProfilePhoneNumbersItem  `json:"phone_numbers"`
	CallReasons      []VerifiedCallsDisplayProfileCallReasonsItem   `json:"call_reasons"`
	// An ISO 8601 datetime string for when the display profile was added to the Telnyx platform.
	CreatedAt OptString `json:"created_at"`
	// An ISO 8601 datetime string for when the display profile was updated.
	UpdatedAt OptString `json:"updated_at"`
}

// GetRecordType returns the value of RecordType.
func (s *VerifiedCallsDisplayProfile) GetRecordType() OptString {
	return s.RecordType
}

// GetID returns the value of ID.
func (s *VerifiedCallsDisplayProfile) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *VerifiedCallsDisplayProfile) GetName() OptString {
	return s.Name
}

// GetDisplayName returns the value of DisplayName.
func (s *VerifiedCallsDisplayProfile) GetDisplayName() OptString {
	return s.DisplayName
}

// GetLogoURL returns the value of LogoURL.
func (s *VerifiedCallsDisplayProfile) GetLogoURL() OptString {
	return s.LogoURL
}

// GetStatus returns the value of Status.
func (s *VerifiedCallsDisplayProfile) GetStatus() OptVerifiedCallsDisplayProfileStatus {
	return s.Status
}

// GetBusinessIdentity returns the value of BusinessIdentity.
func (s *VerifiedCallsDisplayProfile) GetBusinessIdentity() OptVerifiedCallsDisplayProfileBusinessIdentity {
	return s.BusinessIdentity
}

// GetPhoneNumbers returns the value of PhoneNumbers.
func (s *VerifiedCallsDisplayProfile) GetPhoneNumbers() []VerifiedCallsDisplayProfilePhoneNumbersItem {
	return s.PhoneNumbers
}

// GetCallReasons returns the value of CallReasons.
func (s *VerifiedCallsDisplayProfile) GetCallReasons() []VerifiedCallsDisplayProfileCallReasonsItem {
	return s.CallReasons
}

// GetCreatedAt returns the value of CreatedAt.
func (s *VerifiedCallsDisplayProfile) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *VerifiedCallsDisplayProfile) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// SetRecordType sets the value of RecordType.
func (s *VerifiedCallsDisplayProfile) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetID sets the value of ID.
func (s *VerifiedCallsDisplayProfile) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *VerifiedCallsDisplayProfile) SetName(val OptString) {
	s.Name = val
}

// SetDisplayName sets the value of DisplayName.
func (s *VerifiedCallsDisplayProfile) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetLogoURL sets the value of LogoURL.
func (s *VerifiedCallsDisplayProfile) SetLogoURL(val OptString) {
	s.LogoURL = val
}

// SetStatus sets the value of Status.
func (s *VerifiedCallsDisplayProfile) SetStatus(val OptVerifiedCallsDisplayProfileStatus) {
	s.Status = val
}

// SetBusinessIdentity sets the value of BusinessIdentity.
func (s *VerifiedCallsDisplayProfile) SetBusinessIdentity(val OptVerifiedCallsDisplayProfileBusinessIdentity) {
	s.BusinessIdentity = val
}

// SetPhoneNumbers sets the value of PhoneNumbers.
func (s *VerifiedCallsDisplayProfile) SetPhoneNumbers(val []VerifiedCallsDisplayProfilePhoneNumbersItem) {
	s.PhoneNumbers = val
}

// SetCallReasons sets the value of CallReasons.
func (s *VerifiedCallsDisplayProfile) SetCallReasons(val []VerifiedCallsDisplayProfileCallReasonsItem) {
	s.CallReasons = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *VerifiedCallsDisplayProfile) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *VerifiedCallsDisplayProfile) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// The associated Business Identity.
type VerifiedCallsDisplayProfileBusinessIdentity struct {
	RecordType OptString `json:"record_type"`
	// The name of the business identity on the telnyx platform.
	Name OptString `json:"name"`
}

// GetRecordType returns the value of RecordType.
func (s *VerifiedCallsDisplayProfileBusinessIdentity) GetRecordType() OptString {
	return s.RecordType
}

// GetName returns the value of Name.
func (s *VerifiedCallsDisplayProfileBusinessIdentity) GetName() OptString {
	return s.Name
}

// SetRecordType sets the value of RecordType.
func (s *VerifiedCallsDisplayProfileBusinessIdentity) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetName sets the value of Name.
func (s *VerifiedCallsDisplayProfileBusinessIdentity) SetName(val OptString) {
	s.Name = val
}

// The Call Reason to be displayed to the call recipient.
type VerifiedCallsDisplayProfileCallReasonsItem struct {
	RecordType OptString `json:"record_type"`
	ID         OptUUID   `json:"id"`
	// The Call Reason text to be displayed to the call recipient.
	Reason OptString `json:"reason"`
	// The approval status of this individual call reason in Google.
	GoogleVerificationStatus OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus `json:"google_verification_status"`
	// Additional information about the decision, if available.
	GoogleApprovalInfo OptString `json:"google_approval_info"`
	DisplayProfileID   OptUUID   `json:"display_profile_id"`
	// Marks the Phone Number to be removed from the Display Profile.
	Delete OptBool `json:"delete"`
}

// GetRecordType returns the value of RecordType.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) GetRecordType() OptString {
	return s.RecordType
}

// GetID returns the value of ID.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) GetID() OptUUID {
	return s.ID
}

// GetReason returns the value of Reason.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) GetReason() OptString {
	return s.Reason
}

// GetGoogleVerificationStatus returns the value of GoogleVerificationStatus.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) GetGoogleVerificationStatus() OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus {
	return s.GoogleVerificationStatus
}

// GetGoogleApprovalInfo returns the value of GoogleApprovalInfo.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) GetGoogleApprovalInfo() OptString {
	return s.GoogleApprovalInfo
}

// GetDisplayProfileID returns the value of DisplayProfileID.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) GetDisplayProfileID() OptUUID {
	return s.DisplayProfileID
}

// GetDelete returns the value of Delete.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) GetDelete() OptBool {
	return s.Delete
}

// SetRecordType sets the value of RecordType.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetID sets the value of ID.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) SetID(val OptUUID) {
	s.ID = val
}

// SetReason sets the value of Reason.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) SetReason(val OptString) {
	s.Reason = val
}

// SetGoogleVerificationStatus sets the value of GoogleVerificationStatus.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) SetGoogleVerificationStatus(val OptVerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus) {
	s.GoogleVerificationStatus = val
}

// SetGoogleApprovalInfo sets the value of GoogleApprovalInfo.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) SetGoogleApprovalInfo(val OptString) {
	s.GoogleApprovalInfo = val
}

// SetDisplayProfileID sets the value of DisplayProfileID.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) SetDisplayProfileID(val OptUUID) {
	s.DisplayProfileID = val
}

// SetDelete sets the value of Delete.
func (s *VerifiedCallsDisplayProfileCallReasonsItem) SetDelete(val OptBool) {
	s.Delete = val
}

// The approval status of this individual call reason in Google.
type VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus string

const (
	VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusSTATEUNSPECIFIED VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus = "STATE_UNSPECIFIED"
	VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusPENDINGAPPROVAL  VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus = "PENDING_APPROVAL"
	VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusAPPROVED         VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus = "APPROVED"
	VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusDENIED           VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus = "DENIED"
	VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusPENDINGREMOVAL   VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus = "PENDING_REMOVAL"
)

// AllValues returns all VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus values.
func (VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus) AllValues() []VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus {
	return []VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus{
		VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusSTATEUNSPECIFIED,
		VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusPENDINGAPPROVAL,
		VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusAPPROVED,
		VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusDENIED,
		VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusPENDINGREMOVAL,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus) MarshalText() ([]byte, error) {
	switch s {
	case VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusSTATEUNSPECIFIED:
		return []byte(s), nil
	case VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusPENDINGAPPROVAL:
		return []byte(s), nil
	case VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusAPPROVED:
		return []byte(s), nil
	case VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusDENIED:
		return []byte(s), nil
	case VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusPENDINGREMOVAL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus) UnmarshalText(data []byte) error {
	switch VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatus(data) {
	case VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusSTATEUNSPECIFIED:
		*s = VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusSTATEUNSPECIFIED
		return nil
	case VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusPENDINGAPPROVAL:
		*s = VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusPENDINGAPPROVAL
		return nil
	case VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusAPPROVED:
		*s = VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusAPPROVED
		return nil
	case VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusDENIED:
		*s = VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusDENIED
		return nil
	case VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusPENDINGREMOVAL:
		*s = VerifiedCallsDisplayProfileCallReasonsItemGoogleVerificationStatusPENDINGREMOVAL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A Phone Number that can make phone calls displaying the configured brand information.
type VerifiedCallsDisplayProfilePhoneNumbersItem struct {
	RecordType OptString `json:"record_type"`
	ID         OptUUID   `json:"id"`
	// The phone number in e164 format.
	PhoneNumber OptString `json:"phone_number"`
	// The approval status of this individual phone number in Google.
	GoogleVerificationStatus OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus `json:"google_verification_status"`
	// Additional information about the decision, if available.
	GoogleApprovalInfo OptString `json:"google_approval_info"`
	DisplayProfileID   OptUUID   `json:"display_profile_id"`
	// Marks the Phone Number to be removed from the Display Profile.
	Delete OptBool `json:"delete"`
}

// GetRecordType returns the value of RecordType.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) GetRecordType() OptString {
	return s.RecordType
}

// GetID returns the value of ID.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) GetID() OptUUID {
	return s.ID
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetGoogleVerificationStatus returns the value of GoogleVerificationStatus.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) GetGoogleVerificationStatus() OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus {
	return s.GoogleVerificationStatus
}

// GetGoogleApprovalInfo returns the value of GoogleApprovalInfo.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) GetGoogleApprovalInfo() OptString {
	return s.GoogleApprovalInfo
}

// GetDisplayProfileID returns the value of DisplayProfileID.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) GetDisplayProfileID() OptUUID {
	return s.DisplayProfileID
}

// GetDelete returns the value of Delete.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) GetDelete() OptBool {
	return s.Delete
}

// SetRecordType sets the value of RecordType.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetID sets the value of ID.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) SetID(val OptUUID) {
	s.ID = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetGoogleVerificationStatus sets the value of GoogleVerificationStatus.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) SetGoogleVerificationStatus(val OptVerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus) {
	s.GoogleVerificationStatus = val
}

// SetGoogleApprovalInfo sets the value of GoogleApprovalInfo.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) SetGoogleApprovalInfo(val OptString) {
	s.GoogleApprovalInfo = val
}

// SetDisplayProfileID sets the value of DisplayProfileID.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) SetDisplayProfileID(val OptUUID) {
	s.DisplayProfileID = val
}

// SetDelete sets the value of Delete.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItem) SetDelete(val OptBool) {
	s.Delete = val
}

// The approval status of this individual phone number in Google.
type VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus string

const (
	VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusSTATEUNSPECIFIED VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus = "STATE_UNSPECIFIED"
	VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusPENDINGAPPROVAL  VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus = "PENDING_APPROVAL"
	VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusAPPROVED         VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus = "APPROVED"
	VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusDENIED           VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus = "DENIED"
	VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusPENDINGREMOVAL   VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus = "PENDING_REMOVAL"
)

// AllValues returns all VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus values.
func (VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus) AllValues() []VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus {
	return []VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus{
		VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusSTATEUNSPECIFIED,
		VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusPENDINGAPPROVAL,
		VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusAPPROVED,
		VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusDENIED,
		VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusPENDINGREMOVAL,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus) MarshalText() ([]byte, error) {
	switch s {
	case VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusSTATEUNSPECIFIED:
		return []byte(s), nil
	case VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusPENDINGAPPROVAL:
		return []byte(s), nil
	case VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusAPPROVED:
		return []byte(s), nil
	case VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusDENIED:
		return []byte(s), nil
	case VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusPENDINGREMOVAL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus) UnmarshalText(data []byte) error {
	switch VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatus(data) {
	case VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusSTATEUNSPECIFIED:
		*s = VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusSTATEUNSPECIFIED
		return nil
	case VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusPENDINGAPPROVAL:
		*s = VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusPENDINGAPPROVAL
		return nil
	case VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusAPPROVED:
		*s = VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusAPPROVED
		return nil
	case VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusDENIED:
		*s = VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusDENIED
		return nil
	case VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusPENDINGREMOVAL:
		*s = VerifiedCallsDisplayProfilePhoneNumbersItemGoogleVerificationStatusPENDINGREMOVAL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The approval status of the Verified Calls Display Profile in Google.
type VerifiedCallsDisplayProfileStatus string

const (
	VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEUNSPECIFIED    VerifiedCallsDisplayProfileStatus = "VERIFICATION_STATE_UNSPECIFIED"
	VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEUNVERIFIED     VerifiedCallsDisplayProfileStatus = "VERIFICATION_STATE_UNVERIFIED"
	VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEPENDING        VerifiedCallsDisplayProfileStatus = "VERIFICATION_STATE_PENDING"
	VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEVERIFIED       VerifiedCallsDisplayProfileStatus = "VERIFICATION_STATE_VERIFIED"
	VerifiedCallsDisplayProfileStatusVERIFICATIONSTATESUSPENDEDINGMB VerifiedCallsDisplayProfileStatus = "VERIFICATION_STATE_SUSPENDED_IN_GMB"
)

// AllValues returns all VerifiedCallsDisplayProfileStatus values.
func (VerifiedCallsDisplayProfileStatus) AllValues() []VerifiedCallsDisplayProfileStatus {
	return []VerifiedCallsDisplayProfileStatus{
		VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEUNSPECIFIED,
		VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEUNVERIFIED,
		VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEPENDING,
		VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEVERIFIED,
		VerifiedCallsDisplayProfileStatusVERIFICATIONSTATESUSPENDEDINGMB,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VerifiedCallsDisplayProfileStatus) MarshalText() ([]byte, error) {
	switch s {
	case VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEUNSPECIFIED:
		return []byte(s), nil
	case VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEUNVERIFIED:
		return []byte(s), nil
	case VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEPENDING:
		return []byte(s), nil
	case VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEVERIFIED:
		return []byte(s), nil
	case VerifiedCallsDisplayProfileStatusVERIFICATIONSTATESUSPENDEDINGMB:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VerifiedCallsDisplayProfileStatus) UnmarshalText(data []byte) error {
	switch VerifiedCallsDisplayProfileStatus(data) {
	case VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEUNSPECIFIED:
		*s = VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEUNSPECIFIED
		return nil
	case VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEUNVERIFIED:
		*s = VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEUNVERIFIED
		return nil
	case VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEPENDING:
		*s = VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEPENDING
		return nil
	case VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEVERIFIED:
		*s = VerifiedCallsDisplayProfileStatusVERIFICATIONSTATEVERIFIED
		return nil
	case VerifiedCallsDisplayProfileStatusVERIFICATIONSTATESUSPENDEDINGMB:
		*s = VerifiedCallsDisplayProfileStatusVERIFICATIONSTATESUSPENDEDINGMB
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The possible verified numbers record types.
// Ref: #/components/schemas/VerifiedNumberRecordType
type VerifiedNumberRecordType string

const (
	VerifiedNumberRecordTypeVerifiedNumber VerifiedNumberRecordType = "verified_number"
)

// AllValues returns all VerifiedNumberRecordType values.
func (VerifiedNumberRecordType) AllValues() []VerifiedNumberRecordType {
	return []VerifiedNumberRecordType{
		VerifiedNumberRecordTypeVerifiedNumber,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VerifiedNumberRecordType) MarshalText() ([]byte, error) {
	switch s {
	case VerifiedNumberRecordTypeVerifiedNumber:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VerifiedNumberRecordType) UnmarshalText(data []byte) error {
	switch VerifiedNumberRecordType(data) {
	case VerifiedNumberRecordTypeVerifiedNumber:
		*s = VerifiedNumberRecordTypeVerifiedNumber
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/VerifiedNumberResponse
type VerifiedNumberResponse struct {
	PhoneNumber OptString                   `json:"phone_number"`
	RecordType  OptVerifiedNumberRecordType `json:"record_type"`
	VerifiedAt  OptString                   `json:"verified_at"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *VerifiedNumberResponse) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetRecordType returns the value of RecordType.
func (s *VerifiedNumberResponse) GetRecordType() OptVerifiedNumberRecordType {
	return s.RecordType
}

// GetVerifiedAt returns the value of VerifiedAt.
func (s *VerifiedNumberResponse) GetVerifiedAt() OptString {
	return s.VerifiedAt
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *VerifiedNumberResponse) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetRecordType sets the value of RecordType.
func (s *VerifiedNumberResponse) SetRecordType(val OptVerifiedNumberRecordType) {
	s.RecordType = val
}

// SetVerifiedAt sets the value of VerifiedAt.
func (s *VerifiedNumberResponse) SetVerifiedAt(val OptString) {
	s.VerifiedAt = val
}

// Ref: #/components/schemas/VerifiedNumberResponseDataWrapper
type VerifiedNumberResponseDataWrapper struct {
	Data OptVerifiedNumberResponse `json:"data"`
}

// GetData returns the value of Data.
func (s *VerifiedNumberResponseDataWrapper) GetData() OptVerifiedNumberResponse {
	return s.Data
}

// SetData sets the value of Data.
func (s *VerifiedNumberResponseDataWrapper) SetData(val OptVerifiedNumberResponse) {
	s.Data = val
}

func (*VerifiedNumberResponseDataWrapper) deleteVerifiedNumberRes()   {}
func (*VerifiedNumberResponseDataWrapper) getVerifiedNumberRes()      {}
func (*VerifiedNumberResponseDataWrapper) verifyVerificationCodeRes() {}

type VerifyPortingVerificationCodes struct {
	Data []PortingVerificationCode `json:"data"`
}

// GetData returns the value of Data.
func (s *VerifyPortingVerificationCodes) GetData() []PortingVerificationCode {
	return s.Data
}

// SetData sets the value of Data.
func (s *VerifyPortingVerificationCodes) SetData(val []PortingVerificationCode) {
	s.Data = val
}

func (*VerifyPortingVerificationCodes) verifyPortingVerificationCodesRes() {}

// VerifyPortingVerificationCodesNotFound is response for VerifyPortingVerificationCodes operation.
type VerifyPortingVerificationCodesNotFound struct{}

func (*VerifyPortingVerificationCodesNotFound) verifyPortingVerificationCodesRes() {}

type VerifyPortingVerificationCodesReq struct {
	VerificationCodes []VerifyPortingVerificationCodesReqVerificationCodesItem `json:"verification_codes"`
}

// GetVerificationCodes returns the value of VerificationCodes.
func (s *VerifyPortingVerificationCodesReq) GetVerificationCodes() []VerifyPortingVerificationCodesReqVerificationCodesItem {
	return s.VerificationCodes
}

// SetVerificationCodes sets the value of VerificationCodes.
func (s *VerifyPortingVerificationCodesReq) SetVerificationCodes(val []VerifyPortingVerificationCodesReqVerificationCodesItem) {
	s.VerificationCodes = val
}

type VerifyPortingVerificationCodesReqVerificationCodesItem struct {
	PhoneNumber OptString `json:"phone_number"`
	Code        OptString `json:"code"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *VerifyPortingVerificationCodesReqVerificationCodesItem) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetCode returns the value of Code.
func (s *VerifyPortingVerificationCodesReqVerificationCodesItem) GetCode() OptString {
	return s.Code
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *VerifyPortingVerificationCodesReqVerificationCodesItem) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetCode sets the value of Code.
func (s *VerifyPortingVerificationCodesReqVerificationCodesItem) SetCode(val OptString) {
	s.Code = val
}

// VerifyPortingVerificationCodesUnauthorized is response for VerifyPortingVerificationCodes operation.
type VerifyPortingVerificationCodesUnauthorized struct{}

func (*VerifyPortingVerificationCodesUnauthorized) verifyPortingVerificationCodesRes() {}

// VerifyPortingVerificationCodesUnprocessableEntity is response for VerifyPortingVerificationCodes operation.
type VerifyPortingVerificationCodesUnprocessableEntity struct{}

func (*VerifyPortingVerificationCodesUnprocessableEntity) verifyPortingVerificationCodesRes() {}

// Ref: #/components/schemas/VerifyProfileCallResponse
type VerifyProfileCallResponse struct {
	// The message template identifier selected from /verify_profiles/templates.
	MessagingTemplateID OptUUID `json:"messaging_template_id"`
	// The name that identifies the application requesting 2fa in the verification message.
	AppName OptString `json:"app_name"`
	// Enabled country destinations to send verification codes. The elements in the list must be valid
	// ISO 3166-1 alpha-2 country codes. If set to `["*"]`, all destinations will be allowed.
	WhitelistedDestinations []string `json:"whitelisted_destinations"`
	// For every request that is initiated via this Verify profile, this sets the number of seconds
	// before a verification request code expires. Once the verification request expires, the user cannot
	// use the code to verify their identity.
	DefaultVerificationTimeoutSecs OptInt `json:"default_verification_timeout_secs"`
}

// GetMessagingTemplateID returns the value of MessagingTemplateID.
func (s *VerifyProfileCallResponse) GetMessagingTemplateID() OptUUID {
	return s.MessagingTemplateID
}

// GetAppName returns the value of AppName.
func (s *VerifyProfileCallResponse) GetAppName() OptString {
	return s.AppName
}

// GetWhitelistedDestinations returns the value of WhitelistedDestinations.
func (s *VerifyProfileCallResponse) GetWhitelistedDestinations() []string {
	return s.WhitelistedDestinations
}

// GetDefaultVerificationTimeoutSecs returns the value of DefaultVerificationTimeoutSecs.
func (s *VerifyProfileCallResponse) GetDefaultVerificationTimeoutSecs() OptInt {
	return s.DefaultVerificationTimeoutSecs
}

// SetMessagingTemplateID sets the value of MessagingTemplateID.
func (s *VerifyProfileCallResponse) SetMessagingTemplateID(val OptUUID) {
	s.MessagingTemplateID = val
}

// SetAppName sets the value of AppName.
func (s *VerifyProfileCallResponse) SetAppName(val OptString) {
	s.AppName = val
}

// SetWhitelistedDestinations sets the value of WhitelistedDestinations.
func (s *VerifyProfileCallResponse) SetWhitelistedDestinations(val []string) {
	s.WhitelistedDestinations = val
}

// SetDefaultVerificationTimeoutSecs sets the value of DefaultVerificationTimeoutSecs.
func (s *VerifyProfileCallResponse) SetDefaultVerificationTimeoutSecs(val OptInt) {
	s.DefaultVerificationTimeoutSecs = val
}

// Ref: #/components/schemas/VerifyProfileFlashcallResponse
type VerifyProfileFlashcallResponse struct {
	// For every request that is initiated via this Verify profile, this sets the number of seconds
	// before a verification request code expires. Once the verification request expires, the user cannot
	// use the code to verify their identity.
	DefaultVerificationTimeoutSecs OptInt `json:"default_verification_timeout_secs"`
}

// GetDefaultVerificationTimeoutSecs returns the value of DefaultVerificationTimeoutSecs.
func (s *VerifyProfileFlashcallResponse) GetDefaultVerificationTimeoutSecs() OptInt {
	return s.DefaultVerificationTimeoutSecs
}

// SetDefaultVerificationTimeoutSecs sets the value of DefaultVerificationTimeoutSecs.
func (s *VerifyProfileFlashcallResponse) SetDefaultVerificationTimeoutSecs(val OptInt) {
	s.DefaultVerificationTimeoutSecs = val
}

// Ref: #/components/schemas/VerifyProfileMessageTemplateResponse
type VerifyProfileMessageTemplateResponse struct {
	ID   OptUUID   `json:"id"`
	Text OptString `json:"text"`
}

// GetID returns the value of ID.
func (s *VerifyProfileMessageTemplateResponse) GetID() OptUUID {
	return s.ID
}

// GetText returns the value of Text.
func (s *VerifyProfileMessageTemplateResponse) GetText() OptString {
	return s.Text
}

// SetID sets the value of ID.
func (s *VerifyProfileMessageTemplateResponse) SetID(val OptUUID) {
	s.ID = val
}

// SetText sets the value of Text.
func (s *VerifyProfileMessageTemplateResponse) SetText(val OptString) {
	s.Text = val
}

// Ref: #/components/schemas/VerifyProfileResponse
type VerifyProfileResponse struct {
	ID                 OptUUID                           `json:"id"`
	Name               OptString                         `json:"name"`
	WebhookURL         OptString                         `json:"webhook_url"`
	WebhookFailoverURL OptString                         `json:"webhook_failover_url"`
	RecordType         OptVerificationProfileRecordType  `json:"record_type"`
	CreatedAt          OptString                         `json:"created_at"`
	UpdatedAt          OptString                         `json:"updated_at"`
	SMS                OptVerifyProfileSMSResponse       `json:"sms"`
	Call               OptVerifyProfileCallResponse      `json:"call"`
	Flashcall          OptVerifyProfileFlashcallResponse `json:"flashcall"`
	Language           OptString                         `json:"language"`
}

// GetID returns the value of ID.
func (s *VerifyProfileResponse) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *VerifyProfileResponse) GetName() OptString {
	return s.Name
}

// GetWebhookURL returns the value of WebhookURL.
func (s *VerifyProfileResponse) GetWebhookURL() OptString {
	return s.WebhookURL
}

// GetWebhookFailoverURL returns the value of WebhookFailoverURL.
func (s *VerifyProfileResponse) GetWebhookFailoverURL() OptString {
	return s.WebhookFailoverURL
}

// GetRecordType returns the value of RecordType.
func (s *VerifyProfileResponse) GetRecordType() OptVerificationProfileRecordType {
	return s.RecordType
}

// GetCreatedAt returns the value of CreatedAt.
func (s *VerifyProfileResponse) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *VerifyProfileResponse) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetSMS returns the value of SMS.
func (s *VerifyProfileResponse) GetSMS() OptVerifyProfileSMSResponse {
	return s.SMS
}

// GetCall returns the value of Call.
func (s *VerifyProfileResponse) GetCall() OptVerifyProfileCallResponse {
	return s.Call
}

// GetFlashcall returns the value of Flashcall.
func (s *VerifyProfileResponse) GetFlashcall() OptVerifyProfileFlashcallResponse {
	return s.Flashcall
}

// GetLanguage returns the value of Language.
func (s *VerifyProfileResponse) GetLanguage() OptString {
	return s.Language
}

// SetID sets the value of ID.
func (s *VerifyProfileResponse) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *VerifyProfileResponse) SetName(val OptString) {
	s.Name = val
}

// SetWebhookURL sets the value of WebhookURL.
func (s *VerifyProfileResponse) SetWebhookURL(val OptString) {
	s.WebhookURL = val
}

// SetWebhookFailoverURL sets the value of WebhookFailoverURL.
func (s *VerifyProfileResponse) SetWebhookFailoverURL(val OptString) {
	s.WebhookFailoverURL = val
}

// SetRecordType sets the value of RecordType.
func (s *VerifyProfileResponse) SetRecordType(val OptVerificationProfileRecordType) {
	s.RecordType = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *VerifyProfileResponse) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *VerifyProfileResponse) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetSMS sets the value of SMS.
func (s *VerifyProfileResponse) SetSMS(val OptVerifyProfileSMSResponse) {
	s.SMS = val
}

// SetCall sets the value of Call.
func (s *VerifyProfileResponse) SetCall(val OptVerifyProfileCallResponse) {
	s.Call = val
}

// SetFlashcall sets the value of Flashcall.
func (s *VerifyProfileResponse) SetFlashcall(val OptVerifyProfileFlashcallResponse) {
	s.Flashcall = val
}

// SetLanguage sets the value of Language.
func (s *VerifyProfileResponse) SetLanguage(val OptString) {
	s.Language = val
}

// Ref: #/components/schemas/VerifyProfileResponseDataWrapper
type VerifyProfileResponseDataWrapper struct {
	Data OptVerifyProfileResponse `json:"data"`
}

// GetData returns the value of Data.
func (s *VerifyProfileResponseDataWrapper) GetData() OptVerifyProfileResponse {
	return s.Data
}

// SetData sets the value of Data.
func (s *VerifyProfileResponseDataWrapper) SetData(val OptVerifyProfileResponse) {
	s.Data = val
}

func (*VerifyProfileResponseDataWrapper) createVerifyProfileRes() {}
func (*VerifyProfileResponseDataWrapper) deleteProfileRes()       {}
func (*VerifyProfileResponseDataWrapper) getVerifyProfileRes()    {}
func (*VerifyProfileResponseDataWrapper) updateVerifyProfileRes() {}

// Ref: #/components/schemas/VerifyProfileSMSResponse
type VerifyProfileSMSResponse struct {
	// The message template identifier selected from /verify_profiles/templates.
	MessagingTemplateID OptUUID `json:"messaging_template_id"`
	// The name that identifies the application requesting 2fa in the verification message.
	AppName OptString `json:"app_name"`
	// The alphanumeric sender ID to use when sending to destinations that require an alphanumeric sender
	// ID.
	AlphaSender OptNilString `json:"alpha_sender"`
	// Enabled country destinations to send verification codes. The elements in the list must be valid
	// ISO 3166-1 alpha-2 country codes. If set to `["*"]`, all destinations will be allowed.
	WhitelistedDestinations []string `json:"whitelisted_destinations"`
	// For every request that is initiated via this Verify profile, this sets the number of seconds
	// before a verification request code expires. Once the verification request expires, the user cannot
	// use the code to verify their identity.
	DefaultVerificationTimeoutSecs OptInt `json:"default_verification_timeout_secs"`
}

// GetMessagingTemplateID returns the value of MessagingTemplateID.
func (s *VerifyProfileSMSResponse) GetMessagingTemplateID() OptUUID {
	return s.MessagingTemplateID
}

// GetAppName returns the value of AppName.
func (s *VerifyProfileSMSResponse) GetAppName() OptString {
	return s.AppName
}

// GetAlphaSender returns the value of AlphaSender.
func (s *VerifyProfileSMSResponse) GetAlphaSender() OptNilString {
	return s.AlphaSender
}

// GetWhitelistedDestinations returns the value of WhitelistedDestinations.
func (s *VerifyProfileSMSResponse) GetWhitelistedDestinations() []string {
	return s.WhitelistedDestinations
}

// GetDefaultVerificationTimeoutSecs returns the value of DefaultVerificationTimeoutSecs.
func (s *VerifyProfileSMSResponse) GetDefaultVerificationTimeoutSecs() OptInt {
	return s.DefaultVerificationTimeoutSecs
}

// SetMessagingTemplateID sets the value of MessagingTemplateID.
func (s *VerifyProfileSMSResponse) SetMessagingTemplateID(val OptUUID) {
	s.MessagingTemplateID = val
}

// SetAppName sets the value of AppName.
func (s *VerifyProfileSMSResponse) SetAppName(val OptString) {
	s.AppName = val
}

// SetAlphaSender sets the value of AlphaSender.
func (s *VerifyProfileSMSResponse) SetAlphaSender(val OptNilString) {
	s.AlphaSender = val
}

// SetWhitelistedDestinations sets the value of WhitelistedDestinations.
func (s *VerifyProfileSMSResponse) SetWhitelistedDestinations(val []string) {
	s.WhitelistedDestinations = val
}

// SetDefaultVerificationTimeoutSecs sets the value of DefaultVerificationTimeoutSecs.
func (s *VerifyProfileSMSResponse) SetDefaultVerificationTimeoutSecs(val OptInt) {
	s.DefaultVerificationTimeoutSecs = val
}

type VerifyVerificationCodeNotFound Errors

func (*VerifyVerificationCodeNotFound) verifyVerificationCodeRes() {}

type VerifyVerificationCodeReq struct {
	VerificationCode string `json:"verification_code"`
}

// GetVerificationCode returns the value of VerificationCode.
func (s *VerifyVerificationCodeReq) GetVerificationCode() string {
	return s.VerificationCode
}

// SetVerificationCode sets the value of VerificationCode.
func (s *VerifyVerificationCodeReq) SetVerificationCode(val string) {
	s.VerificationCode = val
}

// Ref: #/components/schemas/VerifyVerificationCodeRequest
type VerifyVerificationCodeRequest struct {
	// This is the code the user submits for verification.
	Code string `json:"code"`
	// The identifier of the associated Verify profile.
	VerifyProfileID uuid.UUID `json:"verify_profile_id"`
}

// GetCode returns the value of Code.
func (s *VerifyVerificationCodeRequest) GetCode() string {
	return s.Code
}

// GetVerifyProfileID returns the value of VerifyProfileID.
func (s *VerifyVerificationCodeRequest) GetVerifyProfileID() uuid.UUID {
	return s.VerifyProfileID
}

// SetCode sets the value of Code.
func (s *VerifyVerificationCodeRequest) SetCode(val string) {
	s.Code = val
}

// SetVerifyProfileID sets the value of VerifyProfileID.
func (s *VerifyVerificationCodeRequest) SetVerifyProfileID(val uuid.UUID) {
	s.VerifyProfileID = val
}

// Ref: #/components/schemas/VerifyVerificationCodeResponse
type VerifyVerificationCodeResponse struct {
	Data VerifyVerificationCodeResponseData `json:"data"`
}

// GetData returns the value of Data.
func (s *VerifyVerificationCodeResponse) GetData() VerifyVerificationCodeResponseData {
	return s.Data
}

// SetData sets the value of Data.
func (s *VerifyVerificationCodeResponse) SetData(val VerifyVerificationCodeResponseData) {
	s.Data = val
}

func (*VerifyVerificationCodeResponse) verifyVerificationCodeByPhoneNumberRes() {}

type VerifyVerificationCodeResponseData struct {
	// +E164 formatted phone number.
	PhoneNumber string `json:"phone_number"`
	// Identifies if the verification code has been accepted or rejected.
	ResponseCode VerifyVerificationCodeResponseDataResponseCode `json:"response_code"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *VerifyVerificationCodeResponseData) GetPhoneNumber() string {
	return s.PhoneNumber
}

// GetResponseCode returns the value of ResponseCode.
func (s *VerifyVerificationCodeResponseData) GetResponseCode() VerifyVerificationCodeResponseDataResponseCode {
	return s.ResponseCode
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *VerifyVerificationCodeResponseData) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// SetResponseCode sets the value of ResponseCode.
func (s *VerifyVerificationCodeResponseData) SetResponseCode(val VerifyVerificationCodeResponseDataResponseCode) {
	s.ResponseCode = val
}

// Identifies if the verification code has been accepted or rejected.
type VerifyVerificationCodeResponseDataResponseCode string

const (
	VerifyVerificationCodeResponseDataResponseCodeAccepted VerifyVerificationCodeResponseDataResponseCode = "accepted"
	VerifyVerificationCodeResponseDataResponseCodeRejected VerifyVerificationCodeResponseDataResponseCode = "rejected"
)

// AllValues returns all VerifyVerificationCodeResponseDataResponseCode values.
func (VerifyVerificationCodeResponseDataResponseCode) AllValues() []VerifyVerificationCodeResponseDataResponseCode {
	return []VerifyVerificationCodeResponseDataResponseCode{
		VerifyVerificationCodeResponseDataResponseCodeAccepted,
		VerifyVerificationCodeResponseDataResponseCodeRejected,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VerifyVerificationCodeResponseDataResponseCode) MarshalText() ([]byte, error) {
	switch s {
	case VerifyVerificationCodeResponseDataResponseCodeAccepted:
		return []byte(s), nil
	case VerifyVerificationCodeResponseDataResponseCodeRejected:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VerifyVerificationCodeResponseDataResponseCode) UnmarshalText(data []byte) error {
	switch VerifyVerificationCodeResponseDataResponseCode(data) {
	case VerifyVerificationCodeResponseDataResponseCodeAccepted:
		*s = VerifyVerificationCodeResponseDataResponseCodeAccepted
		return nil
	case VerifyVerificationCodeResponseDataResponseCodeRejected:
		*s = VerifyVerificationCodeResponseDataResponseCodeRejected
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type VerifyVerificationCodeUnauthorized Errors

func (*VerifyVerificationCodeUnauthorized) verifyVerificationCodeRes() {}

// Record of all attempts to deliver a webhook.
// Ref: #/components/schemas/webhook_delivery
type WebhookDelivery struct {
	// Uniquely identifies the webhook_delivery record.
	ID OptUUID `json:"id"`
	// Uniquely identifies the user that owns the webhook_delivery record.
	UserID OptUUID `json:"user_id"`
	// Identifies the type of the resource.
	RecordType OptString `json:"record_type"`
	// Delivery status: 'delivered' when successfuly delivered or 'failed' if all attempts have failed.
	Status OptWebhookDeliveryStatus `json:"status"`
	// Original webhook JSON data. Payload fields vary according to event type.
	Webhook OptWebhookDeliveryWebhook `json:"webhook"`
	// ISO 8601 timestamp indicating when the first request attempt was initiated.
	StartedAt OptDateTime `json:"started_at"`
	// ISO 8601 timestamp indicating when the last webhook response has been received.
	FinishedAt OptDateTime `json:"finished_at"`
	// Detailed delivery attempts, ordered by most recent.
	Attempts []Attempt `json:"attempts"`
}

// GetID returns the value of ID.
func (s *WebhookDelivery) GetID() OptUUID {
	return s.ID
}

// GetUserID returns the value of UserID.
func (s *WebhookDelivery) GetUserID() OptUUID {
	return s.UserID
}

// GetRecordType returns the value of RecordType.
func (s *WebhookDelivery) GetRecordType() OptString {
	return s.RecordType
}

// GetStatus returns the value of Status.
func (s *WebhookDelivery) GetStatus() OptWebhookDeliveryStatus {
	return s.Status
}

// GetWebhook returns the value of Webhook.
func (s *WebhookDelivery) GetWebhook() OptWebhookDeliveryWebhook {
	return s.Webhook
}

// GetStartedAt returns the value of StartedAt.
func (s *WebhookDelivery) GetStartedAt() OptDateTime {
	return s.StartedAt
}

// GetFinishedAt returns the value of FinishedAt.
func (s *WebhookDelivery) GetFinishedAt() OptDateTime {
	return s.FinishedAt
}

// GetAttempts returns the value of Attempts.
func (s *WebhookDelivery) GetAttempts() []Attempt {
	return s.Attempts
}

// SetID sets the value of ID.
func (s *WebhookDelivery) SetID(val OptUUID) {
	s.ID = val
}

// SetUserID sets the value of UserID.
func (s *WebhookDelivery) SetUserID(val OptUUID) {
	s.UserID = val
}

// SetRecordType sets the value of RecordType.
func (s *WebhookDelivery) SetRecordType(val OptString) {
	s.RecordType = val
}

// SetStatus sets the value of Status.
func (s *WebhookDelivery) SetStatus(val OptWebhookDeliveryStatus) {
	s.Status = val
}

// SetWebhook sets the value of Webhook.
func (s *WebhookDelivery) SetWebhook(val OptWebhookDeliveryWebhook) {
	s.Webhook = val
}

// SetStartedAt sets the value of StartedAt.
func (s *WebhookDelivery) SetStartedAt(val OptDateTime) {
	s.StartedAt = val
}

// SetFinishedAt sets the value of FinishedAt.
func (s *WebhookDelivery) SetFinishedAt(val OptDateTime) {
	s.FinishedAt = val
}

// SetAttempts sets the value of Attempts.
func (s *WebhookDelivery) SetAttempts(val []Attempt) {
	s.Attempts = val
}

// Delivery status: 'delivered' when successfuly delivered or 'failed' if all attempts have failed.
type WebhookDeliveryStatus string

const (
	WebhookDeliveryStatusDelivered WebhookDeliveryStatus = "delivered"
	WebhookDeliveryStatusFailed    WebhookDeliveryStatus = "failed"
)

// AllValues returns all WebhookDeliveryStatus values.
func (WebhookDeliveryStatus) AllValues() []WebhookDeliveryStatus {
	return []WebhookDeliveryStatus{
		WebhookDeliveryStatusDelivered,
		WebhookDeliveryStatusFailed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookDeliveryStatus) MarshalText() ([]byte, error) {
	switch s {
	case WebhookDeliveryStatusDelivered:
		return []byte(s), nil
	case WebhookDeliveryStatusFailed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookDeliveryStatus) UnmarshalText(data []byte) error {
	switch WebhookDeliveryStatus(data) {
	case WebhookDeliveryStatusDelivered:
		*s = WebhookDeliveryStatusDelivered
		return nil
	case WebhookDeliveryStatusFailed:
		*s = WebhookDeliveryStatusFailed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Original webhook JSON data. Payload fields vary according to event type.
type WebhookDeliveryWebhook struct {
	// Identifies the type of the resource.
	RecordType OptWebhookDeliveryWebhookRecordType `json:"record_type"`
	// The type of event being delivered.
	EventType OptString `json:"event_type"`
	// Identifies the type of resource.
	ID OptUUID `json:"id"`
	// ISO 8601 datetime of when the event occurred.
	OccurredAt OptDateTime                      `json:"occurred_at"`
	Payload    OptWebhookDeliveryWebhookPayload `json:"payload"`
}

// GetRecordType returns the value of RecordType.
func (s *WebhookDeliveryWebhook) GetRecordType() OptWebhookDeliveryWebhookRecordType {
	return s.RecordType
}

// GetEventType returns the value of EventType.
func (s *WebhookDeliveryWebhook) GetEventType() OptString {
	return s.EventType
}

// GetID returns the value of ID.
func (s *WebhookDeliveryWebhook) GetID() OptUUID {
	return s.ID
}

// GetOccurredAt returns the value of OccurredAt.
func (s *WebhookDeliveryWebhook) GetOccurredAt() OptDateTime {
	return s.OccurredAt
}

// GetPayload returns the value of Payload.
func (s *WebhookDeliveryWebhook) GetPayload() OptWebhookDeliveryWebhookPayload {
	return s.Payload
}

// SetRecordType sets the value of RecordType.
func (s *WebhookDeliveryWebhook) SetRecordType(val OptWebhookDeliveryWebhookRecordType) {
	s.RecordType = val
}

// SetEventType sets the value of EventType.
func (s *WebhookDeliveryWebhook) SetEventType(val OptString) {
	s.EventType = val
}

// SetID sets the value of ID.
func (s *WebhookDeliveryWebhook) SetID(val OptUUID) {
	s.ID = val
}

// SetOccurredAt sets the value of OccurredAt.
func (s *WebhookDeliveryWebhook) SetOccurredAt(val OptDateTime) {
	s.OccurredAt = val
}

// SetPayload sets the value of Payload.
func (s *WebhookDeliveryWebhook) SetPayload(val OptWebhookDeliveryWebhookPayload) {
	s.Payload = val
}

type WebhookDeliveryWebhookPayload map[string]jx.Raw

func (s *WebhookDeliveryWebhookPayload) init() WebhookDeliveryWebhookPayload {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Identifies the type of the resource.
type WebhookDeliveryWebhookRecordType string

const (
	WebhookDeliveryWebhookRecordTypeEvent WebhookDeliveryWebhookRecordType = "event"
)

// AllValues returns all WebhookDeliveryWebhookRecordType values.
func (WebhookDeliveryWebhookRecordType) AllValues() []WebhookDeliveryWebhookRecordType {
	return []WebhookDeliveryWebhookRecordType{
		WebhookDeliveryWebhookRecordTypeEvent,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookDeliveryWebhookRecordType) MarshalText() ([]byte, error) {
	switch s {
	case WebhookDeliveryWebhookRecordTypeEvent:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookDeliveryWebhookRecordType) UnmarshalText(data []byte) error {
	switch WebhookDeliveryWebhookRecordType(data) {
	case WebhookDeliveryWebhookRecordTypeEvent:
		*s = WebhookDeliveryWebhookRecordTypeEvent
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
